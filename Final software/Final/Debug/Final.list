
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f40  08018484  08018484  00028484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d3c4  0801d3c4  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d3c4  0801d3c4  0002d3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d3cc  0801d3cc  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d3cc  0801d3cc  0002d3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d3d0  0801d3d0  0002d3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0801d3d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a4  2**0
                  CONTENTS
 10 .bss          0001a780  200000a4  200000a4  000300a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a824  2001a824  000300a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035838  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e14  00000000  00000000  0006590c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002598  00000000  00000000  0006d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002438  00000000  00000000  0006fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000359db  00000000  00000000  000720f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038d17  00000000  00000000  000a7acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001037fb  00000000  00000000  000e07e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e3fdd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a678  00000000  00000000  001e4030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801846c 	.word	0x0801846c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	0801846c 	.word	0x0801846c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000c0 	.word	0x200000c0
 800060c:	20000174 	.word	0x20000174

08000610 <SetETHstate>:
//extern osMutexId_t Mutex_ROTvalueHandle;

extern uint16_t Rot_cnt;

void SetETHstate(uint8_t status)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	if (xSemaphoreTake(Mutex_ETHstate, 250))
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <SetETHstate+0x38>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	21fa      	movs	r1, #250	; 0xfa
 8000620:	4618      	mov	r0, r3
 8000622:	f007 fed1 	bl	80083c8 <xQueueSemaphoreTake>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d009      	beq.n	8000640 <SetETHstate+0x30>
	{
		ETHstatus = status;
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <SetETHstate+0x3c>)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	7013      	strb	r3, [r2, #0]
		xSemaphoreGive(Mutex_ETHstate);
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <SetETHstate+0x38>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	f007 fbbe 	bl	8007dbc <xQueueGenericSend>
	}
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000480 	.word	0x20000480
 800064c:	20000374 	.word	0x20000374

08000650 <GetETHstate>:

uint8_t GetETHstate()
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	uint8_t status;
	if (xSemaphoreTake(Mutex_ETHstate, 250))
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <GetETHstate+0x38>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	21fa      	movs	r1, #250	; 0xfa
 800065c:	4618      	mov	r0, r3
 800065e:	f007 feb3 	bl	80083c8 <xQueueSemaphoreTake>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <GetETHstate+0x2c>
	{
		status = ETHstatus;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <GetETHstate+0x3c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	71fb      	strb	r3, [r7, #7]
		xSemaphoreGive(Mutex_ETHstate);
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <GetETHstate+0x38>)
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	f007 fba0 	bl	8007dbc <xQueueGenericSend>
	}
	return status;
 800067c:	79fb      	ldrb	r3, [r7, #7]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000480 	.word	0x20000480
 800068c:	20000374 	.word	0x20000374

08000690 <SetROTvalue>:

void SetROTvalue(uint16_t value)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	if (xSemaphoreTake(Mutex_ROTvalue, 250))
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <SetROTvalue+0x38>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	21fa      	movs	r1, #250	; 0xfa
 80006a0:	4618      	mov	r0, r3
 80006a2:	f007 fe91 	bl	80083c8 <xQueueSemaphoreTake>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d009      	beq.n	80006c0 <SetROTvalue+0x30>
	{
		ROTvalue = value;
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <SetROTvalue+0x3c>)
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	8013      	strh	r3, [r2, #0]
		xSemaphoreGive(Mutex_ROTvalue);
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SetROTvalue+0x38>)
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	2100      	movs	r1, #0
 80006bc:	f007 fb7e 	bl	8007dbc <xQueueGenericSend>
	}
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000484 	.word	0x20000484
 80006cc:	20000376 	.word	0x20000376

080006d0 <GetROTvalue>:

uint16_t GetROTvalue()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint16_t value;
	if (xSemaphoreTake(Mutex_ROTvalue, 250))
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <GetROTvalue+0x38>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	21fa      	movs	r1, #250	; 0xfa
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fe73 	bl	80083c8 <xQueueSemaphoreTake>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d009      	beq.n	80006fc <GetROTvalue+0x2c>
	{
		value = ROTvalue;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <GetROTvalue+0x3c>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	80fb      	strh	r3, [r7, #6]
		xSemaphoreGive(Mutex_ROTvalue);
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <GetROTvalue+0x38>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	f007 fb60 	bl	8007dbc <xQueueGenericSend>
	}
	return value;
 80006fc:	88fb      	ldrh	r3, [r7, #6]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000484 	.word	0x20000484
 800070c:	20000376 	.word	0x20000376

08000710 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000714:	f3bf 8f4f 	dsb	sy
}
 8000718:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <__NVIC_SystemReset+0x24>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000722:	4904      	ldr	r1, [pc, #16]	; (8000734 <__NVIC_SystemReset+0x24>)
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_SystemReset+0x28>)
 8000726:	4313      	orrs	r3, r2
 8000728:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800072a:	f3bf 8f4f 	dsb	sy
}
 800072e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <__NVIC_SystemReset+0x20>
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	05fa0004 	.word	0x05fa0004

0800073c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000748:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d013      	beq.n	800077c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000754:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000758:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800075c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000760:	2b00      	cmp	r3, #0
 8000762:	d00b      	beq.n	800077c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000764:	e000      	b.n	8000768 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000766:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000772:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USED FOR THE PRINTF FUNCTION */
int _write(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	e009      	b.n	80007b4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffc7 	bl	800073c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dbf1      	blt.n	80007a0 <_write+0x16>
  return len;
 80007bc:	687b      	ldr	r3, [r7, #4]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b5b0      	push	{r4, r5, r7, lr}
 80007ca:	b0a0      	sub	sp, #128	; 0x80
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f001 fceb 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f88b 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f9e3 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007da:	f000 f9b7 	bl	8000b4c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007de:	f000 f90b 	bl	80009f8 <MX_SPI1_Init>
  MX_TIM3_Init();
 80007e2:	f000 f93f 	bl	8000a64 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80007e6:	f005 fd85 	bl	80062f4 <ssd1306_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  Mutex_ROTvalue = xSemaphoreCreateMutex();
 80007ea:	2001      	movs	r0, #1
 80007ec:	f007 fab3 	bl	8007d56 <xQueueCreateMutex>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <main+0xf4>)
 80007f4:	6013      	str	r3, [r2, #0]
  Mutex_ETHstate = xSemaphoreCreateMutex();
 80007f6:	2001      	movs	r0, #1
 80007f8:	f007 faad 	bl	8007d56 <xQueueCreateMutex>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <main+0xf8>)
 8000800:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of ROT_Queue */
  osMessageQDef(ROT_Queue, 2, uint16_t);
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <main+0xfc>)
 8000804:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ROT_QueueHandle = osMessageCreate(osMessageQ(ROT_Queue), NULL);
 800080e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f006 ffbb 	bl	8007790 <osMessageCreate>
 800081a:	4603      	mov	r3, r0
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <main+0x100>)
 800081e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 1024);
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <main+0x104>)
 8000822:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000826:	461d      	mov	r5, r3
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000830:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f006 fe28 	bl	8007490 <osThreadCreate>
 8000840:	4603      	mov	r3, r0
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <main+0x108>)
 8000844:	6013      	str	r3, [r2, #0]

  /* definition and creation of MqttTask */
  osThreadDef(MqttTask, StartMqttTask, osPriorityNormal, 0, 4864);
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <main+0x10c>)
 8000848:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MqttTaskHandle = osThreadCreate(osThread(MqttTask), NULL);
 800085a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f006 fe15 	bl	8007490 <osThreadCreate>
 8000866:	4603      	mov	r3, r0
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <main+0x110>)
 800086a:	6013      	str	r3, [r2, #0]

  /* definition and creation of OledTask */
  osThreadDef(OledTask, StartOledTask, osPriorityNormal, 0, 3840);
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <main+0x114>)
 800086e:	f107 041c 	add.w	r4, r7, #28
 8000872:	461d      	mov	r5, r3
 8000874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800087c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OledTaskHandle = osThreadCreate(osThread(OledTask), NULL);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f006 fe02 	bl	8007490 <osThreadCreate>
 800088c:	4603      	mov	r3, r0
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <main+0x118>)
 8000890:	6013      	str	r3, [r2, #0]

  /* definition and creation of RotaryTask */
  osThreadDef(RotaryTask, StartRotaryTask, osPriorityNormal, 0, 256);
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <main+0x11c>)
 8000894:	463c      	mov	r4, r7
 8000896:	461d      	mov	r5, r3
 8000898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RotaryTaskHandle = osThreadCreate(osThread(RotaryTask), NULL);
 80008a4:	463b      	mov	r3, r7
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 fdf1 	bl	8007490 <osThreadCreate>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <main+0x120>)
 80008b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008b4:	f006 fdd5 	bl	8007462 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <main+0xf0>
 80008ba:	bf00      	nop
 80008bc:	20000484 	.word	0x20000484
 80008c0:	20000480 	.word	0x20000480
 80008c4:	080184b4 	.word	0x080184b4
 80008c8:	20000478 	.word	0x20000478
 80008cc:	080184c4 	.word	0x080184c4
 80008d0:	20000468 	.word	0x20000468
 80008d4:	080184e0 	.word	0x080184e0
 80008d8:	2000046c 	.word	0x2000046c
 80008dc:	080184fc 	.word	0x080184fc
 80008e0:	20000470 	.word	0x20000470
 80008e4:	08018518 	.word	0x08018518
 80008e8:	20000474 	.word	0x20000474

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0320 	add.w	r3, r7, #32
 80008f6:	2230      	movs	r2, #48	; 0x30
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f016 fb96 	bl	801702c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <SystemClock_Config+0xd0>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a28      	ldr	r2, [pc, #160]	; (80009bc <SystemClock_Config+0xd0>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <SystemClock_Config+0xd0>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <SystemClock_Config+0xd4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <SystemClock_Config+0xd4>)
 8000936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <SystemClock_Config+0xd4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000948:	2309      	movs	r3, #9
 800094a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000952:	2301      	movs	r3, #1
 8000954:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000956:	2302      	movs	r3, #2
 8000958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000964:	23a8      	movs	r3, #168	; 0xa8
 8000966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800096c:	2307      	movs	r3, #7
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0320 	add.w	r3, r7, #32
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fa1f 	bl	8003db8 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000980:	f000 fc02 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2105      	movs	r1, #5
 80009a2:	4618      	mov	r0, r3
 80009a4:	f003 fc80 	bl	80042a8 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ae:	f000 fbeb 	bl	8001188 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3750      	adds	r7, #80	; 0x50
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_IWDG_Init+0x2c>)
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <MX_IWDG_Init+0x30>)
 80009cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_IWDG_Init+0x2c>)
 80009d0:	2202      	movs	r2, #2
 80009d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1999;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_IWDG_Init+0x2c>)
 80009d6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80009da:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_IWDG_Init+0x2c>)
 80009de:	f003 f998 	bl	8003d12 <HAL_IWDG_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80009e8:	f000 fbce 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000378 	.word	0x20000378
 80009f4:	40003000 	.word	0x40003000

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_SPI1_Init+0x64>)
 80009fe:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <MX_SPI1_Init+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a2c:	2238      	movs	r2, #56	; 0x38
 8000a2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a44:	220a      	movs	r2, #10
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_SPI1_Init+0x64>)
 8000a4a:	f003 fe7f 	bl	800474c <HAL_SPI_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a54:	f000 fb98 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000384 	.word	0x20000384
 8000a60:	40013000 	.word	0x40013000

08000a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000a96:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <MX_TIM3_Init+0xe4>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000a9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 130;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000aaa:	2282      	movs	r2, #130	; 0x82
 8000aac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aba:	4822      	ldr	r0, [pc, #136]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000abc:	f004 f8d6 	bl	8004c6c <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ac6:	f000 fb5f 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481b      	ldr	r0, [pc, #108]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000ad8:	f004 fb74 	bl	80051c4 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ae2:	f000 fb51 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ae6:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000ae8:	f004 f9af 	bl	8004e4a <HAL_TIM_OC_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000af2:	f000 fb49 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4619      	mov	r1, r3
 8000b04:	480f      	ldr	r0, [pc, #60]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000b06:	f004 ff37 	bl	8005978 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b10:	f000 fb3a 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000b14:	2350      	movs	r3, #80	; 0x50
 8000b16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	; (8000b44 <MX_TIM3_Init+0xe0>)
 8000b2c:	f004 faee 	bl	800510c <HAL_TIM_OC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b36:	f000 fb27 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200003dc 	.word	0x200003dc
 8000b48:	40000400 	.word	0x40000400

08000b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART3_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b84:	f004 ff88 	bl	8005a98 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 fafb 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000424 	.word	0x20000424
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	4ba8      	ldr	r3, [pc, #672]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4aa7      	ldr	r2, [pc, #668]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4ba5      	ldr	r3, [pc, #660]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4aa0      	ldr	r2, [pc, #640]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b9e      	ldr	r3, [pc, #632]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	4b9a      	ldr	r3, [pc, #616]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a99      	ldr	r2, [pc, #612]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b97      	ldr	r3, [pc, #604]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	4b93      	ldr	r3, [pc, #588]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a92      	ldr	r2, [pc, #584]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b90      	ldr	r3, [pc, #576]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b8c      	ldr	r3, [pc, #560]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a8b      	ldr	r2, [pc, #556]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b85      	ldr	r3, [pc, #532]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a84      	ldr	r2, [pc, #528]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b82      	ldr	r3, [pc, #520]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b7e      	ldr	r3, [pc, #504]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a7d      	ldr	r2, [pc, #500]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b7b      	ldr	r3, [pc, #492]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b77      	ldr	r3, [pc, #476]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a76      	ldr	r2, [pc, #472]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b74      	ldr	r3, [pc, #464]	; (8000e5c <MX_GPIO_Init+0x2bc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Relais_5_Pin|Relais_6_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2148      	movs	r1, #72	; 0x48
 8000c9a:	4871      	ldr	r0, [pc, #452]	; (8000e60 <MX_GPIO_Init+0x2c0>)
 8000c9c:	f002 fffc 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Relais_3_Pin|Relais_4_Pin|Relais_2_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000ca6:	486f      	ldr	r0, [pc, #444]	; (8000e64 <MX_GPIO_Init+0x2c4>)
 8000ca8:	f002 fff6 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	486d      	ldr	r0, [pc, #436]	; (8000e68 <MX_GPIO_Init+0x2c8>)
 8000cb2:	f002 fff1 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cbc:	486b      	ldr	r0, [pc, #428]	; (8000e6c <MX_GPIO_Init+0x2cc>)
 8000cbe:	f002 ffeb 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OLED_DC_Pin|OLED_Res_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cc8:	4866      	ldr	r0, [pc, #408]	; (8000e64 <MX_GPIO_Init+0x2c4>)
 8000cca:	f002 ffe5 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relais_1_GPIO_Port, Relais_1_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4867      	ldr	r0, [pc, #412]	; (8000e70 <MX_GPIO_Init+0x2d0>)
 8000cd4:	f002 ffe0 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4864      	ldr	r0, [pc, #400]	; (8000e70 <MX_GPIO_Init+0x2d0>)
 8000cde:	f002 ffdb 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relais_5_Pin Relais_6_Pin */
  GPIO_InitStruct.Pin = Relais_5_Pin|Relais_6_Pin;
 8000ce2:	2348      	movs	r3, #72	; 0x48
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4859      	ldr	r0, [pc, #356]	; (8000e60 <MX_GPIO_Init+0x2c0>)
 8000cfa:	f002 fe09 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4857      	ldr	r0, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x2d4>)
 8000d16:	f002 fdfb 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relais_3_Pin Relais_4_Pin Relais_2_Pin OLED_DC_Pin
                           OLED_Res_Pin */
  GPIO_InitStruct.Pin = Relais_3_Pin|Relais_4_Pin|Relais_2_Pin|OLED_DC_Pin
 8000d1a:	f44f 534e 	mov.w	r3, #13184	; 0x3380
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |OLED_Res_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	484c      	ldr	r0, [pc, #304]	; (8000e64 <MX_GPIO_Init+0x2c4>)
 8000d34:	f002 fdec 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4846      	ldr	r0, [pc, #280]	; (8000e68 <MX_GPIO_Init+0x2c8>)
 8000d50:	f002 fdde 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d54:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483f      	ldr	r0, [pc, #252]	; (8000e6c <MX_GPIO_Init+0x2cc>)
 8000d6e:	f002 fdcf 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : Relais_1_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = Relais_1_Pin|USB_PowerSwitchOn_Pin;
 8000d72:	2342      	movs	r3, #66	; 0x42
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4839      	ldr	r0, [pc, #228]	; (8000e70 <MX_GPIO_Init+0x2d0>)
 8000d8a:	f002 fdc1 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rot_CLK_Pin */
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d94:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4831      	ldr	r0, [pc, #196]	; (8000e6c <MX_GPIO_Init+0x2cc>)
 8000da6:	f002 fdb3 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rot_DT_Pin */
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8000daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	482b      	ldr	r0, [pc, #172]	; (8000e6c <MX_GPIO_Init+0x2cc>)
 8000dc0:	f002 fda6 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4826      	ldr	r0, [pc, #152]	; (8000e70 <MX_GPIO_Init+0x2d0>)
 8000dd8:	f002 fd9a 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ddc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dee:	230a      	movs	r3, #10
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	481b      	ldr	r0, [pc, #108]	; (8000e68 <MX_GPIO_Init+0x2c8>)
 8000dfa:	f002 fd89 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x2c8>)
 8000e14:	f002 fd7c 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rot_SW_Pin */
  GPIO_InitStruct.Pin = Rot_SW_Pin;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Rot_SW_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_GPIO_Init+0x2c0>)
 8000e2e:	f002 fd6f 	bl	8003910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2105      	movs	r1, #5
 8000e36:	2006      	movs	r0, #6
 8000e38:	f001 faeb 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e3c:	2006      	movs	r0, #6
 8000e3e:	f001 fb04 	bl	800244a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2105      	movs	r1, #5
 8000e46:	2028      	movs	r0, #40	; 0x28
 8000e48:	f001 fae3 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4c:	2028      	movs	r0, #40	; 0x28
 8000e4e:	f001 fafc 	bl	800244a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e52:	bf00      	nop
 8000e54:	3738      	adds	r7, #56	; 0x38
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40021400 	.word	0x40021400
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40020800 	.word	0x40020800

08000e78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e80:	f005 fcac 	bl	80067dc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
#ifdef WDT
  MX_IWDG_Init();
 8000e84:	f7ff fd9e 	bl	80009c4 <MX_IWDG_Init>
#endif
  uint8_t txt[] = "Task1\n";
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <StartDefaultTask+0x3c>)
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e92:	6018      	str	r0, [r3, #0]
 8000e94:	3304      	adds	r3, #4
 8000e96:	8019      	strh	r1, [r3, #0]
 8000e98:	3302      	adds	r3, #2
 8000e9a:	0c0a      	lsrs	r2, r1, #16
 8000e9c:	701a      	strb	r2, [r3, #0]

/* Infinite loop */
for(;;)
{

    HAL_UART_Transmit(&huart3, txt, sizeof(txt), 100);
 8000e9e:	f107 0108 	add.w	r1, r7, #8
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <StartDefaultTask+0x40>)
 8000ea8:	f004 fe43 	bl	8005b32 <HAL_UART_Transmit>
	  osDelay(150);
 8000eac:	2096      	movs	r0, #150	; 0x96
 8000eae:	f006 fb3b 	bl	8007528 <osDelay>
    HAL_UART_Transmit(&huart3, txt, sizeof(txt), 100);
 8000eb2:	e7f4      	b.n	8000e9e <StartDefaultTask+0x26>
 8000eb4:	08018534 	.word	0x08018534
 8000eb8:	20000424 	.word	0x20000424

08000ebc <StartMqttTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMqttTask */
void StartMqttTask(void const * argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMqttTask */
	int state = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
	const char topic[] = "RotaryIndex";
 8000ec8:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <StartMqttTask+0xdc>)
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t RotaryValue;
	char RotaryValueStr[6];
	uint16_t PreviousValue = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t CurrentValue = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	843b      	strh	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {

#ifdef WDT
	  HAL_IWDG_Refresh(&hiwdg);
 8000edc:	482f      	ldr	r0, [pc, #188]	; (8000f9c <StartMqttTask+0xe0>)
 8000ede:	f002 ff5a 	bl	8003d96 <HAL_IWDG_Refresh>
#endif
	  if(GetETHstate())
 8000ee2:	f7ff fbb5 	bl	8000650 <GetETHstate>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d04d      	beq.n	8000f88 <StartMqttTask+0xcc>
	  {
		  switch(state)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <StartMqttTask+0x3e>
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d011      	beq.n	8000f1c <StartMqttTask+0x60>
				  }
			  }
			  break;

		  default:
			  break;
 8000ef8:	e049      	b.n	8000f8e <StartMqttTask+0xd2>
			  printf("State: %d \n", state);
 8000efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <StartMqttTask+0xe4>)
 8000efe:	f016 f97d 	bl	80171fc <iprintf>
			  mqtt_client = mqtt_client_new();
 8000f02:	f00a fc29 	bl	800b758 <mqtt_client_new>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <StartMqttTask+0xe8>)
 8000f0a:	6013      	str	r3, [r2, #0]
			  mqtt_init(mqtt_client);
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <StartMqttTask+0xe8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f93f 	bl	8001194 <mqtt_init>
			  state = MQTTSEND;
 8000f16:	2301      	movs	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
			  break;
 8000f1a:	e038      	b.n	8000f8e <StartMqttTask+0xd2>
			  printf("State: %d \n", state);
 8000f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <StartMqttTask+0xe4>)
 8000f20:	f016 f96c 	bl	80171fc <iprintf>
			  if (Check_client_connected())
 8000f24:	f000 fca2 	bl	800186c <Check_client_connected>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d029      	beq.n	8000f82 <StartMqttTask+0xc6>
				  CurrentValue = GetROTvalue();
 8000f2e:	f7ff fbcf 	bl	80006d0 <GetROTvalue>
 8000f32:	4603      	mov	r3, r0
 8000f34:	843b      	strh	r3, [r7, #32]
				  if (PreviousValue != CurrentValue)
 8000f36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000f38:	8c3b      	ldrh	r3, [r7, #32]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d026      	beq.n	8000f8c <StartMqttTask+0xd0>
					  sprintf(RotaryValueStr, "%d", CurrentValue);
 8000f3e:	8c3a      	ldrh	r2, [r7, #32]
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4918      	ldr	r1, [pc, #96]	; (8000fa8 <StartMqttTask+0xec>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f016 fad2 	bl	80174f0 <siprintf>
					  strcat(RotaryValueStr, "\n");
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f957 	bl	8000204 <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4413      	add	r3, r2
 8000f60:	4912      	ldr	r1, [pc, #72]	; (8000fac <StartMqttTask+0xf0>)
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	8013      	strh	r3, [r2, #0]
					  publish_message(mqtt_client, RotaryValueStr, topic, NULL);
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <StartMqttTask+0xe8>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f107 0214 	add.w	r2, r7, #20
 8000f72:	f107 010c 	add.w	r1, r7, #12
 8000f76:	2300      	movs	r3, #0
 8000f78:	f000 fbf6 	bl	8001768 <publish_message>
					  PreviousValue = CurrentValue;
 8000f7c:	8c3b      	ldrh	r3, [r7, #32]
 8000f7e:	847b      	strh	r3, [r7, #34]	; 0x22
			  break;
 8000f80:	e004      	b.n	8000f8c <StartMqttTask+0xd0>
					  HAL_NVIC_SystemReset();
 8000f82:	f001 fa70 	bl	8002466 <HAL_NVIC_SystemReset>
 8000f86:	e7fc      	b.n	8000f82 <StartMqttTask+0xc6>
		  }
	  }
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <StartMqttTask+0xd2>
			  break;
 8000f8c:	bf00      	nop
    osDelay(100);
 8000f8e:	2064      	movs	r0, #100	; 0x64
 8000f90:	f006 faca 	bl	8007528 <osDelay>
	  HAL_IWDG_Refresh(&hiwdg);
 8000f94:	e7a2      	b.n	8000edc <StartMqttTask+0x20>
 8000f96:	bf00      	nop
 8000f98:	08018550 	.word	0x08018550
 8000f9c:	20000378 	.word	0x20000378
 8000fa0:	0801853c 	.word	0x0801853c
 8000fa4:	2000048c 	.word	0x2000048c
 8000fa8:	08018548 	.word	0x08018548
 8000fac:	0801854c 	.word	0x0801854c

08000fb0 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void const * argument)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08f      	sub	sp, #60	; 0x3c
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */


  char txt1[] = "STM32";
 8000fb8:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <StartOledTask+0x108>)
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc2:	6018      	str	r0, [r3, #0]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	8019      	strh	r1, [r3, #0]
  char txt2[] = "Rotary Index:";
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <StartOledTask+0x10c>)
 8000fca:	f107 0414 	add.w	r4, r7, #20
 8000fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fd2:	8023      	strh	r3, [r4, #0]
  char index[5];
  uint16_t PreviousValue;
  uint16_t CurrentValue;
  uint8_t i;
  ssd1306_SetCursor(0, 0);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f005 fb4a 	bl	8006670 <ssd1306_SetCursor>
  ssd1306_WriteString(txt1, Font_11x18, White);
 8000fdc:	4a38      	ldr	r2, [pc, #224]	; (80010c0 <StartOledTask+0x110>)
 8000fde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	ca06      	ldmia	r2, {r1, r2}
 8000fe6:	f005 fb1d 	bl	8006624 <ssd1306_WriteString>
  ssd1306_Line(0, 18, 90, 18, White);
 8000fea:	2301      	movs	r3, #1
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2312      	movs	r3, #18
 8000ff0:	225a      	movs	r2, #90	; 0x5a
 8000ff2:	2112      	movs	r1, #18
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f005 fb53 	bl	80066a0 <ssd1306_Line>
  ssd1306_Line(0, 19, 90, 19, White);
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2313      	movs	r3, #19
 8001000:	225a      	movs	r2, #90	; 0x5a
 8001002:	2113      	movs	r1, #19
 8001004:	2000      	movs	r0, #0
 8001006:	f005 fb4b 	bl	80066a0 <ssd1306_Line>
  ssd1306_SetCursor(0, 25);
 800100a:	2119      	movs	r1, #25
 800100c:	2000      	movs	r0, #0
 800100e:	f005 fb2f 	bl	8006670 <ssd1306_SetCursor>
  ssd1306_WriteString(txt2, Font_7x10, White);
 8001012:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <StartOledTask+0x114>)
 8001014:	f107 0014 	add.w	r0, r7, #20
 8001018:	2301      	movs	r3, #1
 800101a:	ca06      	ldmia	r2, {r1, r2}
 800101c:	f005 fb02 	bl	8006624 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001020:	f005 f9fc 	bl	800641c <ssd1306_UpdateScreen>
  /* Infinite loop */
  for(;;)
  {
	  CurrentValue = GetROTvalue();
 8001024:	f7ff fb54 	bl	80006d0 <GetROTvalue>
 8001028:	4603      	mov	r3, r0
 800102a:	857b      	strh	r3, [r7, #42]	; 0x2a
	if (PreviousValue != CurrentValue)
 800102c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800102e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001030:	429a      	cmp	r2, r3
 8001032:	d03d      	beq.n	80010b0 <StartOledTask+0x100>
	{
		if (CurrentValue == 0)
 8001034:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001036:	2b00      	cmp	r3, #0
 8001038:	d113      	bne.n	8001062 <StartOledTask+0xb2>
		{
			for(i = 0; i < 4; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001040:	e00b      	b.n	800105a <StartOledTask+0xaa>
			{
				index[i] = '\0';
 8001042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001046:	3330      	adds	r3, #48	; 0x30
 8001048:	443b      	add	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	f803 2c24 	strb.w	r2, [r3, #-36]
			for(i = 0; i < 4; i++)
 8001050:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001054:	3301      	adds	r3, #1
 8001056:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800105a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800105e:	2b03      	cmp	r3, #3
 8001060:	d9ef      	bls.n	8001042 <StartOledTask+0x92>
			}
		}
		sprintf(index, "%d", CurrentValue);
 8001062:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4917      	ldr	r1, [pc, #92]	; (80010c8 <StartOledTask+0x118>)
 800106a:	4618      	mov	r0, r3
 800106c:	f016 fa40 	bl	80174f0 <siprintf>
		ssd1306_SetCursor(50, 45);
 8001070:	212d      	movs	r1, #45	; 0x2d
 8001072:	2032      	movs	r0, #50	; 0x32
 8001074:	f005 fafc 	bl	8006670 <ssd1306_SetCursor>
		ssd1306_WriteString("              ", Font_7x10, White);
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <StartOledTask+0x114>)
 800107a:	2301      	movs	r3, #1
 800107c:	ca06      	ldmia	r2, {r1, r2}
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <StartOledTask+0x11c>)
 8001080:	f005 fad0 	bl	8006624 <ssd1306_WriteString>
		ssd1306_SetCursor(50, 45);
 8001084:	212d      	movs	r1, #45	; 0x2d
 8001086:	2032      	movs	r0, #50	; 0x32
 8001088:	f005 faf2 	bl	8006670 <ssd1306_SetCursor>
		ssd1306_WriteString(index, Font_7x10, White);
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <StartOledTask+0x114>)
 800108e:	f107 000c 	add.w	r0, r7, #12
 8001092:	2301      	movs	r3, #1
 8001094:	ca06      	ldmia	r2, {r1, r2}
 8001096:	f005 fac5 	bl	8006624 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800109a:	f005 f9bf 	bl	800641c <ssd1306_UpdateScreen>
		HAL_UART_Transmit(&huart3, index, sizeof(index), 250);
 800109e:	f107 010c 	add.w	r1, r7, #12
 80010a2:	23fa      	movs	r3, #250	; 0xfa
 80010a4:	2205      	movs	r2, #5
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <StartOledTask+0x120>)
 80010a8:	f004 fd43 	bl	8005b32 <HAL_UART_Transmit>
		PreviousValue = CurrentValue;
 80010ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
    osDelay(100);
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f006 fa39 	bl	8007528 <osDelay>
	  CurrentValue = GetROTvalue();
 80010b6:	e7b5      	b.n	8001024 <StartOledTask+0x74>
 80010b8:	0801856c 	.word	0x0801856c
 80010bc:	08018574 	.word	0x08018574
 80010c0:	20000014 	.word	0x20000014
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	08018548 	.word	0x08018548
 80010cc:	0801855c 	.word	0x0801855c
 80010d0:	20000424 	.word	0x20000424

080010d4 <StartRotaryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRotaryTask */
void StartRotaryTask(void const * argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	  osEvent  evt;

  /* Infinite loop */
  for(;;)
  {
	  evt = osMessageGet(ROT_QueueHandle, 0);
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <StartRotaryTask+0x7c>)
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 fbba 	bl	8007860 <osMessageGet>
	  if (evt.status == osEventMessage)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	d104      	bne.n	80010fc <StartRotaryTask+0x28>
	  {
		  SetROTvalue(evt.value.p);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff faca 	bl	8000690 <SetROTvalue>
	  }

    if (Rot_cnt >= 100)
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <StartRotaryTask+0x80>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	2b63      	cmp	r3, #99	; 0x63
 8001102:	d905      	bls.n	8001110 <StartRotaryTask+0x3c>
    {

    	HAL_GPIO_WritePin(Relais_5_GPIO_Port, Relais_5_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2108      	movs	r1, #8
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <StartRotaryTask+0x84>)
 800110a:	f002 fdc5 	bl	8003c98 <HAL_GPIO_WritePin>
 800110e:	e004      	b.n	800111a <StartRotaryTask+0x46>

    }
    else
    {

    		HAL_GPIO_WritePin(Relais_5_GPIO_Port, Relais_5_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2108      	movs	r1, #8
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <StartRotaryTask+0x84>)
 8001116:	f002 fdbf 	bl	8003c98 <HAL_GPIO_WritePin>

    }
    if (Rot_cnt >= 500)
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <StartRotaryTask+0x80>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001122:	d305      	bcc.n	8001130 <StartRotaryTask+0x5c>
    {
    	HAL_GPIO_WritePin(Relais_6_GPIO_Port, Relais_6_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	480b      	ldr	r0, [pc, #44]	; (8001158 <StartRotaryTask+0x84>)
 800112a:	f002 fdb5 	bl	8003c98 <HAL_GPIO_WritePin>
 800112e:	e004      	b.n	800113a <StartRotaryTask+0x66>
    }
    else
    {
    	HAL_GPIO_WritePin(Relais_6_GPIO_Port, Relais_6_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2140      	movs	r1, #64	; 0x40
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <StartRotaryTask+0x84>)
 8001136:	f002 fdaf 	bl	8003c98 <HAL_GPIO_WritePin>
    }
    HAL_UART_Transmit(&huart3, "Task Rotary\n", sizeof("Task Rotary\n"), 250);
 800113a:	23fa      	movs	r3, #250	; 0xfa
 800113c:	220d      	movs	r2, #13
 800113e:	4907      	ldr	r1, [pc, #28]	; (800115c <StartRotaryTask+0x88>)
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <StartRotaryTask+0x8c>)
 8001142:	f004 fcf6 	bl	8005b32 <HAL_UART_Transmit>
    osDelay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f006 f9ee 	bl	8007528 <osDelay>
	  evt = osMessageGet(ROT_QueueHandle, 0);
 800114c:	e7c6      	b.n	80010dc <StartRotaryTask+0x8>
 800114e:	bf00      	nop
 8001150:	20000478 	.word	0x20000478
 8001154:	2000047c 	.word	0x2000047c
 8001158:	40021000 	.word	0x40021000
 800115c:	08018584 	.word	0x08018584
 8001160:	20000424 	.word	0x20000424

08001164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001176:	f001 f839 	bl	80021ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40010000 	.word	0x40010000

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  NVIC_SystemReset();
 8001190:	f7ff fabe 	bl	8000710 <__NVIC_SystemReset>

08001194 <mqtt_init>:
  , NULL
#endif
};

void mqtt_init(mqtt_client_t* mqtt_client)
{
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b0a4      	sub	sp, #144	; 0x90
 8001198:	af04      	add	r7, sp, #16
 800119a:	6078      	str	r0, [r7, #4]
	  char uartmsg[50];
	  err_t err;
	  uint8_t IP_ADDRESS[4];
	  /* This can be modified to the arguments */
	  /* IP addresses initialization */
	  IP_ADDRESS[0] = 192;
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	  IP_ADDRESS[1] = 168;
 80011a2:	23a8      	movs	r3, #168	; 0xa8
 80011a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  IP_ADDRESS[2] = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	  IP_ADDRESS[3] = 164;
 80011ae:	23a4      	movs	r3, #164	; 0xa4
 80011b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  IP4_ADDR(&mqtt_ip, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80011b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011b8:	061a      	lsls	r2, r3, #24
 80011ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	431a      	orrs	r2, r3
 80011c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4313      	orrs	r3, r2
 80011ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80011ce:	4313      	orrs	r3, r2
 80011d0:	061a      	lsls	r2, r3, #24
 80011d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011d6:	0619      	lsls	r1, r3, #24
 80011d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	4319      	orrs	r1, r3
 80011e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	430b      	orrs	r3, r1
 80011e8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80011ec:	430b      	orrs	r3, r1
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80011f4:	431a      	orrs	r2, r3
 80011f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011fa:	0619      	lsls	r1, r3, #24
 80011fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4319      	orrs	r1, r3
 8001204:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	430b      	orrs	r3, r1
 800120c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001210:	430b      	orrs	r3, r1
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001218:	431a      	orrs	r2, r3
 800121a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800121e:	0619      	lsls	r1, r3, #24
 8001220:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	4319      	orrs	r1, r3
 8001228:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	430b      	orrs	r3, r1
 8001230:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001234:	430b      	orrs	r3, r1
 8001236:	0e1b      	lsrs	r3, r3, #24
 8001238:	4313      	orrs	r3, r2
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <mqtt_init+0x1a8>)
 800123c:	6013      	str	r3, [r2, #0]

	  err = mqtt_client_connect(mqtt_client, &mqtt_ip, MQTT_PORT, mqtt_connection_cb, 0, &mqtt_client_info);
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <mqtt_init+0x1ac>)
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <mqtt_init+0x1b0>)
 8001248:	f240 725b 	movw	r2, #1883	; 0x75b
 800124c:	493b      	ldr	r1, [pc, #236]	; (800133c <mqtt_init+0x1a8>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f00a fa8c 	bl	800b76c <mqtt_client_connect>
 8001254:	4603      	mov	r3, r0
 8001256:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	  /* For now just print the result code if something goes wrong */
	  if(err != ERR_OK)
 800125a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800125e:	2b00      	cmp	r3, #0
 8001260:	d020      	beq.n	80012a4 <mqtt_init+0x110>
	  {
		const char uartmsg[] = "mqtt_connect failed\n";
 8001262:	4b39      	ldr	r3, [pc, #228]	; (8001348 <mqtt_init+0x1b4>)
 8001264:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001268:	461d      	mov	r5, r3
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001272:	6020      	str	r0, [r4, #0]
 8001274:	3404      	adds	r4, #4
 8001276:	7021      	strb	r1, [r4, #0]
	    printf("mqtt_connect failed return: %d\n", err);
 8001278:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800127c:	4619      	mov	r1, r3
 800127e:	4833      	ldr	r0, [pc, #204]	; (800134c <mqtt_init+0x1b8>)
 8001280:	f015 ffbc 	bl	80171fc <iprintf>
	    HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 8001284:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	2215      	movs	r2, #21
 800128c:	4830      	ldr	r0, [pc, #192]	; (8001350 <mqtt_init+0x1bc>)
 800128e:	f004 fc50 	bl	8005b32 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart3, (uint8_t)err, sizeof(err),100);
 8001292:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001296:	4619      	mov	r1, r3
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	2201      	movs	r2, #1
 800129c:	482c      	ldr	r0, [pc, #176]	; (8001350 <mqtt_init+0x1bc>)
 800129e:	f004 fc48 	bl	8005b32 <HAL_UART_Transmit>
		  {
		  printf("Publish err: %d\n", err);
		  HAL_UART_Transmit(&huart3, "Publish error", sizeof("publish error"), 250);
		  }
	  }
}
 80012a2:	e046      	b.n	8001332 <mqtt_init+0x19e>
		char uartmsg[] = "mqtt_connect succeed\n";
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <mqtt_init+0x1c0>)
 80012a6:	f107 040c 	add.w	r4, r7, #12
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012b4:	6020      	str	r0, [r4, #0]
 80012b6:	3404      	adds	r4, #4
 80012b8:	8021      	strh	r1, [r4, #0]
		printf("mqtt_connect succeed");
 80012ba:	4827      	ldr	r0, [pc, #156]	; (8001358 <mqtt_init+0x1c4>)
 80012bc:	f015 ff9e 	bl	80171fc <iprintf>
		HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 80012c0:	f107 010c 	add.w	r1, r7, #12
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	2216      	movs	r2, #22
 80012c8:	4821      	ldr	r0, [pc, #132]	; (8001350 <mqtt_init+0x1bc>)
 80012ca:	f004 fc32 	bl	8005b32 <HAL_UART_Transmit>
		  const char *pub_payload= "INIT SUCCES";
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <mqtt_init+0x1c8>)
 80012d0:	67bb      	str	r3, [r7, #120]	; 0x78
		  const char *topic = "DEBUG";
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <mqtt_init+0x1cc>)
 80012d4:	677b      	str	r3, [r7, #116]	; 0x74
		  u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  u8_t retain = 0; /* No don't retain such crappy payload... */
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		  err = mqtt_publish(mqtt_client, topic, pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, NULL);
 80012e2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80012e4:	f7fe ff8e 	bl	8000204 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	2300      	movs	r3, #0
 80012ee:	9303      	str	r3, [sp, #12]
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <mqtt_init+0x1d0>)
 80012f2:	9302      	str	r3, [sp, #8]
 80012f4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001304:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f00a f858 	bl	800b3bc <mqtt_publish>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		  if(err != ERR_OK)
 8001312:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <mqtt_init+0x19e>
		  printf("Publish err: %d\n", err);
 800131a:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800131e:	4619      	mov	r1, r3
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <mqtt_init+0x1d4>)
 8001322:	f015 ff6b 	bl	80171fc <iprintf>
		  HAL_UART_Transmit(&huart3, "Publish error", sizeof("publish error"), 250);
 8001326:	23fa      	movs	r3, #250	; 0xfa
 8001328:	220e      	movs	r2, #14
 800132a:	4910      	ldr	r1, [pc, #64]	; (800136c <mqtt_init+0x1d8>)
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <mqtt_init+0x1bc>)
 800132e:	f004 fc00 	bl	8005b32 <HAL_UART_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3780      	adds	r7, #128	; 0x80
 8001336:	46bd      	mov	sp, r7
 8001338:	bdb0      	pop	{r4, r5, r7, pc}
 800133a:	bf00      	nop
 800133c:	20000488 	.word	0x20000488
 8001340:	0801bc10 	.word	0x0801bc10
 8001344:	08001425 	.word	0x08001425
 8001348:	08018614 	.word	0x08018614
 800134c:	080185a4 	.word	0x080185a4
 8001350:	20000424 	.word	0x20000424
 8001354:	0801862c 	.word	0x0801862c
 8001358:	080185c4 	.word	0x080185c4
 800135c:	080185dc 	.word	0x080185dc
 8001360:	080185e8 	.word	0x080185e8
 8001364:	080017e5 	.word	0x080017e5
 8001368:	080185f0 	.word	0x080185f0
 800136c:	08018604 	.word	0x08018604

08001370 <mqtt_connect_broker>:

void mqtt_connect_broker()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
  err_t err;
  uint8_t IP_ADDRESS[4];

  /* This can be modified to the arguments */
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	703b      	strb	r3, [r7, #0]
  IP_ADDRESS[1] = 168;
 800137a:	23a8      	movs	r3, #168	; 0xa8
 800137c:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	70bb      	strb	r3, [r7, #2]
  IP_ADDRESS[3] = 164;
 8001382:	23a4      	movs	r3, #164	; 0xa4
 8001384:	70fb      	strb	r3, [r7, #3]

  IP4_ADDR(&mqtt_ip, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8001386:	783b      	ldrb	r3, [r7, #0]
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	78bb      	ldrb	r3, [r7, #2]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	4313      	orrs	r3, r2
 8001396:	78fa      	ldrb	r2, [r7, #3]
 8001398:	4313      	orrs	r3, r2
 800139a:	061a      	lsls	r2, r3, #24
 800139c:	783b      	ldrb	r3, [r7, #0]
 800139e:	0619      	lsls	r1, r3, #24
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	4319      	orrs	r1, r3
 80013a6:	78bb      	ldrb	r3, [r7, #2]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	430b      	orrs	r3, r1
 80013ac:	78f9      	ldrb	r1, [r7, #3]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013b6:	431a      	orrs	r2, r3
 80013b8:	783b      	ldrb	r3, [r7, #0]
 80013ba:	0619      	lsls	r1, r3, #24
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	041b      	lsls	r3, r3, #16
 80013c0:	4319      	orrs	r1, r3
 80013c2:	78bb      	ldrb	r3, [r7, #2]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	430b      	orrs	r3, r1
 80013c8:	78f9      	ldrb	r1, [r7, #3]
 80013ca:	430b      	orrs	r3, r1
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013d2:	431a      	orrs	r2, r3
 80013d4:	783b      	ldrb	r3, [r7, #0]
 80013d6:	0619      	lsls	r1, r3, #24
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	4319      	orrs	r1, r3
 80013de:	78bb      	ldrb	r3, [r7, #2]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	430b      	orrs	r3, r1
 80013e4:	78f9      	ldrb	r1, [r7, #3]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	0e1b      	lsrs	r3, r3, #24
 80013ea:	4313      	orrs	r3, r2
 80013ec:	4a09      	ldr	r2, [pc, #36]	; (8001414 <mqtt_connect_broker+0xa4>)
 80013ee:	6013      	str	r3, [r2, #0]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */

  err = mqtt_client_connect(mqtt_client, &mqtt_ip, MQTT_PORT, mqtt_connection_cb, 0, &mqtt_client_info);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <mqtt_connect_broker+0xa8>)
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <mqtt_connect_broker+0xac>)
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <mqtt_connect_broker+0xb0>)
 80013fe:	f240 725b 	movw	r2, #1883	; 0x75b
 8001402:	4904      	ldr	r1, [pc, #16]	; (8001414 <mqtt_connect_broker+0xa4>)
 8001404:	f00a f9b2 	bl	800b76c <mqtt_client_connect>
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
//  else
//  {
//	printf("mqtt_connect succeed");
//  }

}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000488 	.word	0x20000488
 8001418:	2000048c 	.word	0x2000048c
 800141c:	0801bc10 	.word	0x0801bc10
 8001420:	08001425 	.word	0x08001425

08001424 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	b098      	sub	sp, #96	; 0x60
 8001428:	af02      	add	r7, sp, #8
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]

  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED)
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d16f      	bne.n	8001518 <mqtt_connection_cb+0xf4>
  {
	  char uartmsg[] = "mqtt_connection_cb: Successfully connected\n";
 8001438:	4b45      	ldr	r3, [pc, #276]	; (8001550 <mqtt_connection_cb+0x12c>)
 800143a:	f107 0414 	add.w	r4, r7, #20
 800143e:	461d      	mov	r5, r3
 8001440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800144c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    printf("mqtt_connection_cb: Successfully connected\n");
 8001450:	4840      	ldr	r0, [pc, #256]	; (8001554 <mqtt_connection_cb+0x130>)
 8001452:	f015 ff59 	bl	8017308 <puts>
    HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 8001456:	f107 0114 	add.w	r1, r7, #20
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	222c      	movs	r2, #44	; 0x2c
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <mqtt_connection_cb+0x134>)
 8001460:	f004 fb67 	bl	8005b32 <HAL_UART_Transmit>

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4a3d      	ldr	r2, [pc, #244]	; (800155c <mqtt_connection_cb+0x138>)
 8001468:	493d      	ldr	r1, [pc, #244]	; (8001560 <mqtt_connection_cb+0x13c>)
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f00a f950 	bl	800b710 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 0, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "A", 0, mqtt_sub_request_cb, arg);
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <mqtt_connection_cb+0x140>)
 800147a:	2200      	movs	r2, #0
 800147c:	493a      	ldr	r1, [pc, #232]	; (8001568 <mqtt_connection_cb+0x144>)
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f00a f870 	bl	800b564 <mqtt_sub_unsub>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    err = mqtt_subscribe(client, "B", 0, mqtt_sub_request_cb, arg);
 800148a:	2301      	movs	r3, #1
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4b34      	ldr	r3, [pc, #208]	; (8001564 <mqtt_connection_cb+0x140>)
 8001494:	2200      	movs	r2, #0
 8001496:	4935      	ldr	r1, [pc, #212]	; (800156c <mqtt_connection_cb+0x148>)
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f00a f863 	bl	800b564 <mqtt_sub_unsub>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    err = mqtt_subscribe(client, "C", 0, mqtt_sub_request_cb, arg);
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <mqtt_connection_cb+0x140>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	492f      	ldr	r1, [pc, #188]	; (8001570 <mqtt_connection_cb+0x14c>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f00a f856 	bl	800b564 <mqtt_sub_unsub>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    err = mqtt_subscribe(client, "D", 0, mqtt_sub_request_cb, arg);
 80014be:	2301      	movs	r3, #1
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <mqtt_connection_cb+0x140>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	492a      	ldr	r1, [pc, #168]	; (8001574 <mqtt_connection_cb+0x150>)
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f00a f849 	bl	800b564 <mqtt_sub_unsub>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    if(err != ERR_OK) {
 80014d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d033      	beq.n	8001548 <mqtt_connection_cb+0x124>
    	char uartmsg[] = "mqtt_subscribe failed\n";
 80014e0:	4b25      	ldr	r3, [pc, #148]	; (8001578 <mqtt_connection_cb+0x154>)
 80014e2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80014e6:	461d      	mov	r5, r3
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014f0:	6020      	str	r0, [r4, #0]
 80014f2:	3404      	adds	r4, #4
 80014f4:	8021      	strh	r1, [r4, #0]
 80014f6:	3402      	adds	r4, #2
 80014f8:	0c0b      	lsrs	r3, r1, #16
 80014fa:	7023      	strb	r3, [r4, #0]
      printf("mqtt_subscribe return: %d\n", err);
 80014fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001500:	4619      	mov	r1, r3
 8001502:	481e      	ldr	r0, [pc, #120]	; (800157c <mqtt_connection_cb+0x158>)
 8001504:	f015 fe7a 	bl	80171fc <iprintf>
      HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 8001508:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	2217      	movs	r2, #23
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <mqtt_connection_cb+0x134>)
 8001512:	f004 fb0e 	bl	8005b32 <HAL_UART_Transmit>

    /* Its more nice to be connected, so try to reconnect */
    mqtt_connect_broker();

  }
}
 8001516:	e017      	b.n	8001548 <mqtt_connection_cb+0x124>
	  char uartmsg[] = "mqtt_connection_cb: Disconnected\n";
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <mqtt_connection_cb+0x15c>)
 800151a:	f107 0414 	add.w	r4, r7, #20
 800151e:	461d      	mov	r5, r3
 8001520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	8023      	strh	r3, [r4, #0]
    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	4619      	mov	r1, r3
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <mqtt_connection_cb+0x160>)
 8001532:	f015 fe63 	bl	80171fc <iprintf>
    HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 8001536:	f107 0114 	add.w	r1, r7, #20
 800153a:	2364      	movs	r3, #100	; 0x64
 800153c:	2222      	movs	r2, #34	; 0x22
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <mqtt_connection_cb+0x134>)
 8001540:	f004 faf7 	bl	8005b32 <HAL_UART_Transmit>
    mqtt_connect_broker();
 8001544:	f7ff ff14 	bl	8001370 <mqtt_connect_broker>
}
 8001548:	bf00      	nop
 800154a:	3758      	adds	r7, #88	; 0x58
 800154c:	46bd      	mov	sp, r7
 800154e:	bdb0      	pop	{r4, r5, r7, pc}
 8001550:	080186cc 	.word	0x080186cc
 8001554:	08018644 	.word	0x08018644
 8001558:	20000424 	.word	0x20000424
 800155c:	0800162d 	.word	0x0800162d
 8001560:	080015ad 	.word	0x080015ad
 8001564:	08001589 	.word	0x08001589
 8001568:	08018670 	.word	0x08018670
 800156c:	08018674 	.word	0x08018674
 8001570:	08018678 	.word	0x08018678
 8001574:	0801867c 	.word	0x0801867c
 8001578:	080186f8 	.word	0x080186f8
 800157c:	08018680 	.word	0x08018680
 8001580:	08018710 	.word	0x08018710
 8001584:	0801869c 	.word	0x0801869c

08001588 <mqtt_sub_request_cb>:

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  printf("Subscribe result: %d\n", result);
 8001594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001598:	4619      	mov	r1, r3
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <mqtt_sub_request_cb+0x20>)
 800159c:	f015 fe2e 	bl	80171fc <iprintf>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08018734 	.word	0x08018734

080015ac <mqtt_incoming_publish_cb>:
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	4818      	ldr	r0, [pc, #96]	; (8001620 <mqtt_incoming_publish_cb+0x74>)
 80015be:	f015 fe1d 	bl	80171fc <iprintf>

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 80015c2:	4918      	ldr	r1, [pc, #96]	; (8001624 <mqtt_incoming_publish_cb+0x78>)
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f7fe fe13 	bl	80001f0 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d103      	bne.n	80015d8 <mqtt_incoming_publish_cb+0x2c>
    inpub_id = 0;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <mqtt_incoming_publish_cb+0x7c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
	inpub_id = 3;
  } else if(topic[0] == 'D'){
	/* Relais 4 */
	inpub_id = 4;
  }
}
 80015d6:	e01e      	b.n	8001616 <mqtt_incoming_publish_cb+0x6a>
  } else if(topic[0] == 'A') {
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b41      	cmp	r3, #65	; 0x41
 80015de:	d103      	bne.n	80015e8 <mqtt_incoming_publish_cb+0x3c>
    inpub_id = 1;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <mqtt_incoming_publish_cb+0x7c>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
}
 80015e6:	e016      	b.n	8001616 <mqtt_incoming_publish_cb+0x6a>
  } else if(topic[0] == 'B'){
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b42      	cmp	r3, #66	; 0x42
 80015ee:	d103      	bne.n	80015f8 <mqtt_incoming_publish_cb+0x4c>
    inpub_id = 2;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <mqtt_incoming_publish_cb+0x7c>)
 80015f2:	2202      	movs	r2, #2
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	e00e      	b.n	8001616 <mqtt_incoming_publish_cb+0x6a>
  } else if(topic[0] == 'C'){
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b43      	cmp	r3, #67	; 0x43
 80015fe:	d103      	bne.n	8001608 <mqtt_incoming_publish_cb+0x5c>
	inpub_id = 3;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <mqtt_incoming_publish_cb+0x7c>)
 8001602:	2203      	movs	r2, #3
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	e006      	b.n	8001616 <mqtt_incoming_publish_cb+0x6a>
  } else if(topic[0] == 'D'){
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b44      	cmp	r3, #68	; 0x44
 800160e:	d102      	bne.n	8001616 <mqtt_incoming_publish_cb+0x6a>
	inpub_id = 4;
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <mqtt_incoming_publish_cb+0x7c>)
 8001612:	2204      	movs	r2, #4
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	0801874c 	.word	0x0801874c
 8001624:	08018780 	.word	0x08018780
 8001628:	200004f4 	.word	0x200004f4

0800162c <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	460b      	mov	r3, r1
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	4613      	mov	r3, r2
 8001640:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
  printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	797a      	ldrb	r2, [r7, #5]
 800164a:	4619      	mov	r1, r3
 800164c:	4840      	ldr	r0, [pc, #256]	; (8001750 <mqtt_incoming_data_cb+0x124>)
 800164e:	f015 fdd5 	bl	80171fc <iprintf>

  if(flags & MQTT_DATA_FLAG_LAST)
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d06d      	beq.n	8001738 <mqtt_incoming_data_cb+0x10c>
  {
    /* Last fragment of payload received (or whole part if payload fits receive buffer
       See MQTT_VAR_HEADER_BUFFER_LEN)  */

    /* Call function or do action depending on reference, in this case inpub_id */
    if(inpub_id == 0)
 800165c:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <mqtt_incoming_data_cb+0x128>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10b      	bne.n	800167c <mqtt_incoming_data_cb+0x50>
    {
      /* Don't trust the publisher, check zero termination */
      if(data[len-1] == 0)
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	3b01      	subs	r3, #1
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d162      	bne.n	8001738 <mqtt_incoming_data_cb+0x10c>
      {
        printf("mqtt_incoming_data_cb: %s\n", (const char *)data);
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	4838      	ldr	r0, [pc, #224]	; (8001758 <mqtt_incoming_data_cb+0x12c>)
 8001676:	f015 fdc1 	bl	80171fc <iprintf>
 800167a:	e05d      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
      }
    }
    else if(inpub_id == 1)
 800167c:	4b35      	ldr	r3, [pc, #212]	; (8001754 <mqtt_incoming_data_cb+0x128>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10f      	bne.n	80016a4 <mqtt_incoming_data_cb+0x78>
    {
      /* Call an 'A' function... */
    	if (data[0] == '1')
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b31      	cmp	r3, #49	; 0x31
 800168a:	d105      	bne.n	8001698 <mqtt_incoming_data_cb+0x6c>
    	{
    		HAL_GPIO_WritePin(Relais_1_GPIO_Port, Relais_1_Pin,GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2102      	movs	r1, #2
 8001690:	4832      	ldr	r0, [pc, #200]	; (800175c <mqtt_incoming_data_cb+0x130>)
 8001692:	f002 fb01 	bl	8003c98 <HAL_GPIO_WritePin>
 8001696:	e04f      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(Relais_1_GPIO_Port, Relais_1_Pin,GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2102      	movs	r1, #2
 800169c:	482f      	ldr	r0, [pc, #188]	; (800175c <mqtt_incoming_data_cb+0x130>)
 800169e:	f002 fafb 	bl	8003c98 <HAL_GPIO_WritePin>
 80016a2:	e049      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}

    }

    else if(inpub_id == 2)
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <mqtt_incoming_data_cb+0x128>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d111      	bne.n	80016d0 <mqtt_incoming_data_cb+0xa4>
    {
      /* Call an 'B' function... */
    	if (data[0] == '1')
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b31      	cmp	r3, #49	; 0x31
 80016b2:	d106      	bne.n	80016c2 <mqtt_incoming_data_cb+0x96>
    	{
    		HAL_GPIO_WritePin(Relais_2_GPIO_Port, Relais_2_Pin,GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ba:	4829      	ldr	r0, [pc, #164]	; (8001760 <mqtt_incoming_data_cb+0x134>)
 80016bc:	f002 faec 	bl	8003c98 <HAL_GPIO_WritePin>
 80016c0:	e03a      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(Relais_2_GPIO_Port, Relais_2_Pin,GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <mqtt_incoming_data_cb+0x134>)
 80016ca:	f002 fae5 	bl	8003c98 <HAL_GPIO_WritePin>
 80016ce:	e033      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}

    }
    else if(inpub_id == 3)
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <mqtt_incoming_data_cb+0x128>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d10f      	bne.n	80016f8 <mqtt_incoming_data_cb+0xcc>
    {
      /* Call an 'C' function... */
    	if (data[0] == '1')
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b31      	cmp	r3, #49	; 0x31
 80016de:	d105      	bne.n	80016ec <mqtt_incoming_data_cb+0xc0>
    	{
    		HAL_GPIO_WritePin(Relais_3_GPIO_Port, Relais_3_Pin,GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	481e      	ldr	r0, [pc, #120]	; (8001760 <mqtt_incoming_data_cb+0x134>)
 80016e6:	f002 fad7 	bl	8003c98 <HAL_GPIO_WritePin>
 80016ea:	e025      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(Relais_3_GPIO_Port, Relais_3_Pin,GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	481b      	ldr	r0, [pc, #108]	; (8001760 <mqtt_incoming_data_cb+0x134>)
 80016f2:	f002 fad1 	bl	8003c98 <HAL_GPIO_WritePin>
 80016f6:	e01f      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}

    }
    else if(inpub_id == 4)
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <mqtt_incoming_data_cb+0x128>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d11b      	bne.n	8001738 <mqtt_incoming_data_cb+0x10c>
    {
      /* Call an 'D' function... */
    	if (data[0] == '1')
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b31      	cmp	r3, #49	; 0x31
 8001706:	d106      	bne.n	8001716 <mqtt_incoming_data_cb+0xea>
    	{
    		HAL_GPIO_WritePin(Relais_4_GPIO_Port, Relais_4_Pin,GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	4814      	ldr	r0, [pc, #80]	; (8001760 <mqtt_incoming_data_cb+0x134>)
 8001710:	f002 fac2 	bl	8003c98 <HAL_GPIO_WritePin>
 8001714:	e010      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(Relais_4_GPIO_Port, Relais_4_Pin,GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <mqtt_incoming_data_cb+0x134>)
 800171e:	f002 fabb 	bl	8003c98 <HAL_GPIO_WritePin>
  }
  else
  {
    /* Handle fragmented payload, store in buffer, write to file or whatever */
  }
  while (data[i] != 0)
 8001722:	e009      	b.n	8001738 <mqtt_incoming_data_cb+0x10c>
  {
	  RxBuffer[i] = data[i];
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	441a      	add	r2, r3
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	7811      	ldrb	r1, [r2, #0]
 800172e:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <mqtt_incoming_data_cb+0x138>)
 8001730:	54d1      	strb	r1, [r2, r3]
	  i++;
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	3301      	adds	r3, #1
 8001736:	75fb      	strb	r3, [r7, #23]
  while (data[i] != 0)
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ef      	bne.n	8001724 <mqtt_incoming_data_cb+0xf8>
  }

}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08018790 	.word	0x08018790
 8001754:	200004f4 	.word	0x200004f4
 8001758:	080187c4 	.word	0x080187c4
 800175c:	40021800 	.word	0x40021800
 8001760:	40021400 	.word	0x40021400
 8001764:	20000490 	.word	0x20000490

08001768 <publish_message>:

uint8_t publish_message(mqtt_client_t *client ,const void * pub_payload , const char *topic, void *arg)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af04      	add	r7, sp, #16
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 800177a:	2300      	movs	r3, #0
 800177c:	75bb      	strb	r3, [r7, #22]
  err = mqtt_publish(client, topic, pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, pub_payload);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f7fe fd40 	bl	8000204 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	9303      	str	r3, [sp, #12]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <publish_message+0x6c>)
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	7dbb      	ldrb	r3, [r7, #22]
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f009 fe0c 	bl	800b3bc <mqtt_publish>
 80017a4:	4603      	mov	r3, r0
 80017a6:	757b      	strb	r3, [r7, #21]
  if(err != ERR_OK) {
 80017a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00b      	beq.n	80017c8 <publish_message+0x60>
    printf("Publish err: %d\n", err);
 80017b0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <publish_message+0x70>)
 80017b8:	f015 fd20 	bl	80171fc <iprintf>
    HAL_UART_Transmit(&huart3, "Publish error", sizeof("publish error"), 250);
 80017bc:	23fa      	movs	r3, #250	; 0xfa
 80017be:	220e      	movs	r2, #14
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <publish_message+0x74>)
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <publish_message+0x78>)
 80017c4:	f004 f9b5 	bl	8005b32 <HAL_UART_Transmit>

  }
  return err;
 80017c8:	7d7b      	ldrb	r3, [r7, #21]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080185f0 	.word	0x080185f0
 80017dc:	08018604 	.word	0x08018604
 80017e0:	20000424 	.word	0x20000424

080017e4 <mqtt_pub_request_cb>:

/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]

  if(result != ERR_OK)
 80017f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <mqtt_pub_request_cb+0x40>
  {
	  char uartmsg[] = "Publisch failed\n";
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <mqtt_pub_request_cb+0x74>)
 80017fa:	f107 041c 	add.w	r4, r7, #28
 80017fe:	461d      	mov	r5, r3
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	7023      	strb	r3, [r4, #0]
    printf("Publish result: %d\n", result);
 8001808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180c:	4619      	mov	r1, r3
 800180e:	4813      	ldr	r0, [pc, #76]	; (800185c <mqtt_pub_request_cb+0x78>)
 8001810:	f015 fcf4 	bl	80171fc <iprintf>
    HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 8001814:	f107 011c 	add.w	r1, r7, #28
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	2211      	movs	r2, #17
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <mqtt_pub_request_cb+0x7c>)
 800181e:	f004 f988 	bl	8005b32 <HAL_UART_Transmit>
    while (1)
 8001822:	e7fe      	b.n	8001822 <mqtt_pub_request_cb+0x3e>

    }
  }
  else
  {
	  char uartmsg[] = "Message published\n";
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <mqtt_pub_request_cb+0x80>)
 8001826:	f107 0408 	add.w	r4, r7, #8
 800182a:	461d      	mov	r5, r3
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	8022      	strh	r2, [r4, #0]
 8001836:	3402      	adds	r4, #2
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	7023      	strb	r3, [r4, #0]
	printf("Message Published \n");
 800183c:	480a      	ldr	r0, [pc, #40]	; (8001868 <mqtt_pub_request_cb+0x84>)
 800183e:	f015 fd63 	bl	8017308 <puts>
	HAL_UART_Transmit(&huart3, uartmsg, sizeof(uartmsg), 100);
 8001842:	f107 0108 	add.w	r1, r7, #8
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2213      	movs	r2, #19
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <mqtt_pub_request_cb+0x7c>)
 800184c:	f004 f971 	bl	8005b32 <HAL_UART_Transmit>
  }
}
 8001850:	bf00      	nop
 8001852:	3730      	adds	r7, #48	; 0x30
 8001854:	46bd      	mov	sp, r7
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	08018808 	.word	0x08018808
 800185c:	080187e0 	.word	0x080187e0
 8001860:	20000424 	.word	0x20000424
 8001864:	0801881c 	.word	0x0801881c
 8001868:	080187f4 	.word	0x080187f4

0800186c <Check_client_connected>:

uint8_t Check_client_connected(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	71fb      	strb	r3, [r7, #7]
	status = mqtt_client_is_connected(mqtt_client);
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <Check_client_connected+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f00a f9f2 	bl	800bc64 <mqtt_client_is_connected>
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
	return status;
 8001884:	79fb      	ldrb	r3, [r7, #7]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000048c 	.word	0x2000048c

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_MspInit+0x54>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_MspInit+0x54>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_MspInit+0x54>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_MspInit+0x54>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_MspInit+0x54>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_MspInit+0x54>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	210f      	movs	r1, #15
 80018d6:	f06f 0001 	mvn.w	r0, #1
 80018da:	f000 fd9a 	bl	8002412 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_SPI_MspInit+0xc0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d149      	bne.n	80019a2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_SPI_MspInit+0xc4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001962:	2320      	movs	r3, #32
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001972:	2305      	movs	r3, #5
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <HAL_SPI_MspInit+0xc8>)
 800197e:	f001 ffc7 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001982:	2320      	movs	r3, #32
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4806      	ldr	r0, [pc, #24]	; (80019b8 <HAL_SPI_MspInit+0xcc>)
 800199e:	f001 ffb7 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40013000 	.word	0x40013000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_TIM_Base_MspInit+0x48>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d115      	bne.n	80019fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_TIM_Base_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_TIM_Base_MspInit+0x4c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_Base_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2105      	movs	r1, #5
 80019ee:	201d      	movs	r0, #29
 80019f0:	f000 fd0f 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019f4:	201d      	movs	r0, #29
 80019f6:	f000 fd28 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40000400 	.word	0x40000400
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_UART_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12c      	bne.n	8001a88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_UART_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a78:	2307      	movs	r3, #7
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_UART_MspInit+0x8c>)
 8001a84:	f001 ff44 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40004800 	.word	0x40004800
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020c00 	.word	0x40020c00

08001a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_InitTick+0xd4>)
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <HAL_InitTick+0xd4>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6453      	str	r3, [r2, #68]	; 0x44
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_InitTick+0xd4>)
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fe08 	bl	80046e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ad8:	f002 fdf2 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 8001adc:	4603      	mov	r3, r0
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_InitTick+0xd8>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0c9b      	lsrs	r3, r3, #18
 8001aec:	3b01      	subs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_InitTick+0xdc>)
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_InitTick+0xe0>)
 8001af4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_InitTick+0xdc>)
 8001af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001afc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_InitTick+0xdc>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_InitTick+0xdc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_InitTick+0xdc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_InitTick+0xdc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b16:	4818      	ldr	r0, [pc, #96]	; (8001b78 <HAL_InitTick+0xdc>)
 8001b18:	f003 f8a8 	bl	8004c6c <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11b      	bne.n	8001b62 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b2a:	4813      	ldr	r0, [pc, #76]	; (8001b78 <HAL_InitTick+0xdc>)
 8001b2c:	f003 f8ee 	bl	8004d0c <HAL_TIM_Base_Start_IT>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d111      	bne.n	8001b62 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b3e:	2019      	movs	r0, #25
 8001b40:	f000 fc83 	bl	800244a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	d808      	bhi.n	8001b5c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	2019      	movs	r0, #25
 8001b50:	f000 fc5f 	bl	8002412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_InitTick+0xe4>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e002      	b.n	8001b62 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3730      	adds	r7, #48	; 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	200004f8 	.word	0x200004f8
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	20000004 	.word	0x20000004

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <NMI_Handler+0x4>

08001b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <MemManage_Handler+0x4>

08001b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Rot_cnt = 0;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <EXTI0_IRQHandler+0x28>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	801a      	strh	r2, [r3, #0]
	osMessagePut(ROT_QueueHandle, Rot_cnt, 0);
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <EXTI0_IRQHandler+0x2c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <EXTI0_IRQHandler+0x28>)
 8001bc0:	8812      	ldrh	r2, [r2, #0]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fe0a 	bl	80077e0 <osMessagePut>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f002 f87d 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000047c 	.word	0x2000047c
 8001bdc:	20000478 	.word	0x20000478

08001be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001be6:	f003 f989 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200004f8 	.word	0x200004f8

08001bf4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// start routine only when there is an timer overflow

	if(IRQ_Triggerd)
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <TIM3_IRQHandler+0xac>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d047      	beq.n	8001c90 <TIM3_IRQHandler+0x9c>
	{
		Rot_CLKstate = HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin);
 8001c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c04:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <TIM3_IRQHandler+0xb0>)
 8001c06:	f002 f82f 	bl	8003c68 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <TIM3_IRQHandler+0xb4>)
 8001c10:	701a      	strb	r2, [r3, #0]
		Rot_DTstate = HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin);
 8001c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c16:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <TIM3_IRQHandler+0xb0>)
 8001c18:	f002 f826 	bl	8003c68 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <TIM3_IRQHandler+0xb8>)
 8001c22:	701a      	strb	r2, [r3, #0]


		if (Rot_CLKstate)
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <TIM3_IRQHandler+0xb4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d011      	beq.n	8001c50 <TIM3_IRQHandler+0x5c>
		{
			if(Rot_DTstate)
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <TIM3_IRQHandler+0xb8>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <TIM3_IRQHandler+0x4e>
			{
				Rot_cnt--;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c3e:	801a      	strh	r2, [r3, #0]
 8001c40:	e017      	b.n	8001c72 <TIM3_IRQHandler+0x7e>
			}
			else
			{
				Rot_cnt++;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	e010      	b.n	8001c72 <TIM3_IRQHandler+0x7e>
			}
		}
		else
		{
			if(Rot_DTstate)
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <TIM3_IRQHandler+0xb8>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <TIM3_IRQHandler+0x72>
			{
				Rot_cnt++;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c62:	801a      	strh	r2, [r3, #0]
 8001c64:	e005      	b.n	8001c72 <TIM3_IRQHandler+0x7e>
			}
			else
			{
				Rot_cnt--;
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c70:	801a      	strh	r2, [r3, #0]
			}
		}

		osMessagePut(ROT_QueueHandle, Rot_cnt, 0);
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <TIM3_IRQHandler+0xc0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <TIM3_IRQHandler+0xbc>)
 8001c78:	8812      	ldrh	r2, [r2, #0]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f005 fdae 	bl	80077e0 <osMessagePut>

		ROT_IRQ_Flag = 1;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <TIM3_IRQHandler+0xc4>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]

		IRQ_Triggerd = 0;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <TIM3_IRQHandler+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c90:	480a      	ldr	r0, [pc, #40]	; (8001cbc <TIM3_IRQHandler+0xc8>)
 8001c92:	f003 f933 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim3);
 8001c96:	4809      	ldr	r0, [pc, #36]	; (8001cbc <TIM3_IRQHandler+0xc8>)
 8001c98:	f003 f8a8 	bl	8004dec <HAL_TIM_Base_Stop_IT>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000542 	.word	0x20000542
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	20000540 	.word	0x20000540
 8001cac:	20000541 	.word	0x20000541
 8001cb0:	2000047c 	.word	0x2000047c
 8001cb4:	20000478 	.word	0x20000478
 8001cb8:	20000543 	.word	0x20000543
 8001cbc:	200003dc 	.word	0x200003dc

08001cc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(!IRQ_Triggerd)
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <EXTI15_10_IRQHandler+0x34>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d106      	bne.n	8001cda <EXTI15_10_IRQHandler+0x1a>
	{
		IRQ_Triggerd = 1;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <EXTI15_10_IRQHandler+0x34>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8001cd2:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <EXTI15_10_IRQHandler+0x38>)
 8001cd4:	f003 f81a 	bl	8004d0c <HAL_TIM_Base_Start_IT>
 8001cd8:	e002      	b.n	8001ce0 <EXTI15_10_IRQHandler+0x20>
	}

	else
	{
		// set timer3 count value to zero
		TIM3->CNT = 0;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <EXTI15_10_IRQHandler+0x3c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8001ce0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ce4:	f001 fff2 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cec:	f001 ffee 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000542 	.word	0x20000542
 8001cf8:	200003dc 	.word	0x200003dc
 8001cfc:	40000400 	.word	0x40000400

08001d00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <ETH_IRQHandler+0x10>)
 8001d06:	f000 ff2d 	bl	8002b64 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20005684 	.word	0x20005684

08001d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_kill>:

int _kill(int pid, int sig)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <_kill+0x20>)
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	2001a820 	.word	0x2001a820

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe5 	bl	8001d24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
  }

  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d205      	bcs.n	8001e3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <_sbrk+0x6c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20030000 	.word	0x20030000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	20000544 	.word	0x20000544
 8001e68:	2001a828 	.word	0x2001a828
 8001e6c:	2001a820 	.word	0x2001a820

08001e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <SystemInit+0x20>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <SystemInit+0x20>)
 8001e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ecc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e9a:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb0:	4c0b      	ldr	r4, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ebe:	f7ff ffd7 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f015 f843 	bl	8016f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec6:	f7fe fc7f 	bl	80007c8 <main>
  bx  lr    
 8001eca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ecc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001ed8:	0801d3d4 	.word	0x0801d3d4
  ldr r2, =_sbss
 8001edc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001ee0:	2001a824 	.word	0x2001a824

08001ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>

08001ee6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <LAN8742_RegisterBusIO+0x28>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <LAN8742_RegisterBusIO+0x28>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <LAN8742_RegisterBusIO+0x28>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e014      	b.n	8001f3e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d17c      	bne.n	8002064 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e01c      	b.n	8001fbe <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f107 0208 	add.w	r2, r7, #8
 8001f8c:	2112      	movs	r1, #18
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	4798      	blx	r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da03      	bge.n	8001fa0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001f98:	f06f 0304 	mvn.w	r3, #4
 8001f9c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001f9e:	e00b      	b.n	8001fb8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d105      	bne.n	8001fb8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
         break;
 8001fb6:	e005      	b.n	8001fc4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b1f      	cmp	r3, #31
 8001fc2:	d9df      	bls.n	8001f84 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b1f      	cmp	r3, #31
 8001fca:	d902      	bls.n	8001fd2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001fcc:	f06f 0302 	mvn.w	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d145      	bne.n	8002064 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6810      	ldr	r0, [r2, #0]
 8001fe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4798      	blx	r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db37      	blt.n	800205e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6810      	ldr	r0, [r2, #0]
 8001ff6:	f107 0208 	add.w	r2, r7, #8
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4798      	blx	r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	db28      	blt.n	8002056 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4798      	blx	r3
 800200a:	4603      	mov	r3, r0
 800200c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800200e:	e01c      	b.n	800204a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4798      	blx	r3
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002022:	d80e      	bhi.n	8002042 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6810      	ldr	r0, [r2, #0]
 800202c:	f107 0208 	add.w	r2, r7, #8
 8002030:	2100      	movs	r1, #0
 8002032:	4798      	blx	r3
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	da07      	bge.n	800204a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800203a:	f06f 0304 	mvn.w	r3, #4
 800203e:	613b      	str	r3, [r7, #16]
                 break;
 8002040:	e010      	b.n	8002064 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002042:	f06f 0301 	mvn.w	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
               break;
 8002048:	e00c      	b.n	8002064 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1dd      	bne.n	8002010 <LAN8742_Init+0xc6>
 8002054:	e006      	b.n	8002064 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002056:	f06f 0304 	mvn.w	r3, #4
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e002      	b.n	8002064 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800205e:	f06f 0303 	mvn.w	r3, #3
 8002062:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d112      	bne.n	8002090 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4798      	blx	r3
 8002070:	4603      	mov	r3, r0
 8002072:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002074:	bf00      	nop
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4798      	blx	r3
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002088:	d9f5      	bls.n	8002076 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002090:	693b      	ldr	r3, [r7, #16]
 }
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6810      	ldr	r0, [r2, #0]
 80020ae:	f107 020c 	add.w	r2, r7, #12
 80020b2:	2101      	movs	r1, #1
 80020b4:	4798      	blx	r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da02      	bge.n	80020c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020bc:	f06f 0304 	mvn.w	r3, #4
 80020c0:	e06e      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6810      	ldr	r0, [r2, #0]
 80020ca:	f107 020c 	add.w	r2, r7, #12
 80020ce:	2101      	movs	r1, #1
 80020d0:	4798      	blx	r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da02      	bge.n	80020de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020d8:	f06f 0304 	mvn.w	r3, #4
 80020dc:	e060      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80020e8:	2301      	movs	r3, #1
 80020ea:	e059      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6810      	ldr	r0, [r2, #0]
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	2100      	movs	r1, #0
 80020fa:	4798      	blx	r3
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da02      	bge.n	8002108 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002102:	f06f 0304 	mvn.w	r3, #4
 8002106:	e04b      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11b      	bne.n	800214a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <LAN8742_GetLinkState+0x90>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002126:	2302      	movs	r3, #2
 8002128:	e03a      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002134:	2303      	movs	r3, #3
 8002136:	e033      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002142:	2304      	movs	r3, #4
 8002144:	e02c      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002146:	2305      	movs	r3, #5
 8002148:	e02a      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6810      	ldr	r0, [r2, #0]
 8002152:	f107 020c 	add.w	r2, r7, #12
 8002156:	211f      	movs	r1, #31
 8002158:	4798      	blx	r3
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	da02      	bge.n	8002166 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002160:	f06f 0304 	mvn.w	r3, #4
 8002164:	e01c      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002170:	2306      	movs	r3, #6
 8002172:	e015      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 031c 	and.w	r3, r3, #28
 800217a:	2b18      	cmp	r3, #24
 800217c:	d101      	bne.n	8002182 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800217e:	2302      	movs	r3, #2
 8002180:	e00e      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 031c 	and.w	r3, r3, #28
 8002188:	2b08      	cmp	r3, #8
 800218a:	d101      	bne.n	8002190 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800218c:	2303      	movs	r3, #3
 800218e:	e007      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 031c 	and.w	r3, r3, #28
 8002196:	2b14      	cmp	r3, #20
 8002198:	d101      	bne.n	800219e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800219a:	2304      	movs	r3, #4
 800219c:	e000      	b.n	80021a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800219e:	2305      	movs	r3, #5
    }				
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <HAL_Init+0x40>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_Init+0x40>)
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_Init+0x40>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 f913 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	200f      	movs	r0, #15
 80021d8:	f7ff fc60 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fb5a 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00

080021ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x20>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x24>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	4a04      	ldr	r2, [pc, #16]	; (8002210 <HAL_IncTick+0x24>)
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008
 8002210:	20000548 	.word	0x20000548

08002214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return uwTick;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_GetTick+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000548 	.word	0x20000548

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff ffee 	bl	8002214 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffde 	bl	8002214 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008

08002274 <__NVIC_SetPriorityGrouping>:
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <__NVIC_SystemReset>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80023d4:	f3bf 8f4f 	dsb	sy
}
 80023d8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <__NVIC_SystemReset+0x24>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023e2:	4904      	ldr	r1, [pc, #16]	; (80023f4 <__NVIC_SystemReset+0x24>)
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <__NVIC_SystemReset+0x28>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ea:	f3bf 8f4f 	dsb	sy
}
 80023ee:	bf00      	nop
    __NOP();
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <__NVIC_SystemReset+0x20>
 80023f4:	e000ed00 	.word	0xe000ed00
 80023f8:	05fa0004 	.word	0x05fa0004

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff35 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff4a 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff9a 	bl	8002368 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff69 	bl	8002314 <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff3d 	bl	80022d8 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800246a:	f7ff ffb1 	bl	80023d0 <__NVIC_SystemReset>
	...

08002470 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06c      	b.n	800255c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2223      	movs	r2, #35	; 0x23
 8002490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f004 fd8f 	bl	8006fb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b31      	ldr	r3, [pc, #196]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a30      	ldr	r2, [pc, #192]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_ETH_Init+0xf4>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <HAL_ETH_Init+0xf8>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <HAL_ETH_Init+0xf8>)
 80024bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024c2:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_ETH_Init+0xf8>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4927      	ldr	r1, [pc, #156]	; (8002568 <HAL_ETH_Init+0xf8>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_ETH_Init+0xf8>)
 80024d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff fe92 	bl	8002214 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024f2:	e011      	b.n	8002518 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80024f4:	f7ff fe8e 	bl	8002214 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002502:	d909      	bls.n	8002518 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2204      	movs	r2, #4
 8002508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	22e0      	movs	r2, #224	; 0xe0
 8002510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e021      	b.n	800255c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e4      	bne.n	80024f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 ff4a 	bl	80033c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fff1 	bl	8003518 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f001 f847 	bl	80035ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	461a      	mov	r2, r3
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 ffaf 	bl	80034a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2210      	movs	r2, #16
 8002556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	40013800 	.word	0x40013800

0800256c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257a:	2b10      	cmp	r3, #16
 800257c:	d17f      	bne.n	800267e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2223      	movs	r2, #35	; 0x23
 8002582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025b0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80025c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2204      	movs	r2, #4
 80025cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9f8 	bl	80029c4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fe1d 	bl	800222c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0204 	orr.w	r2, r2, #4
 8002608:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff fe0a 	bl	800222c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fd70 	bl	8003106 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800263c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002654:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8002668:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800266c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002670:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2223      	movs	r2, #35	; 0x23
 8002676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
  }
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	2b23      	cmp	r3, #35	; 0x23
 8002698:	d170      	bne.n	800277c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2223      	movs	r2, #35	; 0x23
 800269e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80026b4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80026b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026bc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f023 0302 	bic.w	r3, r3, #2
 80026e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ec:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0204 	bic.w	r2, r2, #4
 80026fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff fd90 	bl	800222c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fcf6 	bl	8003106 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0208 	bic.w	r2, r2, #8
 8002728:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002732:	2001      	movs	r0, #1
 8002734:	f7ff fd7a 	bl	800222c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e00e      	b.n	8002764 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	3212      	adds	r2, #18
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d9ed      	bls.n	8002746 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2210      	movs	r2, #16
 8002774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279c:	f043 0201 	orr.w	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e045      	b.n	8002836 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	2b23      	cmp	r3, #35	; 0x23
 80027b2:	d13f      	bne.n	8002834 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80027bc:	2201      	movs	r2, #1
 80027be:	6839      	ldr	r1, [r7, #0]
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 ff6f 	bl	80036a4 <ETH_Prepare_Tx_Descriptors>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f043 0202 	orr.w	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e02a      	b.n	8002836 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80027e0:	f3bf 8f4f 	dsb	sy
}
 80027e4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d904      	bls.n	8002802 <HAL_ETH_Transmit_IT+0x7c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	1f1a      	subs	r2, r3, #4
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	461a      	mov	r2, r3
 800281e:	2304      	movs	r3, #4
 8002820:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b088      	sub	sp, #32
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0a8      	b.n	80029bc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002870:	2b23      	cmp	r3, #35	; 0x23
 8002872:	d001      	beq.n	8002878 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0a1      	b.n	80029bc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	3212      	adds	r2, #18
 8002884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002888:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	f1c3 0304 	rsb	r3, r3, #4
 8002892:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002894:	e06a      	b.n	800296c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_ETH_ReadData+0x88>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d040      	beq.n	8002948 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00c      	beq.n	800290a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028fa:	3b04      	subs	r3, #4
 80028fc:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002922:	461a      	mov	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f004 fd26 	bl	8007378 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d902      	bls.n	800295a <HAL_ETH_ReadData+0x11c>
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	3b04      	subs	r3, #4
 8002958:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	3212      	adds	r2, #18
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db06      	blt.n	8002982 <HAL_ETH_ReadData+0x144>
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d202      	bcs.n	8002982 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d089      	beq.n	8002896 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f814 	bl	80029c4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d108      	bne.n	80029ba <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	3212      	adds	r2, #18
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80029ec:	e040      	b.n	8002a70 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d112      	bne.n	8002a1c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fc86 	bl	800730c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	74fb      	strb	r3, [r7, #19]
 8002a0a:	e007      	b.n	8002a1c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002a1c:	7cfb      	ldrb	r3, [r7, #19]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d026      	beq.n	8002a70 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <ETH_UpdateDescriptor+0xe4>)
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	e003      	b.n	8002a3a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002a38:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a3a:	f3bf 8f5f 	dmb	sy
}
 8002a3e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d902      	bls.n	8002a5e <ETH_UpdateDescriptor+0x9a>
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	3212      	adds	r2, #18
 8002a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a68:	617b      	str	r3, [r7, #20]
      desccount--;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <ETH_UpdateDescriptor+0xb8>
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1b8      	bne.n	80029ee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d00c      	beq.n	8002aa0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	80004600 	.word	0x80004600

08002aac <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002aca:	e03f      	b.n	8002b4c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	3304      	adds	r3, #4
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002af4:	7bbb      	ldrb	r3, [r7, #14]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db1b      	blt.n	8002b48 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	3304      	adds	r3, #4
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 fc6b 	bl	80073f8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	3304      	adds	r3, #4
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b46:	e001      	b.n	8002b4c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_ETH_ReleaseTxPacket+0xac>
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1b9      	bne.n	8002acc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d112      	bne.n	8002ba4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d109      	bne.n	8002ba4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <HAL_ETH_IRQHandler+0x178>)
 8002b9c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f003 ff6e 	bl	8006a80 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d113      	bne.n	8002bde <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10a      	bne.n	8002bde <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002bd6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f003 ff61 	bl	8006aa0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf0:	d14c      	bne.n	8002c8c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c04:	d142      	bne.n	8002c8c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f043 0208 	orr.w	r2, r3, #8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d11a      	bne.n	8002c60 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <HAL_ETH_IRQHandler+0x17c>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c54:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	22e0      	movs	r2, #224	; 0xe0
 8002c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002c5e:	e012      	b.n	8002c86 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c6e:	4013      	ands	r3, r2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c84:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f003 ff1a 	bl	8006ac0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d10e      	bne.n	8002cb8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f81c 	bl	8002ce8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_ETH_IRQHandler+0x180>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_ETH_IRQHandler+0x180>)
 8002cc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cca:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f815 	bl	8002cfc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	00010040 	.word	0x00010040
 8002ce0:	007e2000 	.word	0x007e2000
 8002ce4:	40013c00 	.word	0x40013c00

08002ce8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 031c 	and.w	r3, r3, #28
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	02db      	lsls	r3, r3, #11
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0302 	bic.w	r3, r3, #2
 8002d4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002d60:	f7ff fa58 	bl	8002214 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d66:	e00d      	b.n	8002d84 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002d68:	f7ff fa54 	bl	8002214 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d301      	bcc.n	8002d7c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e010      	b.n	8002d9e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ec      	bne.n	8002d68 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 031c 	and.w	r3, r3, #28
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	02db      	lsls	r3, r3, #11
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	019b      	lsls	r3, r3, #6
 8002dd4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e00:	f7ff fa08 	bl	8002214 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e06:	e00d      	b.n	8002e24 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002e08:	f7ff fa04 	bl	8002214 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d301      	bcc.n	8002e1c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e009      	b.n	8002e30 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ec      	bne.n	8002e08 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0d9      	b.n	8003000 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf0c      	ite	eq
 8002eba:	2301      	moveq	r3, #1
 8002ebc:	2300      	movne	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf14      	ite	ne
 8002f3e:	2301      	movne	r3, #1
 8002f40:	2300      	moveq	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e00b      	b.n	8003038 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	2b10      	cmp	r3, #16
 8003028:	d105      	bne.n	8003036 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f88f 	bl	8003150 <ETH_SetMACConfig>

    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e000      	b.n	8003038 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
  }
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 031c 	bic.w	r3, r3, #28
 8003056:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003058:	f001 fb12 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 800305c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d908      	bls.n	8003078 <HAL_ETH_SetMDIOClockRange+0x38>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d804      	bhi.n	8003078 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e027      	b.n	80030c8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d908      	bls.n	8003092 <HAL_ETH_SetMDIOClockRange+0x52>
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d204      	bcs.n	8003092 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f043 030c 	orr.w	r3, r3, #12
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e01a      	b.n	80030c8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d303      	bcc.n	80030a2 <HAL_ETH_SetMDIOClockRange+0x62>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d911      	bls.n	80030c6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4a0f      	ldr	r2, [pc, #60]	; (80030e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d908      	bls.n	80030bc <HAL_ETH_SetMDIOClockRange+0x7c>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d804      	bhi.n	80030bc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e005      	b.n	80030c8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 0310 	orr.w	r3, r3, #16
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e000      	b.n	80030c8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80030c6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	611a      	str	r2, [r3, #16]
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	01312cff 	.word	0x01312cff
 80030dc:	02160ebf 	.word	0x02160ebf
 80030e0:	03938700 	.word	0x03938700
 80030e4:	05f5e0ff 	.word	0x05f5e0ff
 80030e8:	08f0d17f 	.word	0x08f0d17f

080030ec <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003124:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003128:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003136:	2001      	movs	r0, #1
 8003138:	f7ff f878 	bl	800222c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003146:	6193      	str	r3, [r2, #24]
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4b51      	ldr	r3, [pc, #324]	; (80032ac <ETH_SetMACConfig+0x15c>)
 8003166:	4013      	ands	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	7c1b      	ldrb	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <ETH_SetMACConfig+0x28>
 8003172:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003176:	e000      	b.n	800317a <ETH_SetMACConfig+0x2a>
 8003178:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	7c5b      	ldrb	r3, [r3, #17]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <ETH_SetMACConfig+0x38>
 8003182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003186:	e000      	b.n	800318a <ETH_SetMACConfig+0x3a>
 8003188:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800318a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003190:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	7fdb      	ldrb	r3, [r3, #31]
 8003196:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003198:	431a      	orrs	r2, r3
                        macconf->Speed |
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800319e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	7f92      	ldrb	r2, [r2, #30]
 80031a4:	2a00      	cmp	r2, #0
 80031a6:	d102      	bne.n	80031ae <ETH_SetMACConfig+0x5e>
 80031a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ac:	e000      	b.n	80031b0 <ETH_SetMACConfig+0x60>
 80031ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80031b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	7f1b      	ldrb	r3, [r3, #28]
 80031b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80031c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	d102      	bne.n	80031d8 <ETH_SetMACConfig+0x88>
 80031d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d6:	e000      	b.n	80031da <ETH_SetMACConfig+0x8a>
 80031d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80031da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	7bdb      	ldrb	r3, [r3, #15]
 80031e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80031e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80031e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031f2:	4313      	orrs	r3, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800320a:	2001      	movs	r0, #1
 800320c:	f7ff f80e 	bl	800222c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003236:	2a00      	cmp	r2, #0
 8003238:	d101      	bne.n	800323e <ETH_SetMACConfig+0xee>
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	e000      	b.n	8003240 <ETH_SetMACConfig+0xf0>
 800323e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003240:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003246:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800324e:	2a01      	cmp	r2, #1
 8003250:	d101      	bne.n	8003256 <ETH_SetMACConfig+0x106>
 8003252:	2208      	movs	r2, #8
 8003254:	e000      	b.n	8003258 <ETH_SetMACConfig+0x108>
 8003256:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003258:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003260:	2a01      	cmp	r2, #1
 8003262:	d101      	bne.n	8003268 <ETH_SetMACConfig+0x118>
 8003264:	2204      	movs	r2, #4
 8003266:	e000      	b.n	800326a <ETH_SetMACConfig+0x11a>
 8003268:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800326a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003272:	2a01      	cmp	r2, #1
 8003274:	d101      	bne.n	800327a <ETH_SetMACConfig+0x12a>
 8003276:	2202      	movs	r2, #2
 8003278:	e000      	b.n	800327c <ETH_SetMACConfig+0x12c>
 800327a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800327c:	4313      	orrs	r3, r2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003294:	2001      	movs	r0, #1
 8003296:	f7fe ffc9 	bl	800222c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	ff20810f 	.word	0xff20810f

080032b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <ETH_SetDMAConfig+0x110>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	7b1b      	ldrb	r3, [r3, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <ETH_SetDMAConfig+0x2c>
 80032d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032da:	e000      	b.n	80032de <ETH_SetDMAConfig+0x2e>
 80032dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7b5b      	ldrb	r3, [r3, #13]
 80032e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	7f52      	ldrb	r2, [r2, #29]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d102      	bne.n	80032f4 <ETH_SetDMAConfig+0x44>
 80032ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032f2:	e000      	b.n	80032f6 <ETH_SetDMAConfig+0x46>
 80032f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80032f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	7b9b      	ldrb	r3, [r3, #14]
 80032fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80032fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	7f1b      	ldrb	r3, [r3, #28]
 800330a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800330c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	7f9b      	ldrb	r3, [r3, #30]
 8003312:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003314:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800331a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003322:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003324:	4313      	orrs	r3, r2
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003334:	461a      	mov	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003346:	2001      	movs	r0, #1
 8003348:	f7fe ff70 	bl	800222c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	791b      	ldrb	r3, [r3, #4]
 800335e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003364:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800336a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003370:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003378:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800337a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003382:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003388:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003396:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7fe ff41 	bl	800222c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	f8de3f23 	.word	0xf8de3f23

080033c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b0a6      	sub	sp, #152	; 0x98
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80033d8:	2300      	movs	r3, #0
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003400:	2300      	movs	r3, #0
 8003402:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800340a:	2300      	movs	r3, #0
 800340c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800342c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003430:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff fe86 	bl	8003150 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003444:	2301      	movs	r3, #1
 8003446:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003448:	2301      	movs	r3, #1
 800344a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003452:	2301      	movs	r3, #1
 8003454:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003470:	2301      	movs	r3, #1
 8003472:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003478:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800347a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800347e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003484:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800348c:	2300      	movs	r3, #0
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003494:	f107 0308 	add.w	r3, r7, #8
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff08 	bl	80032b0 <ETH_SetDMAConfig>
}
 80034a0:	bf00      	nop
 80034a2:	3798      	adds	r7, #152	; 0x98
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3305      	adds	r3, #5
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	3204      	adds	r2, #4
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <ETH_MACAddressConfig+0x68>)
 80034ca:	4413      	add	r3, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3303      	adds	r3, #3
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	061a      	lsls	r2, r3, #24
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3302      	adds	r3, #2
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3301      	adds	r3, #1
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	4313      	orrs	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <ETH_MACAddressConfig+0x6c>)
 80034fa:	4413      	add	r3, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	6013      	str	r3, [r2, #0]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40028040 	.word	0x40028040
 8003514:	40028044 	.word	0x40028044

08003518 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e03e      	b.n	80035a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	3206      	adds	r2, #6
 8003558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d80c      	bhi.n	8003588 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	e004      	b.n	8003592 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3301      	adds	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d9bd      	bls.n	8003526 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035bc:	611a      	str	r2, [r3, #16]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	e046      	b.n	8003666 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6919      	ldr	r1, [r3, #16]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	440b      	add	r3, r1
 80035e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2200      	movs	r2, #0
 80035f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2200      	movs	r2, #0
 8003606:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2200      	movs	r2, #0
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003614:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800361c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	3212      	adds	r2, #18
 8003632:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d80c      	bhi.n	8003656 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6919      	ldr	r1, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	440b      	add	r3, r1
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	60da      	str	r2, [r3, #12]
 8003654:	e004      	b.n	8003660 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	461a      	mov	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3301      	adds	r3, #1
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d9b5      	bls.n	80035d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b08d      	sub	sp, #52	; 0x34
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3318      	adds	r3, #24
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e6:	d007      	beq.n	80036f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	3304      	adds	r3, #4
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80036f8:	2302      	movs	r3, #2
 80036fa:	e103      	b.n	8003904 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	3301      	adds	r3, #1
 8003700:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003714:	f023 031f 	bic.w	r3, r3, #31
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	6852      	ldr	r2, [r2, #4]
 800371c:	431a      	orrs	r2, r3
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003782:	f3bf 8f5f 	dmb	sy
}
 8003786:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003794:	e084      	b.n	80038a0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e005      	b.n	80037c2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	3301      	adds	r3, #1
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d902      	bls.n	80037d4 <ETH_Prepare_Tx_Descriptors+0x130>
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	3b04      	subs	r3, #4
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037f6:	d007      	beq.n	8003808 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	3304      	adds	r3, #4
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d029      	beq.n	800385c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003816:	2300      	movs	r3, #0
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
 800381a:	e019      	b.n	8003850 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800381c:	f3bf 8f5f 	dmb	sy
}
 8003820:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	3301      	adds	r3, #1
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003836:	2b03      	cmp	r3, #3
 8003838:	d902      	bls.n	8003840 <ETH_Prepare_Tx_Descriptors+0x19c>
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	3b04      	subs	r3, #4
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	3301      	adds	r3, #1
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	429a      	cmp	r2, r3
 8003856:	d3e1      	bcc.n	800381c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003858:	2302      	movs	r3, #2
 800385a:	e053      	b.n	8003904 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	3301      	adds	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800387a:	f023 031f 	bic.w	r3, r3, #31
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	6852      	ldr	r2, [r2, #4]
 8003882:	431a      	orrs	r2, r3
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	3301      	adds	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800388e:	f3bf 8f5f 	dmb	sy
}
 8003892:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f af76 	bne.w	8003796 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e005      	b.n	80038ca <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	3304      	adds	r3, #4
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80038ec:	b672      	cpsid	i
}
 80038ee:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80038fe:	b662      	cpsie	i
}
 8003900:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3734      	adds	r7, #52	; 0x34
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e177      	b.n	8003c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800392c:	2201      	movs	r2, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	429a      	cmp	r2, r3
 8003946:	f040 8166 	bne.w	8003c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d005      	beq.n	8003962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395e:	2b02      	cmp	r3, #2
 8003960:	d130      	bne.n	80039c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003998:	2201      	movs	r2, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 0201 	and.w	r2, r3, #1
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d017      	beq.n	8003a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d123      	bne.n	8003a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	08da      	lsrs	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3208      	adds	r2, #8
 8003a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	220f      	movs	r2, #15
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	08da      	lsrs	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3208      	adds	r2, #8
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0203 	and.w	r2, r3, #3
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80c0 	beq.w	8003c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ab2:	4a61      	ldr	r2, [pc, #388]	; (8003c38 <HAL_GPIO_Init+0x328>)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	220f      	movs	r2, #15
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_GPIO_Init+0x32c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d037      	beq.n	8003b4e <HAL_GPIO_Init+0x23e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_GPIO_Init+0x330>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_GPIO_Init+0x23a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a56      	ldr	r2, [pc, #344]	; (8003c44 <HAL_GPIO_Init+0x334>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02b      	beq.n	8003b46 <HAL_GPIO_Init+0x236>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a55      	ldr	r2, [pc, #340]	; (8003c48 <HAL_GPIO_Init+0x338>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d025      	beq.n	8003b42 <HAL_GPIO_Init+0x232>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a54      	ldr	r2, [pc, #336]	; (8003c4c <HAL_GPIO_Init+0x33c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <HAL_GPIO_Init+0x22e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a53      	ldr	r2, [pc, #332]	; (8003c50 <HAL_GPIO_Init+0x340>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x22a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_GPIO_Init+0x344>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x226>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <HAL_GPIO_Init+0x348>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x222>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a50      	ldr	r2, [pc, #320]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x21e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4f      	ldr	r2, [pc, #316]	; (8003c60 <HAL_GPIO_Init+0x350>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x21a>
 8003b26:	2309      	movs	r3, #9
 8003b28:	e012      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	e010      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	e00e      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b32:	2307      	movs	r3, #7
 8003b34:	e00c      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b36:	2306      	movs	r3, #6
 8003b38:	e00a      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	e008      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	e006      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b42:	2303      	movs	r3, #3
 8003b44:	e004      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e002      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f002 0203 	and.w	r2, r2, #3
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	4093      	lsls	r3, r2
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b60:	4935      	ldr	r1, [pc, #212]	; (8003c38 <HAL_GPIO_Init+0x328>)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b92:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bbc:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003be6:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	f67f ae84 	bls.w	800392c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020800 	.word	0x40020800
 8003c48:	40020c00 	.word	0x40020c00
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40021400 	.word	0x40021400
 8003c54:	40021800 	.word	0x40021800
 8003c58:	40021c00 	.word	0x40021c00
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40022400 	.word	0x40022400
 8003c64:	40013c00 	.word	0x40013c00

08003c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e001      	b.n	8003c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca8:	787b      	ldrb	r3, [r7, #1]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb4:	e003      	b.n	8003cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	041a      	lsls	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	619a      	str	r2, [r3, #24]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce2:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f806 	bl	8003cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40013c00 	.word	0x40013c00

08003cfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e034      	b.n	8003d8e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f245 5255 	movw	r2, #21845	; 0x5555
 8003d36:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6852      	ldr	r2, [r2, #4]
 8003d40:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003d4c:	f7fe fa62 	bl	8002214 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d52:	e00f      	b.n	8003d74 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003d54:	f7fe fa5e 	bl	8002214 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b31      	cmp	r3, #49	; 0x31
 8003d60:	d908      	bls.n	8003d74 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e00c      	b.n	8003d8e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e8      	bne.n	8003d54 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003da6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e267      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x108>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e242      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x74>
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b70      	ldr	r3, [pc, #448]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6f      	ldr	r2, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6c      	ldr	r2, [pc, #432]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a68      	ldr	r2, [pc, #416]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b66      	ldr	r3, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a65      	ldr	r2, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe f9d0 	bl	8002214 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe f9cc 	bl	8002214 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e207      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe f9bc 	bl	8002214 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe f9b8 	bl	8002214 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1f3      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xe8>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1c7      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4937      	ldr	r1, [pc, #220]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b34      	ldr	r3, [pc, #208]	; (8003ffc <HAL_RCC_OscConfig+0x244>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fe f971 	bl	8002214 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fe f96d 	bl	8002214 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1a8      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b28      	ldr	r3, [pc, #160]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4925      	ldr	r1, [pc, #148]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b24      	ldr	r3, [pc, #144]	; (8003ffc <HAL_RCC_OscConfig+0x244>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe f950 	bl	8002214 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fe f94c 	bl	8002214 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e187      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d036      	beq.n	8004010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_RCC_OscConfig+0x248>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe f930 	bl	8002214 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fe f92c 	bl	8002214 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e167      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fd6:	e01b      	b.n	8004010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_OscConfig+0x248>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fe f919 	bl	8002214 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	e00e      	b.n	8004004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fe f915 	bl	8002214 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d907      	bls.n	8004004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e150      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	42470000 	.word	0x42470000
 8004000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1ea      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8097 	beq.w	800414c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004022:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	4b7d      	ldr	r3, [pc, #500]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a7c      	ldr	r2, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
 800403e:	4b7a      	ldr	r3, [pc, #488]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b77      	ldr	r3, [pc, #476]	; (800422c <HAL_RCC_OscConfig+0x474>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b74      	ldr	r3, [pc, #464]	; (800422c <HAL_RCC_OscConfig+0x474>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a73      	ldr	r2, [pc, #460]	; (800422c <HAL_RCC_OscConfig+0x474>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fe f8d5 	bl	8002214 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fe f8d1 	bl	8002214 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e10c      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b6a      	ldr	r3, [pc, #424]	; (800422c <HAL_RCC_OscConfig+0x474>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x2ea>
 8004094:	4b64      	ldr	r3, [pc, #400]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a63      	ldr	r2, [pc, #396]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	e01c      	b.n	80040dc <HAL_RCC_OscConfig+0x324>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x30c>
 80040aa:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a5e      	ldr	r2, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040b0:	f043 0304 	orr.w	r3, r3, #4
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	4b5c      	ldr	r3, [pc, #368]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a5b      	ldr	r2, [pc, #364]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0x324>
 80040c4:	4b58      	ldr	r3, [pc, #352]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	4b55      	ldr	r3, [pc, #340]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	4a54      	ldr	r2, [pc, #336]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 0304 	bic.w	r3, r3, #4
 80040da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e4:	f7fe f896 	bl	8002214 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ec:	f7fe f892 	bl	8002214 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e0cb      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	4b49      	ldr	r3, [pc, #292]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0ee      	beq.n	80040ec <HAL_RCC_OscConfig+0x334>
 800410e:	e014      	b.n	800413a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004110:	f7fe f880 	bl	8002214 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004116:	e00a      	b.n	800412e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004118:	f7fe f87c 	bl	8002214 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0b5      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412e:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ee      	bne.n	8004118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	4a38      	ldr	r2, [pc, #224]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a1 	beq.w	8004298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	2b08      	cmp	r3, #8
 8004160:	d05c      	beq.n	800421c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d141      	bne.n	80041ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_OscConfig+0x478>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe f850 	bl	8002214 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe f84c 	bl	8002214 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e087      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	491b      	ldr	r1, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x478>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fe f825 	bl	8002214 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe f821 	bl	8002214 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e05c      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x416>
 80041ec:	e054      	b.n	8004298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x478>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe f80e 	bl	8002214 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe f80a 	bl	8002214 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e045      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x470>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x444>
 800421a:	e03d      	b.n	8004298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e038      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000
 8004230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_RCC_OscConfig+0x4ec>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d028      	beq.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d121      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d11a      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426c:	4293      	cmp	r3, r2
 800426e:	d111      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	3b01      	subs	r3, #1
 800427e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d107      	bne.n	8004294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0cc      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b68      	ldr	r3, [pc, #416]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d90c      	bls.n	80042e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b65      	ldr	r3, [pc, #404]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	b2d2      	uxtb	r2, r2
 80042d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b63      	ldr	r3, [pc, #396]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0b8      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d020      	beq.n	8004332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042fc:	4b59      	ldr	r3, [pc, #356]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a58      	ldr	r2, [pc, #352]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004314:	4b53      	ldr	r3, [pc, #332]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	4a52      	ldr	r2, [pc, #328]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800431e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004320:	4b50      	ldr	r3, [pc, #320]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	494d      	ldr	r1, [pc, #308]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d044      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b47      	ldr	r3, [pc, #284]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d119      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d003      	beq.n	8004366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004362:	2b03      	cmp	r3, #3
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	4b3f      	ldr	r3, [pc, #252]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e06f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e067      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4934      	ldr	r1, [pc, #208]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004398:	f7fd ff3c 	bl	8002214 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fd ff38 	bl	8002214 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04f      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d20c      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043de:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d001      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e032      	b.n	8004456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4916      	ldr	r1, [pc, #88]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441a:	4b12      	ldr	r3, [pc, #72]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	490e      	ldr	r1, [pc, #56]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800442e:	f000 f821 	bl	8004474 <HAL_RCC_GetSysClockFreq>
 8004432:	4602      	mov	r2, r0
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	490a      	ldr	r1, [pc, #40]	; (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	5ccb      	ldrb	r3, [r1, r3]
 8004442:	fa22 f303 	lsr.w	r3, r2, r3
 8004446:	4a09      	ldr	r2, [pc, #36]	; (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fb24 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023c00 	.word	0x40023c00
 8004464:	40023800 	.word	0x40023800
 8004468:	0801bc2c 	.word	0x0801bc2c
 800446c:	20000000 	.word	0x20000000
 8004470:	20000004 	.word	0x20000004

08004474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b094      	sub	sp, #80	; 0x50
 800447a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
 8004480:	2300      	movs	r3, #0
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004484:	2300      	movs	r3, #0
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448c:	4b79      	ldr	r3, [pc, #484]	; (8004674 <HAL_RCC_GetSysClockFreq+0x200>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d00d      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004498:	2b08      	cmp	r3, #8
 800449a:	f200 80e1 	bhi.w	8004660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x34>
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x3a>
 80044a6:	e0db      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b73      	ldr	r3, [pc, #460]	; (8004678 <HAL_RCC_GetSysClockFreq+0x204>)
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044ac:	e0db      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ae:	4b73      	ldr	r3, [pc, #460]	; (800467c <HAL_RCC_GetSysClockFreq+0x208>)
 80044b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044b2:	e0d8      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b4:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044be:	4b6d      	ldr	r3, [pc, #436]	; (8004674 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d063      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_GetSysClockFreq+0x200>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	2200      	movs	r2, #0
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	633b      	str	r3, [r7, #48]	; 0x30
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
 80044e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	0159      	lsls	r1, r3, #5
 80044f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f8:	0150      	lsls	r0, r2, #5
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4621      	mov	r1, r4
 8004500:	1a51      	subs	r1, r2, r1
 8004502:	6139      	str	r1, [r7, #16]
 8004504:	4629      	mov	r1, r5
 8004506:	eb63 0301 	sbc.w	r3, r3, r1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004518:	4659      	mov	r1, fp
 800451a:	018b      	lsls	r3, r1, #6
 800451c:	4651      	mov	r1, sl
 800451e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004522:	4651      	mov	r1, sl
 8004524:	018a      	lsls	r2, r1, #6
 8004526:	4651      	mov	r1, sl
 8004528:	ebb2 0801 	subs.w	r8, r2, r1
 800452c:	4659      	mov	r1, fp
 800452e:	eb63 0901 	sbc.w	r9, r3, r1
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800453e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004546:	4690      	mov	r8, r2
 8004548:	4699      	mov	r9, r3
 800454a:	4623      	mov	r3, r4
 800454c:	eb18 0303 	adds.w	r3, r8, r3
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	462b      	mov	r3, r5
 8004554:	eb49 0303 	adc.w	r3, r9, r3
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004566:	4629      	mov	r1, r5
 8004568:	024b      	lsls	r3, r1, #9
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004570:	4621      	mov	r1, r4
 8004572:	024a      	lsls	r2, r1, #9
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457a:	2200      	movs	r2, #0
 800457c:	62bb      	str	r3, [r7, #40]	; 0x28
 800457e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004584:	f7fb fe9c 	bl	80002c0 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004590:	e058      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004592:	4b38      	ldr	r3, [pc, #224]	; (8004674 <HAL_RCC_GetSysClockFreq+0x200>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	2200      	movs	r2, #0
 800459a:	4618      	mov	r0, r3
 800459c:	4611      	mov	r1, r2
 800459e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045a2:	623b      	str	r3, [r7, #32]
 80045a4:	2300      	movs	r3, #0
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	f04f 0000 	mov.w	r0, #0
 80045b4:	f04f 0100 	mov.w	r1, #0
 80045b8:	0159      	lsls	r1, r3, #5
 80045ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045be:	0150      	lsls	r0, r2, #5
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4641      	mov	r1, r8
 80045c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045ca:	4649      	mov	r1, r9
 80045cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045e4:	ebb2 040a 	subs.w	r4, r2, sl
 80045e8:	eb63 050b 	sbc.w	r5, r3, fp
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	00eb      	lsls	r3, r5, #3
 80045f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045fa:	00e2      	lsls	r2, r4, #3
 80045fc:	4614      	mov	r4, r2
 80045fe:	461d      	mov	r5, r3
 8004600:	4643      	mov	r3, r8
 8004602:	18e3      	adds	r3, r4, r3
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	464b      	mov	r3, r9
 8004608:	eb45 0303 	adc.w	r3, r5, r3
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800461a:	4629      	mov	r1, r5
 800461c:	028b      	lsls	r3, r1, #10
 800461e:	4621      	mov	r1, r4
 8004620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004624:	4621      	mov	r1, r4
 8004626:	028a      	lsls	r2, r1, #10
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462e:	2200      	movs	r2, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	61fa      	str	r2, [r7, #28]
 8004634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004638:	f7fb fe42 	bl	80002c0 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_GetSysClockFreq+0x200>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	3301      	adds	r3, #1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800465e:	e002      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetSysClockFreq+0x204>)
 8004662:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004668:	4618      	mov	r0, r3
 800466a:	3750      	adds	r7, #80	; 0x50
 800466c:	46bd      	mov	sp, r7
 800466e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	0801bc3c 	.word	0x0801bc3c

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c4:	f7ff ffdc 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0b5b      	lsrs	r3, r3, #13
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0801bc3c 	.word	0x0801bc3c

080046e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	220f      	movs	r2, #15
 80046f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCC_GetClockConfig+0x5c>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0203 	and.w	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_RCC_GetClockConfig+0x5c>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_RCC_GetClockConfig+0x5c>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_RCC_GetClockConfig+0x5c>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_RCC_GetClockConfig+0x60>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 020f 	and.w	r2, r3, #15
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	40023c00 	.word	0x40023c00

0800474c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e07b      	b.n	8004856 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800476e:	d009      	beq.n	8004784 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	61da      	str	r2, [r3, #28]
 8004776:	e005      	b.n	8004784 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd f8a4 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004808:	ea42 0103 	orr.w	r1, r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f003 0104 	and.w	r1, r3, #4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	f003 0210 	and.w	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69da      	ldr	r2, [r3, #28]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004844:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b088      	sub	sp, #32
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_SPI_Transmit+0x22>
 800487c:	2302      	movs	r3, #2
 800487e:	e126      	b.n	8004ace <HAL_SPI_Transmit+0x270>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004888:	f7fd fcc4 	bl	8002214 <HAL_GetTick>
 800488c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800489e:	2302      	movs	r3, #2
 80048a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048a2:	e10b      	b.n	8004abc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Transmit+0x52>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048b4:	e102      	b.n	8004abc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2203      	movs	r2, #3
 80048ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fc:	d10f      	bne.n	800491e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800491c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d007      	beq.n	800493c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d14b      	bne.n	80049de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_Transmit+0xf6>
 800494e:	8afb      	ldrh	r3, [r7, #22]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d13e      	bne.n	80049d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004978:	e02b      	b.n	80049d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d112      	bne.n	80049ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	1c9a      	adds	r2, r3, #2
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80049ac:	e011      	b.n	80049d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ae:	f7fd fc31 	bl	8002214 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d803      	bhi.n	80049c6 <HAL_SPI_Transmit+0x168>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_Transmit+0x16e>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049d0:	e074      	b.n	8004abc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ce      	bne.n	800497a <HAL_SPI_Transmit+0x11c>
 80049dc:	e04c      	b.n	8004a78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Transmit+0x18e>
 80049e6:	8afb      	ldrh	r3, [r7, #22]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d140      	bne.n	8004a6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a12:	e02c      	b.n	8004a6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d113      	bne.n	8004a4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a48:	e011      	b.n	8004a6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a4a:	f7fd fbe3 	bl	8002214 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d803      	bhi.n	8004a62 <HAL_SPI_Transmit+0x204>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d102      	bne.n	8004a68 <HAL_SPI_Transmit+0x20a>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a6c:	e026      	b.n	8004abc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1cd      	bne.n	8004a14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f8b3 	bl	8004be8 <SPI_EndRxTxTransaction>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e000      	b.n	8004abc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004aba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ae8:	f7fd fb94 	bl	8002214 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004af8:	f7fd fb8c 	bl	8002214 <HAL_GetTick>
 8004afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	015b      	lsls	r3, r3, #5
 8004b04:	0d1b      	lsrs	r3, r3, #20
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0e:	e054      	b.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d050      	beq.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b18:	f7fd fb7c 	bl	8002214 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d902      	bls.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d13d      	bne.n	8004baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d111      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b50:	d004      	beq.n	8004b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d107      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b74:	d10f      	bne.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e017      	b.n	8004bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d19b      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <SPI_EndRxTxTransaction+0x7c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <SPI_EndRxTxTransaction+0x80>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0d5b      	lsrs	r3, r3, #21
 8004c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c12:	d112      	bne.n	8004c3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ff5a 	bl	8004ad8 <SPI_WaitFlagStateUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00f      	b.n	8004c5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b80      	cmp	r3, #128	; 0x80
 8004c52:	d0f2      	beq.n	8004c3a <SPI_EndRxTxTransaction+0x52>
 8004c54:	e000      	b.n	8004c58 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c56:	bf00      	nop
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000000 	.word	0x20000000
 8004c68:	165e9f81 	.word	0x165e9f81

08004c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e041      	b.n	8004d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fe92 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f000 fb7a 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d001      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e04e      	b.n	8004dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d01d      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x80>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d111      	bne.n	8004db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b06      	cmp	r3, #6
 8004d9c:	d010      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dae:	e007      	b.n	8004dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40001800 	.word	0x40001800

08004dec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_TIM_Base_Stop_IT+0x48>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a1a      	ldr	r2, [r3, #32]
 8004e1a:	f240 4344 	movw	r3, #1092	; 0x444
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <HAL_TIM_Base_Stop_IT+0x48>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e041      	b.n	8004ee0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f839 	bl	8004ee8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f000 fa8b 	bl	80053a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0202 	mvn.w	r2, #2
 8004f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa11 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa03 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fa14 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0204 	mvn.w	r2, #4
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9e7 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9d9 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f9ea 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0208 	mvn.w	r2, #8
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9bd 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9af 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9c0 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b10      	cmp	r3, #16
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b10      	cmp	r3, #16
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0210 	mvn.w	r2, #16
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2208      	movs	r2, #8
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f993 	bl	8005366 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f985 	bl	8005352 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f996 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10e      	bne.n	8005080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0201 	mvn.w	r2, #1
 8005078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc f872 	bl	8001164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d10e      	bne.n	80050ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d107      	bne.n	80050ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fcec 	bl	8005a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f95b 	bl	800538e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0220 	mvn.w	r2, #32
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fcb6 	bl	8005a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005126:	2302      	movs	r3, #2
 8005128:	e048      	b.n	80051bc <HAL_TIM_OC_ConfigChannel+0xb0>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	d839      	bhi.n	80051ac <HAL_TIM_OC_ConfigChannel+0xa0>
 8005138:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <HAL_TIM_OC_ConfigChannel+0x34>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005175 	.word	0x08005175
 8005144:	080051ad 	.word	0x080051ad
 8005148:	080051ad 	.word	0x080051ad
 800514c:	080051ad 	.word	0x080051ad
 8005150:	08005183 	.word	0x08005183
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051ad 	.word	0x080051ad
 800515c:	080051ad 	.word	0x080051ad
 8005160:	08005191 	.word	0x08005191
 8005164:	080051ad 	.word	0x080051ad
 8005168:	080051ad 	.word	0x080051ad
 800516c:	080051ad 	.word	0x080051ad
 8005170:	0800519f 	.word	0x0800519f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9b2 	bl	80054e4 <TIM_OC1_SetConfig>
      break;
 8005180:	e017      	b.n	80051b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fa1b 	bl	80055c4 <TIM_OC2_SetConfig>
      break;
 800518e:	e010      	b.n	80051b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fa8a 	bl	80056b0 <TIM_OC3_SetConfig>
      break;
 800519c:	e009      	b.n	80051b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 faf7 	bl	8005798 <TIM_OC4_SetConfig>
      break;
 80051aa:	e002      	b.n	80051b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	75fb      	strb	r3, [r7, #23]
      break;
 80051b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_ConfigClockSource+0x1c>
 80051dc:	2302      	movs	r3, #2
 80051de:	e0b4      	b.n	800534a <HAL_TIM_ConfigClockSource+0x186>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005218:	d03e      	beq.n	8005298 <HAL_TIM_ConfigClockSource+0xd4>
 800521a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521e:	f200 8087 	bhi.w	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	f000 8086 	beq.w	8005336 <HAL_TIM_ConfigClockSource+0x172>
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522e:	d87f      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b70      	cmp	r3, #112	; 0x70
 8005232:	d01a      	beq.n	800526a <HAL_TIM_ConfigClockSource+0xa6>
 8005234:	2b70      	cmp	r3, #112	; 0x70
 8005236:	d87b      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b60      	cmp	r3, #96	; 0x60
 800523a:	d050      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x11a>
 800523c:	2b60      	cmp	r3, #96	; 0x60
 800523e:	d877      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b50      	cmp	r3, #80	; 0x50
 8005242:	d03c      	beq.n	80052be <HAL_TIM_ConfigClockSource+0xfa>
 8005244:	2b50      	cmp	r3, #80	; 0x50
 8005246:	d873      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d058      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x13a>
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d86f      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005250:	2b30      	cmp	r3, #48	; 0x30
 8005252:	d064      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15a>
 8005254:	2b30      	cmp	r3, #48	; 0x30
 8005256:	d86b      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b20      	cmp	r3, #32
 800525a:	d060      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	2b20      	cmp	r3, #32
 800525e:	d867      	bhi.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05c      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15a>
 8005264:	2b10      	cmp	r3, #16
 8005266:	d05a      	beq.n	800531e <HAL_TIM_ConfigClockSource+0x15a>
 8005268:	e062      	b.n	8005330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6899      	ldr	r1, [r3, #8]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f000 fb5d 	bl	8005938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800528c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	609a      	str	r2, [r3, #8]
      break;
 8005296:	e04f      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6818      	ldr	r0, [r3, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	6899      	ldr	r1, [r3, #8]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f000 fb46 	bl	8005938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ba:	609a      	str	r2, [r3, #8]
      break;
 80052bc:	e03c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 faba 	bl	8005844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2150      	movs	r1, #80	; 0x50
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fb13 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80052dc:	e02c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	6859      	ldr	r1, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f000 fad9 	bl	80058a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2160      	movs	r1, #96	; 0x60
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fb03 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 80052fc:	e01c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	461a      	mov	r2, r3
 800530c:	f000 fa9a 	bl	8005844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	4618      	mov	r0, r3
 8005318:	f000 faf3 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 800531c:	e00c      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f000 faea 	bl	8005902 <TIM_ITRx_SetConfig>
      break;
 800532e:	e003      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e000      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <TIM_Base_SetConfig+0x114>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3d      	ldr	r2, [pc, #244]	; (80054bc <TIM_Base_SetConfig+0x118>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a3c      	ldr	r2, [pc, #240]	; (80054c0 <TIM_Base_SetConfig+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a3b      	ldr	r2, [pc, #236]	; (80054c4 <TIM_Base_SetConfig+0x120>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3a      	ldr	r2, [pc, #232]	; (80054c8 <TIM_Base_SetConfig+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2f      	ldr	r2, [pc, #188]	; (80054b8 <TIM_Base_SetConfig+0x114>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02b      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d027      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2c      	ldr	r2, [pc, #176]	; (80054bc <TIM_Base_SetConfig+0x118>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d023      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2b      	ldr	r2, [pc, #172]	; (80054c0 <TIM_Base_SetConfig+0x11c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01f      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <TIM_Base_SetConfig+0x120>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01b      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <TIM_Base_SetConfig+0x124>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d017      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a28      	ldr	r2, [pc, #160]	; (80054cc <TIM_Base_SetConfig+0x128>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a27      	ldr	r2, [pc, #156]	; (80054d0 <TIM_Base_SetConfig+0x12c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d00f      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a26      	ldr	r2, [pc, #152]	; (80054d4 <TIM_Base_SetConfig+0x130>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00b      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <TIM_Base_SetConfig+0x134>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d007      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a24      	ldr	r2, [pc, #144]	; (80054dc <TIM_Base_SetConfig+0x138>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <TIM_Base_SetConfig+0x13c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d108      	bne.n	8005468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <TIM_Base_SetConfig+0x114>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_Base_SetConfig+0xf8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <TIM_Base_SetConfig+0x124>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d103      	bne.n	80054a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	615a      	str	r2, [r3, #20]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	40001800 	.word	0x40001800
 80054dc:	40001c00 	.word	0x40001c00
 80054e0:	40002000 	.word	0x40002000

080054e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 0302 	bic.w	r3, r3, #2
 800552c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <TIM_OC1_SetConfig+0xd8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC1_SetConfig+0x64>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <TIM_OC1_SetConfig+0xdc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10c      	bne.n	8005562 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0308 	bic.w	r3, r3, #8
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0304 	bic.w	r3, r3, #4
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <TIM_OC1_SetConfig+0xd8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_OC1_SetConfig+0x8e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a14      	ldr	r2, [pc, #80]	; (80055c0 <TIM_OC1_SetConfig+0xdc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d111      	bne.n	8005596 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0210 	bic.w	r2, r3, #16
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0320 	bic.w	r3, r3, #32
 800560e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <TIM_OC2_SetConfig+0xe4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_OC2_SetConfig+0x68>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a21      	ldr	r2, [pc, #132]	; (80056ac <TIM_OC2_SetConfig+0xe8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10d      	bne.n	8005648 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005646:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <TIM_OC2_SetConfig+0xe4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC2_SetConfig+0x94>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a16      	ldr	r2, [pc, #88]	; (80056ac <TIM_OC2_SetConfig+0xe8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d113      	bne.n	8005680 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800565e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	621a      	str	r2, [r3, #32]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40010400 	.word	0x40010400

080056b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a21      	ldr	r2, [pc, #132]	; (8005790 <TIM_OC3_SetConfig+0xe0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_OC3_SetConfig+0x66>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <TIM_OC3_SetConfig+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10d      	bne.n	8005732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800571c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a16      	ldr	r2, [pc, #88]	; (8005790 <TIM_OC3_SetConfig+0xe0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC3_SetConfig+0x92>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <TIM_OC3_SetConfig+0xe4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d113      	bne.n	800576a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	4313      	orrs	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	621a      	str	r2, [r3, #32]
}
 8005784:	bf00      	nop
 8005786:	371c      	adds	r7, #28
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	40010000 	.word	0x40010000
 8005794:	40010400 	.word	0x40010400

08005798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	031b      	lsls	r3, r3, #12
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a12      	ldr	r2, [pc, #72]	; (800583c <TIM_OC4_SetConfig+0xa4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC4_SetConfig+0x68>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a11      	ldr	r2, [pc, #68]	; (8005840 <TIM_OC4_SetConfig+0xa8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d109      	bne.n	8005814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	019b      	lsls	r3, r3, #6
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0201 	bic.w	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 030a 	bic.w	r3, r3, #10
 8005880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b087      	sub	sp, #28
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f023 0210 	bic.w	r2, r3, #16
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	031b      	lsls	r3, r3, #12
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	f043 0307 	orr.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	431a      	orrs	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e05a      	b.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d022      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d01d      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d018      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1a      	ldr	r2, [pc, #104]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10c      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40010400 	.word	0x40010400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40001800 	.word	0x40001800

08005a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e03f      	b.n	8005b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb ffa4 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f929 	bl	8005d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b08a      	sub	sp, #40	; 0x28
 8005b36:	af02      	add	r7, sp, #8
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d17c      	bne.n	8005c4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_UART_Transmit+0x2c>
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e075      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Transmit+0x3e>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e06e      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2221      	movs	r2, #33	; 0x21
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b86:	f7fc fb45 	bl	8002214 <HAL_GetTick>
 8005b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba0:	d108      	bne.n	8005bb4 <HAL_UART_Transmit+0x82>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e003      	b.n	8005bbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bc4:	e02a      	b.n	8005c1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f840 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e036      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e007      	b.n	8005c0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1cf      	bne.n	8005bc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2140      	movs	r1, #64	; 0x40
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f810 	bl	8005c56 <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e006      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b090      	sub	sp, #64	; 0x40
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	4613      	mov	r3, r2
 8005c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c66:	e050      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d04c      	beq.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c76:	f7fc facd 	bl	8002214 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d241      	bcs.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ca6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cda:	623a      	str	r2, [r7, #32]
 8005cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	69f9      	ldr	r1, [r7, #28]
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e5      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e00f      	b.n	8005d2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d09f      	beq.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3740      	adds	r7, #64	; 0x40
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d38:	b0c0      	sub	sp, #256	; 0x100
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	ea40 0301 	orr.w	r3, r0, r1
 8005d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d8c:	f021 010c 	bic.w	r1, r1, #12
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	6999      	ldr	r1, [r3, #24]
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	ea40 0301 	orr.w	r3, r0, r1
 8005dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b8f      	ldr	r3, [pc, #572]	; (8006000 <UART_SetConfig+0x2cc>)
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d005      	beq.n	8005dd4 <UART_SetConfig+0xa0>
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <UART_SetConfig+0x2d0>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d104      	bne.n	8005dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe fc74 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ddc:	e003      	b.n	8005de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dde:	f7fe fc5b 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 8005de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df0:	f040 810c 	bne.w	800600c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	1891      	adds	r1, r2, r2
 8005e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e0e:	415b      	adcs	r3, r3
 8005e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e16:	4621      	mov	r1, r4
 8005e18:	eb12 0801 	adds.w	r8, r2, r1
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb43 0901 	adc.w	r9, r3, r1
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e36:	4690      	mov	r8, r2
 8005e38:	4699      	mov	r9, r3
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	eb18 0303 	adds.w	r3, r8, r3
 8005e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e44:	462b      	mov	r3, r5
 8005e46:	eb49 0303 	adc.w	r3, r9, r3
 8005e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e62:	460b      	mov	r3, r1
 8005e64:	18db      	adds	r3, r3, r3
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50
 8005e68:	4613      	mov	r3, r2
 8005e6a:	eb42 0303 	adc.w	r3, r2, r3
 8005e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e78:	f7fa fa22 	bl	80002c0 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4b61      	ldr	r3, [pc, #388]	; (8006008 <UART_SetConfig+0x2d4>)
 8005e82:	fba3 2302 	umull	r2, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	011c      	lsls	r4, r3, #4
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005eac:	4641      	mov	r1, r8
 8005eae:	eb12 0a01 	adds.w	sl, r2, r1
 8005eb2:	4649      	mov	r1, r9
 8005eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ecc:	4692      	mov	sl, r2
 8005ece:	469b      	mov	fp, r3
 8005ed0:	4643      	mov	r3, r8
 8005ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	18db      	adds	r3, r3, r3
 8005efc:	643b      	str	r3, [r7, #64]	; 0x40
 8005efe:	4613      	mov	r3, r2
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f0e:	f7fa f9d7 	bl	80002c0 <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <UART_SetConfig+0x2d4>)
 8005f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	2264      	movs	r2, #100	; 0x64
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	1acb      	subs	r3, r1, r3
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f2e:	4b36      	ldr	r3, [pc, #216]	; (8006008 <UART_SetConfig+0x2d4>)
 8005f30:	fba3 2302 	umull	r2, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f3c:	441c      	add	r4, r3
 8005f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	1891      	adds	r1, r2, r2
 8005f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f58:	415b      	adcs	r3, r3
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f60:	4641      	mov	r1, r8
 8005f62:	1851      	adds	r1, r2, r1
 8005f64:	6339      	str	r1, [r7, #48]	; 0x30
 8005f66:	4649      	mov	r1, r9
 8005f68:	414b      	adcs	r3, r1
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f78:	4659      	mov	r1, fp
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4651      	mov	r1, sl
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4642      	mov	r2, r8
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f94:	464b      	mov	r3, r9
 8005f96:	460a      	mov	r2, r1
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	18db      	adds	r3, r3, r3
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fba:	4613      	mov	r3, r2
 8005fbc:	eb42 0303 	adc.w	r3, r2, r3
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fca:	f7fa f979 	bl	80002c0 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <UART_SetConfig+0x2d4>)
 8005fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	2164      	movs	r1, #100	; 0x64
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	3332      	adds	r3, #50	; 0x32
 8005fe6:	4a08      	ldr	r2, [pc, #32]	; (8006008 <UART_SetConfig+0x2d4>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4422      	add	r2, r4
 8005ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ffc:	e105      	b.n	800620a <UART_SetConfig+0x4d6>
 8005ffe:	bf00      	nop
 8006000:	40011000 	.word	0x40011000
 8006004:	40011400 	.word	0x40011400
 8006008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800600c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800601a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	1891      	adds	r1, r2, r2
 8006024:	6239      	str	r1, [r7, #32]
 8006026:	415b      	adcs	r3, r3
 8006028:	627b      	str	r3, [r7, #36]	; 0x24
 800602a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800602e:	4641      	mov	r1, r8
 8006030:	1854      	adds	r4, r2, r1
 8006032:	4649      	mov	r1, r9
 8006034:	eb43 0501 	adc.w	r5, r3, r1
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	00eb      	lsls	r3, r5, #3
 8006042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006046:	00e2      	lsls	r2, r4, #3
 8006048:	4614      	mov	r4, r2
 800604a:	461d      	mov	r5, r3
 800604c:	4643      	mov	r3, r8
 800604e:	18e3      	adds	r3, r4, r3
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006054:	464b      	mov	r3, r9
 8006056:	eb45 0303 	adc.w	r3, r5, r3
 800605a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800606a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800607a:	4629      	mov	r1, r5
 800607c:	008b      	lsls	r3, r1, #2
 800607e:	4621      	mov	r1, r4
 8006080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006084:	4621      	mov	r1, r4
 8006086:	008a      	lsls	r2, r1, #2
 8006088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800608c:	f7fa f918 	bl	80002c0 <__aeabi_uldivmod>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	4b60      	ldr	r3, [pc, #384]	; (8006218 <UART_SetConfig+0x4e4>)
 8006096:	fba3 2302 	umull	r2, r3, r3, r2
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	011c      	lsls	r4, r3, #4
 800609e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80060ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	61b9      	str	r1, [r7, #24]
 80060b8:	415b      	adcs	r3, r3
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c0:	4641      	mov	r1, r8
 80060c2:	1851      	adds	r1, r2, r1
 80060c4:	6139      	str	r1, [r7, #16]
 80060c6:	4649      	mov	r1, r9
 80060c8:	414b      	adcs	r3, r1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060d8:	4659      	mov	r1, fp
 80060da:	00cb      	lsls	r3, r1, #3
 80060dc:	4651      	mov	r1, sl
 80060de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e2:	4651      	mov	r1, sl
 80060e4:	00ca      	lsls	r2, r1, #3
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	4642      	mov	r2, r8
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060f4:	464b      	mov	r3, r9
 80060f6:	460a      	mov	r2, r1
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	67bb      	str	r3, [r7, #120]	; 0x78
 800610a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006118:	4649      	mov	r1, r9
 800611a:	008b      	lsls	r3, r1, #2
 800611c:	4641      	mov	r1, r8
 800611e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006122:	4641      	mov	r1, r8
 8006124:	008a      	lsls	r2, r1, #2
 8006126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800612a:	f7fa f8c9 	bl	80002c0 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4b39      	ldr	r3, [pc, #228]	; (8006218 <UART_SetConfig+0x4e4>)
 8006134:	fba3 1302 	umull	r1, r3, r3, r2
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	2164      	movs	r1, #100	; 0x64
 800613c:	fb01 f303 	mul.w	r3, r1, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	3332      	adds	r3, #50	; 0x32
 8006146:	4a34      	ldr	r2, [pc, #208]	; (8006218 <UART_SetConfig+0x4e4>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006152:	441c      	add	r4, r3
 8006154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006158:	2200      	movs	r2, #0
 800615a:	673b      	str	r3, [r7, #112]	; 0x70
 800615c:	677a      	str	r2, [r7, #116]	; 0x74
 800615e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006162:	4642      	mov	r2, r8
 8006164:	464b      	mov	r3, r9
 8006166:	1891      	adds	r1, r2, r2
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	415b      	adcs	r3, r3
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006172:	4641      	mov	r1, r8
 8006174:	1851      	adds	r1, r2, r1
 8006176:	6039      	str	r1, [r7, #0]
 8006178:	4649      	mov	r1, r9
 800617a:	414b      	adcs	r3, r1
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800618a:	4659      	mov	r1, fp
 800618c:	00cb      	lsls	r3, r1, #3
 800618e:	4651      	mov	r1, sl
 8006190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006194:	4651      	mov	r1, sl
 8006196:	00ca      	lsls	r2, r1, #3
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	4603      	mov	r3, r0
 800619e:	4642      	mov	r2, r8
 80061a0:	189b      	adds	r3, r3, r2
 80061a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80061a4:	464b      	mov	r3, r9
 80061a6:	460a      	mov	r2, r1
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	663b      	str	r3, [r7, #96]	; 0x60
 80061b8:	667a      	str	r2, [r7, #100]	; 0x64
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061c6:	4649      	mov	r1, r9
 80061c8:	008b      	lsls	r3, r1, #2
 80061ca:	4641      	mov	r1, r8
 80061cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061d0:	4641      	mov	r1, r8
 80061d2:	008a      	lsls	r2, r1, #2
 80061d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061d8:	f7fa f872 	bl	80002c0 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <UART_SetConfig+0x4e4>)
 80061e2:	fba3 1302 	umull	r1, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2164      	movs	r1, #100	; 0x64
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	3332      	adds	r3, #50	; 0x32
 80061f4:	4a08      	ldr	r2, [pc, #32]	; (8006218 <UART_SetConfig+0x4e4>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	f003 020f 	and.w	r2, r3, #15
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4422      	add	r2, r4
 8006208:	609a      	str	r2, [r3, #8]
}
 800620a:	bf00      	nop
 800620c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006210:	46bd      	mov	sp, r7
 8006212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006216:	bf00      	nop
 8006218:	51eb851f 	.word	0x51eb851f

0800621c <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8006220:	2201      	movs	r2, #1
 8006222:	2110      	movs	r1, #16
 8006224:	480b      	ldr	r0, [pc, #44]	; (8006254 <ssd1306_Reset+0x38>)
 8006226:	f7fd fd37 	bl	8003c98 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800622a:	2200      	movs	r2, #0
 800622c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006230:	4809      	ldr	r0, [pc, #36]	; (8006258 <ssd1306_Reset+0x3c>)
 8006232:	f7fd fd31 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8006236:	200a      	movs	r0, #10
 8006238:	f7fb fff8 	bl	800222c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 800623c:	2201      	movs	r2, #1
 800623e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006242:	4805      	ldr	r0, [pc, #20]	; (8006258 <ssd1306_Reset+0x3c>)
 8006244:	f7fd fd28 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8006248:	200a      	movs	r0, #10
 800624a:	f7fb ffef 	bl	800222c <HAL_Delay>
}
 800624e:	bf00      	nop
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40020000 	.word	0x40020000
 8006258:	40021400 	.word	0x40021400

0800625c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8006266:	2200      	movs	r2, #0
 8006268:	2110      	movs	r1, #16
 800626a:	480c      	ldr	r0, [pc, #48]	; (800629c <ssd1306_WriteCommand+0x40>)
 800626c:	f7fd fd14 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006276:	480a      	ldr	r0, [pc, #40]	; (80062a0 <ssd1306_WriteCommand+0x44>)
 8006278:	f7fd fd0e 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, 250);
 800627c:	1df9      	adds	r1, r7, #7
 800627e:	23fa      	movs	r3, #250	; 0xfa
 8006280:	2201      	movs	r2, #1
 8006282:	4808      	ldr	r0, [pc, #32]	; (80062a4 <ssd1306_WriteCommand+0x48>)
 8006284:	f7fe faeb 	bl	800485e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8006288:	2201      	movs	r2, #1
 800628a:	2110      	movs	r1, #16
 800628c:	4803      	ldr	r0, [pc, #12]	; (800629c <ssd1306_WriteCommand+0x40>)
 800628e:	f7fd fd03 	bl	8003c98 <HAL_GPIO_WritePin>
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40020000 	.word	0x40020000
 80062a0:	40021400 	.word	0x40021400
 80062a4:	20000384 	.word	0x20000384

080062a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80062b2:	2200      	movs	r2, #0
 80062b4:	2110      	movs	r1, #16
 80062b6:	480c      	ldr	r0, [pc, #48]	; (80062e8 <ssd1306_WriteData+0x40>)
 80062b8:	f7fd fcee 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80062bc:	2201      	movs	r2, #1
 80062be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062c2:	480a      	ldr	r0, [pc, #40]	; (80062ec <ssd1306_WriteData+0x44>)
 80062c4:	f7fd fce8 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, 250);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	23fa      	movs	r3, #250	; 0xfa
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4807      	ldr	r0, [pc, #28]	; (80062f0 <ssd1306_WriteData+0x48>)
 80062d2:	f7fe fac4 	bl	800485e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80062d6:	2201      	movs	r2, #1
 80062d8:	2110      	movs	r1, #16
 80062da:	4803      	ldr	r0, [pc, #12]	; (80062e8 <ssd1306_WriteData+0x40>)
 80062dc:	f7fd fcdc 	bl	8003c98 <HAL_GPIO_WritePin>
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40020000 	.word	0x40020000
 80062ec:	40021400 	.word	0x40021400
 80062f0:	20000384 	.word	0x20000384

080062f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80062f8:	f7ff ff90 	bl	800621c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80062fc:	2064      	movs	r0, #100	; 0x64
 80062fe:	f7fb ff95 	bl	800222c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006302:	2000      	movs	r0, #0
 8006304:	f000 fa4c 	bl	80067a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006308:	2020      	movs	r0, #32
 800630a:	f7ff ffa7 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800630e:	2000      	movs	r0, #0
 8006310:	f7ff ffa4 	bl	800625c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006314:	20b0      	movs	r0, #176	; 0xb0
 8006316:	f7ff ffa1 	bl	800625c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800631a:	20c8      	movs	r0, #200	; 0xc8
 800631c:	f7ff ff9e 	bl	800625c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006320:	2000      	movs	r0, #0
 8006322:	f7ff ff9b 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006326:	2010      	movs	r0, #16
 8006328:	f7ff ff98 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800632c:	2040      	movs	r0, #64	; 0x40
 800632e:	f7ff ff95 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006332:	20ff      	movs	r0, #255	; 0xff
 8006334:	f000 fa20 	bl	8006778 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006338:	20a1      	movs	r0, #161	; 0xa1
 800633a:	f7ff ff8f 	bl	800625c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800633e:	20a6      	movs	r0, #166	; 0xa6
 8006340:	f7ff ff8c 	bl	800625c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006344:	20a8      	movs	r0, #168	; 0xa8
 8006346:	f7ff ff89 	bl	800625c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800634a:	203f      	movs	r0, #63	; 0x3f
 800634c:	f7ff ff86 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006350:	20a4      	movs	r0, #164	; 0xa4
 8006352:	f7ff ff83 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006356:	20d3      	movs	r0, #211	; 0xd3
 8006358:	f7ff ff80 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800635c:	2000      	movs	r0, #0
 800635e:	f7ff ff7d 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006362:	20d5      	movs	r0, #213	; 0xd5
 8006364:	f7ff ff7a 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006368:	20f0      	movs	r0, #240	; 0xf0
 800636a:	f7ff ff77 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800636e:	20d9      	movs	r0, #217	; 0xd9
 8006370:	f7ff ff74 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006374:	2022      	movs	r0, #34	; 0x22
 8006376:	f7ff ff71 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //- Set contrast
 800637a:	2081      	movs	r0, #129	; 0x81
 800637c:	f7ff ff6e 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF); //- Set Contrast value
 8006380:	20ff      	movs	r0, #255	; 0xff
 8006382:	f7ff ff6b 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006386:	20da      	movs	r0, #218	; 0xda
 8006388:	f7ff ff68 	bl	800625c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800638c:	2012      	movs	r0, #18
 800638e:	f7ff ff65 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006392:	20db      	movs	r0, #219	; 0xdb
 8006394:	f7ff ff62 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006398:	2020      	movs	r0, #32
 800639a:	f7ff ff5f 	bl	800625c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800639e:	208d      	movs	r0, #141	; 0x8d
 80063a0:	f7ff ff5c 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80063a4:	2014      	movs	r0, #20
 80063a6:	f7ff ff59 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80063aa:	2001      	movs	r0, #1
 80063ac:	f000 f9f8 	bl	80067a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80063b0:	2000      	movs	r0, #0
 80063b2:	f000 f80f 	bl	80063d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80063b6:	f000 f831 	bl	800641c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <ssd1306_Init+0xdc>)
 80063bc:	2200      	movs	r2, #0
 80063be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <ssd1306_Init+0xdc>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80063c6:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <ssd1306_Init+0xdc>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	711a      	strb	r2, [r3, #4]
}
 80063cc:	bf00      	nop
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	2000094c 	.word	0x2000094c

080063d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e00d      	b.n	8006400 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <ssd1306_Fill+0x1a>
 80063ea:	2100      	movs	r1, #0
 80063ec:	e000      	b.n	80063f0 <ssd1306_Fill+0x1c>
 80063ee:	21ff      	movs	r1, #255	; 0xff
 80063f0:	4a09      	ldr	r2, [pc, #36]	; (8006418 <ssd1306_Fill+0x44>)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	460a      	mov	r2, r1
 80063f8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006406:	d3ed      	bcc.n	80063e4 <ssd1306_Fill+0x10>
    }
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	2000054c 	.word	0x2000054c

0800641c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006422:	2300      	movs	r3, #0
 8006424:	71fb      	strb	r3, [r7, #7]
 8006426:	e016      	b.n	8006456 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	3b50      	subs	r3, #80	; 0x50
 800642c:	b2db      	uxtb	r3, r3
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff ff14 	bl	800625c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006434:	2000      	movs	r0, #0
 8006436:	f7ff ff11 	bl	800625c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800643a:	2010      	movs	r0, #16
 800643c:	f7ff ff0e 	bl	800625c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	4a08      	ldr	r2, [pc, #32]	; (8006468 <ssd1306_UpdateScreen+0x4c>)
 8006446:	4413      	add	r3, r2
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff ff2c 	bl	80062a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	3301      	adds	r3, #1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	2b07      	cmp	r3, #7
 800645a:	d9e5      	bls.n	8006428 <ssd1306_UpdateScreen+0xc>
    }
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	2000054c 	.word	0x2000054c

0800646c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
 8006476:	460b      	mov	r3, r1
 8006478:	71bb      	strb	r3, [r7, #6]
 800647a:	4613      	mov	r3, r2
 800647c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800647e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006482:	2b00      	cmp	r3, #0
 8006484:	db3d      	blt.n	8006502 <ssd1306_DrawPixel+0x96>
 8006486:	79bb      	ldrb	r3, [r7, #6]
 8006488:	2b3f      	cmp	r3, #63	; 0x3f
 800648a:	d83a      	bhi.n	8006502 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800648c:	797b      	ldrb	r3, [r7, #5]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d11a      	bne.n	80064c8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006492:	79fa      	ldrb	r2, [r7, #7]
 8006494:	79bb      	ldrb	r3, [r7, #6]
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	b2d8      	uxtb	r0, r3
 800649a:	4603      	mov	r3, r0
 800649c:	01db      	lsls	r3, r3, #7
 800649e:	4413      	add	r3, r2
 80064a0:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <ssd1306_DrawPixel+0xa4>)
 80064a2:	5cd3      	ldrb	r3, [r2, r3]
 80064a4:	b25a      	sxtb	r2, r3
 80064a6:	79bb      	ldrb	r3, [r7, #6]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f303 	lsl.w	r3, r1, r3
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	4313      	orrs	r3, r2
 80064b6:	b259      	sxtb	r1, r3
 80064b8:	79fa      	ldrb	r2, [r7, #7]
 80064ba:	4603      	mov	r3, r0
 80064bc:	01db      	lsls	r3, r3, #7
 80064be:	4413      	add	r3, r2
 80064c0:	b2c9      	uxtb	r1, r1
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <ssd1306_DrawPixel+0xa4>)
 80064c4:	54d1      	strb	r1, [r2, r3]
 80064c6:	e01d      	b.n	8006504 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80064c8:	79fa      	ldrb	r2, [r7, #7]
 80064ca:	79bb      	ldrb	r3, [r7, #6]
 80064cc:	08db      	lsrs	r3, r3, #3
 80064ce:	b2d8      	uxtb	r0, r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	4413      	add	r3, r2
 80064d6:	4a0e      	ldr	r2, [pc, #56]	; (8006510 <ssd1306_DrawPixel+0xa4>)
 80064d8:	5cd3      	ldrb	r3, [r2, r3]
 80064da:	b25a      	sxtb	r2, r3
 80064dc:	79bb      	ldrb	r3, [r7, #6]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	2101      	movs	r1, #1
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	4013      	ands	r3, r2
 80064f0:	b259      	sxtb	r1, r3
 80064f2:	79fa      	ldrb	r2, [r7, #7]
 80064f4:	4603      	mov	r3, r0
 80064f6:	01db      	lsls	r3, r3, #7
 80064f8:	4413      	add	r3, r2
 80064fa:	b2c9      	uxtb	r1, r1
 80064fc:	4a04      	ldr	r2, [pc, #16]	; (8006510 <ssd1306_DrawPixel+0xa4>)
 80064fe:	54d1      	strb	r1, [r2, r3]
 8006500:	e000      	b.n	8006504 <ssd1306_DrawPixel+0x98>
        return;
 8006502:	bf00      	nop
    }
}
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	2000054c 	.word	0x2000054c

08006514 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006514:	b590      	push	{r4, r7, lr}
 8006516:	b089      	sub	sp, #36	; 0x24
 8006518:	af00      	add	r7, sp, #0
 800651a:	4604      	mov	r4, r0
 800651c:	1d38      	adds	r0, r7, #4
 800651e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006522:	461a      	mov	r2, r3
 8006524:	4623      	mov	r3, r4
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	4613      	mov	r3, r2
 800652a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	2b1f      	cmp	r3, #31
 8006530:	d902      	bls.n	8006538 <ssd1306_WriteChar+0x24>
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	2b7e      	cmp	r3, #126	; 0x7e
 8006536:	d901      	bls.n	800653c <ssd1306_WriteChar+0x28>
        return 0;
 8006538:	2300      	movs	r3, #0
 800653a:	e06d      	b.n	8006618 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800653c:	4b38      	ldr	r3, [pc, #224]	; (8006620 <ssd1306_WriteChar+0x10c>)
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	793b      	ldrb	r3, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	dc06      	bgt.n	8006558 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800654a:	4b35      	ldr	r3, [pc, #212]	; (8006620 <ssd1306_WriteChar+0x10c>)
 800654c:	885b      	ldrh	r3, [r3, #2]
 800654e:	461a      	mov	r2, r3
 8006550:	797b      	ldrb	r3, [r7, #5]
 8006552:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	dd01      	ble.n	800655c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006558:	2300      	movs	r3, #0
 800655a:	e05d      	b.n	8006618 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e04c      	b.n	80065fc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	3b20      	subs	r3, #32
 8006568:	7979      	ldrb	r1, [r7, #5]
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4619      	mov	r1, r3
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	440b      	add	r3, r1
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800657c:	2300      	movs	r3, #0
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	e034      	b.n	80065ec <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	fa02 f303 	lsl.w	r3, r2, r3
 800658a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d012      	beq.n	80065b8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <ssd1306_WriteChar+0x10c>)
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	4413      	add	r3, r2
 800659e:	b2d8      	uxtb	r0, r3
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <ssd1306_WriteChar+0x10c>)
 80065a2:	885b      	ldrh	r3, [r3, #2]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	7bba      	ldrb	r2, [r7, #14]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f7ff ff5b 	bl	800646c <ssd1306_DrawPixel>
 80065b6:	e016      	b.n	80065e6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <ssd1306_WriteChar+0x10c>)
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	b2d8      	uxtb	r0, r3
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <ssd1306_WriteChar+0x10c>)
 80065c8:	885b      	ldrh	r3, [r3, #2]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	4413      	add	r3, r2
 80065d2:	b2d9      	uxtb	r1, r3
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf0c      	ite	eq
 80065da:	2301      	moveq	r3, #1
 80065dc:	2300      	movne	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	f7ff ff43 	bl	800646c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	793b      	ldrb	r3, [r7, #4]
 80065ee:	461a      	mov	r2, r3
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d3c5      	bcc.n	8006582 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	3301      	adds	r3, #1
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	797b      	ldrb	r3, [r7, #5]
 80065fe:	461a      	mov	r2, r3
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4293      	cmp	r3, r2
 8006604:	d3ad      	bcc.n	8006562 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <ssd1306_WriteChar+0x10c>)
 8006608:	881a      	ldrh	r2, [r3, #0]
 800660a:	793b      	ldrb	r3, [r7, #4]
 800660c:	b29b      	uxth	r3, r3
 800660e:	4413      	add	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	4b03      	ldr	r3, [pc, #12]	; (8006620 <ssd1306_WriteChar+0x10c>)
 8006614:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006616:	7bfb      	ldrb	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3724      	adds	r7, #36	; 0x24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd90      	pop	{r4, r7, pc}
 8006620:	2000094c 	.word	0x2000094c

08006624 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	1d38      	adds	r0, r7, #4
 800662e:	e880 0006 	stmia.w	r0, {r1, r2}
 8006632:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8006634:	e012      	b.n	800665c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	7818      	ldrb	r0, [r3, #0]
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	1d3a      	adds	r2, r7, #4
 800663e:	ca06      	ldmia	r2, {r1, r2}
 8006640:	f7ff ff68 	bl	8006514 <ssd1306_WriteChar>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d002      	beq.n	8006656 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	e008      	b.n	8006668 <ssd1306_WriteString+0x44>
        }
        str++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e8      	bne.n	8006636 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	781b      	ldrb	r3, [r3, #0]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	460a      	mov	r2, r1
 800667a:	71fb      	strb	r3, [r7, #7]
 800667c:	4613      	mov	r3, r2
 800667e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	b29a      	uxth	r2, r3
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <ssd1306_SetCursor+0x2c>)
 8006686:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006688:	79bb      	ldrb	r3, [r7, #6]
 800668a:	b29a      	uxth	r2, r3
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <ssd1306_SetCursor+0x2c>)
 800668e:	805a      	strh	r2, [r3, #2]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	2000094c 	.word	0x2000094c

080066a0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b089      	sub	sp, #36	; 0x24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	4623      	mov	r3, r4
 80066b0:	71fb      	strb	r3, [r7, #7]
 80066b2:	4603      	mov	r3, r0
 80066b4:	71bb      	strb	r3, [r7, #6]
 80066b6:	460b      	mov	r3, r1
 80066b8:	717b      	strb	r3, [r7, #5]
 80066ba:	4613      	mov	r3, r2
 80066bc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80066be:	797a      	ldrb	r2, [r7, #5]
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfb8      	it	lt
 80066c8:	425b      	neglt	r3, r3
 80066ca:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80066cc:	793a      	ldrb	r2, [r7, #4]
 80066ce:	79bb      	ldrb	r3, [r7, #6]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfb8      	it	lt
 80066d6:	425b      	neglt	r3, r3
 80066d8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80066da:	79fa      	ldrb	r2, [r7, #7]
 80066dc:	797b      	ldrb	r3, [r7, #5]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d201      	bcs.n	80066e6 <ssd1306_Line+0x46>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e001      	b.n	80066ea <ssd1306_Line+0x4a>
 80066e6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ea:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80066ec:	79ba      	ldrb	r2, [r7, #6]
 80066ee:	793b      	ldrb	r3, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d201      	bcs.n	80066f8 <ssd1306_Line+0x58>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e001      	b.n	80066fc <ssd1306_Line+0x5c>
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8006706:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800670a:	7939      	ldrb	r1, [r7, #4]
 800670c:	797b      	ldrb	r3, [r7, #5]
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff feac 	bl	800646c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8006714:	e024      	b.n	8006760 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8006716:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800671a:	79b9      	ldrb	r1, [r7, #6]
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fea4 	bl	800646c <ssd1306_DrawPixel>
        error2 = error * 2;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	425b      	negs	r3, r3
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	dd08      	ble.n	8006746 <ssd1306_Line+0xa6>
            error -= deltaY;
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	b2da      	uxtb	r2, r3
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	4413      	add	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	429a      	cmp	r2, r3
 800674c:	da08      	bge.n	8006760 <ssd1306_Line+0xc0>
            error += deltaX;
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	4413      	add	r3, r2
 8006754:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	79bb      	ldrb	r3, [r7, #6]
 800675c:	4413      	add	r3, r2
 800675e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8006760:	79fa      	ldrb	r2, [r7, #7]
 8006762:	797b      	ldrb	r3, [r7, #5]
 8006764:	429a      	cmp	r2, r3
 8006766:	d1d6      	bne.n	8006716 <ssd1306_Line+0x76>
 8006768:	79ba      	ldrb	r2, [r7, #6]
 800676a:	793b      	ldrb	r3, [r7, #4]
 800676c:	429a      	cmp	r2, r3
 800676e:	d1d2      	bne.n	8006716 <ssd1306_Line+0x76>
        }
    }
    return;
 8006770:	bf00      	nop
}
 8006772:	3724      	adds	r7, #36	; 0x24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd90      	pop	{r4, r7, pc}

08006778 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006782:	2381      	movs	r3, #129	; 0x81
 8006784:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fd67 	bl	800625c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fd63 	bl	800625c <ssd1306_WriteCommand>
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80067b0:	23af      	movs	r3, #175	; 0xaf
 80067b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80067b4:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <ssd1306_SetDisplayOn+0x38>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	715a      	strb	r2, [r3, #5]
 80067ba:	e004      	b.n	80067c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80067bc:	23ae      	movs	r3, #174	; 0xae
 80067be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <ssd1306_SetDisplayOn+0x38>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff fd47 	bl	800625c <ssd1306_WriteCommand>
}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	2000094c 	.word	0x2000094c

080067dc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80067dc:	b5b0      	push	{r4, r5, r7, lr}
 80067de:	b08c      	sub	sp, #48	; 0x30
 80067e0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80067e2:	4b97      	ldr	r3, [pc, #604]	; (8006a40 <MX_LWIP_Init+0x264>)
 80067e4:	22c0      	movs	r2, #192	; 0xc0
 80067e6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80067e8:	4b95      	ldr	r3, [pc, #596]	; (8006a40 <MX_LWIP_Init+0x264>)
 80067ea:	22a8      	movs	r2, #168	; 0xa8
 80067ec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80067ee:	4b94      	ldr	r3, [pc, #592]	; (8006a40 <MX_LWIP_Init+0x264>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80067f4:	4b92      	ldr	r3, [pc, #584]	; (8006a40 <MX_LWIP_Init+0x264>)
 80067f6:	226f      	movs	r2, #111	; 0x6f
 80067f8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80067fa:	4b92      	ldr	r3, [pc, #584]	; (8006a44 <MX_LWIP_Init+0x268>)
 80067fc:	22ff      	movs	r2, #255	; 0xff
 80067fe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006800:	4b90      	ldr	r3, [pc, #576]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006802:	22ff      	movs	r2, #255	; 0xff
 8006804:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006806:	4b8f      	ldr	r3, [pc, #572]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800680c:	4b8d      	ldr	r3, [pc, #564]	; (8006a44 <MX_LWIP_Init+0x268>)
 800680e:	2200      	movs	r2, #0
 8006810:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006812:	4b8d      	ldr	r3, [pc, #564]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006814:	22c0      	movs	r2, #192	; 0xc0
 8006816:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006818:	4b8b      	ldr	r3, [pc, #556]	; (8006a48 <MX_LWIP_Init+0x26c>)
 800681a:	22a8      	movs	r2, #168	; 0xa8
 800681c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800681e:	4b8a      	ldr	r3, [pc, #552]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006820:	2200      	movs	r2, #0
 8006822:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006824:	4b88      	ldr	r3, [pc, #544]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006826:	2201      	movs	r2, #1
 8006828:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800682a:	2100      	movs	r1, #0
 800682c:	2000      	movs	r0, #0
 800682e:	f003 fcb5 	bl	800a19c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006832:	4b83      	ldr	r3, [pc, #524]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	061a      	lsls	r2, r3, #24
 8006838:	4b81      	ldr	r3, [pc, #516]	; (8006a40 <MX_LWIP_Init+0x264>)
 800683a:	785b      	ldrb	r3, [r3, #1]
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	431a      	orrs	r2, r3
 8006840:	4b7f      	ldr	r3, [pc, #508]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006842:	789b      	ldrb	r3, [r3, #2]
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	4313      	orrs	r3, r2
 8006848:	4a7d      	ldr	r2, [pc, #500]	; (8006a40 <MX_LWIP_Init+0x264>)
 800684a:	78d2      	ldrb	r2, [r2, #3]
 800684c:	4313      	orrs	r3, r2
 800684e:	061a      	lsls	r2, r3, #24
 8006850:	4b7b      	ldr	r3, [pc, #492]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	0619      	lsls	r1, r3, #24
 8006856:	4b7a      	ldr	r3, [pc, #488]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	041b      	lsls	r3, r3, #16
 800685c:	4319      	orrs	r1, r3
 800685e:	4b78      	ldr	r3, [pc, #480]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006860:	789b      	ldrb	r3, [r3, #2]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	430b      	orrs	r3, r1
 8006866:	4976      	ldr	r1, [pc, #472]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006868:	78c9      	ldrb	r1, [r1, #3]
 800686a:	430b      	orrs	r3, r1
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006872:	431a      	orrs	r2, r3
 8006874:	4b72      	ldr	r3, [pc, #456]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	0619      	lsls	r1, r3, #24
 800687a:	4b71      	ldr	r3, [pc, #452]	; (8006a40 <MX_LWIP_Init+0x264>)
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	041b      	lsls	r3, r3, #16
 8006880:	4319      	orrs	r1, r3
 8006882:	4b6f      	ldr	r3, [pc, #444]	; (8006a40 <MX_LWIP_Init+0x264>)
 8006884:	789b      	ldrb	r3, [r3, #2]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	430b      	orrs	r3, r1
 800688a:	496d      	ldr	r1, [pc, #436]	; (8006a40 <MX_LWIP_Init+0x264>)
 800688c:	78c9      	ldrb	r1, [r1, #3]
 800688e:	430b      	orrs	r3, r1
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006896:	431a      	orrs	r2, r3
 8006898:	4b69      	ldr	r3, [pc, #420]	; (8006a40 <MX_LWIP_Init+0x264>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	0619      	lsls	r1, r3, #24
 800689e:	4b68      	ldr	r3, [pc, #416]	; (8006a40 <MX_LWIP_Init+0x264>)
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	041b      	lsls	r3, r3, #16
 80068a4:	4319      	orrs	r1, r3
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <MX_LWIP_Init+0x264>)
 80068a8:	789b      	ldrb	r3, [r3, #2]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	430b      	orrs	r3, r1
 80068ae:	4964      	ldr	r1, [pc, #400]	; (8006a40 <MX_LWIP_Init+0x264>)
 80068b0:	78c9      	ldrb	r1, [r1, #3]
 80068b2:	430b      	orrs	r3, r1
 80068b4:	0e1b      	lsrs	r3, r3, #24
 80068b6:	4313      	orrs	r3, r2
 80068b8:	4a64      	ldr	r2, [pc, #400]	; (8006a4c <MX_LWIP_Init+0x270>)
 80068ba:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80068bc:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	061a      	lsls	r2, r3, #24
 80068c2:	4b60      	ldr	r3, [pc, #384]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	041b      	lsls	r3, r3, #16
 80068c8:	431a      	orrs	r2, r3
 80068ca:	4b5e      	ldr	r3, [pc, #376]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068cc:	789b      	ldrb	r3, [r3, #2]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	4313      	orrs	r3, r2
 80068d2:	4a5c      	ldr	r2, [pc, #368]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068d4:	78d2      	ldrb	r2, [r2, #3]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	061a      	lsls	r2, r3, #24
 80068da:	4b5a      	ldr	r3, [pc, #360]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	0619      	lsls	r1, r3, #24
 80068e0:	4b58      	ldr	r3, [pc, #352]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068e2:	785b      	ldrb	r3, [r3, #1]
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	4319      	orrs	r1, r3
 80068e8:	4b56      	ldr	r3, [pc, #344]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068ea:	789b      	ldrb	r3, [r3, #2]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	430b      	orrs	r3, r1
 80068f0:	4954      	ldr	r1, [pc, #336]	; (8006a44 <MX_LWIP_Init+0x268>)
 80068f2:	78c9      	ldrb	r1, [r1, #3]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068fc:	431a      	orrs	r2, r3
 80068fe:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	0619      	lsls	r1, r3, #24
 8006904:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	4319      	orrs	r1, r3
 800690c:	4b4d      	ldr	r3, [pc, #308]	; (8006a44 <MX_LWIP_Init+0x268>)
 800690e:	789b      	ldrb	r3, [r3, #2]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	430b      	orrs	r3, r1
 8006914:	494b      	ldr	r1, [pc, #300]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006916:	78c9      	ldrb	r1, [r1, #3]
 8006918:	430b      	orrs	r3, r1
 800691a:	0a1b      	lsrs	r3, r3, #8
 800691c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006920:	431a      	orrs	r2, r3
 8006922:	4b48      	ldr	r3, [pc, #288]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	0619      	lsls	r1, r3, #24
 8006928:	4b46      	ldr	r3, [pc, #280]	; (8006a44 <MX_LWIP_Init+0x268>)
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	041b      	lsls	r3, r3, #16
 800692e:	4319      	orrs	r1, r3
 8006930:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <MX_LWIP_Init+0x268>)
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	430b      	orrs	r3, r1
 8006938:	4942      	ldr	r1, [pc, #264]	; (8006a44 <MX_LWIP_Init+0x268>)
 800693a:	78c9      	ldrb	r1, [r1, #3]
 800693c:	430b      	orrs	r3, r1
 800693e:	0e1b      	lsrs	r3, r3, #24
 8006940:	4313      	orrs	r3, r2
 8006942:	4a43      	ldr	r2, [pc, #268]	; (8006a50 <MX_LWIP_Init+0x274>)
 8006944:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006946:	4b40      	ldr	r3, [pc, #256]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	061a      	lsls	r2, r3, #24
 800694c:	4b3e      	ldr	r3, [pc, #248]	; (8006a48 <MX_LWIP_Init+0x26c>)
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	431a      	orrs	r2, r3
 8006954:	4b3c      	ldr	r3, [pc, #240]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006956:	789b      	ldrb	r3, [r3, #2]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	4313      	orrs	r3, r2
 800695c:	4a3a      	ldr	r2, [pc, #232]	; (8006a48 <MX_LWIP_Init+0x26c>)
 800695e:	78d2      	ldrb	r2, [r2, #3]
 8006960:	4313      	orrs	r3, r2
 8006962:	061a      	lsls	r2, r3, #24
 8006964:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	0619      	lsls	r1, r3, #24
 800696a:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <MX_LWIP_Init+0x26c>)
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	041b      	lsls	r3, r3, #16
 8006970:	4319      	orrs	r1, r3
 8006972:	4b35      	ldr	r3, [pc, #212]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	430b      	orrs	r3, r1
 800697a:	4933      	ldr	r1, [pc, #204]	; (8006a48 <MX_LWIP_Init+0x26c>)
 800697c:	78c9      	ldrb	r1, [r1, #3]
 800697e:	430b      	orrs	r3, r1
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006986:	431a      	orrs	r2, r3
 8006988:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <MX_LWIP_Init+0x26c>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	0619      	lsls	r1, r3, #24
 800698e:	4b2e      	ldr	r3, [pc, #184]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	4319      	orrs	r1, r3
 8006996:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <MX_LWIP_Init+0x26c>)
 8006998:	789b      	ldrb	r3, [r3, #2]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	430b      	orrs	r3, r1
 800699e:	492a      	ldr	r1, [pc, #168]	; (8006a48 <MX_LWIP_Init+0x26c>)
 80069a0:	78c9      	ldrb	r1, [r1, #3]
 80069a2:	430b      	orrs	r3, r1
 80069a4:	0a1b      	lsrs	r3, r3, #8
 80069a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069aa:	431a      	orrs	r2, r3
 80069ac:	4b26      	ldr	r3, [pc, #152]	; (8006a48 <MX_LWIP_Init+0x26c>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	0619      	lsls	r1, r3, #24
 80069b2:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <MX_LWIP_Init+0x26c>)
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	4319      	orrs	r1, r3
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <MX_LWIP_Init+0x26c>)
 80069bc:	789b      	ldrb	r3, [r3, #2]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	430b      	orrs	r3, r1
 80069c2:	4921      	ldr	r1, [pc, #132]	; (8006a48 <MX_LWIP_Init+0x26c>)
 80069c4:	78c9      	ldrb	r1, [r1, #3]
 80069c6:	430b      	orrs	r3, r1
 80069c8:	0e1b      	lsrs	r3, r3, #24
 80069ca:	4313      	orrs	r3, r2
 80069cc:	4a21      	ldr	r2, [pc, #132]	; (8006a54 <MX_LWIP_Init+0x278>)
 80069ce:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80069d0:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <MX_LWIP_Init+0x27c>)
 80069d2:	9302      	str	r3, [sp, #8]
 80069d4:	4b21      	ldr	r3, [pc, #132]	; (8006a5c <MX_LWIP_Init+0x280>)
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	2300      	movs	r3, #0
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <MX_LWIP_Init+0x278>)
 80069de:	4a1c      	ldr	r2, [pc, #112]	; (8006a50 <MX_LWIP_Init+0x274>)
 80069e0:	491a      	ldr	r1, [pc, #104]	; (8006a4c <MX_LWIP_Init+0x270>)
 80069e2:	481f      	ldr	r0, [pc, #124]	; (8006a60 <MX_LWIP_Init+0x284>)
 80069e4:	f006 f870 	bl	800cac8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80069e8:	481d      	ldr	r0, [pc, #116]	; (8006a60 <MX_LWIP_Init+0x284>)
 80069ea:	f006 fa1f 	bl	800ce2c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80069ee:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <MX_LWIP_Init+0x284>)
 80069f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006a00:	4817      	ldr	r0, [pc, #92]	; (8006a60 <MX_LWIP_Init+0x284>)
 8006a02:	f006 fa23 	bl	800ce4c <netif_set_up>
 8006a06:	e002      	b.n	8006a0e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006a08:	4815      	ldr	r0, [pc, #84]	; (8006a60 <MX_LWIP_Init+0x284>)
 8006a0a:	f006 fa8b 	bl	800cf24 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006a0e:	4915      	ldr	r1, [pc, #84]	; (8006a64 <MX_LWIP_Init+0x288>)
 8006a10:	4813      	ldr	r0, [pc, #76]	; (8006a60 <MX_LWIP_Init+0x284>)
 8006a12:	f006 fb1d 	bl	800d050 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <MX_LWIP_Init+0x28c>)
 8006a18:	1d3c      	adds	r4, r7, #4
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	490d      	ldr	r1, [pc, #52]	; (8006a60 <MX_LWIP_Init+0x284>)
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fd2f 	bl	8007490 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  SetETHstate(1);
 8006a32:	2001      	movs	r0, #1
 8006a34:	f7f9 fdec 	bl	8000610 <SetETHstate>
/* USER CODE END 3 */
}
 8006a38:	bf00      	nop
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8006a40:	20000994 	.word	0x20000994
 8006a44:	20000998 	.word	0x20000998
 8006a48:	2000099c 	.word	0x2000099c
 8006a4c:	20000988 	.word	0x20000988
 8006a50:	2000098c 	.word	0x2000098c
 8006a54:	20000990 	.word	0x20000990
 8006a58:	0800a0d1 	.word	0x0800a0d1
 8006a5c:	08006f0d 	.word	0x08006f0d
 8006a60:	20000954 	.word	0x20000954
 8006a64:	08006a6d 	.word	0x08006a6d
 8006a68:	08018838 	.word	0x08018838

08006a6c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <HAL_ETH_RxCpltCallback+0x1c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fe49 	bl	8007724 <osSemaphoreRelease>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	2000567c 	.word	0x2000567c

08006aa0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <HAL_ETH_TxCpltCallback+0x1c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f000 fe39 	bl	8007724 <osSemaphoreRelease>
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20005680 	.word	0x20005680

08006ac0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fc fb0f 	bl	80030ec <HAL_ETH_GetDMAError>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d104      	bne.n	8006ae2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_ETH_ErrorCallback+0x2c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fe21 	bl	8007724 <osSemaphoreRelease>
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	2000567c 	.word	0x2000567c

08006af0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006af0:	b5b0      	push	{r4, r5, r7, lr}
 8006af2:	b0a8      	sub	sp, #160	; 0xa0
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8006b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b0e:	2264      	movs	r2, #100	; 0x64
 8006b10:	2100      	movs	r1, #0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f010 fa8a 	bl	801702c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006b18:	4b85      	ldr	r3, [pc, #532]	; (8006d30 <low_level_init+0x240>)
 8006b1a:	4a86      	ldr	r2, [pc, #536]	; (8006d34 <low_level_init+0x244>)
 8006b1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8006b2a:	23e1      	movs	r3, #225	; 0xe1
 8006b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8006b42:	4a7b      	ldr	r2, [pc, #492]	; (8006d30 <low_level_init+0x240>)
 8006b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b48:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006b4a:	4b79      	ldr	r3, [pc, #484]	; (8006d30 <low_level_init+0x240>)
 8006b4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b50:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006b52:	4b77      	ldr	r3, [pc, #476]	; (8006d30 <low_level_init+0x240>)
 8006b54:	4a78      	ldr	r2, [pc, #480]	; (8006d38 <low_level_init+0x248>)
 8006b56:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006b58:	4b75      	ldr	r3, [pc, #468]	; (8006d30 <low_level_init+0x240>)
 8006b5a:	4a78      	ldr	r2, [pc, #480]	; (8006d3c <low_level_init+0x24c>)
 8006b5c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006b5e:	4b74      	ldr	r3, [pc, #464]	; (8006d30 <low_level_init+0x240>)
 8006b60:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006b64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006b66:	4872      	ldr	r0, [pc, #456]	; (8006d30 <low_level_init+0x240>)
 8006b68:	f7fb fc82 	bl	8002470 <HAL_ETH_Init>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006b72:	2238      	movs	r2, #56	; 0x38
 8006b74:	2100      	movs	r1, #0
 8006b76:	4872      	ldr	r0, [pc, #456]	; (8006d40 <low_level_init+0x250>)
 8006b78:	f010 fa58 	bl	801702c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006b7c:	4b70      	ldr	r3, [pc, #448]	; (8006d40 <low_level_init+0x250>)
 8006b7e:	2221      	movs	r2, #33	; 0x21
 8006b80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006b82:	4b6f      	ldr	r3, [pc, #444]	; (8006d40 <low_level_init+0x250>)
 8006b84:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006b88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006b8a:	4b6d      	ldr	r3, [pc, #436]	; (8006d40 <low_level_init+0x250>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006b90:	486c      	ldr	r0, [pc, #432]	; (8006d44 <low_level_init+0x254>)
 8006b92:	f005 fe27 	bl	800c7e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2206      	movs	r2, #6
 8006b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006b9e:	4b64      	ldr	r3, [pc, #400]	; (8006d30 <low_level_init+0x240>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006baa:	4b61      	ldr	r3, [pc, #388]	; (8006d30 <low_level_init+0x240>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	785a      	ldrb	r2, [r3, #1]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006bb6:	4b5e      	ldr	r3, [pc, #376]	; (8006d30 <low_level_init+0x240>)
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	789a      	ldrb	r2, [r3, #2]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006bc2:	4b5b      	ldr	r3, [pc, #364]	; (8006d30 <low_level_init+0x240>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	78da      	ldrb	r2, [r3, #3]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006bce:	4b58      	ldr	r3, [pc, #352]	; (8006d30 <low_level_init+0x240>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	791a      	ldrb	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006bda:	4b55      	ldr	r3, [pc, #340]	; (8006d30 <low_level_init+0x240>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	795a      	ldrb	r2, [r3, #5]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bec:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006bf4:	f043 030a 	orr.w	r3, r3, #10
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006c00:	2203      	movs	r2, #3
 8006c02:	2100      	movs	r1, #0
 8006c04:	2001      	movs	r0, #1
 8006c06:	f001 f833 	bl	8007c70 <xQueueGenericCreate>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	4a4e      	ldr	r2, [pc, #312]	; (8006d48 <low_level_init+0x258>)
 8006c0e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006c10:	2203      	movs	r2, #3
 8006c12:	2100      	movs	r1, #0
 8006c14:	2001      	movs	r0, #1
 8006c16:	f001 f82b 	bl	8007c70 <xQueueGenericCreate>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4a4b      	ldr	r2, [pc, #300]	; (8006d4c <low_level_init+0x25c>)
 8006c1e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006c20:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <low_level_init+0x260>)
 8006c22:	f107 0408 	add.w	r4, r7, #8
 8006c26:	461d      	mov	r5, r3
 8006c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006c34:	f107 0308 	add.w	r3, r7, #8
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fc28 	bl	8007490 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006c40:	4944      	ldr	r1, [pc, #272]	; (8006d54 <low_level_init+0x264>)
 8006c42:	4845      	ldr	r0, [pc, #276]	; (8006d58 <low_level_init+0x268>)
 8006c44:	f7fb f94f 	bl	8001ee6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006c48:	4843      	ldr	r0, [pc, #268]	; (8006d58 <low_level_init+0x268>)
 8006c4a:	f7fb f97e 	bl	8001f4a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006c4e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d165      	bne.n	8006d22 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006c56:	4840      	ldr	r0, [pc, #256]	; (8006d58 <low_level_init+0x268>)
 8006c58:	f7fb fa1f 	bl	800209a <LAN8742_GetLinkState>
 8006c5c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	dc06      	bgt.n	8006c76 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f006 f9c1 	bl	800cff0 <netif_set_link_down>
      netif_set_down(netif);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f006 f958 	bl	800cf24 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006c74:	e057      	b.n	8006d26 <low_level_init+0x236>
      switch (PHYLinkState)
 8006c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c7a:	3b02      	subs	r3, #2
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d82b      	bhi.n	8006cd8 <low_level_init+0x1e8>
 8006c80:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <low_level_init+0x198>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006c99 	.word	0x08006c99
 8006c8c:	08006cab 	.word	0x08006cab
 8006c90:	08006cbb 	.word	0x08006cbb
 8006c94:	08006ccb 	.word	0x08006ccb
        duplex = ETH_FULLDUPLEX_MODE;
 8006c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006ca0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006ca8:	e01f      	b.n	8006cea <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006cb8:	e017      	b.n	8006cea <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006cba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006cc8:	e00f      	b.n	8006cea <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006cd6:	e008      	b.n	8006cea <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006ce8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cee:	4619      	mov	r1, r3
 8006cf0:	480f      	ldr	r0, [pc, #60]	; (8006d30 <low_level_init+0x240>)
 8006cf2:	f7fc f8a1 	bl	8002e38 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cfa:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d00:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d06:	4619      	mov	r1, r3
 8006d08:	4809      	ldr	r0, [pc, #36]	; (8006d30 <low_level_init+0x240>)
 8006d0a:	f7fc f97f 	bl	800300c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006d0e:	4808      	ldr	r0, [pc, #32]	; (8006d30 <low_level_init+0x240>)
 8006d10:	f7fb fc2c 	bl	800256c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f006 f899 	bl	800ce4c <netif_set_up>
    netif_set_link_up(netif);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f006 f934 	bl	800cf88 <netif_set_link_up>
}
 8006d20:	e001      	b.n	8006d26 <low_level_init+0x236>
    Error_Handler();
 8006d22:	f7fa fa31 	bl	8001188 <Error_Handler>
}
 8006d26:	bf00      	nop
 8006d28:	37a0      	adds	r7, #160	; 0xa0
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20005684 	.word	0x20005684
 8006d34:	40028000 	.word	0x40028000
 8006d38:	200055dc 	.word	0x200055dc
 8006d3c:	2000553c 	.word	0x2000553c
 8006d40:	20005734 	.word	0x20005734
 8006d44:	0801d10c 	.word	0x0801d10c
 8006d48:	2000567c 	.word	0x2000567c
 8006d4c:	20005680 	.word	0x20005680
 8006d50:	08018874 	.word	0x08018874
 8006d54:	2000001c 	.word	0x2000001c
 8006d58:	2000576c 	.word	0x2000576c

08006d5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b092      	sub	sp, #72	; 0x48
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006d74:	f107 030c 	add.w	r3, r7, #12
 8006d78:	2230      	movs	r2, #48	; 0x30
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f010 f955 	bl	801702c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006d82:	f107 030c 	add.w	r3, r7, #12
 8006d86:	2230      	movs	r2, #48	; 0x30
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f010 f94e 	bl	801702c <memset>

  for(q = p; q != NULL; q = q->next)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	643b      	str	r3, [r7, #64]	; 0x40
 8006d94:	e045      	b.n	8006e22 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d902      	bls.n	8006da2 <low_level_output+0x46>
      return ERR_IF;
 8006d9c:	f06f 030b 	mvn.w	r3, #11
 8006da0:	e065      	b.n	8006e6e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	6859      	ldr	r1, [r3, #4]
 8006da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	3348      	adds	r3, #72	; 0x48
 8006db2:	443b      	add	r3, r7
 8006db4:	3b3c      	subs	r3, #60	; 0x3c
 8006db6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dba:	895b      	ldrh	r3, [r3, #10]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	3348      	adds	r3, #72	; 0x48
 8006dca:	443b      	add	r3, r7
 8006dcc:	3b38      	subs	r3, #56	; 0x38
 8006dce:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d011      	beq.n	8006dfa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	f107 000c 	add.w	r0, r7, #12
 8006dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006de0:	460b      	mov	r3, r1
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	440b      	add	r3, r1
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	18c1      	adds	r1, r0, r3
 8006dea:	4613      	mov	r3, r2
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	3348      	adds	r3, #72	; 0x48
 8006df4:	443b      	add	r3, r7
 8006df6:	3b34      	subs	r3, #52	; 0x34
 8006df8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	3348      	adds	r3, #72	; 0x48
 8006e0e:	443b      	add	r3, r7
 8006e10:	3b34      	subs	r3, #52	; 0x34
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e18:	3301      	adds	r3, #1
 8006e1a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1b6      	bne.n	8006d96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	891b      	ldrh	r3, [r3, #8]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b12      	ldr	r3, [pc, #72]	; (8006e78 <low_level_output+0x11c>)
 8006e30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006e32:	4a11      	ldr	r2, [pc, #68]	; (8006e78 <low_level_output+0x11c>)
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006e3a:	4a0f      	ldr	r2, [pc, #60]	; (8006e78 <low_level_output+0x11c>)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006e40:	6838      	ldr	r0, [r7, #0]
 8006e42:	f006 fd61 	bl	800d908 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006e46:	490c      	ldr	r1, [pc, #48]	; (8006e78 <low_level_output+0x11c>)
 8006e48:	480c      	ldr	r0, [pc, #48]	; (8006e7c <low_level_output+0x120>)
 8006e4a:	f7fb fc9c 	bl	8002786 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006e4e:	bf00      	nop
 8006e50:	4b0b      	ldr	r3, [pc, #44]	; (8006e80 <low_level_output+0x124>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fc15 	bl	8007688 <osSemaphoreWait>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f5      	bne.n	8006e50 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <low_level_output+0x120>)
 8006e66:	f7fb fe21 	bl	8002aac <HAL_ETH_ReleaseTxPacket>

  return errval;
 8006e6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3748      	adds	r7, #72	; 0x48
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20005734 	.word	0x20005734
 8006e7c:	20005684 	.word	0x20005684
 8006e80:	20005680 	.word	0x20005680

08006e84 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <low_level_input+0x2c>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4805      	ldr	r0, [pc, #20]	; (8006eb4 <low_level_input+0x30>)
 8006ea0:	f7fb fccd 	bl	800283e <HAL_ETH_ReadData>
  }

  return p;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20005538 	.word	0x20005538
 8006eb4:	20005684 	.word	0x20005684

08006eb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <ethernetif_input+0x50>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fbd9 	bl	8007688 <osSemaphoreWait>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f5      	bne.n	8006ec8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006edc:	68b8      	ldr	r0, [r7, #8]
 8006ede:	f7ff ffd1 	bl	8006e84 <low_level_input>
 8006ee2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	4798      	blx	r3
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f006 fc5e 	bl	800d7bc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1ea      	bne.n	8006edc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006f06:	e7df      	b.n	8006ec8 <ethernetif_input+0x10>
 8006f08:	2000567c 	.word	0x2000567c

08006f0c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <ethernetif_init+0x1c>
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <ethernetif_init+0x48>)
 8006f1c:	f240 12df 	movw	r2, #479	; 0x1df
 8006f20:	490d      	ldr	r1, [pc, #52]	; (8006f58 <ethernetif_init+0x4c>)
 8006f22:	480e      	ldr	r0, [pc, #56]	; (8006f5c <ethernetif_init+0x50>)
 8006f24:	f010 f96a 	bl	80171fc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2273      	movs	r2, #115	; 0x73
 8006f2c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2274      	movs	r2, #116	; 0x74
 8006f34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <ethernetif_init+0x54>)
 8006f3c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a08      	ldr	r2, [pc, #32]	; (8006f64 <ethernetif_init+0x58>)
 8006f42:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fdd3 	bl	8006af0 <low_level_init>

  return ERR_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	08018890 	.word	0x08018890
 8006f58:	080188ac 	.word	0x080188ac
 8006f5c:	080188bc 	.word	0x080188bc
 8006f60:	08014e25 	.word	0x08014e25
 8006f64:	08006d5d 	.word	0x08006d5d

08006f68 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006f74:	68f9      	ldr	r1, [r7, #12]
 8006f76:	4809      	ldr	r0, [pc, #36]	; (8006f9c <pbuf_free_custom+0x34>)
 8006f78:	f005 fd4e 	bl	800ca18 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006f7c:	4b08      	ldr	r3, [pc, #32]	; (8006fa0 <pbuf_free_custom+0x38>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d107      	bne.n	8006f94 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006f84:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <pbuf_free_custom+0x38>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <pbuf_free_custom+0x3c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fbc8 	bl	8007724 <osSemaphoreRelease>
  }
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	0801d10c 	.word	0x0801d10c
 8006fa0:	20005538 	.word	0x20005538
 8006fa4:	2000567c 	.word	0x2000567c

08006fa8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006fac:	f7fb f932 	bl	8002214 <HAL_GetTick>
 8006fb0:	4603      	mov	r3, r0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a59      	ldr	r2, [pc, #356]	; (800713c <HAL_ETH_MspInit+0x184>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	f040 80ac 	bne.w	8007134 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	4b57      	ldr	r3, [pc, #348]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	4a56      	ldr	r2, [pc, #344]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8006fe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fea:	6313      	str	r3, [r2, #48]	; 0x30
 8006fec:	4b54      	ldr	r3, [pc, #336]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	4b50      	ldr	r3, [pc, #320]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007000:	4a4f      	ldr	r2, [pc, #316]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007006:	6313      	str	r3, [r2, #48]	; 0x30
 8007008:	4b4d      	ldr	r3, [pc, #308]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	4b49      	ldr	r3, [pc, #292]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	4a48      	ldr	r2, [pc, #288]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800701e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007022:	6313      	str	r3, [r2, #48]	; 0x30
 8007024:	4b46      	ldr	r3, [pc, #280]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	4b42      	ldr	r3, [pc, #264]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	4a41      	ldr	r2, [pc, #260]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800703a:	f043 0304 	orr.w	r3, r3, #4
 800703e:	6313      	str	r3, [r2, #48]	; 0x30
 8007040:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800704c:	2300      	movs	r3, #0
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	4b3b      	ldr	r3, [pc, #236]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	4a3a      	ldr	r2, [pc, #232]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007056:	f043 0301 	orr.w	r3, r3, #1
 800705a:	6313      	str	r3, [r2, #48]	; 0x30
 800705c:	4b38      	ldr	r3, [pc, #224]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	4b34      	ldr	r3, [pc, #208]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	4a33      	ldr	r2, [pc, #204]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007072:	f043 0302 	orr.w	r3, r3, #2
 8007076:	6313      	str	r3, [r2, #48]	; 0x30
 8007078:	4b31      	ldr	r3, [pc, #196]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007084:	2300      	movs	r3, #0
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	4b2d      	ldr	r3, [pc, #180]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	4a2c      	ldr	r2, [pc, #176]	; (8007140 <HAL_ETH_MspInit+0x188>)
 800708e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007092:	6313      	str	r3, [r2, #48]	; 0x30
 8007094:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <HAL_ETH_MspInit+0x188>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	60bb      	str	r3, [r7, #8]
 800709e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80070a0:	2332      	movs	r3, #50	; 0x32
 80070a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a4:	2302      	movs	r3, #2
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ac:	2303      	movs	r3, #3
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070b0:	230b      	movs	r3, #11
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b8:	4619      	mov	r1, r3
 80070ba:	4822      	ldr	r0, [pc, #136]	; (8007144 <HAL_ETH_MspInit+0x18c>)
 80070bc:	f7fc fc28 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80070c0:	2386      	movs	r3, #134	; 0x86
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070c4:	2302      	movs	r3, #2
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c8:	2300      	movs	r3, #0
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070cc:	2303      	movs	r3, #3
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070d0:	230b      	movs	r3, #11
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d8:	4619      	mov	r1, r3
 80070da:	481b      	ldr	r0, [pc, #108]	; (8007148 <HAL_ETH_MspInit+0x190>)
 80070dc:	f7fc fc18 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80070e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e6:	2302      	movs	r3, #2
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ee:	2303      	movs	r3, #3
 80070f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070f2:	230b      	movs	r3, #11
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80070f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070fa:	4619      	mov	r1, r3
 80070fc:	4813      	ldr	r0, [pc, #76]	; (800714c <HAL_ETH_MspInit+0x194>)
 80070fe:	f7fc fc07 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007102:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007108:	2302      	movs	r3, #2
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710c:	2300      	movs	r3, #0
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007110:	2303      	movs	r3, #3
 8007112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007114:	230b      	movs	r3, #11
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800711c:	4619      	mov	r1, r3
 800711e:	480c      	ldr	r0, [pc, #48]	; (8007150 <HAL_ETH_MspInit+0x198>)
 8007120:	f7fc fbf6 	bl	8003910 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007124:	2200      	movs	r2, #0
 8007126:	2105      	movs	r1, #5
 8007128:	203d      	movs	r0, #61	; 0x3d
 800712a:	f7fb f972 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800712e:	203d      	movs	r0, #61	; 0x3d
 8007130:	f7fb f98b 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007134:	bf00      	nop
 8007136:	3738      	adds	r7, #56	; 0x38
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40028000 	.word	0x40028000
 8007140:	40023800 	.word	0x40023800
 8007144:	40020800 	.word	0x40020800
 8007148:	40020000 	.word	0x40020000
 800714c:	40020400 	.word	0x40020400
 8007150:	40021800 	.word	0x40021800

08007154 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007158:	4802      	ldr	r0, [pc, #8]	; (8007164 <ETH_PHY_IO_Init+0x10>)
 800715a:	f7fb ff71 	bl	8003040 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20005684 	.word	0x20005684

08007168 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  return 0;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	68f9      	ldr	r1, [r7, #12]
 800718a:	4807      	ldr	r0, [pc, #28]	; (80071a8 <ETH_PHY_IO_ReadReg+0x30>)
 800718c:	f7fb fdc0 	bl	8002d10 <HAL_ETH_ReadPHYRegister>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007196:	f04f 33ff 	mov.w	r3, #4294967295
 800719a:	e000      	b.n	800719e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20005684 	.word	0x20005684

080071ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	68f9      	ldr	r1, [r7, #12]
 80071be:	4807      	ldr	r0, [pc, #28]	; (80071dc <ETH_PHY_IO_WriteReg+0x30>)
 80071c0:	f7fb fdf1 	bl	8002da6 <HAL_ETH_WritePHYRegister>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295
 80071ce:	e000      	b.n	80071d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20005684 	.word	0x20005684

080071e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80071e4:	f7fb f816 	bl	8002214 <HAL_GetTick>
 80071e8:	4603      	mov	r3, r0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b0a0      	sub	sp, #128	; 0x80
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80071f8:	f107 0308 	add.w	r3, r7, #8
 80071fc:	2264      	movs	r2, #100	; 0x64
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f00f ff13 	bl	801702c <memset>
  int32_t PHYLinkState = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800720e:	2300      	movs	r3, #0
 8007210:	67bb      	str	r3, [r7, #120]	; 0x78
 8007212:	2300      	movs	r3, #0
 8007214:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800721a:	483a      	ldr	r0, [pc, #232]	; (8007304 <ethernet_link_thread+0x114>)
 800721c:	f7fa ff3d 	bl	800209a <LAN8742_GetLinkState>
 8007220:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007224:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007228:	089b      	lsrs	r3, r3, #2
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00c      	beq.n	800724e <ethernet_link_thread+0x5e>
 8007234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007236:	2b01      	cmp	r3, #1
 8007238:	dc09      	bgt.n	800724e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800723a:	4833      	ldr	r0, [pc, #204]	; (8007308 <ethernet_link_thread+0x118>)
 800723c:	f7fb fa24 	bl	8002688 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007240:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007242:	f005 fe6f 	bl	800cf24 <netif_set_down>
    netif_set_link_down(netif);
 8007246:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007248:	f005 fed2 	bl	800cff0 <netif_set_link_down>
 800724c:	e055      	b.n	80072fa <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800724e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007250:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	d14e      	bne.n	80072fa <ethernet_link_thread+0x10a>
 800725c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800725e:	2b01      	cmp	r3, #1
 8007260:	dd4b      	ble.n	80072fa <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007264:	3b02      	subs	r3, #2
 8007266:	2b03      	cmp	r3, #3
 8007268:	d82a      	bhi.n	80072c0 <ethernet_link_thread+0xd0>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <ethernet_link_thread+0x80>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	08007281 	.word	0x08007281
 8007274:	08007293 	.word	0x08007293
 8007278:	080072a3 	.word	0x080072a3
 800727c:	080072b3 	.word	0x080072b3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007284:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007286:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800728a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800728c:	2301      	movs	r3, #1
 800728e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007290:	e017      	b.n	80072c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007292:	2300      	movs	r3, #0
 8007294:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800729a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800729c:	2301      	movs	r3, #1
 800729e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80072a0:	e00f      	b.n	80072c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80072a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072a6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80072a8:	2300      	movs	r3, #0
 80072aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80072ac:	2301      	movs	r3, #1
 80072ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80072b0:	e007      	b.n	80072c2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80072b6:	2300      	movs	r3, #0
 80072b8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80072be:	e000      	b.n	80072c2 <ethernet_link_thread+0xd2>
    default:
      break;
 80072c0:	bf00      	nop
    }

    if(linkchanged)
 80072c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d018      	beq.n	80072fa <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80072c8:	f107 0308 	add.w	r3, r7, #8
 80072cc:	4619      	mov	r1, r3
 80072ce:	480e      	ldr	r0, [pc, #56]	; (8007308 <ethernet_link_thread+0x118>)
 80072d0:	f7fb fdb2 	bl	8002e38 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80072d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80072d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072da:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80072dc:	f107 0308 	add.w	r3, r7, #8
 80072e0:	4619      	mov	r1, r3
 80072e2:	4809      	ldr	r0, [pc, #36]	; (8007308 <ethernet_link_thread+0x118>)
 80072e4:	f7fb fe92 	bl	800300c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80072e8:	4807      	ldr	r0, [pc, #28]	; (8007308 <ethernet_link_thread+0x118>)
 80072ea:	f7fb f93f 	bl	800256c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80072ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072f0:	f005 fdac 	bl	800ce4c <netif_set_up>
      netif_set_link_up(netif);
 80072f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072f6:	f005 fe47 	bl	800cf88 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80072fa:	2064      	movs	r0, #100	; 0x64
 80072fc:	f000 f914 	bl	8007528 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007300:	e78b      	b.n	800721a <ethernet_link_thread+0x2a>
 8007302:	bf00      	nop
 8007304:	2000576c 	.word	0x2000576c
 8007308:	20005684 	.word	0x20005684

0800730c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007314:	f44f 724c 	mov.w	r2, #816	; 0x330
 8007318:	4913      	ldr	r1, [pc, #76]	; (8007368 <HAL_ETH_RxAllocateCallback+0x5c>)
 800731a:	4814      	ldr	r0, [pc, #80]	; (800736c <HAL_ETH_RxAllocateCallback+0x60>)
 800731c:	f005 fafc 	bl	800c918 <memp_malloc_pool_fn>
 8007320:	60f8      	str	r0, [r7, #12]
  if (p)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d014      	beq.n	8007352 <HAL_ETH_RxAllocateCallback+0x46>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f103 0220 	add.w	r2, r3, #32
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <HAL_ETH_RxAllocateCallback+0x64>)
 8007336:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007340:	9201      	str	r2, [sp, #4]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2241      	movs	r2, #65	; 0x41
 8007348:	2100      	movs	r1, #0
 800734a:	2000      	movs	r0, #0
 800734c:	f006 f87c 	bl	800d448 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007350:	e005      	b.n	800735e <HAL_ETH_RxAllocateCallback+0x52>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <HAL_ETH_RxAllocateCallback+0x68>)
 8007354:	2201      	movs	r2, #1
 8007356:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	08018890 	.word	0x08018890
 800736c:	0801d10c 	.word	0x0801d10c
 8007370:	08006f69 	.word	0x08006f69
 8007374:	20005538 	.word	0x20005538

08007378 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3b20      	subs	r3, #32
 8007396:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	2200      	movs	r2, #0
 80073a2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	887a      	ldrh	r2, [r7, #2]
 80073a8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e003      	b.n	80073c2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	e009      	b.n	80073e4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	891a      	ldrh	r2, [r3, #8]
 80073d4:	887b      	ldrh	r3, [r7, #2]
 80073d6:	4413      	add	r3, r2
 80073d8:	b29a      	uxth	r2, r3
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	61fb      	str	r3, [r7, #28]
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f2      	bne.n	80073d0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	3724      	adds	r7, #36	; 0x24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f006 f9db 	bl	800d7bc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	4603      	mov	r3, r0
 8007416:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800741c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007420:	2b84      	cmp	r3, #132	; 0x84
 8007422:	d005      	beq.n	8007430 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007424:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	3303      	adds	r3, #3
 800742e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007444:	f3ef 8305 	mrs	r3, IPSR
 8007448:	607b      	str	r3, [r7, #4]
  return(result);
 800744a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007466:	f001 fc49 	bl	8008cfc <vTaskStartScheduler>
  
  return osOK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}

08007470 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007474:	f7ff ffe3 	bl	800743e <inHandlerMode>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800747e:	f001 fd61 	bl	8008f44 <xTaskGetTickCountFromISR>
 8007482:	4603      	mov	r3, r0
 8007484:	e002      	b.n	800748c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007486:	f001 fd4d 	bl	8008f24 <xTaskGetTickCount>
 800748a:	4603      	mov	r3, r0
  }
}
 800748c:	4618      	mov	r0, r3
 800748e:	bd80      	pop	{r7, pc}

08007490 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007492:	b089      	sub	sp, #36	; 0x24
 8007494:	af04      	add	r7, sp, #16
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d020      	beq.n	80074e4 <osThreadCreate+0x54>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01c      	beq.n	80074e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685c      	ldr	r4, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691e      	ldr	r6, [r3, #16]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff ffa6 	bl	800740e <makeFreeRtosPriority>
 80074c2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074cc:	9202      	str	r2, [sp, #8]
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	9100      	str	r1, [sp, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	4632      	mov	r2, r6
 80074d6:	4629      	mov	r1, r5
 80074d8:	4620      	mov	r0, r4
 80074da:	f001 fa29 	bl	8008930 <xTaskCreateStatic>
 80074de:	4603      	mov	r3, r0
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e01c      	b.n	800751e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685c      	ldr	r4, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074f0:	b29e      	uxth	r6, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff ff88 	bl	800740e <makeFreeRtosPriority>
 80074fe:	4602      	mov	r2, r0
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	9200      	str	r2, [sp, #0]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	4632      	mov	r2, r6
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	f001 fa6b 	bl	80089ea <xTaskCreate>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	d001      	beq.n	800751e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	e000      	b.n	8007520 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007528 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <osDelay+0x16>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	e000      	b.n	8007540 <osDelay+0x18>
 800753e:	2301      	movs	r3, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f001 fba7 	bl	8008c94 <vTaskDelay>
  
  return osOK;
 8007546:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d007      	beq.n	8007570 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4619      	mov	r1, r3
 8007566:	2001      	movs	r0, #1
 8007568:	f000 fc0d 	bl	8007d86 <xQueueCreateMutexStatic>
 800756c:	4603      	mov	r3, r0
 800756e:	e003      	b.n	8007578 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007570:	2001      	movs	r0, #1
 8007572:	f000 fbf0 	bl	8007d56 <xQueueCreateMutex>
 8007576:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800758a:	2300      	movs	r3, #0
 800758c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <osMutexWait+0x18>
    return osErrorParameter;
 8007594:	2380      	movs	r3, #128	; 0x80
 8007596:	e03a      	b.n	800760e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d103      	bne.n	80075ac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80075a4:	f04f 33ff 	mov.w	r3, #4294967295
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	e009      	b.n	80075c0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d006      	beq.n	80075c0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <osMutexWait+0x40>
      ticks = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80075c0:	f7ff ff3d 	bl	800743e <inHandlerMode>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d017      	beq.n	80075fa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	461a      	mov	r2, r3
 80075d0:	2100      	movs	r1, #0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f804 	bl	80085e0 <xQueueReceiveFromISR>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d001      	beq.n	80075e2 <osMutexWait+0x62>
      return osErrorOS;
 80075de:	23ff      	movs	r3, #255	; 0xff
 80075e0:	e015      	b.n	800760e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d011      	beq.n	800760c <osMutexWait+0x8c>
 80075e8:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <osMutexWait+0x98>)
 80075ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	e008      	b.n	800760c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fee3 	bl	80083c8 <xQueueSemaphoreTake>
 8007602:	4603      	mov	r3, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d001      	beq.n	800760c <osMutexWait+0x8c>
    return osErrorOS;
 8007608:	23ff      	movs	r3, #255	; 0xff
 800760a:	e000      	b.n	800760e <osMutexWait+0x8e>
  }
  
  return osOK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007628:	2300      	movs	r3, #0
 800762a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800762c:	f7ff ff07 	bl	800743e <inHandlerMode>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d016      	beq.n	8007664 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fd56 	bl	80080ee <xQueueGiveFromISR>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d001      	beq.n	800764c <osMutexRelease+0x30>
      return osErrorOS;
 8007648:	23ff      	movs	r3, #255	; 0xff
 800764a:	e017      	b.n	800767c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d013      	beq.n	800767a <osMutexRelease+0x5e>
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <osMutexRelease+0x68>)
 8007654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	e00a      	b.n	800767a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007664:	2300      	movs	r3, #0
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fba6 	bl	8007dbc <xQueueGenericSend>
 8007670:	4603      	mov	r3, r0
 8007672:	2b01      	cmp	r3, #1
 8007674:	d001      	beq.n	800767a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007676:	23ff      	movs	r3, #255	; 0xff
 8007678:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800767a:	68fb      	ldr	r3, [r7, #12]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	e03a      	b.n	8007716 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d103      	bne.n	80076b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	e009      	b.n	80076c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d006      	beq.n	80076c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <osSemaphoreWait+0x40>
      ticks = 1;
 80076c4:	2301      	movs	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80076c8:	f7ff feb9 	bl	800743e <inHandlerMode>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d017      	beq.n	8007702 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	461a      	mov	r2, r3
 80076d8:	2100      	movs	r1, #0
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 ff80 	bl	80085e0 <xQueueReceiveFromISR>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d001      	beq.n	80076ea <osSemaphoreWait+0x62>
      return osErrorOS;
 80076e6:	23ff      	movs	r3, #255	; 0xff
 80076e8:	e015      	b.n	8007716 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <osSemaphoreWait+0x8c>
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <osSemaphoreWait+0x98>)
 80076f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	e008      	b.n	8007714 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fe5f 	bl	80083c8 <xQueueSemaphoreTake>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d001      	beq.n	8007714 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007710:	23ff      	movs	r3, #255	; 0xff
 8007712:	e000      	b.n	8007716 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007734:	f7ff fe83 	bl	800743e <inHandlerMode>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d016      	beq.n	800776c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800773e:	f107 0308 	add.w	r3, r7, #8
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fcd2 	bl	80080ee <xQueueGiveFromISR>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007750:	23ff      	movs	r3, #255	; 0xff
 8007752:	e017      	b.n	8007784 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d013      	beq.n	8007782 <osSemaphoreRelease+0x5e>
 800775a:	4b0c      	ldr	r3, [pc, #48]	; (800778c <osSemaphoreRelease+0x68>)
 800775c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	e00a      	b.n	8007782 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800776c:	2300      	movs	r3, #0
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fb22 	bl	8007dbc <xQueueGenericSend>
 8007778:	4603      	mov	r3, r0
 800777a:	2b01      	cmp	r3, #1
 800777c:	d001      	beq.n	8007782 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800777e:	23ff      	movs	r3, #255	; 0xff
 8007780:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007790:	b590      	push	{r4, r7, lr}
 8007792:	b085      	sub	sp, #20
 8007794:	af02      	add	r7, sp, #8
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d011      	beq.n	80077c6 <osMessageCreate+0x36>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00d      	beq.n	80077c6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6859      	ldr	r1, [r3, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2400      	movs	r4, #0
 80077bc:	9400      	str	r4, [sp, #0]
 80077be:	f000 f9df 	bl	8007b80 <xQueueGenericCreateStatic>
 80077c2:	4603      	mov	r3, r0
 80077c4:	e008      	b.n	80077d8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	4619      	mov	r1, r3
 80077d2:	f000 fa4d 	bl	8007c70 <xQueueGenericCreate>
 80077d6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}

080077e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <osMessagePut+0x1e>
    ticks = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80077fe:	f7ff fe1e 	bl	800743e <inHandlerMode>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d018      	beq.n	800783a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007808:	f107 0210 	add.w	r2, r7, #16
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	2300      	movs	r3, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fbd0 	bl	8007fb8 <xQueueGenericSendFromISR>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d001      	beq.n	8007822 <osMessagePut+0x42>
      return osErrorOS;
 800781e:	23ff      	movs	r3, #255	; 0xff
 8007820:	e018      	b.n	8007854 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d014      	beq.n	8007852 <osMessagePut+0x72>
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <osMessagePut+0x7c>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	e00b      	b.n	8007852 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800783a:	f107 0108 	add.w	r1, r7, #8
 800783e:	2300      	movs	r3, #0
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 faba 	bl	8007dbc <xQueueGenericSend>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	d001      	beq.n	8007852 <osMessagePut+0x72>
      return osErrorOS;
 800784e:	23ff      	movs	r3, #255	; 0xff
 8007850:	e000      	b.n	8007854 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	e000ed04 	.word	0xe000ed04

08007860 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b08b      	sub	sp, #44	; 0x2c
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	617b      	str	r3, [r7, #20]
    return event;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	461c      	mov	r4, r3
 8007882:	f107 0314 	add.w	r3, r7, #20
 8007886:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800788a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800788e:	e054      	b.n	800793a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789e:	d103      	bne.n	80078a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80078a0:	f04f 33ff 	mov.w	r3, #4294967295
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
 80078a6:	e009      	b.n	80078bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d006      	beq.n	80078bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <osMessageGet+0x5c>
      ticks = 1;
 80078b8:	2301      	movs	r3, #1
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80078bc:	f7ff fdbf 	bl	800743e <inHandlerMode>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01c      	beq.n	8007900 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80078c6:	f107 0220 	add.w	r2, r7, #32
 80078ca:	f107 0314 	add.w	r3, r7, #20
 80078ce:	3304      	adds	r3, #4
 80078d0:	4619      	mov	r1, r3
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f000 fe84 	bl	80085e0 <xQueueReceiveFromISR>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d102      	bne.n	80078e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80078de:	2310      	movs	r3, #16
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e001      	b.n	80078e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01d      	beq.n	800792a <osMessageGet+0xca>
 80078ee:	4b15      	ldr	r3, [pc, #84]	; (8007944 <osMessageGet+0xe4>)
 80078f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	e014      	b.n	800792a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	3304      	adds	r3, #4
 8007906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007908:	4619      	mov	r1, r3
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 fc7c 	bl	8008208 <xQueueReceive>
 8007910:	4603      	mov	r3, r0
 8007912:	2b01      	cmp	r3, #1
 8007914:	d102      	bne.n	800791c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007916:	2310      	movs	r3, #16
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	e006      	b.n	800792a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <osMessageGet+0xc6>
 8007922:	2300      	movs	r3, #0
 8007924:	e000      	b.n	8007928 <osMessageGet+0xc8>
 8007926:	2340      	movs	r3, #64	; 0x40
 8007928:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	461c      	mov	r4, r3
 800792e:	f107 0314 	add.w	r3, r7, #20
 8007932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	372c      	adds	r7, #44	; 0x2c
 800793e:	46bd      	mov	sp, r7
 8007940:	bd90      	pop	{r4, r7, pc}
 8007942:	bf00      	nop
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f103 0208 	add.w	r2, r3, #8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f103 0208 	add.w	r2, r3, #8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f103 0208 	add.w	r2, r3, #8
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	601a      	str	r2, [r3, #0]
}
 80079de:	bf00      	nop
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ea:	b480      	push	{r7}
 80079ec:	b085      	sub	sp, #20
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d103      	bne.n	8007a0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e00c      	b.n	8007a24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e002      	b.n	8007a18 <vListInsert+0x2e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d2f6      	bcs.n	8007a12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	601a      	str	r2, [r3, #0]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6892      	ldr	r2, [r2, #8]
 8007a72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6852      	ldr	r2, [r2, #4]
 8007a7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d103      	bne.n	8007a90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	1e5a      	subs	r2, r3, #1
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ada:	f002 f8bb 	bl	8009c54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	441a      	add	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	68f9      	ldr	r1, [r7, #12]
 8007b0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b10:	fb01 f303 	mul.w	r3, r1, r3
 8007b14:	441a      	add	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	22ff      	movs	r2, #255	; 0xff
 8007b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	22ff      	movs	r2, #255	; 0xff
 8007b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d114      	bne.n	8007b5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01a      	beq.n	8007b6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3310      	adds	r3, #16
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 fb77 	bl	8009230 <xTaskRemoveFromEventList>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <xQueueGenericReset+0xcc>)
 8007b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	e009      	b.n	8007b6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff fef2 	bl	8007948 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	3324      	adds	r3, #36	; 0x24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7ff feed 	bl	8007948 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b6e:	f002 f8a1 	bl	8009cb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b72:	2301      	movs	r3, #1
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	e000ed04 	.word	0xe000ed04

08007b80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08e      	sub	sp, #56	; 0x38
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10a      	bne.n	8007bc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bc2:	bf00      	nop
 8007bc4:	e7fe      	b.n	8007bc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <xQueueGenericCreateStatic+0x52>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <xQueueGenericCreateStatic+0x56>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <xQueueGenericCreateStatic+0x58>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	623b      	str	r3, [r7, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <xQueueGenericCreateStatic+0x7e>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <xQueueGenericCreateStatic+0x82>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueGenericCreateStatic+0x84>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61fb      	str	r3, [r7, #28]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c1e:	2348      	movs	r3, #72	; 0x48
 8007c20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b48      	cmp	r3, #72	; 0x48
 8007c26:	d00a      	beq.n	8007c3e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	61bb      	str	r3, [r7, #24]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f83f 	bl	8007ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3730      	adds	r7, #48	; 0x30
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	613b      	str	r3, [r7, #16]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	3348      	adds	r3, #72	; 0x48
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f002 f8f5 	bl	8009e98 <pvPortMalloc>
 8007cae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d011      	beq.n	8007cda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	3348      	adds	r3, #72	; 0x48
 8007cbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cc8:	79fa      	ldrb	r2, [r7, #7]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f805 	bl	8007ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cda:	69bb      	ldr	r3, [r7, #24]
	}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d103      	bne.n	8007d00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d12:	2101      	movs	r1, #1
 8007d14:	69b8      	ldr	r0, [r7, #24]
 8007d16:	f7ff fecb 	bl	8007ab0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d1a:	bf00      	nop
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007d42:	2300      	movs	r3, #0
 8007d44:	2200      	movs	r2, #0
 8007d46:	2100      	movs	r1, #0
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f837 	bl	8007dbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d60:	2301      	movs	r3, #1
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	2300      	movs	r3, #0
 8007d66:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6939      	ldr	r1, [r7, #16]
 8007d6e:	6978      	ldr	r0, [r7, #20]
 8007d70:	f7ff ff7e 	bl	8007c70 <xQueueGenericCreate>
 8007d74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff ffd3 	bl	8007d22 <prvInitialiseMutex>

		return xNewQueue;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
	}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b088      	sub	sp, #32
 8007d8a:	af02      	add	r7, sp, #8
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	6039      	str	r1, [r7, #0]
 8007d90:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2200      	movs	r2, #0
 8007da2:	6939      	ldr	r1, [r7, #16]
 8007da4:	6978      	ldr	r0, [r7, #20]
 8007da6:	f7ff feeb 	bl	8007b80 <xQueueGenericCreateStatic>
 8007daa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff ffb8 	bl	8007d22 <prvInitialiseMutex>

		return xNewQueue;
 8007db2:	68fb      	ldr	r3, [r7, #12]
	}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08e      	sub	sp, #56	; 0x38
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <xQueueGenericSend+0x32>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <xQueueGenericSend+0x40>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <xQueueGenericSend+0x44>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <xQueueGenericSend+0x46>
 8007e00:	2300      	movs	r3, #0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <xQueueGenericSend+0x60>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d103      	bne.n	8007e2a <xQueueGenericSend+0x6e>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <xQueueGenericSend+0x72>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueGenericSend+0x74>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xQueueGenericSend+0x8e>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	623b      	str	r3, [r7, #32]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e4a:	f001 fbb1 	bl	80095b0 <xTaskGetSchedulerState>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <xQueueGenericSend+0x9e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <xQueueGenericSend+0xa2>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <xQueueGenericSend+0xa4>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	61fb      	str	r3, [r7, #28]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e7a:	f001 feeb 	bl	8009c54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <xQueueGenericSend+0xd4>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d129      	bne.n	8007ee4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e96:	f000 fc3b 	bl	8008710 <prvCopyDataToQueue>
 8007e9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	3324      	adds	r3, #36	; 0x24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 f9c1 	bl	8009230 <xTaskRemoveFromEventList>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d013      	beq.n	8007edc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007eb4:	4b3f      	ldr	r3, [pc, #252]	; (8007fb4 <xQueueGenericSend+0x1f8>)
 8007eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	e00a      	b.n	8007edc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ecc:	4b39      	ldr	r3, [pc, #228]	; (8007fb4 <xQueueGenericSend+0x1f8>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007edc:	f001 feea 	bl	8009cb4 <vPortExitCritical>
				return pdPASS;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e063      	b.n	8007fac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eea:	f001 fee3 	bl	8009cb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e05c      	b.n	8007fac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ef8:	f107 0314 	add.w	r3, r7, #20
 8007efc:	4618      	mov	r0, r3
 8007efe:	f001 f9f9 	bl	80092f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f02:	2301      	movs	r3, #1
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f06:	f001 fed5 	bl	8009cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f0a:	f000 ff61 	bl	8008dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f0e:	f001 fea1 	bl	8009c54 <vPortEnterCritical>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d103      	bne.n	8007f28 <xQueueGenericSend+0x16c>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f2e:	b25b      	sxtb	r3, r3
 8007f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f34:	d103      	bne.n	8007f3e <xQueueGenericSend+0x182>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f3e:	f001 feb9 	bl	8009cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f42:	1d3a      	adds	r2, r7, #4
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 f9e8 	bl	8009320 <xTaskCheckForTimeOut>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d124      	bne.n	8007fa0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f58:	f000 fcd2 	bl	8008900 <prvIsQueueFull>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d018      	beq.n	8007f94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	3310      	adds	r3, #16
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f001 f93c 	bl	80091e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f72:	f000 fc5d 	bl	8008830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f76:	f000 ff39 	bl	8008dec <xTaskResumeAll>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f47f af7c 	bne.w	8007e7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <xQueueGenericSend+0x1f8>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	e772      	b.n	8007e7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f96:	f000 fc4b 	bl	8008830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f9a:	f000 ff27 	bl	8008dec <xTaskResumeAll>
 8007f9e:	e76c      	b.n	8007e7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fa2:	f000 fc45 	bl	8008830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fa6:	f000 ff21 	bl	8008dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007faa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3738      	adds	r7, #56	; 0x38
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	e000ed04 	.word	0xe000ed04

08007fb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b090      	sub	sp, #64	; 0x40
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <xQueueGenericSendFromISR+0x3c>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <xQueueGenericSendFromISR+0x40>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <xQueueGenericSendFromISR+0x42>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d103      	bne.n	8008022 <xQueueGenericSendFromISR+0x6a>
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <xQueueGenericSendFromISR+0x6e>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <xQueueGenericSendFromISR+0x70>
 8008026:	2300      	movs	r3, #0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	623b      	str	r3, [r7, #32]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008042:	f001 fee9 	bl	8009e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008046:	f3ef 8211 	mrs	r2, BASEPRI
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	61fa      	str	r2, [r7, #28]
 800805c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800805e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806a:	429a      	cmp	r2, r3
 800806c:	d302      	bcc.n	8008074 <xQueueGenericSendFromISR+0xbc>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d12f      	bne.n	80080d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800807a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008084:	683a      	ldr	r2, [r7, #0]
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800808a:	f000 fb41 	bl	8008710 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800808e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008096:	d112      	bne.n	80080be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	2b00      	cmp	r3, #0
 800809e:	d016      	beq.n	80080ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	3324      	adds	r3, #36	; 0x24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 f8c3 	bl	8009230 <xTaskRemoveFromEventList>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00e      	beq.n	80080ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	e007      	b.n	80080ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080c2:	3301      	adds	r3, #1
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	b25a      	sxtb	r2, r3
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080ce:	2301      	movs	r3, #1
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080d2:	e001      	b.n	80080d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3740      	adds	r7, #64	; 0x40
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b08e      	sub	sp, #56	; 0x38
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	623b      	str	r3, [r7, #32]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	61fb      	str	r3, [r7, #28]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueGiveFromISR+0x58>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <xQueueGiveFromISR+0x5c>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <xQueueGiveFromISR+0x5e>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10a      	bne.n	8008166 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61bb      	str	r3, [r7, #24]
}
 8008162:	bf00      	nop
 8008164:	e7fe      	b.n	8008164 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008166:	f001 fe57 	bl	8009e18 <vPortValidateInterruptPriority>
	__asm volatile
 800816a:	f3ef 8211 	mrs	r2, BASEPRI
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	617a      	str	r2, [r7, #20]
 8008180:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008182:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008192:	429a      	cmp	r2, r3
 8008194:	d22b      	bcs.n	80081ee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800819c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b0:	d112      	bne.n	80081d8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d016      	beq.n	80081e8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	3324      	adds	r3, #36	; 0x24
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 f836 	bl	8009230 <xTaskRemoveFromEventList>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00e      	beq.n	80081e8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2201      	movs	r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	e007      	b.n	80081e8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081dc:	3301      	adds	r3, #1
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	b25a      	sxtb	r2, r3
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081e8:	2301      	movs	r3, #1
 80081ea:	637b      	str	r3, [r7, #52]	; 0x34
 80081ec:	e001      	b.n	80081f2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
 80081f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f383 8811 	msr	BASEPRI, r3
}
 80081fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008200:	4618      	mov	r0, r3
 8008202:	3738      	adds	r7, #56	; 0x38
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08c      	sub	sp, #48	; 0x30
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <xQueueReceive+0x30>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	623b      	str	r3, [r7, #32]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <xQueueReceive+0x3e>
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <xQueueReceive+0x42>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueReceive+0x44>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10a      	bne.n	8008266 <xQueueReceive+0x5e>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	61fb      	str	r3, [r7, #28]
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008266:	f001 f9a3 	bl	80095b0 <xTaskGetSchedulerState>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <xQueueReceive+0x6e>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <xQueueReceive+0x72>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueReceive+0x74>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xQueueReceive+0x8e>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	61bb      	str	r3, [r7, #24]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008296:	f001 fcdd 	bl	8009c54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01f      	beq.n	80082e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082aa:	f000 fa9b 	bl	80087e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	1e5a      	subs	r2, r3, #1
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00f      	beq.n	80082de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	3310      	adds	r3, #16
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 ffb4 	bl	8009230 <xTaskRemoveFromEventList>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082ce:	4b3d      	ldr	r3, [pc, #244]	; (80083c4 <xQueueReceive+0x1bc>)
 80082d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082de:	f001 fce9 	bl	8009cb4 <vPortExitCritical>
				return pdPASS;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e069      	b.n	80083ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d103      	bne.n	80082f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ec:	f001 fce2 	bl	8009cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082f0:	2300      	movs	r3, #0
 80082f2:	e062      	b.n	80083ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d106      	bne.n	8008308 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082fa:	f107 0310 	add.w	r3, r7, #16
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fff8 	bl	80092f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008308:	f001 fcd4 	bl	8009cb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800830c:	f000 fd60 	bl	8008dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008310:	f001 fca0 	bl	8009c54 <vPortEnterCritical>
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800831a:	b25b      	sxtb	r3, r3
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d103      	bne.n	800832a <xQueueReceive+0x122>
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008330:	b25b      	sxtb	r3, r3
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d103      	bne.n	8008340 <xQueueReceive+0x138>
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008340:	f001 fcb8 	bl	8009cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008344:	1d3a      	adds	r2, r7, #4
 8008346:	f107 0310 	add.w	r3, r7, #16
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f000 ffe7 	bl	8009320 <xTaskCheckForTimeOut>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d123      	bne.n	80083a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835a:	f000 fabb 	bl	80088d4 <prvIsQueueEmpty>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	3324      	adds	r3, #36	; 0x24
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 ff3b 	bl	80091e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008374:	f000 fa5c 	bl	8008830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008378:	f000 fd38 	bl	8008dec <xTaskResumeAll>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d189      	bne.n	8008296 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <xQueueReceive+0x1bc>)
 8008384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	e780      	b.n	8008296 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008396:	f000 fa4b 	bl	8008830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800839a:	f000 fd27 	bl	8008dec <xTaskResumeAll>
 800839e:	e77a      	b.n	8008296 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a2:	f000 fa45 	bl	8008830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083a6:	f000 fd21 	bl	8008dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ac:	f000 fa92 	bl	80088d4 <prvIsQueueEmpty>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f43f af6f 	beq.w	8008296 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3730      	adds	r7, #48	; 0x30
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08e      	sub	sp, #56	; 0x38
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083d2:	2300      	movs	r3, #0
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	623b      	str	r3, [r7, #32]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	61fb      	str	r3, [r7, #28]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008418:	f001 f8ca 	bl	80095b0 <xTaskGetSchedulerState>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d102      	bne.n	8008428 <xQueueSemaphoreTake+0x60>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <xQueueSemaphoreTake+0x64>
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <xQueueSemaphoreTake+0x66>
 800842c:	2300      	movs	r3, #0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10a      	bne.n	8008448 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	61bb      	str	r3, [r7, #24]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008448:	f001 fc04 	bl	8009c54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	2b00      	cmp	r3, #0
 8008456:	d024      	beq.n	80084a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	1e5a      	subs	r2, r3, #1
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008468:	f001 fa4a 	bl	8009900 <pvTaskIncrementMutexHeldCount>
 800846c:	4602      	mov	r2, r0
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00f      	beq.n	800849a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	3310      	adds	r3, #16
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fed6 	bl	8009230 <xTaskRemoveFromEventList>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800848a:	4b54      	ldr	r3, [pc, #336]	; (80085dc <xQueueSemaphoreTake+0x214>)
 800848c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800849a:	f001 fc0b 	bl	8009cb4 <vPortExitCritical>
				return pdPASS;
 800849e:	2301      	movs	r3, #1
 80084a0:	e097      	b.n	80085d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d111      	bne.n	80084cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00a      	beq.n	80084c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	617b      	str	r3, [r7, #20]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084c4:	f001 fbf6 	bl	8009cb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e082      	b.n	80085d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 ff0c 	bl	80092f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084e0:	f001 fbe8 	bl	8009cb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084e4:	f000 fc74 	bl	8008dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084e8:	f001 fbb4 	bl	8009c54 <vPortEnterCritical>
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084f2:	b25b      	sxtb	r3, r3
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d103      	bne.n	8008502 <xQueueSemaphoreTake+0x13a>
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008508:	b25b      	sxtb	r3, r3
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d103      	bne.n	8008518 <xQueueSemaphoreTake+0x150>
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008518:	f001 fbcc 	bl	8009cb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800851c:	463a      	mov	r2, r7
 800851e:	f107 030c 	add.w	r3, r7, #12
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fefb 	bl	8009320 <xTaskCheckForTimeOut>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d132      	bne.n	8008596 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008532:	f000 f9cf 	bl	80088d4 <prvIsQueueEmpty>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d026      	beq.n	800858a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008544:	f001 fb86 	bl	8009c54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	4618      	mov	r0, r3
 800854e:	f001 f84d 	bl	80095ec <xTaskPriorityInherit>
 8008552:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008554:	f001 fbae 	bl	8009cb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	3324      	adds	r3, #36	; 0x24
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fe41 	bl	80091e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008568:	f000 f962 	bl	8008830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800856c:	f000 fc3e 	bl	8008dec <xTaskResumeAll>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	f47f af68 	bne.w	8008448 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008578:	4b18      	ldr	r3, [pc, #96]	; (80085dc <xQueueSemaphoreTake+0x214>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	e75e      	b.n	8008448 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800858a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800858c:	f000 f950 	bl	8008830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008590:	f000 fc2c 	bl	8008dec <xTaskResumeAll>
 8008594:	e758      	b.n	8008448 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008598:	f000 f94a 	bl	8008830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800859c:	f000 fc26 	bl	8008dec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085a2:	f000 f997 	bl	80088d4 <prvIsQueueEmpty>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f43f af4d 	beq.w	8008448 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00d      	beq.n	80085d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80085b4:	f001 fb4e 	bl	8009c54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80085b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ba:	f000 f891 	bl	80086e0 <prvGetDisinheritPriorityAfterTimeout>
 80085be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 f90c 	bl	80097e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085cc:	f001 fb72 	bl	8009cb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3738      	adds	r7, #56	; 0x38
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	e000ed04 	.word	0xe000ed04

080085e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08e      	sub	sp, #56	; 0x38
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	623b      	str	r3, [r7, #32]
}
 8008608:	bf00      	nop
 800860a:	e7fe      	b.n	800860a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <xQueueReceiveFromISR+0x3a>
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <xQueueReceiveFromISR+0x3e>
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <xQueueReceiveFromISR+0x40>
 800861e:	2300      	movs	r3, #0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	61fb      	str	r3, [r7, #28]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800863a:	f001 fbed 	bl	8009e18 <vPortValidateInterruptPriority>
	__asm volatile
 800863e:	f3ef 8211 	mrs	r2, BASEPRI
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	61ba      	str	r2, [r7, #24]
 8008654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d02f      	beq.n	80086c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800866c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008674:	f000 f8b6 	bl	80087e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d112      	bne.n	80086b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d016      	beq.n	80086c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	3310      	adds	r3, #16
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fdca 	bl	8009230 <xTaskRemoveFromEventList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00e      	beq.n	80086c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e007      	b.n	80086c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b4:	3301      	adds	r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	b25a      	sxtb	r2, r3
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	e001      	b.n	80086ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f383 8811 	msr	BASEPRI, r3
}
 80086d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3738      	adds	r7, #56	; 0x38
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d006      	beq.n	80086fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1c3 0307 	rsb	r3, r3, #7
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e001      	b.n	8008702 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008702:	68fb      	ldr	r3, [r7, #12]
	}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10d      	bne.n	800874a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d14d      	bne.n	80087d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	4618      	mov	r0, r3
 800873c:	f000 ffcc 	bl	80096d8 <xTaskPriorityDisinherit>
 8008740:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
 8008748:	e043      	b.n	80087d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d119      	bne.n	8008784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6858      	ldr	r0, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	461a      	mov	r2, r3
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	f00e fc3e 	bl	8016fdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	441a      	add	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d32b      	bcc.n	80087d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	e026      	b.n	80087d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68d8      	ldr	r0, [r3, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	461a      	mov	r2, r3
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	f00e fc24 	bl	8016fdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	425b      	negs	r3, r3
 800879e:	441a      	add	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d207      	bcs.n	80087c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	425b      	negs	r3, r3
 80087ba:	441a      	add	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d105      	bne.n	80087d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087da:	697b      	ldr	r3, [r7, #20]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d018      	beq.n	8008828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	441a      	add	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d303      	bcc.n	8008818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68d9      	ldr	r1, [r3, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	461a      	mov	r2, r3
 8008822:	6838      	ldr	r0, [r7, #0]
 8008824:	f00e fbda 	bl	8016fdc <memcpy>
	}
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008838:	f001 fa0c 	bl	8009c54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008844:	e011      	b.n	800886a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	d012      	beq.n	8008874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3324      	adds	r3, #36	; 0x24
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fcec 	bl	8009230 <xTaskRemoveFromEventList>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800885e:	f000 fdc1 	bl	80093e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
 8008864:	3b01      	subs	r3, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800886a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dce9      	bgt.n	8008846 <prvUnlockQueue+0x16>
 8008872:	e000      	b.n	8008876 <prvUnlockQueue+0x46>
					break;
 8008874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	22ff      	movs	r2, #255	; 0xff
 800887a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800887e:	f001 fa19 	bl	8009cb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008882:	f001 f9e7 	bl	8009c54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800888e:	e011      	b.n	80088b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d012      	beq.n	80088be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3310      	adds	r3, #16
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fcc7 	bl	8009230 <xTaskRemoveFromEventList>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088a8:	f000 fd9c 	bl	80093e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dce9      	bgt.n	8008890 <prvUnlockQueue+0x60>
 80088bc:	e000      	b.n	80088c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	22ff      	movs	r2, #255	; 0xff
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088c8:	f001 f9f4 	bl	8009cb4 <vPortExitCritical>
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088dc:	f001 f9ba 	bl	8009c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	e001      	b.n	80088f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088f2:	f001 f9df 	bl	8009cb4 <vPortExitCritical>

	return xReturn;
 80088f6:	68fb      	ldr	r3, [r7, #12]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008908:	f001 f9a4 	bl	8009c54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008914:	429a      	cmp	r2, r3
 8008916:	d102      	bne.n	800891e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008918:	2301      	movs	r3, #1
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	e001      	b.n	8008922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008922:	f001 f9c7 	bl	8009cb4 <vPortExitCritical>

	return xReturn;
 8008926:	68fb      	ldr	r3, [r7, #12]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08e      	sub	sp, #56	; 0x38
 8008934:	af04      	add	r7, sp, #16
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	623b      	str	r3, [r7, #32]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xTaskCreateStatic+0x46>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	61fb      	str	r3, [r7, #28]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008976:	23b4      	movs	r3, #180	; 0xb4
 8008978:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2bb4      	cmp	r3, #180	; 0xb4
 800897e:	d00a      	beq.n	8008996 <xTaskCreateStatic+0x66>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	61bb      	str	r3, [r7, #24]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01e      	beq.n	80089dc <xTaskCreateStatic+0xac>
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01b      	beq.n	80089dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	2202      	movs	r2, #2
 80089b2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089b6:	2300      	movs	r3, #0
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	9302      	str	r3, [sp, #8]
 80089be:	f107 0314 	add.w	r3, r7, #20
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f850 	bl	8008a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d6:	f000 f8f3 	bl	8008bc0 <prvAddNewTaskToReadyList>
 80089da:	e001      	b.n	80089e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089e0:	697b      	ldr	r3, [r7, #20]
	}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3728      	adds	r7, #40	; 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b08c      	sub	sp, #48	; 0x30
 80089ee:	af04      	add	r7, sp, #16
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	603b      	str	r3, [r7, #0]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 fa4a 	bl	8009e98 <pvPortMalloc>
 8008a04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00e      	beq.n	8008a2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a0c:	20b4      	movs	r0, #180	; 0xb4
 8008a0e:	f001 fa43 	bl	8009e98 <pvPortMalloc>
 8008a12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8008a20:	e005      	b.n	8008a2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f001 fa4a 	bl	8009ebc <vPortFree>
 8008a28:	e001      	b.n	8008a2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a3c:	88fa      	ldrh	r2, [r7, #6]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 f80e 	bl	8008a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a58:	69f8      	ldr	r0, [r7, #28]
 8008a5a:	f000 f8b1 	bl	8008bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e002      	b.n	8008a6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a64:	f04f 33ff 	mov.w	r3, #4294967295
 8008a68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	21a5      	movs	r1, #165	; 0xa5
 8008a8e:	f00e facd 	bl	801702c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	f023 0307 	bic.w	r3, r3, #7
 8008aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	f003 0307 	and.w	r3, r3, #7
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	617b      	str	r3, [r7, #20]
}
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01f      	beq.n	8008b12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	61fb      	str	r3, [r7, #28]
 8008ad6:	e012      	b.n	8008afe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	4413      	add	r3, r2
 8008ade:	7819      	ldrb	r1, [r3, #0]
 8008ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3334      	adds	r3, #52	; 0x34
 8008ae8:	460a      	mov	r2, r1
 8008aea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3301      	adds	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b0f      	cmp	r3, #15
 8008b02:	d9e9      	bls.n	8008ad8 <prvInitialiseNewTask+0x64>
 8008b04:	e000      	b.n	8008b08 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b10:	e003      	b.n	8008b1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	2b06      	cmp	r3, #6
 8008b1e:	d901      	bls.n	8008b24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b20:	2306      	movs	r3, #6
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	2200      	movs	r2, #0
 8008b34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe ff24 	bl	8007988 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	3318      	adds	r3, #24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff1f 	bl	8007988 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	f1c3 0207 	rsb	r2, r3, #7
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	334c      	adds	r3, #76	; 0x4c
 8008b74:	2260      	movs	r2, #96	; 0x60
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f00e fa57 	bl	801702c <memset>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	4a0c      	ldr	r2, [pc, #48]	; (8008bb4 <prvInitialiseNewTask+0x140>)
 8008b82:	651a      	str	r2, [r3, #80]	; 0x50
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	4a0c      	ldr	r2, [pc, #48]	; (8008bb8 <prvInitialiseNewTask+0x144>)
 8008b88:	655a      	str	r2, [r3, #84]	; 0x54
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	4a0b      	ldr	r2, [pc, #44]	; (8008bbc <prvInitialiseNewTask+0x148>)
 8008b8e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	68f9      	ldr	r1, [r7, #12]
 8008b94:	69b8      	ldr	r0, [r7, #24]
 8008b96:	f000 ff2d 	bl	80099f4 <pxPortInitialiseStack>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008baa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bac:	bf00      	nop
 8008bae:	3720      	adds	r7, #32
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	0801d29c 	.word	0x0801d29c
 8008bb8:	0801d2bc 	.word	0x0801d2bc
 8008bbc:	0801d27c 	.word	0x0801d27c

08008bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bc8:	f001 f844 	bl	8009c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bcc:	4b2a      	ldr	r3, [pc, #168]	; (8008c78 <prvAddNewTaskToReadyList+0xb8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	4a29      	ldr	r2, [pc, #164]	; (8008c78 <prvAddNewTaskToReadyList+0xb8>)
 8008bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bd6:	4b29      	ldr	r3, [pc, #164]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bde:	4a27      	ldr	r2, [pc, #156]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008be4:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <prvAddNewTaskToReadyList+0xb8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d110      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bec:	f000 fc1e 	bl	800942c <prvInitialiseTaskLists>
 8008bf0:	e00d      	b.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bf2:	4b23      	ldr	r3, [pc, #140]	; (8008c80 <prvAddNewTaskToReadyList+0xc0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bfa:	4b20      	ldr	r3, [pc, #128]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d802      	bhi.n	8008c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c08:	4a1c      	ldr	r2, [pc, #112]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3301      	adds	r3, #1
 8008c14:	4a1b      	ldr	r2, [pc, #108]	; (8008c84 <prvAddNewTaskToReadyList+0xc4>)
 8008c16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	409a      	lsls	r2, r3
 8008c20:	4b19      	ldr	r3, [pc, #100]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <prvAddNewTaskToReadyList+0xc8>)
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <prvAddNewTaskToReadyList+0xcc>)
 8008c38:	441a      	add	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f7fe feae 	bl	80079a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c46:	f001 f835 	bl	8009cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <prvAddNewTaskToReadyList+0xc0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <prvAddNewTaskToReadyList+0xbc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d207      	bcs.n	8008c70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <prvAddNewTaskToReadyList+0xd0>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c70:	bf00      	nop
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	2000588c 	.word	0x2000588c
 8008c7c:	2000578c 	.word	0x2000578c
 8008c80:	20005898 	.word	0x20005898
 8008c84:	200058a8 	.word	0x200058a8
 8008c88:	20005894 	.word	0x20005894
 8008c8c:	20005790 	.word	0x20005790
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d017      	beq.n	8008cd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ca6:	4b13      	ldr	r3, [pc, #76]	; (8008cf4 <vTaskDelay+0x60>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00a      	beq.n	8008cc4 <vTaskDelay+0x30>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60bb      	str	r3, [r7, #8]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cc4:	f000 f884 	bl	8008dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cc8:	2100      	movs	r1, #0
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fe2c 	bl	8009928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cd0:	f000 f88c 	bl	8008dec <xTaskResumeAll>
 8008cd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d107      	bne.n	8008cec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008cdc:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <vTaskDelay+0x64>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200058b4 	.word	0x200058b4
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	1d39      	adds	r1, r7, #4
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7f7 fc62 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	9202      	str	r2, [sp, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	2300      	movs	r3, #0
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2300      	movs	r3, #0
 8008d28:	460a      	mov	r2, r1
 8008d2a:	4921      	ldr	r1, [pc, #132]	; (8008db0 <vTaskStartScheduler+0xb4>)
 8008d2c:	4821      	ldr	r0, [pc, #132]	; (8008db4 <vTaskStartScheduler+0xb8>)
 8008d2e:	f7ff fdff 	bl	8008930 <xTaskCreateStatic>
 8008d32:	4603      	mov	r3, r0
 8008d34:	4a20      	ldr	r2, [pc, #128]	; (8008db8 <vTaskStartScheduler+0xbc>)
 8008d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d38:	4b1f      	ldr	r3, [pc, #124]	; (8008db8 <vTaskStartScheduler+0xbc>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e001      	b.n	8008d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d11b      	bne.n	8008d88 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	613b      	str	r3, [r7, #16]
}
 8008d62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d64:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <vTaskStartScheduler+0xc0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	334c      	adds	r3, #76	; 0x4c
 8008d6a:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <vTaskStartScheduler+0xc4>)
 8008d6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <vTaskStartScheduler+0xc8>)
 8008d70:	f04f 32ff 	mov.w	r2, #4294967295
 8008d74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <vTaskStartScheduler+0xcc>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d7c:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <vTaskStartScheduler+0xd0>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d82:	f000 fec5 	bl	8009b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d86:	e00e      	b.n	8008da6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d10a      	bne.n	8008da6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60fb      	str	r3, [r7, #12]
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <vTaskStartScheduler+0xa8>
}
 8008da6:	bf00      	nop
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	080188e4 	.word	0x080188e4
 8008db4:	080093fd 	.word	0x080093fd
 8008db8:	200058b0 	.word	0x200058b0
 8008dbc:	2000578c 	.word	0x2000578c
 8008dc0:	20000040 	.word	0x20000040
 8008dc4:	200058ac 	.word	0x200058ac
 8008dc8:	20005898 	.word	0x20005898
 8008dcc:	20005890 	.word	0x20005890

08008dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008dd4:	4b04      	ldr	r3, [pc, #16]	; (8008de8 <vTaskSuspendAll+0x18>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	4a03      	ldr	r2, [pc, #12]	; (8008de8 <vTaskSuspendAll+0x18>)
 8008ddc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dde:	bf00      	nop
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	200058b4 	.word	0x200058b4

08008dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dfa:	4b41      	ldr	r3, [pc, #260]	; (8008f00 <xTaskResumeAll+0x114>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	603b      	str	r3, [r7, #0]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e18:	f000 ff1c 	bl	8009c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e1c:	4b38      	ldr	r3, [pc, #224]	; (8008f00 <xTaskResumeAll+0x114>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	4a37      	ldr	r2, [pc, #220]	; (8008f00 <xTaskResumeAll+0x114>)
 8008e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e26:	4b36      	ldr	r3, [pc, #216]	; (8008f00 <xTaskResumeAll+0x114>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d161      	bne.n	8008ef2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e2e:	4b35      	ldr	r3, [pc, #212]	; (8008f04 <xTaskResumeAll+0x118>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d05d      	beq.n	8008ef2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e36:	e02e      	b.n	8008e96 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e38:	4b33      	ldr	r3, [pc, #204]	; (8008f08 <xTaskResumeAll+0x11c>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3318      	adds	r3, #24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fe09 	bl	8007a5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fe04 	bl	8007a5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	2201      	movs	r2, #1
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	4b2b      	ldr	r3, [pc, #172]	; (8008f0c <xTaskResumeAll+0x120>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	4a2a      	ldr	r2, [pc, #168]	; (8008f0c <xTaskResumeAll+0x120>)
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4a27      	ldr	r2, [pc, #156]	; (8008f10 <xTaskResumeAll+0x124>)
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7fe fd90 	bl	80079a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <xTaskResumeAll+0x128>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d302      	bcc.n	8008e96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e90:	4b21      	ldr	r3, [pc, #132]	; (8008f18 <xTaskResumeAll+0x12c>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e96:	4b1c      	ldr	r3, [pc, #112]	; (8008f08 <xTaskResumeAll+0x11c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1cc      	bne.n	8008e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ea4:	f000 fb64 	bl	8009570 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ea8:	4b1c      	ldr	r3, [pc, #112]	; (8008f1c <xTaskResumeAll+0x130>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d010      	beq.n	8008ed6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008eb4:	f000 f858 	bl	8008f68 <xTaskIncrementTick>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008ebe:	4b16      	ldr	r3, [pc, #88]	; (8008f18 <xTaskResumeAll+0x12c>)
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1f1      	bne.n	8008eb4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <xTaskResumeAll+0x130>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ed6:	4b10      	ldr	r3, [pc, #64]	; (8008f18 <xTaskResumeAll+0x12c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <xTaskResumeAll+0x134>)
 8008ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ef2:	f000 fedf 	bl	8009cb4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	200058b4 	.word	0x200058b4
 8008f04:	2000588c 	.word	0x2000588c
 8008f08:	2000584c 	.word	0x2000584c
 8008f0c:	20005894 	.word	0x20005894
 8008f10:	20005790 	.word	0x20005790
 8008f14:	2000578c 	.word	0x2000578c
 8008f18:	200058a0 	.word	0x200058a0
 8008f1c:	2000589c 	.word	0x2000589c
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <xTaskGetTickCount+0x1c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f30:	687b      	ldr	r3, [r7, #4]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20005890 	.word	0x20005890

08008f44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f4a:	f000 ff65 	bl	8009e18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008f4e:	2300      	movs	r3, #0
 8008f50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008f52:	4b04      	ldr	r3, [pc, #16]	; (8008f64 <xTaskGetTickCountFromISR+0x20>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f58:	683b      	ldr	r3, [r7, #0]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20005890 	.word	0x20005890

08008f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f72:	4b4e      	ldr	r3, [pc, #312]	; (80090ac <xTaskIncrementTick+0x144>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f040 808e 	bne.w	8009098 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f7c:	4b4c      	ldr	r3, [pc, #304]	; (80090b0 <xTaskIncrementTick+0x148>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3301      	adds	r3, #1
 8008f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f84:	4a4a      	ldr	r2, [pc, #296]	; (80090b0 <xTaskIncrementTick+0x148>)
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d120      	bne.n	8008fd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f90:	4b48      	ldr	r3, [pc, #288]	; (80090b4 <xTaskIncrementTick+0x14c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	603b      	str	r3, [r7, #0]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <xTaskIncrementTick+0x46>
 8008fb0:	4b40      	ldr	r3, [pc, #256]	; (80090b4 <xTaskIncrementTick+0x14c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	4b40      	ldr	r3, [pc, #256]	; (80090b8 <xTaskIncrementTick+0x150>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a3e      	ldr	r2, [pc, #248]	; (80090b4 <xTaskIncrementTick+0x14c>)
 8008fbc:	6013      	str	r3, [r2, #0]
 8008fbe:	4a3e      	ldr	r2, [pc, #248]	; (80090b8 <xTaskIncrementTick+0x150>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	4b3d      	ldr	r3, [pc, #244]	; (80090bc <xTaskIncrementTick+0x154>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	4a3c      	ldr	r2, [pc, #240]	; (80090bc <xTaskIncrementTick+0x154>)
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	f000 facf 	bl	8009570 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fd2:	4b3b      	ldr	r3, [pc, #236]	; (80090c0 <xTaskIncrementTick+0x158>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d348      	bcc.n	800906e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fdc:	4b35      	ldr	r3, [pc, #212]	; (80090b4 <xTaskIncrementTick+0x14c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe6:	4b36      	ldr	r3, [pc, #216]	; (80090c0 <xTaskIncrementTick+0x158>)
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	601a      	str	r2, [r3, #0]
					break;
 8008fee:	e03e      	b.n	800906e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ff0:	4b30      	ldr	r3, [pc, #192]	; (80090b4 <xTaskIncrementTick+0x14c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	429a      	cmp	r2, r3
 8009006:	d203      	bcs.n	8009010 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009008:	4a2d      	ldr	r2, [pc, #180]	; (80090c0 <xTaskIncrementTick+0x158>)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800900e:	e02e      	b.n	800906e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	3304      	adds	r3, #4
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fd21 	bl	8007a5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d004      	beq.n	800902c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	3318      	adds	r3, #24
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fd18 	bl	8007a5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	2201      	movs	r2, #1
 8009032:	409a      	lsls	r2, r3
 8009034:	4b23      	ldr	r3, [pc, #140]	; (80090c4 <xTaskIncrementTick+0x15c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4313      	orrs	r3, r2
 800903a:	4a22      	ldr	r2, [pc, #136]	; (80090c4 <xTaskIncrementTick+0x15c>)
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4a1f      	ldr	r2, [pc, #124]	; (80090c8 <xTaskIncrementTick+0x160>)
 800904c:	441a      	add	r2, r3
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	3304      	adds	r3, #4
 8009052:	4619      	mov	r1, r3
 8009054:	4610      	mov	r0, r2
 8009056:	f7fe fca4 	bl	80079a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905e:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <xTaskIncrementTick+0x164>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	429a      	cmp	r2, r3
 8009066:	d3b9      	bcc.n	8008fdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800906c:	e7b6      	b.n	8008fdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800906e:	4b17      	ldr	r3, [pc, #92]	; (80090cc <xTaskIncrementTick+0x164>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4914      	ldr	r1, [pc, #80]	; (80090c8 <xTaskIncrementTick+0x160>)
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d901      	bls.n	800908a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009086:	2301      	movs	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800908a:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <xTaskIncrementTick+0x168>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009092:	2301      	movs	r3, #1
 8009094:	617b      	str	r3, [r7, #20]
 8009096:	e004      	b.n	80090a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009098:	4b0e      	ldr	r3, [pc, #56]	; (80090d4 <xTaskIncrementTick+0x16c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	4a0d      	ldr	r2, [pc, #52]	; (80090d4 <xTaskIncrementTick+0x16c>)
 80090a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090a2:	697b      	ldr	r3, [r7, #20]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200058b4 	.word	0x200058b4
 80090b0:	20005890 	.word	0x20005890
 80090b4:	20005844 	.word	0x20005844
 80090b8:	20005848 	.word	0x20005848
 80090bc:	200058a4 	.word	0x200058a4
 80090c0:	200058ac 	.word	0x200058ac
 80090c4:	20005894 	.word	0x20005894
 80090c8:	20005790 	.word	0x20005790
 80090cc:	2000578c 	.word	0x2000578c
 80090d0:	200058a0 	.word	0x200058a0
 80090d4:	2000589c 	.word	0x2000589c

080090d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090de:	4b3c      	ldr	r3, [pc, #240]	; (80091d0 <vTaskSwitchContext+0xf8>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090e6:	4b3b      	ldr	r3, [pc, #236]	; (80091d4 <vTaskSwitchContext+0xfc>)
 80090e8:	2201      	movs	r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090ec:	e06b      	b.n	80091c6 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 80090ee:	4b39      	ldr	r3, [pc, #228]	; (80091d4 <vTaskSwitchContext+0xfc>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80090f4:	4b38      	ldr	r3, [pc, #224]	; (80091d8 <vTaskSwitchContext+0x100>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	61fb      	str	r3, [r7, #28]
 80090fc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	429a      	cmp	r2, r3
 800910a:	d111      	bne.n	8009130 <vTaskSwitchContext+0x58>
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	3304      	adds	r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	429a      	cmp	r2, r3
 8009116:	d10b      	bne.n	8009130 <vTaskSwitchContext+0x58>
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	3308      	adds	r3, #8
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	429a      	cmp	r2, r3
 8009122:	d105      	bne.n	8009130 <vTaskSwitchContext+0x58>
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	330c      	adds	r3, #12
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	429a      	cmp	r2, r3
 800912e:	d008      	beq.n	8009142 <vTaskSwitchContext+0x6a>
 8009130:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <vTaskSwitchContext+0x100>)
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <vTaskSwitchContext+0x100>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3334      	adds	r3, #52	; 0x34
 800913a:	4619      	mov	r1, r3
 800913c:	4610      	mov	r0, r2
 800913e:	f7f7 fa41 	bl	80005c4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009142:	4b26      	ldr	r3, [pc, #152]	; (80091dc <vTaskSwitchContext+0x104>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	fab3 f383 	clz	r3, r3
 800914e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	f1c3 031f 	rsb	r3, r3, #31
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	4921      	ldr	r1, [pc, #132]	; (80091e0 <vTaskSwitchContext+0x108>)
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <vTaskSwitchContext+0xaa>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	607b      	str	r3, [r7, #4]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <vTaskSwitchContext+0xa8>
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4a14      	ldr	r2, [pc, #80]	; (80091e0 <vTaskSwitchContext+0x108>)
 800918e:	4413      	add	r3, r2
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	605a      	str	r2, [r3, #4]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3308      	adds	r3, #8
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d104      	bne.n	80091b2 <vTaskSwitchContext+0xda>
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4a07      	ldr	r2, [pc, #28]	; (80091d8 <vTaskSwitchContext+0x100>)
 80091ba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <vTaskSwitchContext+0x100>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	334c      	adds	r3, #76	; 0x4c
 80091c2:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <vTaskSwitchContext+0x10c>)
 80091c4:	6013      	str	r3, [r2, #0]
}
 80091c6:	bf00      	nop
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	200058b4 	.word	0x200058b4
 80091d4:	200058a0 	.word	0x200058a0
 80091d8:	2000578c 	.word	0x2000578c
 80091dc:	20005894 	.word	0x20005894
 80091e0:	20005790 	.word	0x20005790
 80091e4:	20000040 	.word	0x20000040

080091e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	60fb      	str	r3, [r7, #12]
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800920e:	4b07      	ldr	r3, [pc, #28]	; (800922c <vTaskPlaceOnEventList+0x44>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3318      	adds	r3, #24
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7fe fbe7 	bl	80079ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800921c:	2101      	movs	r1, #1
 800921e:	6838      	ldr	r0, [r7, #0]
 8009220:	f000 fb82 	bl	8009928 <prvAddCurrentTaskToDelayedList>
}
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	2000578c 	.word	0x2000578c

08009230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	3318      	adds	r3, #24
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fbfb 	bl	8007a5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <xTaskRemoveFromEventList+0xac>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d11c      	bne.n	80092a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	3304      	adds	r3, #4
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fbf2 	bl	8007a5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	2201      	movs	r2, #1
 800927e:	409a      	lsls	r2, r3
 8009280:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <xTaskRemoveFromEventList+0xb0>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4313      	orrs	r3, r2
 8009286:	4a16      	ldr	r2, [pc, #88]	; (80092e0 <xTaskRemoveFromEventList+0xb0>)
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4a13      	ldr	r2, [pc, #76]	; (80092e4 <xTaskRemoveFromEventList+0xb4>)
 8009298:	441a      	add	r2, r3
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	3304      	adds	r3, #4
 800929e:	4619      	mov	r1, r3
 80092a0:	4610      	mov	r0, r2
 80092a2:	f7fe fb7e 	bl	80079a2 <vListInsertEnd>
 80092a6:	e005      	b.n	80092b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	3318      	adds	r3, #24
 80092ac:	4619      	mov	r1, r3
 80092ae:	480e      	ldr	r0, [pc, #56]	; (80092e8 <xTaskRemoveFromEventList+0xb8>)
 80092b0:	f7fe fb77 	bl	80079a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b8:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <xTaskRemoveFromEventList+0xbc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092be:	429a      	cmp	r2, r3
 80092c0:	d905      	bls.n	80092ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092c2:	2301      	movs	r3, #1
 80092c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092c6:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <xTaskRemoveFromEventList+0xc0>)
 80092c8:	2201      	movs	r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	e001      	b.n	80092d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80092d2:	697b      	ldr	r3, [r7, #20]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200058b4 	.word	0x200058b4
 80092e0:	20005894 	.word	0x20005894
 80092e4:	20005790 	.word	0x20005790
 80092e8:	2000584c 	.word	0x2000584c
 80092ec:	2000578c 	.word	0x2000578c
 80092f0:	200058a0 	.word	0x200058a0

080092f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092fc:	4b06      	ldr	r3, [pc, #24]	; (8009318 <vTaskInternalSetTimeOutState+0x24>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <vTaskInternalSetTimeOutState+0x28>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	605a      	str	r2, [r3, #4]
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	200058a4 	.word	0x200058a4
 800931c:	20005890 	.word	0x20005890

08009320 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	613b      	str	r3, [r7, #16]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	60fb      	str	r3, [r7, #12]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009362:	f000 fc77 	bl	8009c54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009366:	4b1d      	ldr	r3, [pc, #116]	; (80093dc <xTaskCheckForTimeOut+0xbc>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d102      	bne.n	8009386 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	e023      	b.n	80093ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <xTaskCheckForTimeOut+0xc0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d007      	beq.n	80093a2 <xTaskCheckForTimeOut+0x82>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	429a      	cmp	r2, r3
 800939a:	d302      	bcc.n	80093a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800939c:	2301      	movs	r3, #1
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e015      	b.n	80093ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d20b      	bcs.n	80093c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ff9b 	bl	80092f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	e004      	b.n	80093ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093ca:	2301      	movs	r3, #1
 80093cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093ce:	f000 fc71 	bl	8009cb4 <vPortExitCritical>

	return xReturn;
 80093d2:	69fb      	ldr	r3, [r7, #28]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20005890 	.word	0x20005890
 80093e0:	200058a4 	.word	0x200058a4

080093e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093e8:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <vTaskMissedYield+0x14>)
 80093ea:	2201      	movs	r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
}
 80093ee:	bf00      	nop
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	200058a0 	.word	0x200058a0

080093fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009404:	f000 f852 	bl	80094ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009408:	4b06      	ldr	r3, [pc, #24]	; (8009424 <prvIdleTask+0x28>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d9f9      	bls.n	8009404 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <prvIdleTask+0x2c>)
 8009412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009420:	e7f0      	b.n	8009404 <prvIdleTask+0x8>
 8009422:	bf00      	nop
 8009424:	20005790 	.word	0x20005790
 8009428:	e000ed04 	.word	0xe000ed04

0800942c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009432:	2300      	movs	r3, #0
 8009434:	607b      	str	r3, [r7, #4]
 8009436:	e00c      	b.n	8009452 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4a12      	ldr	r2, [pc, #72]	; (800948c <prvInitialiseTaskLists+0x60>)
 8009444:	4413      	add	r3, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fa7e 	bl	8007948 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3301      	adds	r3, #1
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b06      	cmp	r3, #6
 8009456:	d9ef      	bls.n	8009438 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009458:	480d      	ldr	r0, [pc, #52]	; (8009490 <prvInitialiseTaskLists+0x64>)
 800945a:	f7fe fa75 	bl	8007948 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800945e:	480d      	ldr	r0, [pc, #52]	; (8009494 <prvInitialiseTaskLists+0x68>)
 8009460:	f7fe fa72 	bl	8007948 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009464:	480c      	ldr	r0, [pc, #48]	; (8009498 <prvInitialiseTaskLists+0x6c>)
 8009466:	f7fe fa6f 	bl	8007948 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800946a:	480c      	ldr	r0, [pc, #48]	; (800949c <prvInitialiseTaskLists+0x70>)
 800946c:	f7fe fa6c 	bl	8007948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009470:	480b      	ldr	r0, [pc, #44]	; (80094a0 <prvInitialiseTaskLists+0x74>)
 8009472:	f7fe fa69 	bl	8007948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009476:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <prvInitialiseTaskLists+0x78>)
 8009478:	4a05      	ldr	r2, [pc, #20]	; (8009490 <prvInitialiseTaskLists+0x64>)
 800947a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <prvInitialiseTaskLists+0x7c>)
 800947e:	4a05      	ldr	r2, [pc, #20]	; (8009494 <prvInitialiseTaskLists+0x68>)
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20005790 	.word	0x20005790
 8009490:	2000581c 	.word	0x2000581c
 8009494:	20005830 	.word	0x20005830
 8009498:	2000584c 	.word	0x2000584c
 800949c:	20005860 	.word	0x20005860
 80094a0:	20005878 	.word	0x20005878
 80094a4:	20005844 	.word	0x20005844
 80094a8:	20005848 	.word	0x20005848

080094ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094b2:	e019      	b.n	80094e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094b4:	f000 fbce 	bl	8009c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b8:	4b10      	ldr	r3, [pc, #64]	; (80094fc <prvCheckTasksWaitingTermination+0x50>)
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fac9 	bl	8007a5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <prvCheckTasksWaitingTermination+0x54>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4a0b      	ldr	r2, [pc, #44]	; (8009500 <prvCheckTasksWaitingTermination+0x54>)
 80094d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094d4:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <prvCheckTasksWaitingTermination+0x58>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3b01      	subs	r3, #1
 80094da:	4a0a      	ldr	r2, [pc, #40]	; (8009504 <prvCheckTasksWaitingTermination+0x58>)
 80094dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094de:	f000 fbe9 	bl	8009cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f810 	bl	8009508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094e8:	4b06      	ldr	r3, [pc, #24]	; (8009504 <prvCheckTasksWaitingTermination+0x58>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e1      	bne.n	80094b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20005860 	.word	0x20005860
 8009500:	2000588c 	.word	0x2000588c
 8009504:	20005874 	.word	0x20005874

08009508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	334c      	adds	r3, #76	; 0x4c
 8009514:	4618      	mov	r0, r3
 8009516:	f00d ff4b 	bl	80173b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009520:	2b00      	cmp	r3, #0
 8009522:	d108      	bne.n	8009536 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	4618      	mov	r0, r3
 800952a:	f000 fcc7 	bl	8009ebc <vPortFree>
				vPortFree( pxTCB );
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fcc4 	bl	8009ebc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009534:	e018      	b.n	8009568 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800953c:	2b01      	cmp	r3, #1
 800953e:	d103      	bne.n	8009548 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fcbb 	bl	8009ebc <vPortFree>
	}
 8009546:	e00f      	b.n	8009568 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800954e:	2b02      	cmp	r3, #2
 8009550:	d00a      	beq.n	8009568 <prvDeleteTCB+0x60>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	60fb      	str	r3, [r7, #12]
}
 8009564:	bf00      	nop
 8009566:	e7fe      	b.n	8009566 <prvDeleteTCB+0x5e>
	}
 8009568:	bf00      	nop
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009576:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <prvResetNextTaskUnblockTime+0x38>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d104      	bne.n	800958a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <prvResetNextTaskUnblockTime+0x3c>)
 8009582:	f04f 32ff 	mov.w	r2, #4294967295
 8009586:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009588:	e008      	b.n	800959c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <prvResetNextTaskUnblockTime+0x38>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	4a04      	ldr	r2, [pc, #16]	; (80095ac <prvResetNextTaskUnblockTime+0x3c>)
 800959a:	6013      	str	r3, [r2, #0]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20005844 	.word	0x20005844
 80095ac:	200058ac 	.word	0x200058ac

080095b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <xTaskGetSchedulerState+0x34>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095be:	2301      	movs	r3, #1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	e008      	b.n	80095d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c4:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <xTaskGetSchedulerState+0x38>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095cc:	2302      	movs	r3, #2
 80095ce:	607b      	str	r3, [r7, #4]
 80095d0:	e001      	b.n	80095d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095d2:	2300      	movs	r3, #0
 80095d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095d6:	687b      	ldr	r3, [r7, #4]
	}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	20005898 	.word	0x20005898
 80095e8:	200058b4 	.word	0x200058b4

080095ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d05e      	beq.n	80096c0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	4b31      	ldr	r3, [pc, #196]	; (80096cc <xTaskPriorityInherit+0xe0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	429a      	cmp	r2, r3
 800960e:	d24e      	bcs.n	80096ae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	db06      	blt.n	8009626 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009618:	4b2c      	ldr	r3, [pc, #176]	; (80096cc <xTaskPriorityInherit+0xe0>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	f1c3 0207 	rsb	r2, r3, #7
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6959      	ldr	r1, [r3, #20]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4a26      	ldr	r2, [pc, #152]	; (80096d0 <xTaskPriorityInherit+0xe4>)
 8009638:	4413      	add	r3, r2
 800963a:	4299      	cmp	r1, r3
 800963c:	d12f      	bne.n	800969e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	3304      	adds	r3, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fa0a 	bl	8007a5c <uxListRemove>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10a      	bne.n	8009664 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009652:	2201      	movs	r2, #1
 8009654:	fa02 f303 	lsl.w	r3, r2, r3
 8009658:	43da      	mvns	r2, r3
 800965a:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <xTaskPriorityInherit+0xe8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4013      	ands	r3, r2
 8009660:	4a1c      	ldr	r2, [pc, #112]	; (80096d4 <xTaskPriorityInherit+0xe8>)
 8009662:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009664:	4b19      	ldr	r3, [pc, #100]	; (80096cc <xTaskPriorityInherit+0xe0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	2201      	movs	r2, #1
 8009674:	409a      	lsls	r2, r3
 8009676:	4b17      	ldr	r3, [pc, #92]	; (80096d4 <xTaskPriorityInherit+0xe8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4313      	orrs	r3, r2
 800967c:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <xTaskPriorityInherit+0xe8>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4a10      	ldr	r2, [pc, #64]	; (80096d0 <xTaskPriorityInherit+0xe4>)
 800968e:	441a      	add	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3304      	adds	r3, #4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fe f983 	bl	80079a2 <vListInsertEnd>
 800969c:	e004      	b.n	80096a8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <xTaskPriorityInherit+0xe0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e008      	b.n	80096c0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096b2:	4b06      	ldr	r3, [pc, #24]	; (80096cc <xTaskPriorityInherit+0xe0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d201      	bcs.n	80096c0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096c0:	68fb      	ldr	r3, [r7, #12]
	}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	2000578c 	.word	0x2000578c
 80096d0:	20005790 	.word	0x20005790
 80096d4:	20005894 	.word	0x20005894

080096d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d06e      	beq.n	80097cc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096ee:	4b3a      	ldr	r3, [pc, #232]	; (80097d8 <xTaskPriorityDisinherit+0x100>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d00a      	beq.n	800970e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	60fb      	str	r3, [r7, #12]
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60bb      	str	r3, [r7, #8]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009730:	1e5a      	subs	r2, r3, #1
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973e:	429a      	cmp	r2, r3
 8009740:	d044      	beq.n	80097cc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009746:	2b00      	cmp	r3, #0
 8009748:	d140      	bne.n	80097cc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3304      	adds	r3, #4
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe f984 	bl	8007a5c <uxListRemove>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d115      	bne.n	8009786 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975e:	491f      	ldr	r1, [pc, #124]	; (80097dc <xTaskPriorityDisinherit+0x104>)
 8009760:	4613      	mov	r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	4413      	add	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	440b      	add	r3, r1
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <xTaskPriorityDisinherit+0xae>
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	2201      	movs	r2, #1
 8009776:	fa02 f303 	lsl.w	r3, r2, r3
 800977a:	43da      	mvns	r2, r3
 800977c:	4b18      	ldr	r3, [pc, #96]	; (80097e0 <xTaskPriorityDisinherit+0x108>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4013      	ands	r3, r2
 8009782:	4a17      	ldr	r2, [pc, #92]	; (80097e0 <xTaskPriorityDisinherit+0x108>)
 8009784:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009792:	f1c3 0207 	rsb	r2, r3, #7
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	2201      	movs	r2, #1
 80097a0:	409a      	lsls	r2, r3
 80097a2:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <xTaskPriorityDisinherit+0x108>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <xTaskPriorityDisinherit+0x108>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b0:	4613      	mov	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4a08      	ldr	r2, [pc, #32]	; (80097dc <xTaskPriorityDisinherit+0x104>)
 80097ba:	441a      	add	r2, r3
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f7fe f8ed 	bl	80079a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097c8:	2301      	movs	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097cc:	697b      	ldr	r3, [r7, #20]
	}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	2000578c 	.word	0x2000578c
 80097dc:	20005790 	.word	0x20005790
 80097e0:	20005894 	.word	0x20005894

080097e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80097f2:	2301      	movs	r3, #1
 80097f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d077      	beq.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10a      	bne.n	800981a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	60fb      	str	r3, [r7, #12]
}
 8009816:	bf00      	nop
 8009818:	e7fe      	b.n	8009818 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d902      	bls.n	800982a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	e002      	b.n	8009830 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	69fa      	ldr	r2, [r7, #28]
 8009836:	429a      	cmp	r2, r3
 8009838:	d058      	beq.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	429a      	cmp	r2, r3
 8009842:	d153      	bne.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009844:	4b2b      	ldr	r3, [pc, #172]	; (80098f4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	429a      	cmp	r2, r3
 800984c:	d10a      	bne.n	8009864 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	60bb      	str	r3, [r7, #8]
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	69fa      	ldr	r2, [r7, #28]
 800986e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	db04      	blt.n	8009882 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	f1c3 0207 	rsb	r2, r3, #7
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	6959      	ldr	r1, [r3, #20]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	4613      	mov	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4a19      	ldr	r2, [pc, #100]	; (80098f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009892:	4413      	add	r3, r2
 8009894:	4299      	cmp	r1, r3
 8009896:	d129      	bne.n	80098ec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	3304      	adds	r3, #4
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe f8dd 	bl	8007a5c <uxListRemove>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	2201      	movs	r2, #1
 80098ae:	fa02 f303 	lsl.w	r3, r2, r3
 80098b2:	43da      	mvns	r2, r3
 80098b4:	4b11      	ldr	r3, [pc, #68]	; (80098fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4013      	ands	r3, r2
 80098ba:	4a10      	ldr	r2, [pc, #64]	; (80098fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80098bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	2201      	movs	r2, #1
 80098c4:	409a      	lsls	r2, r3
 80098c6:	4b0d      	ldr	r3, [pc, #52]	; (80098fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	4a0b      	ldr	r2, [pc, #44]	; (80098fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4a06      	ldr	r2, [pc, #24]	; (80098f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80098de:	441a      	add	r2, r3
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f7fe f85b 	bl	80079a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098ec:	bf00      	nop
 80098ee:	3720      	adds	r7, #32
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	2000578c 	.word	0x2000578c
 80098f8:	20005790 	.word	0x20005790
 80098fc:	20005894 	.word	0x20005894

08009900 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009900:	b480      	push	{r7}
 8009902:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <pvTaskIncrementMutexHeldCount+0x24>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800990c:	4b05      	ldr	r3, [pc, #20]	; (8009924 <pvTaskIncrementMutexHeldCount+0x24>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009912:	3201      	adds	r2, #1
 8009914:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009916:	4b03      	ldr	r3, [pc, #12]	; (8009924 <pvTaskIncrementMutexHeldCount+0x24>)
 8009918:	681b      	ldr	r3, [r3, #0]
	}
 800991a:	4618      	mov	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	2000578c 	.word	0x2000578c

08009928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009932:	4b29      	ldr	r3, [pc, #164]	; (80099d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009938:	4b28      	ldr	r3, [pc, #160]	; (80099dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3304      	adds	r3, #4
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe f88c 	bl	8007a5c <uxListRemove>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10b      	bne.n	8009962 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800994a:	4b24      	ldr	r3, [pc, #144]	; (80099dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	2201      	movs	r2, #1
 8009952:	fa02 f303 	lsl.w	r3, r2, r3
 8009956:	43da      	mvns	r2, r3
 8009958:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4013      	ands	r3, r2
 800995e:	4a20      	ldr	r2, [pc, #128]	; (80099e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009960:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009968:	d10a      	bne.n	8009980 <prvAddCurrentTaskToDelayedList+0x58>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d007      	beq.n	8009980 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009970:	4b1a      	ldr	r3, [pc, #104]	; (80099dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3304      	adds	r3, #4
 8009976:	4619      	mov	r1, r3
 8009978:	481a      	ldr	r0, [pc, #104]	; (80099e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800997a:	f7fe f812 	bl	80079a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800997e:	e026      	b.n	80099ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009988:	4b14      	ldr	r3, [pc, #80]	; (80099dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	429a      	cmp	r2, r3
 8009996:	d209      	bcs.n	80099ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009998:	4b13      	ldr	r3, [pc, #76]	; (80099e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3304      	adds	r3, #4
 80099a2:	4619      	mov	r1, r3
 80099a4:	4610      	mov	r0, r2
 80099a6:	f7fe f820 	bl	80079ea <vListInsert>
}
 80099aa:	e010      	b.n	80099ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099ac:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3304      	adds	r3, #4
 80099b6:	4619      	mov	r1, r3
 80099b8:	4610      	mov	r0, r2
 80099ba:	f7fe f816 	bl	80079ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099be:	4b0c      	ldr	r3, [pc, #48]	; (80099f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d202      	bcs.n	80099ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80099c8:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6013      	str	r3, [r2, #0]
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20005890 	.word	0x20005890
 80099dc:	2000578c 	.word	0x2000578c
 80099e0:	20005894 	.word	0x20005894
 80099e4:	20005878 	.word	0x20005878
 80099e8:	20005848 	.word	0x20005848
 80099ec:	20005844 	.word	0x20005844
 80099f0:	200058ac 	.word	0x200058ac

080099f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3b04      	subs	r3, #4
 8009a04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3b04      	subs	r3, #4
 8009a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f023 0201 	bic.w	r2, r3, #1
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3b04      	subs	r3, #4
 8009a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a24:	4a0c      	ldr	r2, [pc, #48]	; (8009a58 <pxPortInitialiseStack+0x64>)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3b14      	subs	r3, #20
 8009a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3b04      	subs	r3, #4
 8009a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f06f 0202 	mvn.w	r2, #2
 8009a42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3b20      	subs	r3, #32
 8009a48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	08009a5d 	.word	0x08009a5d

08009a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a66:	4b12      	ldr	r3, [pc, #72]	; (8009ab0 <prvTaskExitError+0x54>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d00a      	beq.n	8009a86 <prvTaskExitError+0x2a>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	60fb      	str	r3, [r7, #12]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <prvTaskExitError+0x28>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60bb      	str	r3, [r7, #8]
}
 8009a98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a9a:	bf00      	nop
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d0fc      	beq.n	8009a9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20000030 	.word	0x20000030
	...

08009ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ac0:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <pxCurrentTCBConst2>)
 8009ac2:	6819      	ldr	r1, [r3, #0]
 8009ac4:	6808      	ldr	r0, [r1, #0]
 8009ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aca:	f380 8809 	msr	PSP, r0
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f04f 0000 	mov.w	r0, #0
 8009ad6:	f380 8811 	msr	BASEPRI, r0
 8009ada:	4770      	bx	lr
 8009adc:	f3af 8000 	nop.w

08009ae0 <pxCurrentTCBConst2>:
 8009ae0:	2000578c 	.word	0x2000578c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop

08009ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ae8:	4808      	ldr	r0, [pc, #32]	; (8009b0c <prvPortStartFirstTask+0x24>)
 8009aea:	6800      	ldr	r0, [r0, #0]
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	f380 8808 	msr	MSP, r0
 8009af2:	f04f 0000 	mov.w	r0, #0
 8009af6:	f380 8814 	msr	CONTROL, r0
 8009afa:	b662      	cpsie	i
 8009afc:	b661      	cpsie	f
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	df00      	svc	0
 8009b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b0a:	bf00      	nop
 8009b0c:	e000ed08 	.word	0xe000ed08

08009b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b16:	4b46      	ldr	r3, [pc, #280]	; (8009c30 <xPortStartScheduler+0x120>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a46      	ldr	r2, [pc, #280]	; (8009c34 <xPortStartScheduler+0x124>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d10a      	bne.n	8009b36 <xPortStartScheduler+0x26>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	613b      	str	r3, [r7, #16]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b36:	4b3e      	ldr	r3, [pc, #248]	; (8009c30 <xPortStartScheduler+0x120>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a3f      	ldr	r2, [pc, #252]	; (8009c38 <xPortStartScheduler+0x128>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10a      	bne.n	8009b56 <xPortStartScheduler+0x46>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b56:	4b39      	ldr	r3, [pc, #228]	; (8009c3c <xPortStartScheduler+0x12c>)
 8009b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	4b31      	ldr	r3, [pc, #196]	; (8009c40 <xPortStartScheduler+0x130>)
 8009b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b7e:	4b31      	ldr	r3, [pc, #196]	; (8009c44 <xPortStartScheduler+0x134>)
 8009b80:	2207      	movs	r2, #7
 8009b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b84:	e009      	b.n	8009b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b86:	4b2f      	ldr	r3, [pc, #188]	; (8009c44 <xPortStartScheduler+0x134>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3b01      	subs	r3, #1
 8009b8c:	4a2d      	ldr	r2, [pc, #180]	; (8009c44 <xPortStartScheduler+0x134>)
 8009b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b9a:	78fb      	ldrb	r3, [r7, #3]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba2:	2b80      	cmp	r3, #128	; 0x80
 8009ba4:	d0ef      	beq.n	8009b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ba6:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <xPortStartScheduler+0x134>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f1c3 0307 	rsb	r3, r3, #7
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d00a      	beq.n	8009bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60bb      	str	r3, [r7, #8]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bc8:	4b1e      	ldr	r3, [pc, #120]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	021b      	lsls	r3, r3, #8
 8009bce:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bd2:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bda:	4a1a      	ldr	r2, [pc, #104]	; (8009c44 <xPortStartScheduler+0x134>)
 8009bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009be6:	4b18      	ldr	r3, [pc, #96]	; (8009c48 <xPortStartScheduler+0x138>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a17      	ldr	r2, [pc, #92]	; (8009c48 <xPortStartScheduler+0x138>)
 8009bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <xPortStartScheduler+0x138>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a14      	ldr	r2, [pc, #80]	; (8009c48 <xPortStartScheduler+0x138>)
 8009bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bfe:	f000 f8dd 	bl	8009dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c02:	4b12      	ldr	r3, [pc, #72]	; (8009c4c <xPortStartScheduler+0x13c>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c08:	f000 f8fc 	bl	8009e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c0c:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <xPortStartScheduler+0x140>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a0f      	ldr	r2, [pc, #60]	; (8009c50 <xPortStartScheduler+0x140>)
 8009c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c18:	f7ff ff66 	bl	8009ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c1c:	f7ff fa5c 	bl	80090d8 <vTaskSwitchContext>
	prvTaskExitError();
 8009c20:	f7ff ff1c 	bl	8009a5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	e000ed00 	.word	0xe000ed00
 8009c34:	410fc271 	.word	0x410fc271
 8009c38:	410fc270 	.word	0x410fc270
 8009c3c:	e000e400 	.word	0xe000e400
 8009c40:	200058b8 	.word	0x200058b8
 8009c44:	200058bc 	.word	0x200058bc
 8009c48:	e000ed20 	.word	0xe000ed20
 8009c4c:	20000030 	.word	0x20000030
 8009c50:	e000ef34 	.word	0xe000ef34

08009c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	607b      	str	r3, [r7, #4]
}
 8009c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <vPortEnterCritical+0x58>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <vPortEnterCritical+0x58>)
 8009c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c78:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <vPortEnterCritical+0x58>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d10f      	bne.n	8009ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <vPortEnterCritical+0x5c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	603b      	str	r3, [r7, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <vPortEnterCritical+0x4a>
	}
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20000030 	.word	0x20000030
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <vPortExitCritical+0x50>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <vPortExitCritical+0x24>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	607b      	str	r3, [r7, #4]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <vPortExitCritical+0x50>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	4a09      	ldr	r2, [pc, #36]	; (8009d04 <vPortExitCritical+0x50>)
 8009ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ce2:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <vPortExitCritical+0x50>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d105      	bne.n	8009cf6 <vPortExitCritical+0x42>
 8009cea:	2300      	movs	r3, #0
 8009cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	f383 8811 	msr	BASEPRI, r3
}
 8009cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	20000030 	.word	0x20000030
	...

08009d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d10:	f3ef 8009 	mrs	r0, PSP
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	4b15      	ldr	r3, [pc, #84]	; (8009d70 <pxCurrentTCBConst>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	f01e 0f10 	tst.w	lr, #16
 8009d20:	bf08      	it	eq
 8009d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	6010      	str	r0, [r2, #0]
 8009d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d34:	f380 8811 	msr	BASEPRI, r0
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f7ff f9ca 	bl	80090d8 <vTaskSwitchContext>
 8009d44:	f04f 0000 	mov.w	r0, #0
 8009d48:	f380 8811 	msr	BASEPRI, r0
 8009d4c:	bc09      	pop	{r0, r3}
 8009d4e:	6819      	ldr	r1, [r3, #0]
 8009d50:	6808      	ldr	r0, [r1, #0]
 8009d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d56:	f01e 0f10 	tst.w	lr, #16
 8009d5a:	bf08      	it	eq
 8009d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d60:	f380 8809 	msr	PSP, r0
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	f3af 8000 	nop.w

08009d70 <pxCurrentTCBConst>:
 8009d70:	2000578c 	.word	0x2000578c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop

08009d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d92:	f7ff f8e9 	bl	8008f68 <xTaskIncrementTick>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <SysTick_Handler+0x40>)
 8009d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	2300      	movs	r3, #0
 8009da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	f383 8811 	msr	BASEPRI, r3
}
 8009dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009dc0:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <vPortSetupTimerInterrupt+0x34>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009dc6:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <vPortSetupTimerInterrupt+0x38>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <vPortSetupTimerInterrupt+0x3c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a0a      	ldr	r2, [pc, #40]	; (8009dfc <vPortSetupTimerInterrupt+0x40>)
 8009dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dd6:	099b      	lsrs	r3, r3, #6
 8009dd8:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <vPortSetupTimerInterrupt+0x44>)
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dde:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <vPortSetupTimerInterrupt+0x34>)
 8009de0:	2207      	movs	r2, #7
 8009de2:	601a      	str	r2, [r3, #0]
}
 8009de4:	bf00      	nop
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	e000e010 	.word	0xe000e010
 8009df4:	e000e018 	.word	0xe000e018
 8009df8:	20000000 	.word	0x20000000
 8009dfc:	10624dd3 	.word	0x10624dd3
 8009e00:	e000e014 	.word	0xe000e014

08009e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e14 <vPortEnableVFP+0x10>
 8009e08:	6801      	ldr	r1, [r0, #0]
 8009e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e0e:	6001      	str	r1, [r0, #0]
 8009e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e12:	bf00      	nop
 8009e14:	e000ed88 	.word	0xe000ed88

08009e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e1e:	f3ef 8305 	mrs	r3, IPSR
 8009e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b0f      	cmp	r3, #15
 8009e28:	d914      	bls.n	8009e54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e2a:	4a17      	ldr	r2, [pc, #92]	; (8009e88 <vPortValidateInterruptPriority+0x70>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e34:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <vPortValidateInterruptPriority+0x74>)
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	7afa      	ldrb	r2, [r7, #11]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d20a      	bcs.n	8009e54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	607b      	str	r3, [r7, #4]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e54:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <vPortValidateInterruptPriority+0x78>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e5c:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <vPortValidateInterruptPriority+0x7c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d90a      	bls.n	8009e7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	603b      	str	r3, [r7, #0]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <vPortValidateInterruptPriority+0x60>
	}
 8009e7a:	bf00      	nop
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	e000e3f0 	.word	0xe000e3f0
 8009e8c:	200058b8 	.word	0x200058b8
 8009e90:	e000ed0c 	.word	0xe000ed0c
 8009e94:	200058bc 	.word	0x200058bc

08009e98 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8009ea0:	f7fe ff96 	bl	8008dd0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f00d f879 	bl	8016f9c <malloc>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eae:	f7fe ff9d 	bl	8008dec <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
	if( pv )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d006      	beq.n	8009ed8 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8009eca:	f7fe ff81 	bl	8008dd0 <vTaskSuspendAll>
		{
			free( pv );
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f00d f86c 	bl	8016fac <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8009ed4:	f7fe ff8a 	bl	8008dec <xTaskResumeAll>
	}
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009eea:	f00a f95d 	bl	80141a8 <sys_timeouts_sleeptime>
 8009eee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef6:	d10b      	bne.n	8009f10 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009ef8:	4813      	ldr	r0, [pc, #76]	; (8009f48 <tcpip_timeouts_mbox_fetch+0x68>)
 8009efa:	f00c fee0 	bl	8016cbe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009efe:	2200      	movs	r2, #0
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f00c fe52 	bl	8016bac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009f08:	480f      	ldr	r0, [pc, #60]	; (8009f48 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f0a:	f00c fec9 	bl	8016ca0 <sys_mutex_lock>
    return;
 8009f0e:	e018      	b.n	8009f42 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d102      	bne.n	8009f1c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009f16:	f00a f90d 	bl	8014134 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009f1a:	e7e6      	b.n	8009eea <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009f1c:	480a      	ldr	r0, [pc, #40]	; (8009f48 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f1e:	f00c fece 	bl	8016cbe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f00c fe40 	bl	8016bac <sys_arch_mbox_fetch>
 8009f2c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009f2e:	4806      	ldr	r0, [pc, #24]	; (8009f48 <tcpip_timeouts_mbox_fetch+0x68>)
 8009f30:	f00c feb6 	bl	8016ca0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d102      	bne.n	8009f42 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009f3c:	f00a f8fa 	bl	8014134 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009f40:	e7d3      	b.n	8009eea <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	200058cc 	.word	0x200058cc

08009f4c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009f54:	4810      	ldr	r0, [pc, #64]	; (8009f98 <tcpip_thread+0x4c>)
 8009f56:	f00c fea3 	bl	8016ca0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009f5a:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <tcpip_thread+0x50>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009f62:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <tcpip_thread+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a0e      	ldr	r2, [pc, #56]	; (8009fa0 <tcpip_thread+0x54>)
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009f6e:	f107 030c 	add.w	r3, r7, #12
 8009f72:	4619      	mov	r1, r3
 8009f74:	480b      	ldr	r0, [pc, #44]	; (8009fa4 <tcpip_thread+0x58>)
 8009f76:	f7ff ffb3 	bl	8009ee0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d106      	bne.n	8009f8e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f80:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <tcpip_thread+0x5c>)
 8009f82:	2291      	movs	r2, #145	; 0x91
 8009f84:	4909      	ldr	r1, [pc, #36]	; (8009fac <tcpip_thread+0x60>)
 8009f86:	480a      	ldr	r0, [pc, #40]	; (8009fb0 <tcpip_thread+0x64>)
 8009f88:	f00d f938 	bl	80171fc <iprintf>
      continue;
 8009f8c:	e003      	b.n	8009f96 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 f80f 	bl	8009fb4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009f96:	e7ea      	b.n	8009f6e <tcpip_thread+0x22>
 8009f98:	200058cc 	.word	0x200058cc
 8009f9c:	200058c0 	.word	0x200058c0
 8009fa0:	200058c4 	.word	0x200058c4
 8009fa4:	200058c8 	.word	0x200058c8
 8009fa8:	080188ec 	.word	0x080188ec
 8009fac:	0801891c 	.word	0x0801891c
 8009fb0:	0801893c 	.word	0x0801893c

08009fb4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d026      	beq.n	800a012 <tcpip_thread_handle_msg+0x5e>
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	dc2b      	bgt.n	800a020 <tcpip_thread_handle_msg+0x6c>
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <tcpip_thread_handle_msg+0x1e>
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d015      	beq.n	8009ffc <tcpip_thread_handle_msg+0x48>
 8009fd0:	e026      	b.n	800a020 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6850      	ldr	r0, [r2, #4]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	6892      	ldr	r2, [r2, #8]
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4798      	blx	r3
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f003 fbe5 	bl	800d7bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	2009      	movs	r0, #9
 8009ff6:	f002 fd33 	bl	800ca60 <memp_free>
      break;
 8009ffa:	e018      	b.n	800a02e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	6892      	ldr	r2, [r2, #8]
 800a004:	4610      	mov	r0, r2
 800a006:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	2008      	movs	r0, #8
 800a00c:	f002 fd28 	bl	800ca60 <memp_free>
      break;
 800a010:	e00d      	b.n	800a02e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	6892      	ldr	r2, [r2, #8]
 800a01a:	4610      	mov	r0, r2
 800a01c:	4798      	blx	r3
      break;
 800a01e:	e006      	b.n	800a02e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a020:	4b05      	ldr	r3, [pc, #20]	; (800a038 <tcpip_thread_handle_msg+0x84>)
 800a022:	22cf      	movs	r2, #207	; 0xcf
 800a024:	4905      	ldr	r1, [pc, #20]	; (800a03c <tcpip_thread_handle_msg+0x88>)
 800a026:	4806      	ldr	r0, [pc, #24]	; (800a040 <tcpip_thread_handle_msg+0x8c>)
 800a028:	f00d f8e8 	bl	80171fc <iprintf>
      break;
 800a02c:	bf00      	nop
  }
}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	080188ec 	.word	0x080188ec
 800a03c:	0801891c 	.word	0x0801891c
 800a040:	0801893c 	.word	0x0801893c

0800a044 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a050:	481b      	ldr	r0, [pc, #108]	; (800a0c0 <tcpip_inpkt+0x7c>)
 800a052:	f00c fdea 	bl	8016c2a <sys_mbox_valid>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <tcpip_inpkt+0x24>
 800a05c:	4b19      	ldr	r3, [pc, #100]	; (800a0c4 <tcpip_inpkt+0x80>)
 800a05e:	22fc      	movs	r2, #252	; 0xfc
 800a060:	4919      	ldr	r1, [pc, #100]	; (800a0c8 <tcpip_inpkt+0x84>)
 800a062:	481a      	ldr	r0, [pc, #104]	; (800a0cc <tcpip_inpkt+0x88>)
 800a064:	f00d f8ca 	bl	80171fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a068:	22fe      	movs	r2, #254	; 0xfe
 800a06a:	4916      	ldr	r1, [pc, #88]	; (800a0c4 <tcpip_inpkt+0x80>)
 800a06c:	2009      	movs	r0, #9
 800a06e:	f002 fc79 	bl	800c964 <memp_malloc_fn>
 800a072:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <tcpip_inpkt+0x3c>
    return ERR_MEM;
 800a07a:	f04f 33ff 	mov.w	r3, #4294967295
 800a07e:	e01a      	b.n	800a0b6 <tcpip_inpkt+0x72>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a098:	6979      	ldr	r1, [r7, #20]
 800a09a:	4809      	ldr	r0, [pc, #36]	; (800a0c0 <tcpip_inpkt+0x7c>)
 800a09c:	f00c fd6c 	bl	8016b78 <sys_mbox_trypost>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d006      	beq.n	800a0b4 <tcpip_inpkt+0x70>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a0a6:	6979      	ldr	r1, [r7, #20]
 800a0a8:	2009      	movs	r0, #9
 800a0aa:	f002 fcd9 	bl	800ca60 <memp_free>
    return ERR_MEM;
 800a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b2:	e000      	b.n	800a0b6 <tcpip_inpkt+0x72>
  }
  return ERR_OK;
 800a0b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	200058c8 	.word	0x200058c8
 800a0c4:	080188ec 	.word	0x080188ec
 800a0c8:	08018964 	.word	0x08018964
 800a0cc:	0801893c 	.word	0x0801893c

0800a0d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a0e0:	f003 0318 	and.w	r3, r3, #24
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d006      	beq.n	800a0f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a0e8:	4a08      	ldr	r2, [pc, #32]	; (800a10c <tcpip_input+0x3c>)
 800a0ea:	6839      	ldr	r1, [r7, #0]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff ffa9 	bl	800a044 <tcpip_inpkt>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	e005      	b.n	800a102 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a0f6:	4a06      	ldr	r2, [pc, #24]	; (800a110 <tcpip_input+0x40>)
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff ffa2 	bl	800a044 <tcpip_inpkt>
 800a100:	4603      	mov	r3, r0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	08016989 	.word	0x08016989
 800a110:	08015875 	.word	0x08015875

0800a114 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a11e:	481b      	ldr	r0, [pc, #108]	; (800a18c <tcpip_try_callback+0x78>)
 800a120:	f00c fd83 	bl	8016c2a <sys_mbox_valid>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <tcpip_try_callback+0x24>
 800a12a:	4b19      	ldr	r3, [pc, #100]	; (800a190 <tcpip_try_callback+0x7c>)
 800a12c:	f240 125d 	movw	r2, #349	; 0x15d
 800a130:	4918      	ldr	r1, [pc, #96]	; (800a194 <tcpip_try_callback+0x80>)
 800a132:	4819      	ldr	r0, [pc, #100]	; (800a198 <tcpip_try_callback+0x84>)
 800a134:	f00d f862 	bl	80171fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a138:	f240 125f 	movw	r2, #351	; 0x15f
 800a13c:	4914      	ldr	r1, [pc, #80]	; (800a190 <tcpip_try_callback+0x7c>)
 800a13e:	2008      	movs	r0, #8
 800a140:	f002 fc10 	bl	800c964 <memp_malloc_fn>
 800a144:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <tcpip_try_callback+0x3e>
    return ERR_MEM;
 800a14c:	f04f 33ff 	mov.w	r3, #4294967295
 800a150:	e017      	b.n	800a182 <tcpip_try_callback+0x6e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a164:	68f9      	ldr	r1, [r7, #12]
 800a166:	4809      	ldr	r0, [pc, #36]	; (800a18c <tcpip_try_callback+0x78>)
 800a168:	f00c fd06 	bl	8016b78 <sys_mbox_trypost>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d006      	beq.n	800a180 <tcpip_try_callback+0x6c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a172:	68f9      	ldr	r1, [r7, #12]
 800a174:	2008      	movs	r0, #8
 800a176:	f002 fc73 	bl	800ca60 <memp_free>
    return ERR_MEM;
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295
 800a17e:	e000      	b.n	800a182 <tcpip_try_callback+0x6e>
  }
  return ERR_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200058c8 	.word	0x200058c8
 800a190:	080188ec 	.word	0x080188ec
 800a194:	08018964 	.word	0x08018964
 800a198:	0801893c 	.word	0x0801893c

0800a19c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a1a6:	f001 fdab 	bl	800bd00 <lwip_init>

  tcpip_init_done = initfunc;
 800a1aa:	4a17      	ldr	r2, [pc, #92]	; (800a208 <tcpip_init+0x6c>)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a1b0:	4a16      	ldr	r2, [pc, #88]	; (800a20c <tcpip_init+0x70>)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a1b6:	2106      	movs	r1, #6
 800a1b8:	4815      	ldr	r0, [pc, #84]	; (800a210 <tcpip_init+0x74>)
 800a1ba:	f00c fcbb 	bl	8016b34 <sys_mbox_new>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a1c4:	4b13      	ldr	r3, [pc, #76]	; (800a214 <tcpip_init+0x78>)
 800a1c6:	f240 2261 	movw	r2, #609	; 0x261
 800a1ca:	4913      	ldr	r1, [pc, #76]	; (800a218 <tcpip_init+0x7c>)
 800a1cc:	4813      	ldr	r0, [pc, #76]	; (800a21c <tcpip_init+0x80>)
 800a1ce:	f00d f815 	bl	80171fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a1d2:	4813      	ldr	r0, [pc, #76]	; (800a220 <tcpip_init+0x84>)
 800a1d4:	f00c fd48 	bl	8016c68 <sys_mutex_new>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d006      	beq.n	800a1ec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a1de:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <tcpip_init+0x78>)
 800a1e0:	f240 2265 	movw	r2, #613	; 0x265
 800a1e4:	490f      	ldr	r1, [pc, #60]	; (800a224 <tcpip_init+0x88>)
 800a1e6:	480d      	ldr	r0, [pc, #52]	; (800a21c <tcpip_init+0x80>)
 800a1e8:	f00d f808 	bl	80171fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	490c      	ldr	r1, [pc, #48]	; (800a228 <tcpip_init+0x8c>)
 800a1f8:	480c      	ldr	r0, [pc, #48]	; (800a22c <tcpip_init+0x90>)
 800a1fa:	f00c fd6d 	bl	8016cd8 <sys_thread_new>
}
 800a1fe:	bf00      	nop
 800a200:	3708      	adds	r7, #8
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	200058c0 	.word	0x200058c0
 800a20c:	200058c4 	.word	0x200058c4
 800a210:	200058c8 	.word	0x200058c8
 800a214:	080188ec 	.word	0x080188ec
 800a218:	08018974 	.word	0x08018974
 800a21c:	0801893c 	.word	0x0801893c
 800a220:	200058cc 	.word	0x200058cc
 800a224:	08018998 	.word	0x08018998
 800a228:	08009f4d 	.word	0x08009f4d
 800a22c:	080189bc 	.word	0x080189bc

0800a230 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	88db      	ldrh	r3, [r3, #6]
 800a23c:	3301      	adds	r3, #1
 800a23e:	b29a      	uxth	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	88db      	ldrh	r3, [r3, #6]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d105      	bne.n	800a258 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	88db      	ldrh	r3, [r3, #6]
 800a250:	3301      	adds	r3, #1
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	88db      	ldrh	r3, [r3, #6]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	461a      	mov	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4413      	add	r3, r2
 800a27e:	78fa      	ldrb	r2, [r7, #3]
 800a280:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	3301      	adds	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	2bff      	cmp	r3, #255	; 0xff
 800a294:	d902      	bls.n	800a29c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	801a      	strh	r2, [r3, #0]
  }
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	885b      	ldrh	r3, [r3, #2]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	3304      	adds	r3, #4
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 800a2d4:	887b      	ldrh	r3, [r7, #2]
 800a2d6:	2bff      	cmp	r3, #255	; 0xff
 800a2d8:	d905      	bls.n	800a2e6 <mqtt_ringbuf_advance_get_idx+0x1e>
 800a2da:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800a2dc:	22cb      	movs	r2, #203	; 0xcb
 800a2de:	490e      	ldr	r1, [pc, #56]	; (800a318 <mqtt_ringbuf_advance_get_idx+0x50>)
 800a2e0:	480e      	ldr	r0, [pc, #56]	; (800a31c <mqtt_ringbuf_advance_get_idx+0x54>)
 800a2e2:	f00c ff8b 	bl	80171fc <iprintf>

  rb->get += len;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	885a      	ldrh	r2, [r3, #2]
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	2bff      	cmp	r3, #255	; 0xff
 800a2fa:	d906      	bls.n	800a30a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	885b      	ldrh	r3, [r3, #2]
 800a300:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a304:	b29a      	uxth	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	805a      	strh	r2, [r3, #2]
  }
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	080189cc 	.word	0x080189cc
 800a318:	08018a04 	.word	0x08018a04
 800a31c:	08018a44 	.word	0x08018a44

0800a320 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a33c:	d303      	bcc.n	800a346 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a344:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	b29b      	uxth	r3, r3
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
	...

0800a358 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800a358:	b590      	push	{r4, r7, lr}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff ffda 	bl	800a320 <mqtt_ringbuf_len>
 800a36c:	4603      	mov	r3, r0
 800a36e:	461a      	mov	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	885b      	ldrh	r3, [r3, #2]
 800a374:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a378:	429a      	cmp	r2, r3
 800a37a:	da04      	bge.n	800a386 <mqtt_output_send+0x2e>
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff ffcf 	bl	800a320 <mqtt_ringbuf_len>
 800a382:	4603      	mov	r3, r0
 800a384:	e004      	b.n	800a390 <mqtt_output_send+0x38>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	885b      	ldrh	r3, [r3, #2]
 800a38a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a38e:	b29b      	uxth	r3, r3
 800a390:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a398:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d105      	bne.n	800a3ac <mqtt_output_send+0x54>
 800a3a0:	4b44      	ldr	r3, [pc, #272]	; (800a4b4 <mqtt_output_send+0x15c>)
 800a3a2:	22f0      	movs	r2, #240	; 0xf0
 800a3a4:	4944      	ldr	r1, [pc, #272]	; (800a4b8 <mqtt_output_send+0x160>)
 800a3a6:	4845      	ldr	r0, [pc, #276]	; (800a4bc <mqtt_output_send+0x164>)
 800a3a8:	f00c ff28 	bl	80171fc <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800a3ac:	89bb      	ldrh	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d07c      	beq.n	800a4ac <mqtt_output_send+0x154>
 800a3b2:	897b      	ldrh	r3, [r7, #10]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d079      	beq.n	800a4ac <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 800a3b8:	89ba      	ldrh	r2, [r7, #12]
 800a3ba:	897b      	ldrh	r3, [r7, #10]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d90d      	bls.n	800a3dc <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800a3c0:	897b      	ldrh	r3, [r7, #10]
 800a3c2:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ffab 	bl	800a320 <mqtt_ringbuf_len>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	897b      	ldrh	r3, [r7, #10]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bf34      	ite	cc
 800a3d4:	2301      	movcc	r3, #1
 800a3d6:	2300      	movcs	r3, #0
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff63 	bl	800a2a8 <mqtt_ringbuf_get_ptr>
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <mqtt_output_send+0x96>
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e000      	b.n	800a3f0 <mqtt_output_send+0x98>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	89ba      	ldrh	r2, [r7, #12]
 800a3f2:	6838      	ldr	r0, [r7, #0]
 800a3f4:	f007 fffa 	bl	80123ec <tcp_write>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800a3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d146      	bne.n	800a492 <mqtt_output_send+0x13a>
 800a404:	7bbb      	ldrb	r3, [r7, #14]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d043      	beq.n	800a492 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a40a:	89bb      	ldrh	r3, [r7, #12]
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff ff5a 	bl	800a2c8 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a41a:	461c      	mov	r4, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff ff7f 	bl	800a320 <mqtt_ringbuf_len>
 800a422:	4603      	mov	r3, r0
 800a424:	461a      	mov	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a42e:	429a      	cmp	r2, r3
 800a430:	da04      	bge.n	800a43c <mqtt_output_send+0xe4>
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7ff ff74 	bl	800a320 <mqtt_ringbuf_len>
 800a438:	4603      	mov	r3, r0
 800a43a:	e003      	b.n	800a444 <mqtt_output_send+0xec>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	885b      	ldrh	r3, [r3, #2]
 800a440:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a444:	42a3      	cmp	r3, r4
 800a446:	dd03      	ble.n	800a450 <mqtt_output_send+0xf8>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a44e:	e014      	b.n	800a47a <mqtt_output_send+0x122>
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ff65 	bl	800a320 <mqtt_ringbuf_len>
 800a456:	4603      	mov	r3, r0
 800a458:	461a      	mov	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	885b      	ldrh	r3, [r3, #2]
 800a45e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a462:	429a      	cmp	r2, r3
 800a464:	da04      	bge.n	800a470 <mqtt_output_send+0x118>
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff ff5a 	bl	800a320 <mqtt_ringbuf_len>
 800a46c:	4603      	mov	r3, r0
 800a46e:	e004      	b.n	800a47a <mqtt_output_send+0x122>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	885b      	ldrh	r3, [r3, #2]
 800a474:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a478:	b29b      	uxth	r3, r3
 800a47a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff13 	bl	800a2a8 <mqtt_ringbuf_get_ptr>
 800a482:	4601      	mov	r1, r0
 800a484:	89ba      	ldrh	r2, [r7, #12]
 800a486:	2301      	movs	r3, #1
 800a488:	6838      	ldr	r0, [r7, #0]
 800a48a:	f007 ffaf 	bl	80123ec <tcp_write>
 800a48e:	4603      	mov	r3, r0
 800a490:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800a492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d109      	bne.n	800a4ae <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800a49a:	89bb      	ldrh	r3, [r7, #12]
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff ff12 	bl	800a2c8 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800a4a4:	6838      	ldr	r0, [r7, #0]
 800a4a6:	f008 fd8b 	bl	8012fc0 <tcp_output>
 800a4aa:	e000      	b.n	800a4ae <mqtt_output_send+0x156>
    return;
 800a4ac:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd90      	pop	{r4, r7, pc}
 800a4b4:	080189cc 	.word	0x080189cc
 800a4b8:	08018a6c 	.word	0x08018a6c
 800a4bc:	08018a44 	.word	0x08018a44

0800a4c0 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <mqtt_create_request+0x28>
 800a4da:	4b19      	ldr	r3, [pc, #100]	; (800a540 <mqtt_create_request+0x80>)
 800a4dc:	f240 1223 	movw	r2, #291	; 0x123
 800a4e0:	4918      	ldr	r1, [pc, #96]	; (800a544 <mqtt_create_request+0x84>)
 800a4e2:	4819      	ldr	r0, [pc, #100]	; (800a548 <mqtt_create_request+0x88>)
 800a4e4:	f00c fe8a 	bl	80171fc <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	74fb      	strb	r3, [r7, #19]
 800a4ec:	e01f      	b.n	800a52e <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800a4ee:	7cfb      	ldrb	r3, [r7, #19]
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	7cfb      	ldrb	r3, [r7, #19]
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	68f9      	ldr	r1, [r7, #12]
 800a4fe:	440b      	add	r3, r1
 800a500:	429a      	cmp	r2, r3
 800a502:	d111      	bne.n	800a528 <mqtt_create_request+0x68>
      r = &r_objs[n];
 800a504:	7cfb      	ldrb	r3, [r7, #19]
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	4413      	add	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	6a3a      	ldr	r2, [r7, #32]
 800a51e:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	88fa      	ldrh	r2, [r7, #6]
 800a524:	819a      	strh	r2, [r3, #12]
      break;
 800a526:	e006      	b.n	800a536 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 800a528:	7cfb      	ldrb	r3, [r7, #19]
 800a52a:	3301      	adds	r3, #1
 800a52c:	74fb      	strb	r3, [r7, #19]
 800a52e:	7cfb      	ldrb	r3, [r7, #19]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	429a      	cmp	r2, r3
 800a534:	d8db      	bhi.n	800a4ee <mqtt_create_request+0x2e>
    }
  }
  return r;
 800a536:	697b      	ldr	r3, [r7, #20]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	080189cc 	.word	0x080189cc
 800a544:	08018a8c 	.word	0x08018a8c
 800a548:	08018a44 	.word	0x08018a44

0800a54c <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <mqtt_append_request+0x26>
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <mqtt_append_request+0x88>)
 800a566:	f240 123f 	movw	r2, #319	; 0x13f
 800a56a:	491b      	ldr	r1, [pc, #108]	; (800a5d8 <mqtt_append_request+0x8c>)
 800a56c:	481b      	ldr	r0, [pc, #108]	; (800a5dc <mqtt_append_request+0x90>)
 800a56e:	f00c fe45 	bl	80171fc <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	e00a      	b.n	800a590 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	89da      	ldrh	r2, [r3, #14]
 800a57e:	8a7b      	ldrh	r3, [r7, #18]
 800a580:	4413      	add	r3, r2
 800a582:	b29b      	uxth	r3, r3
 800a584:	827b      	strh	r3, [r7, #18]
    head = iter;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	60fb      	str	r3, [r7, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1f1      	bne.n	800a57a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800a596:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a59a:	2b1e      	cmp	r3, #30
 800a59c:	dd06      	ble.n	800a5ac <mqtt_append_request+0x60>
 800a59e:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <mqtt_append_request+0x88>)
 800a5a0:	f240 1247 	movw	r2, #327	; 0x147
 800a5a4:	490e      	ldr	r1, [pc, #56]	; (800a5e0 <mqtt_append_request+0x94>)
 800a5a6:	480d      	ldr	r0, [pc, #52]	; (800a5dc <mqtt_append_request+0x90>)
 800a5a8:	f00c fe28 	bl	80171fc <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800a5ac:	8a7b      	ldrh	r3, [r7, #18]
 800a5ae:	f1c3 031e 	rsb	r3, r3, #30
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d103      	bne.n	800a5c6 <mqtt_append_request+0x7a>
    *tail = r;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800a5c4:	e002      	b.n	800a5cc <mqtt_append_request+0x80>
    head->next = r;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	601a      	str	r2, [r3, #0]
}
 800a5cc:	bf00      	nop
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	080189cc 	.word	0x080189cc
 800a5d8:	08018ab0 	.word	0x08018ab0
 800a5dc:	08018a44 	.word	0x08018a44
 800a5e0:	08018ad4 	.word	0x08018ad4

0800a5e4 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <mqtt_delete_request+0x14>
    r->next = r;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	601a      	str	r2, [r3, #0]
  }
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800a610:	2300      	movs	r3, #0
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	2300      	movs	r3, #0
 800a616:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <mqtt_take_request+0x28>
 800a61e:	4b1f      	ldr	r3, [pc, #124]	; (800a69c <mqtt_take_request+0x98>)
 800a620:	f240 1267 	movw	r2, #359	; 0x167
 800a624:	491e      	ldr	r1, [pc, #120]	; (800a6a0 <mqtt_take_request+0x9c>)
 800a626:	481f      	ldr	r0, [pc, #124]	; (800a6a4 <mqtt_take_request+0xa0>)
 800a628:	f00c fde8 	bl	80171fc <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e009      	b.n	800a648 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	899b      	ldrh	r3, [r3, #12]
 800a638:	887a      	ldrh	r2, [r7, #2]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d008      	beq.n	800a650 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1f2      	bne.n	800a634 <mqtt_take_request+0x30>
 800a64e:	e000      	b.n	800a652 <mqtt_take_request+0x4e>
      break;
 800a650:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01c      	beq.n	800a692 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d104      	bne.n	800a668 <mqtt_take_request+0x64>
      *tail = iter->next;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e003      	b.n	800a670 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d009      	beq.n	800a68c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	89d9      	ldrh	r1, [r3, #14]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	89da      	ldrh	r2, [r3, #14]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	440a      	add	r2, r1
 800a688:	b292      	uxth	r2, r2
 800a68a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800a692:	68fb      	ldr	r3, [r7, #12]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	080189cc 	.word	0x080189cc
 800a6a0:	08018b0c 	.word	0x08018b0c
 800a6a4:	08018a44 	.word	0x08018a44

0800a6a8 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <mqtt_request_time_elapsed+0x20>
 800a6ba:	4b21      	ldr	r3, [pc, #132]	; (800a740 <mqtt_request_time_elapsed+0x98>)
 800a6bc:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800a6c0:	4920      	ldr	r1, [pc, #128]	; (800a744 <mqtt_request_time_elapsed+0x9c>)
 800a6c2:	4821      	ldr	r0, [pc, #132]	; (800a748 <mqtt_request_time_elapsed+0xa0>)
 800a6c4:	f00c fd9a 	bl	80171fc <iprintf>
  r = *tail;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800a6ce:	e02c      	b.n	800a72a <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	89db      	ldrh	r3, [r3, #14]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d31c      	bcc.n	800a716 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	89db      	ldrh	r3, [r3, #14]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	78fa      	ldrb	r2, [r7, #3]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d007      	beq.n	800a708 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	6892      	ldr	r2, [r2, #8]
 800a700:	f06f 0102 	mvn.w	r1, #2
 800a704:	4610      	mov	r0, r2
 800a706:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff ff6b 	bl	800a5e4 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e009      	b.n	800a72a <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	89da      	ldrh	r2, [r3, #14]
 800a71a:	78fb      	ldrb	r3, [r7, #3]
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	b29a      	uxth	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	81da      	strh	r2, [r3, #14]
      t = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <mqtt_request_time_elapsed+0x8e>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1cc      	bne.n	800a6d0 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	080189cc 	.word	0x080189cc
 800a744:	08018b2c 	.word	0x08018b2c
 800a748:	08018a44 	.word	0x08018a44

0800a74c <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <mqtt_clear_requests+0x1c>
 800a75a:	4b0e      	ldr	r3, [pc, #56]	; (800a794 <mqtt_clear_requests+0x48>)
 800a75c:	f240 12a7 	movw	r2, #423	; 0x1a7
 800a760:	490d      	ldr	r1, [pc, #52]	; (800a798 <mqtt_clear_requests+0x4c>)
 800a762:	480e      	ldr	r0, [pc, #56]	; (800a79c <mqtt_clear_requests+0x50>)
 800a764:	f00c fd4a 	bl	80171fc <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]
 800a76e:	e007      	b.n	800a780 <mqtt_clear_requests+0x34>
    next = iter->next;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ff34 	bl	800a5e4 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1f4      	bne.n	800a770 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	080189cc 	.word	0x080189cc
 800a798:	08018b54 	.word	0x08018b54
 800a79c:	08018a44 	.word	0x08018a44

0800a7a0 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <mqtt_init_requests+0x1e>
 800a7b0:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <mqtt_init_requests+0x50>)
 800a7b2:	f240 12b7 	movw	r2, #439	; 0x1b7
 800a7b6:	490f      	ldr	r1, [pc, #60]	; (800a7f4 <mqtt_init_requests+0x54>)
 800a7b8:	480f      	ldr	r0, [pc, #60]	; (800a7f8 <mqtt_init_requests+0x58>)
 800a7ba:	f00c fd1f 	bl	80171fc <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]
 800a7c2:	e00b      	b.n	800a7dc <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	011a      	lsls	r2, r3, #4
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	440b      	add	r3, r1
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d8ef      	bhi.n	800a7c4 <mqtt_init_requests+0x24>
  }
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	080189cc 	.word	0x080189cc
 800a7f4:	08018b78 	.word	0x08018b78
 800a7f8:	08018a44 	.word	0x08018a44

0800a7fc <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7ff fd2b 	bl	800a268 <mqtt_ringbuf_put>
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800a826:	887b      	ldrh	r3, [r7, #2]
 800a828:	0a1b      	lsrs	r3, r3, #8
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fd19 	bl	800a268 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800a836:	887b      	ldrh	r3, [r7, #2]
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff fd13 	bl	800a268 <mqtt_ringbuf_put>
}
 800a842:	bf00      	nop
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b086      	sub	sp, #24
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	60b9      	str	r1, [r7, #8]
 800a854:	4613      	mov	r3, r2
 800a856:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 800a858:	2300      	movs	r3, #0
 800a85a:	82fb      	strh	r3, [r7, #22]
 800a85c:	e00a      	b.n	800a874 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800a85e:	8afb      	ldrh	r3, [r7, #22]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	4413      	add	r3, r2
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	4619      	mov	r1, r3
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7ff fcfd 	bl	800a268 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a86e:	8afb      	ldrh	r3, [r7, #22]
 800a870:	3301      	adds	r3, #1
 800a872:	82fb      	strh	r3, [r7, #22]
 800a874:	8afa      	ldrh	r2, [r7, #22]
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d3f0      	bcc.n	800a85e <mqtt_output_append_buf+0x14>
  }
}
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b086      	sub	sp, #24
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	60f8      	str	r0, [r7, #12]
 800a88e:	60b9      	str	r1, [r7, #8]
 800a890:	4613      	mov	r3, r2
 800a892:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800a894:	88fb      	ldrh	r3, [r7, #6]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	4619      	mov	r1, r3
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fce2 	bl	800a268 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800a8a4:	88fb      	ldrh	r3, [r7, #6]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7ff fcdc 	bl	800a268 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	82fb      	strh	r3, [r7, #22]
 800a8b4:	e00a      	b.n	800a8cc <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800a8b6:	8afb      	ldrh	r3, [r7, #22]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7ff fcd1 	bl	800a268 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a8c6:	8afb      	ldrh	r3, [r7, #22]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	82fb      	strh	r3, [r7, #22]
 800a8cc:	8afa      	ldrh	r2, [r7, #22]
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d3f0      	bcc.n	800a8b6 <mqtt_output_append_string+0x30>
  }
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	70fb      	strb	r3, [r7, #3]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70bb      	strb	r3, [r7, #2]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800a8f8:	78fb      	ldrb	r3, [r7, #3]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	b25a      	sxtb	r2, r3
 800a8fe:	78bb      	ldrb	r3, [r7, #2]
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	b25b      	sxtb	r3, r3
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	4313      	orrs	r3, r2
 800a90c:	b25a      	sxtb	r2, r3
 800a90e:	787b      	ldrb	r3, [r7, #1]
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	b25b      	sxtb	r3, r3
 800a914:	f003 0306 	and.w	r3, r3, #6
 800a918:	b25b      	sxtb	r3, r3
 800a91a:	4313      	orrs	r3, r2
 800a91c:	b25a      	sxtb	r2, r3
 800a91e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	b25b      	sxtb	r3, r3
 800a928:	4313      	orrs	r3, r2
 800a92a:	b25b      	sxtb	r3, r3
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff ff63 	bl	800a7fc <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800a936:	8abb      	ldrh	r3, [r7, #20]
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	8aba      	ldrh	r2, [r7, #20]
 800a942:	2a7f      	cmp	r2, #127	; 0x7f
 800a944:	d902      	bls.n	800a94c <mqtt_output_append_fixed_header+0x6e>
 800a946:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800a94a:	e000      	b.n	800a94e <mqtt_output_append_fixed_header+0x70>
 800a94c:	2200      	movs	r2, #0
 800a94e:	4313      	orrs	r3, r2
 800a950:	b25b      	sxtb	r3, r3
 800a952:	b2db      	uxtb	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff ff50 	bl	800a7fc <mqtt_output_append_u8>
    r_length >>= 7;
 800a95c:	8abb      	ldrh	r3, [r7, #20]
 800a95e:	09db      	lsrs	r3, r3, #7
 800a960:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800a962:	8abb      	ldrh	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e6      	bne.n	800a936 <mqtt_output_append_fixed_header+0x58>
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800a980:	887b      	ldrh	r3, [r7, #2]
 800a982:	3301      	adds	r3, #1
 800a984:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <mqtt_output_check_space+0x26>
 800a98c:	4b0f      	ldr	r3, [pc, #60]	; (800a9cc <mqtt_output_check_space+0x58>)
 800a98e:	f240 2207 	movw	r2, #519	; 0x207
 800a992:	490f      	ldr	r1, [pc, #60]	; (800a9d0 <mqtt_output_check_space+0x5c>)
 800a994:	480f      	ldr	r0, [pc, #60]	; (800a9d4 <mqtt_output_check_space+0x60>)
 800a996:	f00c fc31 	bl	80171fc <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800a99a:	89fb      	ldrh	r3, [r7, #14]
 800a99c:	3301      	adds	r3, #1
 800a99e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800a9a0:	887b      	ldrh	r3, [r7, #2]
 800a9a2:	09db      	lsrs	r3, r3, #7
 800a9a4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800a9a6:	887b      	ldrh	r3, [r7, #2]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f6      	bne.n	800a99a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800a9ac:	89fc      	ldrh	r4, [r7, #14]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff fcb6 	bl	800a320 <mqtt_ringbuf_len>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a9ba:	429c      	cmp	r4, r3
 800a9bc:	bfd4      	ite	le
 800a9be:	2301      	movle	r3, #1
 800a9c0:	2300      	movgt	r3, #0
 800a9c2:	b2db      	uxtb	r3, r3
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd90      	pop	{r4, r7, pc}
 800a9cc:	080189cc 	.word	0x080189cc
 800a9d0:	08018b9c 	.word	0x08018b9c
 800a9d4:	08018a44 	.word	0x08018a44

0800a9d8 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <mqtt_close+0x20>
 800a9ea:	4b27      	ldr	r3, [pc, #156]	; (800aa88 <mqtt_close+0xb0>)
 800a9ec:	f240 221b 	movw	r2, #539	; 0x21b
 800a9f0:	4926      	ldr	r1, [pc, #152]	; (800aa8c <mqtt_close+0xb4>)
 800a9f2:	4827      	ldr	r0, [pc, #156]	; (800aa90 <mqtt_close+0xb8>)
 800a9f4:	f00c fc02 	bl	80171fc <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d024      	beq.n	800aa4a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f004 fdd6 	bl	800f5b8 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	2100      	movs	r1, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f004 fe14 	bl	800f640 <tcp_err>
    altcp_sent(client->conn, NULL);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f004 fdec 	bl	800f5fc <tcp_sent>
    res = altcp_close(client->conn);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f003 fbd5 	bl	800e1d8 <tcp_close>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800aa32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d004      	beq.n	800aa44 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f003 fcb4 	bl	800e3ac <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3318      	adds	r3, #24
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff fe7c 	bl	800a74c <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800aa54:	6879      	ldr	r1, [r7, #4]
 800aa56:	480f      	ldr	r0, [pc, #60]	; (800aa94 <mqtt_close+0xbc>)
 800aa58:	f009 fb32 	bl	80140c0 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7a9b      	ldrb	r3, [r3, #10]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00d      	beq.n	800aa80 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d006      	beq.n	800aa80 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6911      	ldr	r1, [r2, #16]
 800aa7a:	887a      	ldrh	r2, [r7, #2]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	4798      	blx	r3
    }
  }
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	080189cc 	.word	0x080189cc
 800aa8c:	08018bc0 	.word	0x08018bc0
 800aa90:	08018a44 	.word	0x08018a44
 800aa94:	0800aa99 	.word	0x0800aa99

0800aa98 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af02      	add	r7, sp, #8
 800aa9e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <mqtt_cyclic_timer+0x24>
 800aaae:	4b42      	ldr	r3, [pc, #264]	; (800abb8 <mqtt_cyclic_timer+0x120>)
 800aab0:	f44f 7211 	mov.w	r2, #580	; 0x244
 800aab4:	4941      	ldr	r1, [pc, #260]	; (800abbc <mqtt_cyclic_timer+0x124>)
 800aab6:	4842      	ldr	r0, [pc, #264]	; (800abc0 <mqtt_cyclic_timer+0x128>)
 800aab8:	f00c fba0 	bl	80171fc <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	7a9b      	ldrb	r3, [r3, #10]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d115      	bne.n	800aaf0 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	2b63      	cmp	r3, #99	; 0x63
 800aade:	dd5e      	ble.n	800ab9e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800aae0:	f240 1101 	movw	r1, #257	; 0x101
 800aae4:	68b8      	ldr	r0, [r7, #8]
 800aae6:	f7ff ff77 	bl	800a9d8 <mqtt_close>
      restart_timer = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73fb      	strb	r3, [r7, #15]
 800aaee:	e056      	b.n	800ab9e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	7a9b      	ldrb	r3, [r3, #10]
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d150      	bne.n	800ab9a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	3318      	adds	r3, #24
 800aafc:	2105      	movs	r1, #5
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fdd2 	bl	800a6a8 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	885b      	ldrh	r3, [r3, #2]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d048      	beq.n	800ab9e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	889b      	ldrh	r3, [r3, #4]
 800ab10:	3301      	adds	r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	889b      	ldrh	r3, [r3, #4]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	441a      	add	r2, r3
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	885b      	ldrh	r3, [r3, #2]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	885b      	ldrh	r3, [r3, #2]
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	440b      	add	r3, r1
 800ab34:	429a      	cmp	r2, r3
 800ab36:	dd06      	ble.n	800ab46 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800ab38:	f240 1101 	movw	r1, #257	; 0x101
 800ab3c:	68b8      	ldr	r0, [r7, #8]
 800ab3e:	f7ff ff4b 	bl	800a9d8 <mqtt_close>
        restart_timer = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4413      	add	r3, r2
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	8852      	ldrh	r2, [r2, #2]
 800ab56:	4293      	cmp	r3, r2
 800ab58:	db18      	blt.n	800ab8c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	33ec      	adds	r3, #236	; 0xec
 800ab5e:	2100      	movs	r1, #0
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff ff07 	bl	800a974 <mqtt_output_check_space>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d018      	beq.n	800ab9e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ab72:	2300      	movs	r3, #0
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	2300      	movs	r3, #0
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	210c      	movs	r1, #12
 800ab80:	f7ff fead 	bl	800a8de <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2200      	movs	r2, #0
 800ab88:	801a      	strh	r2, [r3, #0]
 800ab8a:	e008      	b.n	800ab9e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	881b      	ldrh	r3, [r3, #0]
 800ab90:	3301      	adds	r3, #1
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	801a      	strh	r2, [r3, #0]
 800ab98:	e001      	b.n	800ab9e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d005      	beq.n	800abb0 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	4907      	ldr	r1, [pc, #28]	; (800abc4 <mqtt_cyclic_timer+0x12c>)
 800aba8:	f241 3088 	movw	r0, #5000	; 0x1388
 800abac:	f009 fa62 	bl	8014074 <sys_timeout>
  }
}
 800abb0:	bf00      	nop
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	080189cc 	.word	0x080189cc
 800abbc:	08018bdc 	.word	0x08018bdc
 800abc0:	08018a44 	.word	0x08018a44
 800abc4:	0800aa99 	.word	0x0800aa99

0800abc8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af02      	add	r7, sp, #8
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	4608      	mov	r0, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	461a      	mov	r2, r3
 800abd6:	4603      	mov	r3, r0
 800abd8:	70fb      	strb	r3, [r7, #3]
 800abda:	460b      	mov	r3, r1
 800abdc:	803b      	strh	r3, [r7, #0]
 800abde:	4613      	mov	r3, r2
 800abe0:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	33ec      	adds	r3, #236	; 0xec
 800abea:	2102      	movs	r1, #2
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fec1 	bl	800a974 <mqtt_output_check_space>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d01c      	beq.n	800ac32 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800abfe:	78bb      	ldrb	r3, [r7, #2]
 800ac00:	78f9      	ldrb	r1, [r7, #3]
 800ac02:	2202      	movs	r2, #2
 800ac04:	9201      	str	r2, [sp, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	9200      	str	r2, [sp, #0]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f7ff fe67 	bl	800a8de <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	33ec      	adds	r3, #236	; 0xec
 800ac14:	883a      	ldrh	r2, [r7, #0]
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff fdfe 	bl	800a81a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	f7ff fb94 	bl	800a358 <mqtt_output_send>
 800ac30:	e001      	b.n	800ac36 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800ac32:	23ff      	movs	r3, #255	; 0xff
 800ac34:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800ac36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00c      	beq.n	800ac70 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	6890      	ldr	r0, [r2, #8]
 800ac5e:	78fa      	ldrb	r2, [r7, #3]
 800ac60:	2a02      	cmp	r2, #2
 800ac62:	d801      	bhi.n	800ac68 <mqtt_incomming_suback+0x26>
 800ac64:	2200      	movs	r2, #0
 800ac66:	e001      	b.n	800ac6c <mqtt_incomming_suback+0x2a>
 800ac68:	f06f 020c 	mvn.w	r2, #12
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4798      	blx	r3
  }
}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b08f      	sub	sp, #60	; 0x3c
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	460b      	mov	r3, r1
 800ac84:	72fb      	strb	r3, [r7, #11]
 800ac86:	4613      	mov	r3, r2
 800ac88:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	4413      	add	r3, r2
 800ac98:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800ac9a:	7afb      	ldrb	r3, [r7, #11]
 800ac9c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800aca8:	091b      	lsrs	r3, r3, #4
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acb6:	2b7f      	cmp	r3, #127	; 0x7f
 800acb8:	d906      	bls.n	800acc8 <mqtt_message_received+0x50>
 800acba:	4b97      	ldr	r3, [pc, #604]	; (800af18 <mqtt_message_received+0x2a0>)
 800acbc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800acc0:	4996      	ldr	r1, [pc, #600]	; (800af1c <mqtt_message_received+0x2a4>)
 800acc2:	4897      	ldr	r0, [pc, #604]	; (800af20 <mqtt_message_received+0x2a8>)
 800acc4:	f00c fa9a 	bl	80171fc <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800acc8:	7afa      	ldrb	r2, [r7, #11]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acce:	429a      	cmp	r2, r3
 800acd0:	d906      	bls.n	800ace0 <mqtt_message_received+0x68>
 800acd2:	4b91      	ldr	r3, [pc, #580]	; (800af18 <mqtt_message_received+0x2a0>)
 800acd4:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800acd8:	4992      	ldr	r1, [pc, #584]	; (800af24 <mqtt_message_received+0x2ac>)
 800acda:	4891      	ldr	r0, [pc, #580]	; (800af20 <mqtt_message_received+0x2a8>)
 800acdc:	f00c fa8e 	bl	80171fc <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800ace0:	7afa      	ldrb	r2, [r7, #11]
 800ace2:	893b      	ldrh	r3, [r7, #8]
 800ace4:	4413      	add	r3, r2
 800ace6:	2b80      	cmp	r3, #128	; 0x80
 800ace8:	dd09      	ble.n	800acfe <mqtt_message_received+0x86>
 800acea:	4b8b      	ldr	r3, [pc, #556]	; (800af18 <mqtt_message_received+0x2a0>)
 800acec:	f240 22ad 	movw	r2, #685	; 0x2ad
 800acf0:	498d      	ldr	r1, [pc, #564]	; (800af28 <mqtt_message_received+0x2b0>)
 800acf2:	488b      	ldr	r0, [pc, #556]	; (800af20 <mqtt_message_received+0x2a8>)
 800acf4:	f00c fa82 	bl	80171fc <iprintf>
 800acf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acfc:	e16f      	b.n	800afde <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800acfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d123      	bne.n	800ad4e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	7a9b      	ldrb	r3, [r3, #10]
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	f040 8152 	bne.w	800afb4 <mqtt_message_received+0x33c>
      if (length < 2) {
 800ad10:	893b      	ldrh	r3, [r7, #8]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	f240 8150 	bls.w	800afb8 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800ad20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f040 8146 	bne.w	800afb4 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2203      	movs	r2, #3
 800ad32:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 813b 	beq.w	800afb4 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	6911      	ldr	r1, [r2, #16]
 800ad46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	4798      	blx	r3
 800ad4c:	e132      	b.n	800afb4 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800ad4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad52:	2b0d      	cmp	r3, #13
 800ad54:	f000 812e 	beq.w	800afb4 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800ad58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad5c:	2b03      	cmp	r3, #3
 800ad5e:	f040 80c0 	bne.w	800aee2 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800ad66:	893b      	ldrh	r3, [r7, #8]
 800ad68:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ad70:	105b      	asrs	r3, r3, #1
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad7e:	2b80      	cmp	r3, #128	; 0x80
 800ad80:	d87d      	bhi.n	800ae7e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800ad82:	7ffb      	ldrb	r3, [r7, #31]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <mqtt_message_received+0x114>
 800ad88:	2302      	movs	r3, #2
 800ad8a:	e000      	b.n	800ad8e <mqtt_message_received+0x116>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800ad90:	8bbb      	ldrh	r3, [r7, #28]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	893b      	ldrh	r3, [r7, #8]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	f280 8110 	bge.w	800afbc <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800ada2:	8b7b      	ldrh	r3, [r7, #26]
 800ada4:	021b      	lsls	r3, r3, #8
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	3301      	adds	r3, #1
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	4413      	add	r3, r2
 800adb2:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800adb4:	8b7a      	ldrh	r2, [r7, #26]
 800adb6:	8939      	ldrh	r1, [r7, #8]
 800adb8:	8bbb      	ldrh	r3, [r7, #28]
 800adba:	3302      	adds	r3, #2
 800adbc:	1acb      	subs	r3, r1, r3
 800adbe:	429a      	cmp	r2, r3
 800adc0:	f300 80fe 	bgt.w	800afc0 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800adc4:	8b7a      	ldrh	r2, [r7, #26]
 800adc6:	8bbb      	ldrh	r3, [r7, #28]
 800adc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adca:	1acb      	subs	r3, r1, r3
 800adcc:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800adce:	429a      	cmp	r2, r3
 800add0:	f200 80f6 	bhi.w	800afc0 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	3302      	adds	r3, #2
 800add8:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800adda:	8b7b      	ldrh	r3, [r7, #26]
 800addc:	3302      	adds	r3, #2
 800adde:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800ade0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ade2:	7ffa      	ldrb	r2, [r7, #31]
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	d001      	beq.n	800adec <mqtt_message_received+0x174>
 800ade8:	2202      	movs	r2, #2
 800adea:	e000      	b.n	800adee <mqtt_message_received+0x176>
 800adec:	2201      	movs	r2, #1
 800adee:	4413      	add	r3, r2
 800adf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf2:	429a      	cmp	r2, r3
 800adf4:	f0c0 80e6 	bcc.w	800afc4 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800adf8:	7ffb      	ldrb	r3, [r7, #31]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d01a      	beq.n	800ae34 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800adfe:	893a      	ldrh	r2, [r7, #8]
 800ae00:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae02:	3302      	adds	r3, #2
 800ae04:	429a      	cmp	r2, r3
 800ae06:	f0c0 80df 	bcc.w	800afc8 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800ae0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae0e:	4413      	add	r3, r2
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	021b      	lsls	r3, r3, #8
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae1e:	440b      	add	r3, r1
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	4413      	add	r3, r2
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800ae2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae2e:	3302      	adds	r3, #2
 800ae30:	863b      	strh	r3, [r7, #48]	; 0x30
 800ae32:	e002      	b.n	800ae3a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800ae3a:	8b7b      	ldrh	r3, [r7, #26]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	4413      	add	r3, r2
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800ae44:	8b7b      	ldrh	r3, [r7, #26]
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4413      	add	r3, r2
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800ae4e:	893a      	ldrh	r2, [r7, #8]
 800ae50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800ae56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae58:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d008      	beq.n	800ae74 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800ae6a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	440a      	add	r2, r1
 800ae70:	6979      	ldr	r1, [r7, #20]
 800ae72:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800ae74:	8b7b      	ldrh	r3, [r7, #26]
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	4413      	add	r3, r2
 800ae7a:	7cfa      	ldrb	r2, [r7, #19]
 800ae7c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800ae7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <mqtt_message_received+0x214>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f040 8094 	bne.w	800afb4 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800ae8c:	893b      	ldrh	r3, [r7, #8]
 800ae8e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800ae90:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae92:	440a      	add	r2, r1
 800ae94:	4293      	cmp	r3, r2
 800ae96:	f0c0 8099 	bcc.w	800afcc <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800aea2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800aea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aea6:	18d1      	adds	r1, r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bf0c      	ite	eq
 800aeae:	2301      	moveq	r3, #1
 800aeb0:	2300      	movne	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aeb6:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d17a      	bne.n	800afb4 <mqtt_message_received+0x33c>
 800aebe:	7ffb      	ldrb	r3, [r7, #31]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d077      	beq.n	800afb4 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800aec4:	7ffb      	ldrb	r3, [r7, #31]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d101      	bne.n	800aece <mqtt_message_received+0x256>
 800aeca:	2304      	movs	r3, #4
 800aecc:	e000      	b.n	800aed0 <mqtt_message_received+0x258>
 800aece:	2305      	movs	r3, #5
 800aed0:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	891a      	ldrh	r2, [r3, #8]
 800aed6:	7cb9      	ldrb	r1, [r7, #18]
 800aed8:	2300      	movs	r3, #0
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7ff fe74 	bl	800abc8 <pub_ack_rec_rel_response>
 800aee0:	e068      	b.n	800afb4 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	021b      	lsls	r3, r3, #8
 800aeea:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	3301      	adds	r3, #1
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aef6:	4313      	orrs	r3, r2
 800aef8:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800aefa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d067      	beq.n	800afd0 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800af00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af04:	2b05      	cmp	r3, #5
 800af06:	d111      	bne.n	800af2c <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800af08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af0a:	2301      	movs	r3, #1
 800af0c:	2106      	movs	r1, #6
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f7ff fe5a 	bl	800abc8 <pub_ack_rec_rel_response>
 800af14:	e04e      	b.n	800afb4 <mqtt_message_received+0x33c>
 800af16:	bf00      	nop
 800af18:	080189cc 	.word	0x080189cc
 800af1c:	08018c00 	.word	0x08018c00
 800af20:	08018a44 	.word	0x08018a44
 800af24:	08018c30 	.word	0x08018c30
 800af28:	08018c54 	.word	0x08018c54

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800af2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af30:	2b06      	cmp	r3, #6
 800af32:	d106      	bne.n	800af42 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800af34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af36:	2300      	movs	r3, #0
 800af38:	2107      	movs	r1, #7
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f7ff fe44 	bl	800abc8 <pub_ack_rec_rel_response>
 800af40:	e038      	b.n	800afb4 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800af42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af46:	2b09      	cmp	r3, #9
 800af48:	d00b      	beq.n	800af62 <mqtt_message_received+0x2ea>
 800af4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af4e:	2b0b      	cmp	r3, #11
 800af50:	d007      	beq.n	800af62 <mqtt_message_received+0x2ea>
 800af52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af56:	2b07      	cmp	r3, #7
 800af58:	d003      	beq.n	800af62 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800af5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d138      	bne.n	800afd4 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3318      	adds	r3, #24
 800af66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff fb4a 	bl	800a604 <mqtt_take_request>
 800af70:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01c      	beq.n	800afb2 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800af78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d10a      	bne.n	800af96 <mqtt_message_received+0x31e>
          if (length < 3) {
 800af80:	893b      	ldrh	r3, [r7, #8]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d928      	bls.n	800afd8 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800af86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af88:	3302      	adds	r3, #2
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	4619      	mov	r1, r3
 800af8e:	6a38      	ldr	r0, [r7, #32]
 800af90:	f7ff fe57 	bl	800ac42 <mqtt_incomming_suback>
 800af94:	e00a      	b.n	800afac <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	6a3a      	ldr	r2, [r7, #32]
 800afa4:	6892      	ldr	r2, [r2, #8]
 800afa6:	2100      	movs	r1, #0
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800afac:	6a38      	ldr	r0, [r7, #32]
 800afae:	f7ff fb19 	bl	800a5e4 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800afb2:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800afb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800afb6:	e012      	b.n	800afde <mqtt_message_received+0x366>
        goto out_disconnect;
 800afb8:	bf00      	nop
 800afba:	e00e      	b.n	800afda <mqtt_message_received+0x362>
        goto out_disconnect;
 800afbc:	bf00      	nop
 800afbe:	e00c      	b.n	800afda <mqtt_message_received+0x362>
        goto out_disconnect;
 800afc0:	bf00      	nop
 800afc2:	e00a      	b.n	800afda <mqtt_message_received+0x362>
        goto out_disconnect;
 800afc4:	bf00      	nop
 800afc6:	e008      	b.n	800afda <mqtt_message_received+0x362>
          goto out_disconnect;
 800afc8:	bf00      	nop
 800afca:	e006      	b.n	800afda <mqtt_message_received+0x362>
        goto out_disconnect;
 800afcc:	bf00      	nop
 800afce:	e004      	b.n	800afda <mqtt_message_received+0x362>
      goto out_disconnect;
 800afd0:	bf00      	nop
 800afd2:	e002      	b.n	800afda <mqtt_message_received+0x362>
      goto out_disconnect;
 800afd4:	bf00      	nop
 800afd6:	e000      	b.n	800afda <mqtt_message_received+0x362>
            goto out_disconnect;
 800afd8:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800afda:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800afde:	4618      	mov	r0, r3
 800afe0:	373c      	adds	r7, #60	; 0x3c
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd90      	pop	{r4, r7, pc}
 800afe6:	bf00      	nop

0800afe8 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800b002:	e0bc      	b.n	800b17e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d903      	bls.n	800b012 <mqtt_parse_incoming+0x2a>
 800b00a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da4d      	bge.n	800b0ae <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800b012:	7dfa      	ldrb	r2, [r7, #23]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b018:	429a      	cmp	r2, r3
 800b01a:	d206      	bcs.n	800b02a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	4413      	add	r3, r2
 800b022:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b026:	75bb      	strb	r3, [r7, #22]
 800b028:	e012      	b.n	800b050 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800b02a:	8bfb      	ldrh	r3, [r7, #30]
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	83fa      	strh	r2, [r7, #30]
 800b030:	4619      	mov	r1, r3
 800b032:	6838      	ldr	r0, [r7, #0]
 800b034:	f002 fe86 	bl	800dd44 <pbuf_get_at>
 800b038:	4603      	mov	r3, r0
 800b03a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b040:	1c59      	adds	r1, r3, #1
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	6691      	str	r1, [r2, #104]	; 0x68
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	4413      	add	r3, r2
 800b04a:	7dba      	ldrb	r2, [r7, #22]
 800b04c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	3301      	adds	r3, #1
 800b054:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	f240 8090 	bls.w	800b17e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800b05e:	7dbb      	ldrb	r3, [r7, #22]
 800b060:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	1e9a      	subs	r2, r3, #2
 800b068:	4613      	mov	r3, r2
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	1a9b      	subs	r3, r3, r2
 800b06e:	fa01 f303 	lsl.w	r3, r1, r3
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	4313      	orrs	r3, r2
 800b076:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800b078:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	db7e      	blt.n	800b17e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10b      	bne.n	800b09e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800b086:	7df9      	ldrb	r1, [r7, #23]
 800b088:	2300      	movs	r3, #0
 800b08a:	2200      	movs	r2, #0
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff fdf3 	bl	800ac78 <mqtt_message_received>
            client->msg_idx = 0;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	75fb      	strb	r3, [r7, #23]
 800b09c:	e06f      	b.n	800b17e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800b09e:	7dfa      	ldrb	r2, [r7, #23]
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	441a      	add	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800b0ac:	e067      	b.n	800b17e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	7dfa      	ldrb	r2, [r7, #23]
 800b0b8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800b0bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0c0:	fb01 f202 	mul.w	r2, r1, r2
 800b0c4:	1a9b      	subs	r3, r3, r2
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	891a      	ldrh	r2, [r3, #8]
 800b0d4:	8bfb      	ldrh	r3, [r7, #30]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	461a      	mov	r2, r3
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d905      	bls.n	800b0ee <mqtt_parse_incoming+0x106>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	891a      	ldrh	r2, [r3, #8]
 800b0e6:	8bfb      	ldrh	r3, [r7, #30]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	e001      	b.n	800b0f2 <mqtt_parse_incoming+0x10a>
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800b0f4:	8a7b      	ldrh	r3, [r7, #18]
 800b0f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b0fa:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800b0fc:	8aba      	ldrh	r2, [r7, #20]
 800b0fe:	8a3b      	ldrh	r3, [r7, #16]
 800b100:	429a      	cmp	r2, r3
 800b102:	d901      	bls.n	800b108 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800b104:	8a3b      	ldrh	r3, [r7, #16]
 800b106:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b10e:	8a7b      	ldrh	r3, [r7, #18]
 800b110:	18d1      	adds	r1, r2, r3
 800b112:	8bfb      	ldrh	r3, [r7, #30]
 800b114:	8aba      	ldrh	r2, [r7, #20]
 800b116:	6838      	ldr	r0, [r7, #0]
 800b118:	f002 fd46 	bl	800dba8 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b120:	8abb      	ldrh	r3, [r7, #20]
 800b122:	441a      	add	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800b128:	8bfa      	ldrh	r2, [r7, #30]
 800b12a:	8abb      	ldrh	r3, [r7, #20]
 800b12c:	4413      	add	r3, r2
 800b12e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800b130:	8abb      	ldrh	r3, [r7, #20]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <mqtt_parse_incoming+0x15e>
 800b13e:	8aba      	ldrh	r2, [r7, #20]
 800b140:	8a3b      	ldrh	r3, [r7, #16]
 800b142:	429a      	cmp	r2, r3
 800b144:	d11b      	bne.n	800b17e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800b146:	8a7a      	ldrh	r2, [r7, #18]
 800b148:	8abb      	ldrh	r3, [r7, #20]
 800b14a:	4413      	add	r3, r2
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	b29b      	uxth	r3, r3
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	b29a      	uxth	r2, r3
 800b156:	7df9      	ldrb	r1, [r7, #23]
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff fd8c 	bl	800ac78 <mqtt_message_received>
 800b160:	4603      	mov	r3, r0
 800b162:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800b164:	89fb      	ldrh	r3, [r7, #14]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d001      	beq.n	800b16e <mqtt_parse_incoming+0x186>
          return res;
 800b16a:	89fb      	ldrh	r3, [r7, #14]
 800b16c:	e00e      	b.n	800b18c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d104      	bne.n	800b17e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	891b      	ldrh	r3, [r3, #8]
 800b182:	8bfa      	ldrh	r2, [r7, #30]
 800b184:	429a      	cmp	r2, r3
 800b186:	f4ff af3d 	bcc.w	800b004 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3720      	adds	r7, #32
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d106      	bne.n	800b1ba <mqtt_tcp_recv_cb+0x26>
 800b1ac:	4b24      	ldr	r3, [pc, #144]	; (800b240 <mqtt_tcp_recv_cb+0xac>)
 800b1ae:	f240 32a7 	movw	r2, #935	; 0x3a7
 800b1b2:	4924      	ldr	r1, [pc, #144]	; (800b244 <mqtt_tcp_recv_cb+0xb0>)
 800b1b4:	4824      	ldr	r0, [pc, #144]	; (800b248 <mqtt_tcp_recv_cb+0xb4>)
 800b1b6:	f00c f821 	bl	80171fc <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d006      	beq.n	800b1d2 <mqtt_tcp_recv_cb+0x3e>
 800b1c4:	4b1e      	ldr	r3, [pc, #120]	; (800b240 <mqtt_tcp_recv_cb+0xac>)
 800b1c6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b1ca:	4920      	ldr	r1, [pc, #128]	; (800b24c <mqtt_tcp_recv_cb+0xb8>)
 800b1cc:	481e      	ldr	r0, [pc, #120]	; (800b248 <mqtt_tcp_recv_cb+0xb4>)
 800b1ce:	f00c f815 	bl	80171fc <iprintf>

  if (p == NULL) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d105      	bne.n	800b1e4 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800b1d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b1dc:	6978      	ldr	r0, [r7, #20]
 800b1de:	f7ff fbfb 	bl	800a9d8 <mqtt_close>
 800b1e2:	e027      	b.n	800b234 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800b1e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f002 fae5 	bl	800d7bc <pbuf_free>
      return err;
 800b1f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1f6:	e01e      	b.n	800b236 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	891b      	ldrh	r3, [r3, #8]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	68b8      	ldr	r0, [r7, #8]
 800b200:	f003 f9d2 	bl	800e5a8 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	6978      	ldr	r0, [r7, #20]
 800b208:	f7ff feee 	bl	800afe8 <mqtt_parse_incoming>
 800b20c:	4603      	mov	r3, r0
 800b20e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f002 fad3 	bl	800d7bc <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800b216:	8a7b      	ldrh	r3, [r7, #18]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800b21c:	8a7b      	ldrh	r3, [r7, #18]
 800b21e:	4619      	mov	r1, r3
 800b220:	6978      	ldr	r0, [r7, #20]
 800b222:	f7ff fbd9 	bl	800a9d8 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d002      	beq.n	800b234 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2200      	movs	r2, #0
 800b232:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	080189cc 	.word	0x080189cc
 800b244:	08018c6c 	.word	0x08018c6c
 800b248:	08018a44 	.word	0x08018a44
 800b24c:	08018c90 	.word	0x08018c90

0800b250 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4613      	mov	r3, r2
 800b25c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	7a9b      	ldrb	r3, [r3, #10]
 800b266:	2b03      	cmp	r3, #3
 800b268:	d127      	bne.n	800b2ba <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2200      	movs	r2, #0
 800b26e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2200      	movs	r2, #0
 800b274:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800b276:	e00d      	b.n	800b294 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	6892      	ldr	r2, [r2, #8]
 800b288:	2100      	movs	r1, #0
 800b28a:	4610      	mov	r0, r2
 800b28c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800b28e:	6938      	ldr	r0, [r7, #16]
 800b290:	f7ff f9a8 	bl	800a5e4 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	3318      	adds	r3, #24
 800b298:	2100      	movs	r1, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff f9b2 	bl	800a604 <mqtt_take_request>
 800b2a0:	6138      	str	r0, [r7, #16]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e7      	bne.n	800b278 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7ff f84f 	bl	800a358 <mqtt_output_send>
  }
  return ERR_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <mqtt_tcp_err_cb+0x24>
 800b2da:	4b09      	ldr	r3, [pc, #36]	; (800b300 <mqtt_tcp_err_cb+0x3c>)
 800b2dc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800b2e0:	4908      	ldr	r1, [pc, #32]	; (800b304 <mqtt_tcp_err_cb+0x40>)
 800b2e2:	4809      	ldr	r0, [pc, #36]	; (800b308 <mqtt_tcp_err_cb+0x44>)
 800b2e4:	f00b ff8a 	bl	80171fc <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800b2ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fb70 	bl	800a9d8 <mqtt_close>
}
 800b2f8:	bf00      	nop
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	080189cc 	.word	0x080189cc
 800b304:	08018cb8 	.word	0x08018cb8
 800b308:	08018a44 	.word	0x08018a44

0800b30c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	7a9b      	ldrb	r3, [r3, #10]
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d105      	bne.n	800b32e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	33ec      	adds	r3, #236	; 0xec
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff f815 	bl	800a358 <mqtt_output_send>
  }
  return ERR_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	4613      	mov	r3, r2
 800b344:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800b34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800b352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b356:	e025      	b.n	800b3a4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2200      	movs	r2, #0
 800b35c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800b35e:	4913      	ldr	r1, [pc, #76]	; (800b3ac <mqtt_tcp_connect_cb+0x74>)
 800b360:	68b8      	ldr	r0, [r7, #8]
 800b362:	f004 f929 	bl	800f5b8 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800b366:	4912      	ldr	r1, [pc, #72]	; (800b3b0 <mqtt_tcp_connect_cb+0x78>)
 800b368:	68b8      	ldr	r0, [r7, #8]
 800b36a:	f004 f947 	bl	800f5fc <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800b36e:	2202      	movs	r2, #2
 800b370:	4910      	ldr	r1, [pc, #64]	; (800b3b4 <mqtt_tcp_connect_cb+0x7c>)
 800b372:	68b8      	ldr	r0, [r7, #8]
 800b374:	f004 f986 	bl	800f684 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2202      	movs	r2, #2
 800b37c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	490d      	ldr	r1, [pc, #52]	; (800b3b8 <mqtt_tcp_connect_cb+0x80>)
 800b382:	f241 3088 	movw	r0, #5000	; 0x1388
 800b386:	f008 fe75 	bl	8014074 <sys_timeout>
  client->cyclic_tick = 0;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	2200      	movs	r2, #0
 800b38e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f7fe ffdb 	bl	800a358 <mqtt_output_send>

  return ERR_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	0800b195 	.word	0x0800b195
 800b3b0:	0800b251 	.word	0x0800b251
 800b3b4:	0800b30d 	.word	0x0800b30d
 800b3b8:	0800aa99 	.word	0x0800aa99

0800b3bc <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08c      	sub	sp, #48	; 0x30
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d106      	bne.n	800b3de <mqtt_publish+0x22>
 800b3d0:	4b5d      	ldr	r3, [pc, #372]	; (800b548 <mqtt_publish+0x18c>)
 800b3d2:	f240 4254 	movw	r2, #1108	; 0x454
 800b3d6:	495d      	ldr	r1, [pc, #372]	; (800b54c <mqtt_publish+0x190>)
 800b3d8:	485d      	ldr	r0, [pc, #372]	; (800b550 <mqtt_publish+0x194>)
 800b3da:	f00b ff0f 	bl	80171fc <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d106      	bne.n	800b3f2 <mqtt_publish+0x36>
 800b3e4:	4b58      	ldr	r3, [pc, #352]	; (800b548 <mqtt_publish+0x18c>)
 800b3e6:	f240 4255 	movw	r2, #1109	; 0x455
 800b3ea:	495a      	ldr	r1, [pc, #360]	; (800b554 <mqtt_publish+0x198>)
 800b3ec:	4858      	ldr	r0, [pc, #352]	; (800b550 <mqtt_publish+0x194>)
 800b3ee:	f00b ff05 	bl	80171fc <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	7a9b      	ldrb	r3, [r3, #10]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <mqtt_publish+0x52>
 800b3fa:	4b53      	ldr	r3, [pc, #332]	; (800b548 <mqtt_publish+0x18c>)
 800b3fc:	f240 4256 	movw	r2, #1110	; 0x456
 800b400:	4955      	ldr	r1, [pc, #340]	; (800b558 <mqtt_publish+0x19c>)
 800b402:	4853      	ldr	r0, [pc, #332]	; (800b550 <mqtt_publish+0x194>)
 800b404:	f00b fefa 	bl	80171fc <iprintf>
 800b408:	f06f 030a 	mvn.w	r3, #10
 800b40c:	e097      	b.n	800b53e <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 800b40e:	68b8      	ldr	r0, [r7, #8]
 800b410:	f7f4 fef8 	bl	8000204 <strlen>
 800b414:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d909      	bls.n	800b434 <mqtt_publish+0x78>
 800b420:	4b49      	ldr	r3, [pc, #292]	; (800b548 <mqtt_publish+0x18c>)
 800b422:	f240 4259 	movw	r2, #1113	; 0x459
 800b426:	494d      	ldr	r1, [pc, #308]	; (800b55c <mqtt_publish+0x1a0>)
 800b428:	4849      	ldr	r0, [pc, #292]	; (800b550 <mqtt_publish+0x194>)
 800b42a:	f00b fee7 	bl	80171fc <iprintf>
 800b42e:	f06f 030f 	mvn.w	r3, #15
 800b432:	e084      	b.n	800b53e <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 800b438:	8b7b      	ldrh	r3, [r7, #26]
 800b43a:	1c9a      	adds	r2, r3, #2
 800b43c:	887b      	ldrh	r3, [r7, #2]
 800b43e:	4413      	add	r3, r2
 800b440:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800b442:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <mqtt_publish+0xa0>
    total_len += 2;
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	3302      	adds	r3, #2
 800b44e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7fe feed 	bl	800a230 <msg_generate_packet_id>
 800b456:	4603      	mov	r3, r0
 800b458:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b45a:	e001      	b.n	800b460 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b466:	d309      	bcc.n	800b47c <mqtt_publish+0xc0>
 800b468:	4b37      	ldr	r3, [pc, #220]	; (800b548 <mqtt_publish+0x18c>)
 800b46a:	f240 4265 	movw	r2, #1125	; 0x465
 800b46e:	493c      	ldr	r1, [pc, #240]	; (800b560 <mqtt_publish+0x1a4>)
 800b470:	4837      	ldr	r0, [pc, #220]	; (800b550 <mqtt_publish+0x194>)
 800b472:	f00b fec3 	bl	80171fc <iprintf>
 800b476:	f06f 030f 	mvn.w	r3, #15
 800b47a:	e060      	b.n	800b53e <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f103 001c 	add.w	r0, r3, #28
 800b486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	2104      	movs	r1, #4
 800b490:	f7ff f816 	bl	800a4c0 <mqtt_create_request>
 800b494:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <mqtt_publish+0xe6>
    return ERR_MEM;
 800b49c:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a0:	e04d      	b.n	800b53e <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	33ec      	adds	r3, #236	; 0xec
 800b4a6:	8b3a      	ldrh	r2, [r7, #24]
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff fa62 	bl	800a974 <mqtt_output_check_space>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d105      	bne.n	800b4c2 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 800b4b6:	6978      	ldr	r0, [r7, #20]
 800b4b8:	f7ff f894 	bl	800a5e4 <mqtt_delete_request>
    return ERR_MEM;
 800b4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c0:	e03d      	b.n	800b53e <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b4c8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b4cc:	8b3b      	ldrh	r3, [r7, #24]
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2103      	movs	r1, #3
 800b4dc:	f7ff f9ff 	bl	800a8de <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	33ec      	adds	r3, #236	; 0xec
 800b4e4:	8b7a      	ldrh	r2, [r7, #26]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff f9cc 	bl	800a886 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800b4ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d006      	beq.n	800b504 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	33ec      	adds	r3, #236	; 0xec
 800b4fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff f98b 	bl	800a81a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d009      	beq.n	800b51e <mqtt_publish+0x162>
 800b50a:	887b      	ldrh	r3, [r7, #2]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	33ec      	adds	r3, #236	; 0xec
 800b514:	887a      	ldrh	r2, [r7, #2]
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff f996 	bl	800a84a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3318      	adds	r3, #24
 800b522:	6979      	ldr	r1, [r7, #20]
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff f811 	bl	800a54c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4619      	mov	r1, r3
 800b536:	4610      	mov	r0, r2
 800b538:	f7fe ff0e 	bl	800a358 <mqtt_output_send>
  return ERR_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3728      	adds	r7, #40	; 0x28
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	080189cc 	.word	0x080189cc
 800b54c:	08018cd8 	.word	0x08018cd8
 800b550:	08018a44 	.word	0x08018a44
 800b554:	08018cf8 	.word	0x08018cf8
 800b558:	08018d14 	.word	0x08018d14
 800b55c:	08018d34 	.word	0x08018d34
 800b560:	08018d58 	.word	0x08018d58

0800b564 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08c      	sub	sp, #48	; 0x30
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	4613      	mov	r3, r2
 800b572:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <mqtt_sub_unsub+0x24>
 800b57a:	4b5e      	ldr	r3, [pc, #376]	; (800b6f4 <mqtt_sub_unsub+0x190>)
 800b57c:	f240 429f 	movw	r2, #1183	; 0x49f
 800b580:	495d      	ldr	r1, [pc, #372]	; (800b6f8 <mqtt_sub_unsub+0x194>)
 800b582:	485e      	ldr	r0, [pc, #376]	; (800b6fc <mqtt_sub_unsub+0x198>)
 800b584:	f00b fe3a 	bl	80171fc <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <mqtt_sub_unsub+0x38>
 800b58e:	4b59      	ldr	r3, [pc, #356]	; (800b6f4 <mqtt_sub_unsub+0x190>)
 800b590:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800b594:	495a      	ldr	r1, [pc, #360]	; (800b700 <mqtt_sub_unsub+0x19c>)
 800b596:	4859      	ldr	r0, [pc, #356]	; (800b6fc <mqtt_sub_unsub+0x198>)
 800b598:	f00b fe30 	bl	80171fc <iprintf>

  topic_strlen = strlen(topic);
 800b59c:	68b8      	ldr	r0, [r7, #8]
 800b59e:	f7f4 fe31 	bl	8000204 <strlen>
 800b5a2:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d909      	bls.n	800b5c2 <mqtt_sub_unsub+0x5e>
 800b5ae:	4b51      	ldr	r3, [pc, #324]	; (800b6f4 <mqtt_sub_unsub+0x190>)
 800b5b0:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800b5b4:	4953      	ldr	r1, [pc, #332]	; (800b704 <mqtt_sub_unsub+0x1a0>)
 800b5b6:	4851      	ldr	r0, [pc, #324]	; (800b6fc <mqtt_sub_unsub+0x198>)
 800b5b8:	f00b fe20 	bl	80171fc <iprintf>
 800b5bc:	f06f 030f 	mvn.w	r3, #15
 800b5c0:	e093      	b.n	800b6ea <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800b5c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5c8:	3304      	adds	r3, #4
 800b5ca:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	bf14      	ite	ne
 800b5d2:	2201      	movne	r2, #1
 800b5d4:	2200      	moveq	r2, #0
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	4413      	add	r3, r2
 800b5da:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5e2:	d309      	bcc.n	800b5f8 <mqtt_sub_unsub+0x94>
 800b5e4:	4b43      	ldr	r3, [pc, #268]	; (800b6f4 <mqtt_sub_unsub+0x190>)
 800b5e6:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800b5ea:	4947      	ldr	r1, [pc, #284]	; (800b708 <mqtt_sub_unsub+0x1a4>)
 800b5ec:	4843      	ldr	r0, [pc, #268]	; (800b6fc <mqtt_sub_unsub+0x198>)
 800b5ee:	f00b fe05 	bl	80171fc <iprintf>
 800b5f2:	f06f 030f 	mvn.w	r3, #15
 800b5f6:	e078      	b.n	800b6ea <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d906      	bls.n	800b610 <mqtt_sub_unsub+0xac>
 800b602:	4b3c      	ldr	r3, [pc, #240]	; (800b6f4 <mqtt_sub_unsub+0x190>)
 800b604:	f240 42aa 	movw	r2, #1194	; 0x4aa
 800b608:	4940      	ldr	r1, [pc, #256]	; (800b70c <mqtt_sub_unsub+0x1a8>)
 800b60a:	483c      	ldr	r0, [pc, #240]	; (800b6fc <mqtt_sub_unsub+0x198>)
 800b60c:	f00b fdf6 	bl	80171fc <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	7a9b      	ldrb	r3, [r3, #10]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d102      	bne.n	800b61e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800b618:	f06f 030a 	mvn.w	r3, #10
 800b61c:	e065      	b.n	800b6ea <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7fe fe06 	bl	800a230 <msg_generate_packet_id>
 800b624:	4603      	mov	r3, r0
 800b626:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f103 001c 	add.w	r0, r3, #28
 800b62e:	8b3a      	ldrh	r2, [r7, #24]
 800b630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	2104      	movs	r1, #4
 800b638:	f7fe ff42 	bl	800a4c0 <mqtt_create_request>
 800b63c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 800b644:	f04f 33ff 	mov.w	r3, #4294967295
 800b648:	e04f      	b.n	800b6ea <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	33ec      	adds	r3, #236	; 0xec
 800b64e:	8b7a      	ldrh	r2, [r7, #26]
 800b650:	4611      	mov	r1, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff f98e 	bl	800a974 <mqtt_output_check_space>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d105      	bne.n	800b66a <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 800b65e:	6978      	ldr	r0, [r7, #20]
 800b660:	f7fe ffc0 	bl	800a5e4 <mqtt_delete_request>
    return ERR_MEM;
 800b664:	f04f 33ff 	mov.w	r3, #4294967295
 800b668:	e03f      	b.n	800b6ea <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b670:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <mqtt_sub_unsub+0x118>
 800b678:	2108      	movs	r1, #8
 800b67a:	e000      	b.n	800b67e <mqtt_sub_unsub+0x11a>
 800b67c:	210a      	movs	r1, #10
 800b67e:	8b7b      	ldrh	r3, [r7, #26]
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	2300      	movs	r3, #0
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	2301      	movs	r3, #1
 800b688:	2200      	movs	r2, #0
 800b68a:	f7ff f928 	bl	800a8de <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	33ec      	adds	r3, #236	; 0xec
 800b692:	8b3a      	ldrh	r2, [r7, #24]
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff f8bf 	bl	800a81a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	33ec      	adds	r3, #236	; 0xec
 800b6a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6a2:	68b9      	ldr	r1, [r7, #8]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7ff f8ee 	bl	800a886 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800b6aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00b      	beq.n	800b6ca <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	bf28      	it	cs
 800b6be:	2302      	movcs	r3, #2
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7ff f899 	bl	800a7fc <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3318      	adds	r3, #24
 800b6ce:	6979      	ldr	r1, [r7, #20]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fe ff3b 	bl	800a54c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	f7fe fe38 	bl	800a358 <mqtt_output_send>
  return ERR_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3728      	adds	r7, #40	; 0x28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	080189cc 	.word	0x080189cc
 800b6f8:	08018d7c 	.word	0x08018d7c
 800b6fc:	08018a44 	.word	0x08018a44
 800b700:	08018d9c 	.word	0x08018d9c
 800b704:	08018dbc 	.word	0x08018dbc
 800b708:	08018de4 	.word	0x08018de4
 800b70c:	08018e0c 	.word	0x08018e0c

0800b710 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d106      	bne.n	800b732 <mqtt_set_inpub_callback+0x22>
 800b724:	4b09      	ldr	r3, [pc, #36]	; (800b74c <mqtt_set_inpub_callback+0x3c>)
 800b726:	f240 42da 	movw	r2, #1242	; 0x4da
 800b72a:	4909      	ldr	r1, [pc, #36]	; (800b750 <mqtt_set_inpub_callback+0x40>)
 800b72c:	4809      	ldr	r0, [pc, #36]	; (800b754 <mqtt_set_inpub_callback+0x44>)
 800b72e:	f00b fd65 	bl	80171fc <iprintf>
  client->data_cb = data_cb;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	080189cc 	.word	0x080189cc
 800b750:	08018e24 	.word	0x08018e24
 800b754:	08018a44 	.word	0x08018a44

0800b758 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 800b75c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800b760:	2001      	movs	r0, #1
 800b762:	f000 ffaf 	bl	800c6c4 <mem_calloc>
 800b766:	4603      	mov	r3, r0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08c      	sub	sp, #48	; 0x30
 800b770:	af02      	add	r7, sp, #8
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800b77c:	230a      	movs	r3, #10
 800b77e:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b786:	2300      	movs	r3, #0
 800b788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b78c:	2300      	movs	r3, #0
 800b78e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	83fb      	strh	r3, [r7, #30]
 800b796:	2300      	movs	r3, #0
 800b798:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d106      	bne.n	800b7ae <mqtt_client_connect+0x42>
 800b7a0:	4b9e      	ldr	r3, [pc, #632]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b7a2:	f240 520f 	movw	r2, #1295	; 0x50f
 800b7a6:	499e      	ldr	r1, [pc, #632]	; (800ba20 <mqtt_client_connect+0x2b4>)
 800b7a8:	489e      	ldr	r0, [pc, #632]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b7aa:	f00b fd27 	bl	80171fc <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <mqtt_client_connect+0x56>
 800b7b4:	4b99      	ldr	r3, [pc, #612]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b7b6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800b7ba:	499b      	ldr	r1, [pc, #620]	; (800ba28 <mqtt_client_connect+0x2bc>)
 800b7bc:	4899      	ldr	r0, [pc, #612]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b7be:	f00b fd1d 	bl	80171fc <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800b7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <mqtt_client_connect+0x6a>
 800b7c8:	4b94      	ldr	r3, [pc, #592]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b7ca:	f240 5211 	movw	r2, #1297	; 0x511
 800b7ce:	4997      	ldr	r1, [pc, #604]	; (800ba2c <mqtt_client_connect+0x2c0>)
 800b7d0:	4894      	ldr	r0, [pc, #592]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b7d2:	f00b fd13 	bl	80171fc <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800b7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <mqtt_client_connect+0x80>
 800b7de:	4b8f      	ldr	r3, [pc, #572]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b7e0:	f240 5212 	movw	r2, #1298	; 0x512
 800b7e4:	4992      	ldr	r1, [pc, #584]	; (800ba30 <mqtt_client_connect+0x2c4>)
 800b7e6:	488f      	ldr	r0, [pc, #572]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b7e8:	f00b fd08 	bl	80171fc <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	7a9b      	ldrb	r3, [r3, #10]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d002      	beq.n	800b7fa <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800b7f4:	f06f 0309 	mvn.w	r3, #9
 800b7f8:	e21f      	b.n	800bc3a <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800b7fa:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800b7fe:	2100      	movs	r1, #0
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f00b fc13 	bl	801702c <memset>
  client->connect_arg = arg;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b80a:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800b812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b814:	899a      	ldrh	r2, [r3, #12]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	331c      	adds	r3, #28
 800b81e:	2104      	movs	r1, #4
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe ffbd 	bl	800a7a0 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d073      	beq.n	800b916 <mqtt_client_connect+0x1aa>
 800b82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b830:	695b      	ldr	r3, [r3, #20]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d06f      	beq.n	800b916 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800b836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b83a:	f043 0304 	orr.w	r3, r3, #4
 800b83e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800b842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b844:	7e1b      	ldrb	r3, [r3, #24]
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	b25b      	sxtb	r3, r3
 800b84a:	f003 0318 	and.w	r3, r3, #24
 800b84e:	b25a      	sxtb	r2, r3
 800b850:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b854:	4313      	orrs	r3, r2
 800b856:	b25b      	sxtb	r3, r3
 800b858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800b85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85e:	7e5b      	ldrb	r3, [r3, #25]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d005      	beq.n	800b870 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800b864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b868:	f043 0320 	orr.w	r3, r3, #32
 800b86c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	4618      	mov	r0, r3
 800b876:	f7f4 fcc5 	bl	8000204 <strlen>
 800b87a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	2bff      	cmp	r3, #255	; 0xff
 800b880:	d909      	bls.n	800b896 <mqtt_client_connect+0x12a>
 800b882:	4b66      	ldr	r3, [pc, #408]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b884:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800b888:	496a      	ldr	r1, [pc, #424]	; (800ba34 <mqtt_client_connect+0x2c8>)
 800b88a:	4866      	ldr	r0, [pc, #408]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b88c:	f00b fcb6 	bl	80171fc <iprintf>
 800b890:	f06f 0305 	mvn.w	r3, #5
 800b894:	e1d1      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d109      	bne.n	800b8b0 <mqtt_client_connect+0x144>
 800b89c:	4b5f      	ldr	r3, [pc, #380]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b89e:	f240 5229 	movw	r2, #1321	; 0x529
 800b8a2:	4965      	ldr	r1, [pc, #404]	; (800ba38 <mqtt_client_connect+0x2cc>)
 800b8a4:	485f      	ldr	r0, [pc, #380]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b8a6:	f00b fca9 	bl	80171fc <iprintf>
 800b8aa:	f06f 0305 	mvn.w	r3, #5
 800b8ae:	e1c4      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7f4 fca2 	bl	8000204 <strlen>
 800b8c0:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	2bff      	cmp	r3, #255	; 0xff
 800b8c6:	d909      	bls.n	800b8dc <mqtt_client_connect+0x170>
 800b8c8:	4b54      	ldr	r3, [pc, #336]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b8ca:	f240 522c 	movw	r2, #1324	; 0x52c
 800b8ce:	495b      	ldr	r1, [pc, #364]	; (800ba3c <mqtt_client_connect+0x2d0>)
 800b8d0:	4854      	ldr	r0, [pc, #336]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b8d2:	f00b fc93 	bl	80171fc <iprintf>
 800b8d6:	f06f 0305 	mvn.w	r3, #5
 800b8da:	e1ae      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800b8e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e4:	1c9a      	adds	r2, r3, #2
 800b8e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8ea:	4413      	add	r3, r2
 800b8ec:	1c9a      	adds	r2, r3, #2
 800b8ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b8f2:	4413      	add	r3, r2
 800b8f4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8fc:	d309      	bcc.n	800b912 <mqtt_client_connect+0x1a6>
 800b8fe:	4b47      	ldr	r3, [pc, #284]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b900:	f240 522f 	movw	r2, #1327	; 0x52f
 800b904:	494e      	ldr	r1, [pc, #312]	; (800ba40 <mqtt_client_connect+0x2d4>)
 800b906:	4847      	ldr	r0, [pc, #284]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b908:	f00b fc78 	bl	80171fc <iprintf>
 800b90c:	f06f 0305 	mvn.w	r3, #5
 800b910:	e193      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800b916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d03d      	beq.n	800b99a <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800b91e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800b92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f4 fc68 	bl	8000204 <strlen>
 800b934:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b93c:	d309      	bcc.n	800b952 <mqtt_client_connect+0x1e6>
 800b93e:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b940:	f240 5235 	movw	r2, #1333	; 0x535
 800b944:	493f      	ldr	r1, [pc, #252]	; (800ba44 <mqtt_client_connect+0x2d8>)
 800b946:	4837      	ldr	r0, [pc, #220]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b948:	f00b fc58 	bl	80171fc <iprintf>
 800b94c:	f06f 0305 	mvn.w	r3, #5
 800b950:	e173      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d109      	bne.n	800b96c <mqtt_client_connect+0x200>
 800b958:	4b30      	ldr	r3, [pc, #192]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b95a:	f240 5236 	movw	r2, #1334	; 0x536
 800b95e:	493a      	ldr	r1, [pc, #232]	; (800ba48 <mqtt_client_connect+0x2dc>)
 800b960:	4830      	ldr	r0, [pc, #192]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b962:	f00b fc4b 	bl	80171fc <iprintf>
 800b966:	f06f 0305 	mvn.w	r3, #5
 800b96a:	e166      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800b970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b972:	1c9a      	adds	r2, r3, #2
 800b974:	8bfb      	ldrh	r3, [r7, #30]
 800b976:	4413      	add	r3, r2
 800b978:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b980:	d309      	bcc.n	800b996 <mqtt_client_connect+0x22a>
 800b982:	4b26      	ldr	r3, [pc, #152]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b984:	f240 5239 	movw	r2, #1337	; 0x539
 800b988:	492d      	ldr	r1, [pc, #180]	; (800ba40 <mqtt_client_connect+0x2d4>)
 800b98a:	4826      	ldr	r0, [pc, #152]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b98c:	f00b fc36 	bl	80171fc <iprintf>
 800b990:	f06f 0305 	mvn.w	r3, #5
 800b994:	e151      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800b99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d05a      	beq.n	800ba58 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800b9a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7f4 fc26 	bl	8000204 <strlen>
 800b9b8:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9c0:	d309      	bcc.n	800b9d6 <mqtt_client_connect+0x26a>
 800b9c2:	4b16      	ldr	r3, [pc, #88]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b9c4:	f240 523f 	movw	r2, #1343	; 0x53f
 800b9c8:	4920      	ldr	r1, [pc, #128]	; (800ba4c <mqtt_client_connect+0x2e0>)
 800b9ca:	4816      	ldr	r0, [pc, #88]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b9cc:	f00b fc16 	bl	80171fc <iprintf>
 800b9d0:	f06f 0305 	mvn.w	r3, #5
 800b9d4:	e131      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d109      	bne.n	800b9f0 <mqtt_client_connect+0x284>
 800b9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800b9de:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800b9e2:	491b      	ldr	r1, [pc, #108]	; (800ba50 <mqtt_client_connect+0x2e4>)
 800b9e4:	480f      	ldr	r0, [pc, #60]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800b9e6:	f00b fc09 	bl	80171fc <iprintf>
 800b9ea:	f06f 0305 	mvn.w	r3, #5
 800b9ee:	e124      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800b9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f6:	1c9a      	adds	r2, r3, #2
 800b9f8:	8bbb      	ldrh	r3, [r7, #28]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba04:	d326      	bcc.n	800ba54 <mqtt_client_connect+0x2e8>
 800ba06:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <mqtt_client_connect+0x2b0>)
 800ba08:	f240 5243 	movw	r2, #1347	; 0x543
 800ba0c:	490c      	ldr	r1, [pc, #48]	; (800ba40 <mqtt_client_connect+0x2d4>)
 800ba0e:	4805      	ldr	r0, [pc, #20]	; (800ba24 <mqtt_client_connect+0x2b8>)
 800ba10:	f00b fbf4 	bl	80171fc <iprintf>
 800ba14:	f06f 0305 	mvn.w	r3, #5
 800ba18:	e10f      	b.n	800bc3a <mqtt_client_connect+0x4ce>
 800ba1a:	bf00      	nop
 800ba1c:	080189cc 	.word	0x080189cc
 800ba20:	08018e4c 	.word	0x08018e4c
 800ba24:	08018a44 	.word	0x08018a44
 800ba28:	08018e70 	.word	0x08018e70
 800ba2c:	08018e98 	.word	0x08018e98
 800ba30:	08018ec4 	.word	0x08018ec4
 800ba34:	08018ef8 	.word	0x08018ef8
 800ba38:	08018f38 	.word	0x08018f38
 800ba3c:	08018f78 	.word	0x08018f78
 800ba40:	08018fb4 	.word	0x08018fb4
 800ba44:	08018fe4 	.word	0x08018fe4
 800ba48:	08019024 	.word	0x08019024
 800ba4c:	08019068 	.word	0x08019068
 800ba50:	080190a8 	.word	0x080190a8
    remaining_length = (u16_t)len;
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800ba58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba5c:	f043 0302 	orr.w	r3, r3, #2
 800ba60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800ba64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7f4 fbcb 	bl	8000204 <strlen>
 800ba6e:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba76:	d309      	bcc.n	800ba8c <mqtt_client_connect+0x320>
 800ba78:	4b72      	ldr	r3, [pc, #456]	; (800bc44 <mqtt_client_connect+0x4d8>)
 800ba7a:	f240 524b 	movw	r2, #1355	; 0x54b
 800ba7e:	4972      	ldr	r1, [pc, #456]	; (800bc48 <mqtt_client_connect+0x4dc>)
 800ba80:	4872      	ldr	r0, [pc, #456]	; (800bc4c <mqtt_client_connect+0x4e0>)
 800ba82:	f00b fbbb 	bl	80171fc <iprintf>
 800ba86:	f06f 0305 	mvn.w	r3, #5
 800ba8a:	e0d6      	b.n	800bc3a <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800ba90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba92:	1c9a      	adds	r2, r3, #2
 800ba94:	8afb      	ldrh	r3, [r7, #22]
 800ba96:	4413      	add	r3, r2
 800ba98:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa0:	d309      	bcc.n	800bab6 <mqtt_client_connect+0x34a>
 800baa2:	4b68      	ldr	r3, [pc, #416]	; (800bc44 <mqtt_client_connect+0x4d8>)
 800baa4:	f240 524e 	movw	r2, #1358	; 0x54e
 800baa8:	4969      	ldr	r1, [pc, #420]	; (800bc50 <mqtt_client_connect+0x4e4>)
 800baaa:	4868      	ldr	r0, [pc, #416]	; (800bc4c <mqtt_client_connect+0x4e0>)
 800baac:	f00b fba6 	bl	80171fc <iprintf>
 800bab0:	f06f 0305 	mvn.w	r3, #5
 800bab4:	e0c1      	b.n	800bc3a <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	33ec      	adds	r3, #236	; 0xec
 800babe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bac0:	4611      	mov	r1, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe ff56 	bl	800a974 <mqtt_output_check_space>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d102      	bne.n	800bad4 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800bace:	f04f 33ff 	mov.w	r3, #4294967295
 800bad2:	e0b2      	b.n	800bc3a <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800bad4:	2000      	movs	r0, #0
 800bad6:	f003 fd4f 	bl	800f578 <tcp_new_ip_type>
 800bada:	4602      	mov	r2, r0
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d102      	bne.n	800baee <mqtt_client_connect+0x382>
    return ERR_MEM;
 800bae8:	f04f 33ff 	mov.w	r3, #4294967295
 800baec:	e0a5      	b.n	800bc3a <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f003 fd4d 	bl	800f594 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	4954      	ldr	r1, [pc, #336]	; (800bc54 <mqtt_client_connect+0x4e8>)
 800bb02:	4618      	mov	r0, r3
 800bb04:	f002 fc5e 	bl	800e3c4 <tcp_bind>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800bb0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f040 8084 	bne.w	800bc20 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	68d8      	ldr	r0, [r3, #12]
 800bb1c:	88fa      	ldrh	r2, [r7, #6]
 800bb1e:	4b4e      	ldr	r3, [pc, #312]	; (800bc58 <mqtt_client_connect+0x4ec>)
 800bb20:	68b9      	ldr	r1, [r7, #8]
 800bb22:	f002 fdd9 	bl	800e6d8 <tcp_connect>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800bb2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d177      	bne.n	800bc24 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	4948      	ldr	r1, [pc, #288]	; (800bc5c <mqtt_client_connect+0x4f0>)
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f003 fd80 	bl	800f640 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2201      	movs	r2, #1
 800bb44:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bb4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	2300      	movs	r3, #0
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	2200      	movs	r2, #0
 800bb58:	2101      	movs	r1, #1
 800bb5a:	f7fe fec0 	bl	800a8de <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	33ec      	adds	r3, #236	; 0xec
 800bb62:	2204      	movs	r2, #4
 800bb64:	493e      	ldr	r1, [pc, #248]	; (800bc60 <mqtt_client_connect+0x4f4>)
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe fe8d 	bl	800a886 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	33ec      	adds	r3, #236	; 0xec
 800bb70:	2104      	movs	r1, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fe42 	bl	800a7fc <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	33ec      	adds	r3, #236	; 0xec
 800bb7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800bb80:	4611      	mov	r1, r2
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fe fe3a 	bl	800a7fc <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800bb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb90:	899b      	ldrh	r3, [r3, #12]
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fe fe40 	bl	800a81a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	8afa      	ldrh	r2, [r7, #22]
 800bba6:	4619      	mov	r1, r3
 800bba8:	f7fe fe6d 	bl	800a886 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800bbac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d015      	beq.n	800bbe4 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bbc6:	b292      	uxth	r2, r2
 800bbc8:	4619      	mov	r1, r3
 800bbca:	f7fe fe5c 	bl	800a886 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bbdc:	b292      	uxth	r2, r2
 800bbde:	4619      	mov	r1, r3
 800bbe0:	f7fe fe51 	bl	800a886 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800bbe4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da08      	bge.n	800bbfe <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	8bfa      	ldrh	r2, [r7, #30]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	f7fe fe44 	bl	800a886 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800bbfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800bc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	8bba      	ldrh	r2, [r7, #28]
 800bc16:	4619      	mov	r1, r3
 800bc18:	f7fe fe35 	bl	800a886 <mqtt_output_append_string>
  }
  return ERR_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	e00c      	b.n	800bc3a <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800bc20:	bf00      	nop
 800bc22:	e000      	b.n	800bc26 <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800bc24:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f002 fbbe 	bl	800e3ac <tcp_abort>
  client->conn = NULL;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	60da      	str	r2, [r3, #12]
  return err;
 800bc36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3728      	adds	r7, #40	; 0x28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	080189cc 	.word	0x080189cc
 800bc48:	080190ec 	.word	0x080190ec
 800bc4c:	08018a44 	.word	0x08018a44
 800bc50:	08018fb4 	.word	0x08018fb4
 800bc54:	0801d260 	.word	0x0801d260
 800bc58:	0800b339 	.word	0x0800b339
 800bc5c:	0800b2c5 	.word	0x0800b2c5
 800bc60:	08019128 	.word	0x08019128

0800bc64 <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d106      	bne.n	800bc80 <mqtt_client_is_connected+0x1c>
 800bc72:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <mqtt_client_is_connected+0x34>)
 800bc74:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bc78:	4908      	ldr	r1, [pc, #32]	; (800bc9c <mqtt_client_is_connected+0x38>)
 800bc7a:	4809      	ldr	r0, [pc, #36]	; (800bca0 <mqtt_client_is_connected+0x3c>)
 800bc7c:	f00b fabe 	bl	80171fc <iprintf>
  return client->conn_state == MQTT_CONNECTED;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7a9b      	ldrb	r3, [r3, #10]
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	bf0c      	ite	eq
 800bc88:	2301      	moveq	r3, #1
 800bc8a:	2300      	movne	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	080189cc 	.word	0x080189cc
 800bc9c:	08019150 	.word	0x08019150
 800bca0:	08018a44 	.word	0x08018a44

0800bca4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bcae:	88fb      	ldrh	r3, [r7, #6]
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	b21a      	sxth	r2, r3
 800bcb4:	88fb      	ldrh	r3, [r7, #6]
 800bcb6:	0a1b      	lsrs	r3, r3, #8
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	b21b      	sxth	r3, r3
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	b21b      	sxth	r3, r3
 800bcc0:	b29b      	uxth	r3, r3
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	061a      	lsls	r2, r3, #24
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	021b      	lsls	r3, r3, #8
 800bcde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bce2:	431a      	orrs	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	0a1b      	lsrs	r3, r3, #8
 800bce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bcec:	431a      	orrs	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	0e1b      	lsrs	r3, r3, #24
 800bcf2:	4313      	orrs	r3, r2
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bd0a:	f00a ff9f 	bl	8016c4c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bd0e:	f000 f989 	bl	800c024 <mem_init>
  memp_init();
 800bd12:	f000 fda7 	bl	800c864 <memp_init>
  pbuf_init();
  netif_init();
 800bd16:	f000 fecf 	bl	800cab8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bd1a:	f008 fa7d 	bl	8014218 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bd1e:	f002 f84b 	bl	800ddb8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bd22:	f008 f985 	bl	8014030 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <mem_overflow_check_raw>:
 * @param descr1 description of the element source shown on error
 * @param descr2 description of the element source shown on error
 */
void
mem_overflow_check_raw(void *p, size_t size, const char *descr1, const char *descr2)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b0a8      	sub	sp, #160	; 0xa0
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	603b      	str	r3, [r7, #0]
#if MEM_SANITY_REGION_AFTER_ALIGNED || MEM_SANITY_REGION_BEFORE_ALIGNED
  u16_t k;
  u8_t *m;

#if MEM_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t *)p + size;
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	4413      	add	r3, r2
 800bd44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800bd4e:	e01c      	b.n	800bd8a <mem_overflow_check_raw+0x5a>
    if (m[k] != 0xcd) {
 800bd50:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bd54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bd58:	4413      	add	r3, r2
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	2bcd      	cmp	r3, #205	; 0xcd
 800bd5e:	d00f      	beq.n	800bd80 <mem_overflow_check_raw+0x50>
      char errstr[128];
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 800bd60:	f107 0010 	add.w	r0, r7, #16
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a21      	ldr	r2, [pc, #132]	; (800bdf0 <mem_overflow_check_raw+0xc0>)
 800bd6c:	2180      	movs	r1, #128	; 0x80
 800bd6e:	f00b fb8b 	bl	8017488 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 800bd72:	f107 0110 	add.w	r1, r7, #16
 800bd76:	4b1f      	ldr	r3, [pc, #124]	; (800bdf4 <mem_overflow_check_raw+0xc4>)
 800bd78:	226d      	movs	r2, #109	; 0x6d
 800bd7a:	481f      	ldr	r0, [pc, #124]	; (800bdf8 <mem_overflow_check_raw+0xc8>)
 800bd7c:	f00b fa3e 	bl	80171fc <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 800bd80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bd84:	3301      	adds	r3, #1
 800bd86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800bd8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bd8e:	2b0f      	cmp	r3, #15
 800bd90:	d9de      	bls.n	800bd50 <mem_overflow_check_raw+0x20>
    }
  }
#endif /* MEM_SANITY_REGION_AFTER_ALIGNED > 0 */

#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3b10      	subs	r3, #16
 800bd96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800bda0:	e01c      	b.n	800bddc <mem_overflow_check_raw+0xac>
    if (m[k] != 0xcd) {
 800bda2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bda6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bdaa:	4413      	add	r3, r2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2bcd      	cmp	r3, #205	; 0xcd
 800bdb0:	d00f      	beq.n	800bdd2 <mem_overflow_check_raw+0xa2>
      char errstr[128];
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 800bdb2:	f107 0010 	add.w	r0, r7, #16
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a0f      	ldr	r2, [pc, #60]	; (800bdfc <mem_overflow_check_raw+0xcc>)
 800bdbe:	2180      	movs	r1, #128	; 0x80
 800bdc0:	f00b fb62 	bl	8017488 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 800bdc4:	f107 0110 	add.w	r1, r7, #16
 800bdc8:	4b0a      	ldr	r3, [pc, #40]	; (800bdf4 <mem_overflow_check_raw+0xc4>)
 800bdca:	2278      	movs	r2, #120	; 0x78
 800bdcc:	480a      	ldr	r0, [pc, #40]	; (800bdf8 <mem_overflow_check_raw+0xc8>)
 800bdce:	f00b fa15 	bl	80171fc <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 800bdd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800bddc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800bde0:	2b0f      	cmp	r3, #15
 800bde2:	d9de      	bls.n	800bda2 <mem_overflow_check_raw+0x72>
#else
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
  LWIP_UNUSED_ARG(descr);
#endif
}
 800bde4:	bf00      	nop
 800bde6:	bf00      	nop
 800bde8:	3798      	adds	r7, #152	; 0x98
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	0801917c 	.word	0x0801917c
 800bdf4:	0801919c 	.word	0x0801919c
 800bdf8:	080191cc 	.word	0x080191cc
 800bdfc:	080191f4 	.word	0x080191f4

0800be00 <mem_overflow_init_raw>:
/**
 * Initialize the restricted area of a mem element.
 */
void
mem_overflow_init_raw(void *p, size_t size)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	3b10      	subs	r3, #16
 800be0e:	60fb      	str	r3, [r7, #12]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 800be10:	2210      	movs	r2, #16
 800be12:	21cd      	movs	r1, #205	; 0xcd
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f00b f909 	bl	801702c <memset>
#endif
#if MEM_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t *)p + size;
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	4413      	add	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 800be22:	2210      	movs	r2, #16
 800be24:	21cd      	movs	r1, #205	; 0xcd
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f00b f900 	bl	801702c <memset>
#endif
#else /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <mem_overflow_init_element>:
#endif

#if MEM_OVERFLOW_CHECK
static void
mem_overflow_init_element(struct mem *mem, mem_size_t user_size)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	460b      	mov	r3, r1
 800be3e:	807b      	strh	r3, [r7, #2]
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3318      	adds	r3, #24
 800be44:	60fb      	str	r3, [r7, #12]
  mem->user_size = user_size;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	887a      	ldrh	r2, [r7, #2]
 800be4a:	80da      	strh	r2, [r3, #6]
  mem_overflow_init_raw(p, user_size);
 800be4c:	887b      	ldrh	r3, [r7, #2]
 800be4e:	4619      	mov	r1, r3
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f7ff ffd5 	bl	800be00 <mem_overflow_init_raw>
}
 800be56:	bf00      	nop
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <mem_overflow_check_element>:

static void
mem_overflow_check_element(struct mem *mem)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3318      	adds	r3, #24
 800be6c:	60fb      	str	r3, [r7, #12]
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	88db      	ldrh	r3, [r3, #6]
 800be72:	4619      	mov	r1, r3
 800be74:	4b04      	ldr	r3, [pc, #16]	; (800be88 <mem_overflow_check_element+0x28>)
 800be76:	4a05      	ldr	r2, [pc, #20]	; (800be8c <mem_overflow_check_element+0x2c>)
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7ff ff59 	bl	800bd30 <mem_overflow_check_raw>
}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	08019214 	.word	0x08019214
 800be8c:	08019218 	.word	0x08019218

0800be90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800be9a:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <ptr_to_mem+0x20>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	88fb      	ldrh	r3, [r7, #6]
 800bea0:	4413      	add	r3, r2
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	20011c4c 	.word	0x20011c4c

0800beb4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bebc:	4b05      	ldr	r3, [pc, #20]	; (800bed4 <mem_to_ptr+0x20>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	b29b      	uxth	r3, r3
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20011c4c 	.word	0x20011c4c

0800bed8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bed8:	b590      	push	{r4, r7, lr}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bee0:	4b47      	ldr	r3, [pc, #284]	; (800c000 <plug_holes+0x128>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d206      	bcs.n	800bef8 <plug_holes+0x20>
 800beea:	4b46      	ldr	r3, [pc, #280]	; (800c004 <plug_holes+0x12c>)
 800beec:	f240 12df 	movw	r2, #479	; 0x1df
 800bef0:	4945      	ldr	r1, [pc, #276]	; (800c008 <plug_holes+0x130>)
 800bef2:	4846      	ldr	r0, [pc, #280]	; (800c00c <plug_holes+0x134>)
 800bef4:	f00b f982 	bl	80171fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bef8:	4b45      	ldr	r3, [pc, #276]	; (800c010 <plug_holes+0x138>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d306      	bcc.n	800bf10 <plug_holes+0x38>
 800bf02:	4b40      	ldr	r3, [pc, #256]	; (800c004 <plug_holes+0x12c>)
 800bf04:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bf08:	4942      	ldr	r1, [pc, #264]	; (800c014 <plug_holes+0x13c>)
 800bf0a:	4840      	ldr	r0, [pc, #256]	; (800c00c <plug_holes+0x134>)
 800bf0c:	f00b f976 	bl	80171fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	791b      	ldrb	r3, [r3, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d006      	beq.n	800bf26 <plug_holes+0x4e>
 800bf18:	4b3a      	ldr	r3, [pc, #232]	; (800c004 <plug_holes+0x12c>)
 800bf1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bf1e:	493e      	ldr	r1, [pc, #248]	; (800c018 <plug_holes+0x140>)
 800bf20:	483a      	ldr	r0, [pc, #232]	; (800c00c <plug_holes+0x134>)
 800bf22:	f00b f96b 	bl	80171fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d906      	bls.n	800bf40 <plug_holes+0x68>
 800bf32:	4b34      	ldr	r3, [pc, #208]	; (800c004 <plug_holes+0x12c>)
 800bf34:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bf38:	4938      	ldr	r1, [pc, #224]	; (800c01c <plug_holes+0x144>)
 800bf3a:	4834      	ldr	r0, [pc, #208]	; (800c00c <plug_holes+0x134>)
 800bf3c:	f00b f95e 	bl	80171fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff ffa3 	bl	800be90 <ptr_to_mem>
 800bf4a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d025      	beq.n	800bfa0 <plug_holes+0xc8>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	791b      	ldrb	r3, [r3, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d121      	bne.n	800bfa0 <plug_holes+0xc8>
 800bf5c:	4b2c      	ldr	r3, [pc, #176]	; (800c010 <plug_holes+0x138>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d01c      	beq.n	800bfa0 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bf66:	4b2e      	ldr	r3, [pc, #184]	; (800c020 <plug_holes+0x148>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d102      	bne.n	800bf76 <plug_holes+0x9e>
      lfree = mem;
 800bf70:	4a2b      	ldr	r2, [pc, #172]	; (800c020 <plug_holes+0x148>)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	881a      	ldrh	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d00a      	beq.n	800bfa0 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff ff7e 	bl	800be90 <ptr_to_mem>
 800bf94:	4604      	mov	r4, r0
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff ff8c 	bl	800beb4 <mem_to_ptr>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	885b      	ldrh	r3, [r3, #2]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff ff73 	bl	800be90 <ptr_to_mem>
 800bfaa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d020      	beq.n	800bff6 <plug_holes+0x11e>
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	791b      	ldrb	r3, [r3, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11c      	bne.n	800bff6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bfbc:	4b18      	ldr	r3, [pc, #96]	; (800c020 <plug_holes+0x148>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d102      	bne.n	800bfcc <plug_holes+0xf4>
      lfree = pmem;
 800bfc6:	4a16      	ldr	r2, [pc, #88]	; (800c020 <plug_holes+0x148>)
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	881a      	ldrh	r2, [r3, #0]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d00a      	beq.n	800bff6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff ff53 	bl	800be90 <ptr_to_mem>
 800bfea:	4604      	mov	r4, r0
 800bfec:	68b8      	ldr	r0, [r7, #8]
 800bfee:	f7ff ff61 	bl	800beb4 <mem_to_ptr>
 800bff2:	4603      	mov	r3, r0
 800bff4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bff6:	bf00      	nop
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd90      	pop	{r4, r7, pc}
 800bffe:	bf00      	nop
 800c000:	20011c4c 	.word	0x20011c4c
 800c004:	0801919c 	.word	0x0801919c
 800c008:	08019220 	.word	0x08019220
 800c00c:	080191cc 	.word	0x080191cc
 800c010:	20011c50 	.word	0x20011c50
 800c014:	08019238 	.word	0x08019238
 800c018:	08019254 	.word	0x08019254
 800c01c:	08019270 	.word	0x08019270
 800c020:	20011c58 	.word	0x20011c58

0800c024 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c02a:	4b1f      	ldr	r3, [pc, #124]	; (800c0a8 <mem_init+0x84>)
 800c02c:	3303      	adds	r3, #3
 800c02e:	f023 0303 	bic.w	r3, r3, #3
 800c032:	461a      	mov	r2, r3
 800c034:	4b1d      	ldr	r3, [pc, #116]	; (800c0ac <mem_init+0x88>)
 800c036:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c038:	4b1c      	ldr	r3, [pc, #112]	; (800c0ac <mem_init+0x88>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c044:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c052:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c056:	f7ff ff1b 	bl	800be90 <ptr_to_mem>
 800c05a:	4603      	mov	r3, r0
 800c05c:	4a14      	ldr	r2, [pc, #80]	; (800c0b0 <mem_init+0x8c>)
 800c05e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c060:	4b13      	ldr	r3, [pc, #76]	; (800c0b0 <mem_init+0x8c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2201      	movs	r2, #1
 800c066:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c068:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <mem_init+0x8c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c070:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c072:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <mem_init+0x8c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c07a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c07c:	4b0b      	ldr	r3, [pc, #44]	; (800c0ac <mem_init+0x88>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a0c      	ldr	r2, [pc, #48]	; (800c0b4 <mem_init+0x90>)
 800c082:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c084:	480c      	ldr	r0, [pc, #48]	; (800c0b8 <mem_init+0x94>)
 800c086:	f00a fdef 	bl	8016c68 <sys_mutex_new>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d006      	beq.n	800c09e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <mem_init+0x98>)
 800c092:	f240 221f 	movw	r2, #543	; 0x21f
 800c096:	490a      	ldr	r1, [pc, #40]	; (800c0c0 <mem_init+0x9c>)
 800c098:	480a      	ldr	r0, [pc, #40]	; (800c0c4 <mem_init+0xa0>)
 800c09a:	f00b f8af 	bl	80171fc <iprintf>
  }
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	200058e8 	.word	0x200058e8
 800c0ac:	20011c4c 	.word	0x20011c4c
 800c0b0:	20011c50 	.word	0x20011c50
 800c0b4:	20011c58 	.word	0x20011c58
 800c0b8:	20011c54 	.word	0x20011c54
 800c0bc:	0801919c 	.word	0x0801919c
 800c0c0:	0801929c 	.word	0x0801929c
 800c0c4:	080191cc 	.word	0x080191cc

0800c0c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff feef 	bl	800beb4 <mem_to_ptr>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7ff fed6 	bl	800be90 <ptr_to_mem>
 800c0e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	885b      	ldrh	r3, [r3, #2]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fed0 	bl	800be90 <ptr_to_mem>
 800c0f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d819      	bhi.n	800c132 <mem_link_valid+0x6a>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	885b      	ldrh	r3, [r3, #2]
 800c102:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c106:	4293      	cmp	r3, r2
 800c108:	d813      	bhi.n	800c132 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c10e:	8afa      	ldrh	r2, [r7, #22]
 800c110:	429a      	cmp	r2, r3
 800c112:	d004      	beq.n	800c11e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	8afa      	ldrh	r2, [r7, #22]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d109      	bne.n	800c132 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <mem_link_valid+0x78>)
 800c120:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	429a      	cmp	r2, r3
 800c126:	d006      	beq.n	800c136 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	885b      	ldrh	r3, [r3, #2]
 800c12c:	8afa      	ldrh	r2, [r7, #22]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d001      	beq.n	800c136 <mem_link_valid+0x6e>
    return 0;
 800c132:	2300      	movs	r3, #0
 800c134:	e000      	b.n	800c138 <mem_link_valid+0x70>
  }
  return 1;
 800c136:	2301      	movs	r3, #1
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	20011c50 	.word	0x20011c50

0800c144 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b088      	sub	sp, #32
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d073      	beq.n	800c23a <mem_free+0xf6>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00d      	beq.n	800c178 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c15c:	4b39      	ldr	r3, [pc, #228]	; (800c244 <mem_free+0x100>)
 800c15e:	f240 2273 	movw	r2, #627	; 0x273
 800c162:	4939      	ldr	r1, [pc, #228]	; (800c248 <mem_free+0x104>)
 800c164:	4839      	ldr	r0, [pc, #228]	; (800c24c <mem_free+0x108>)
 800c166:	f00b f849 	bl	80171fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c16a:	f00a fddb 	bl	8016d24 <sys_arch_protect>
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f00a fde5 	bl	8016d40 <sys_arch_unprotect>
    return;
 800c176:	e061      	b.n	800c23c <mem_free+0xf8>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3b18      	subs	r3, #24
 800c17c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c17e:	4b34      	ldr	r3, [pc, #208]	; (800c250 <mem_free+0x10c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	429a      	cmp	r2, r3
 800c186:	d306      	bcc.n	800c196 <mem_free+0x52>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f103 020c 	add.w	r2, r3, #12
 800c18e:	4b31      	ldr	r3, [pc, #196]	; (800c254 <mem_free+0x110>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d90d      	bls.n	800c1b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c196:	4b2b      	ldr	r3, [pc, #172]	; (800c244 <mem_free+0x100>)
 800c198:	f240 227f 	movw	r2, #639	; 0x27f
 800c19c:	492e      	ldr	r1, [pc, #184]	; (800c258 <mem_free+0x114>)
 800c19e:	482b      	ldr	r0, [pc, #172]	; (800c24c <mem_free+0x108>)
 800c1a0:	f00b f82c 	bl	80171fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1a4:	f00a fdbe 	bl	8016d24 <sys_arch_protect>
 800c1a8:	6138      	str	r0, [r7, #16]
 800c1aa:	6938      	ldr	r0, [r7, #16]
 800c1ac:	f00a fdc8 	bl	8016d40 <sys_arch_unprotect>
    return;
 800c1b0:	e044      	b.n	800c23c <mem_free+0xf8>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
 800c1b2:	69f8      	ldr	r0, [r7, #28]
 800c1b4:	f7ff fe54 	bl	800be60 <mem_overflow_check_element>
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c1b8:	4828      	ldr	r0, [pc, #160]	; (800c25c <mem_free+0x118>)
 800c1ba:	f00a fd71 	bl	8016ca0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	791b      	ldrb	r3, [r3, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d110      	bne.n	800c1e8 <mem_free+0xa4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c1c6:	4b1f      	ldr	r3, [pc, #124]	; (800c244 <mem_free+0x100>)
 800c1c8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c1cc:	4924      	ldr	r1, [pc, #144]	; (800c260 <mem_free+0x11c>)
 800c1ce:	481f      	ldr	r0, [pc, #124]	; (800c24c <mem_free+0x108>)
 800c1d0:	f00b f814 	bl	80171fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c1d4:	4821      	ldr	r0, [pc, #132]	; (800c25c <mem_free+0x118>)
 800c1d6:	f00a fd72 	bl	8016cbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1da:	f00a fda3 	bl	8016d24 <sys_arch_protect>
 800c1de:	6178      	str	r0, [r7, #20]
 800c1e0:	6978      	ldr	r0, [r7, #20]
 800c1e2:	f00a fdad 	bl	8016d40 <sys_arch_unprotect>
    return;
 800c1e6:	e029      	b.n	800c23c <mem_free+0xf8>
  }

  if (!mem_link_valid(mem)) {
 800c1e8:	69f8      	ldr	r0, [r7, #28]
 800c1ea:	f7ff ff6d 	bl	800c0c8 <mem_link_valid>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d110      	bne.n	800c216 <mem_free+0xd2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c1f4:	4b13      	ldr	r3, [pc, #76]	; (800c244 <mem_free+0x100>)
 800c1f6:	f240 2295 	movw	r2, #661	; 0x295
 800c1fa:	491a      	ldr	r1, [pc, #104]	; (800c264 <mem_free+0x120>)
 800c1fc:	4813      	ldr	r0, [pc, #76]	; (800c24c <mem_free+0x108>)
 800c1fe:	f00a fffd 	bl	80171fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c202:	4816      	ldr	r0, [pc, #88]	; (800c25c <mem_free+0x118>)
 800c204:	f00a fd5b 	bl	8016cbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c208:	f00a fd8c 	bl	8016d24 <sys_arch_protect>
 800c20c:	61b8      	str	r0, [r7, #24]
 800c20e:	69b8      	ldr	r0, [r7, #24]
 800c210:	f00a fd96 	bl	8016d40 <sys_arch_unprotect>
    return;
 800c214:	e012      	b.n	800c23c <mem_free+0xf8>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	2200      	movs	r2, #0
 800c21a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c21c:	4b12      	ldr	r3, [pc, #72]	; (800c268 <mem_free+0x124>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	429a      	cmp	r2, r3
 800c224:	d202      	bcs.n	800c22c <mem_free+0xe8>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c226:	4a10      	ldr	r2, [pc, #64]	; (800c268 <mem_free+0x124>)
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c22c:	69f8      	ldr	r0, [r7, #28]
 800c22e:	f7ff fe53 	bl	800bed8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c232:	480a      	ldr	r0, [pc, #40]	; (800c25c <mem_free+0x118>)
 800c234:	f00a fd43 	bl	8016cbe <sys_mutex_unlock>
 800c238:	e000      	b.n	800c23c <mem_free+0xf8>
    return;
 800c23a:	bf00      	nop
}
 800c23c:	3720      	adds	r7, #32
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	0801919c 	.word	0x0801919c
 800c248:	080192b8 	.word	0x080192b8
 800c24c:	080191cc 	.word	0x080191cc
 800c250:	20011c4c 	.word	0x20011c4c
 800c254:	20011c50 	.word	0x20011c50
 800c258:	080192dc 	.word	0x080192dc
 800c25c:	20011c54 	.word	0x20011c54
 800c260:	080192f8 	.word	0x080192f8
 800c264:	08019320 	.word	0x08019320
 800c268:	20011c58 	.word	0x20011c58

0800c26c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	460b      	mov	r3, r1
 800c276:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c278:	887b      	ldrh	r3, [r7, #2]
 800c27a:	3303      	adds	r3, #3
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	f023 0303 	bic.w	r3, r3, #3
 800c282:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c284:	8bfb      	ldrh	r3, [r7, #30]
 800c286:	2b0b      	cmp	r3, #11
 800c288:	d801      	bhi.n	800c28e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c28a:	230c      	movs	r3, #12
 800c28c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 800c28e:	8bfb      	ldrh	r3, [r7, #30]
 800c290:	3320      	adds	r3, #32
 800c292:	83fb      	strh	r3, [r7, #30]
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c294:	8bfb      	ldrh	r3, [r7, #30]
 800c296:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d803      	bhi.n	800c2a6 <mem_trim+0x3a>
 800c29e:	8bfa      	ldrh	r2, [r7, #30]
 800c2a0:	887b      	ldrh	r3, [r7, #2]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d201      	bcs.n	800c2aa <mem_trim+0x3e>
    return NULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e0e4      	b.n	800c474 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c2aa:	4b74      	ldr	r3, [pc, #464]	; (800c47c <mem_trim+0x210>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d304      	bcc.n	800c2be <mem_trim+0x52>
 800c2b4:	4b72      	ldr	r3, [pc, #456]	; (800c480 <mem_trim+0x214>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d306      	bcc.n	800c2cc <mem_trim+0x60>
 800c2be:	4b71      	ldr	r3, [pc, #452]	; (800c484 <mem_trim+0x218>)
 800c2c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c2c4:	4970      	ldr	r1, [pc, #448]	; (800c488 <mem_trim+0x21c>)
 800c2c6:	4871      	ldr	r0, [pc, #452]	; (800c48c <mem_trim+0x220>)
 800c2c8:	f00a ff98 	bl	80171fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c2cc:	4b6b      	ldr	r3, [pc, #428]	; (800c47c <mem_trim+0x210>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d304      	bcc.n	800c2e0 <mem_trim+0x74>
 800c2d6:	4b6a      	ldr	r3, [pc, #424]	; (800c480 <mem_trim+0x214>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d307      	bcc.n	800c2f0 <mem_trim+0x84>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c2e0:	f00a fd20 	bl	8016d24 <sys_arch_protect>
 800c2e4:	60b8      	str	r0, [r7, #8]
 800c2e6:	68b8      	ldr	r0, [r7, #8]
 800c2e8:	f00a fd2a 	bl	8016d40 <sys_arch_unprotect>
    return rmem;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	e0c1      	b.n	800c474 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3b18      	subs	r3, #24
 800c2f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
 800c2f6:	69b8      	ldr	r0, [r7, #24]
 800c2f8:	f7ff fdb2 	bl	800be60 <mem_overflow_check_element>
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c2fc:	69b8      	ldr	r0, [r7, #24]
 800c2fe:	f7ff fdd9 	bl	800beb4 <mem_to_ptr>
 800c302:	4603      	mov	r3, r0
 800c304:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	881a      	ldrh	r2, [r3, #0]
 800c30a:	8afb      	ldrh	r3, [r7, #22]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	b29b      	uxth	r3, r3
 800c310:	3b28      	subs	r3, #40	; 0x28
 800c312:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c314:	8bfa      	ldrh	r2, [r7, #30]
 800c316:	8abb      	ldrh	r3, [r7, #20]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d906      	bls.n	800c32a <mem_trim+0xbe>
 800c31c:	4b59      	ldr	r3, [pc, #356]	; (800c484 <mem_trim+0x218>)
 800c31e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c322:	495b      	ldr	r1, [pc, #364]	; (800c490 <mem_trim+0x224>)
 800c324:	4859      	ldr	r0, [pc, #356]	; (800c48c <mem_trim+0x220>)
 800c326:	f00a ff69 	bl	80171fc <iprintf>
  if (newsize > size) {
 800c32a:	8bfa      	ldrh	r2, [r7, #30]
 800c32c:	8abb      	ldrh	r3, [r7, #20]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d901      	bls.n	800c336 <mem_trim+0xca>
    /* not supported */
    return NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	e09e      	b.n	800c474 <mem_trim+0x208>
  }
  if (newsize == size) {
 800c336:	8bfa      	ldrh	r2, [r7, #30]
 800c338:	8abb      	ldrh	r3, [r7, #20]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d101      	bne.n	800c342 <mem_trim+0xd6>
    /* No change in size, simply return */
    return rmem;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	e098      	b.n	800c474 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c342:	4854      	ldr	r0, [pc, #336]	; (800c494 <mem_trim+0x228>)
 800c344:	f00a fcac 	bl	8016ca0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff fd9f 	bl	800be90 <ptr_to_mem>
 800c352:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	791b      	ldrb	r3, [r3, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d141      	bne.n	800c3e0 <mem_trim+0x174>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c364:	4293      	cmp	r3, r2
 800c366:	d106      	bne.n	800c376 <mem_trim+0x10a>
 800c368:	4b46      	ldr	r3, [pc, #280]	; (800c484 <mem_trim+0x218>)
 800c36a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c36e:	494a      	ldr	r1, [pc, #296]	; (800c498 <mem_trim+0x22c>)
 800c370:	4846      	ldr	r0, [pc, #280]	; (800c48c <mem_trim+0x220>)
 800c372:	f00a ff43 	bl	80171fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c37c:	8afa      	ldrh	r2, [r7, #22]
 800c37e:	8bfb      	ldrh	r3, [r7, #30]
 800c380:	4413      	add	r3, r2
 800c382:	b29b      	uxth	r3, r3
 800c384:	3308      	adds	r3, #8
 800c386:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c388:	4b44      	ldr	r3, [pc, #272]	; (800c49c <mem_trim+0x230>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d106      	bne.n	800c3a0 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 800c392:	89fb      	ldrh	r3, [r7, #14]
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff fd7b 	bl	800be90 <ptr_to_mem>
 800c39a:	4603      	mov	r3, r0
 800c39c:	4a3f      	ldr	r2, [pc, #252]	; (800c49c <mem_trim+0x230>)
 800c39e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c3a0:	89fb      	ldrh	r3, [r7, #14]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff fd74 	bl	800be90 <ptr_to_mem>
 800c3a8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	89ba      	ldrh	r2, [r7, #12]
 800c3b4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	8afa      	ldrh	r2, [r7, #22]
 800c3ba:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	89fa      	ldrh	r2, [r7, #14]
 800c3c0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d049      	beq.n	800c462 <mem_trim+0x1f6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fd5c 	bl	800be90 <ptr_to_mem>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	89fb      	ldrh	r3, [r7, #14]
 800c3dc:	8053      	strh	r3, [r2, #2]
 800c3de:	e040      	b.n	800c462 <mem_trim+0x1f6>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c3e0:	8bfb      	ldrh	r3, [r7, #30]
 800c3e2:	f103 0214 	add.w	r2, r3, #20
 800c3e6:	8abb      	ldrh	r3, [r7, #20]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d83a      	bhi.n	800c462 <mem_trim+0x1f6>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3ec:	8afa      	ldrh	r2, [r7, #22]
 800c3ee:	8bfb      	ldrh	r3, [r7, #30]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c400:	4293      	cmp	r3, r2
 800c402:	d106      	bne.n	800c412 <mem_trim+0x1a6>
 800c404:	4b1f      	ldr	r3, [pc, #124]	; (800c484 <mem_trim+0x218>)
 800c406:	f240 3216 	movw	r2, #790	; 0x316
 800c40a:	4923      	ldr	r1, [pc, #140]	; (800c498 <mem_trim+0x22c>)
 800c40c:	481f      	ldr	r0, [pc, #124]	; (800c48c <mem_trim+0x220>)
 800c40e:	f00a fef5 	bl	80171fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c412:	89fb      	ldrh	r3, [r7, #14]
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff fd3b 	bl	800be90 <ptr_to_mem>
 800c41a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c41c:	4b1f      	ldr	r3, [pc, #124]	; (800c49c <mem_trim+0x230>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	429a      	cmp	r2, r3
 800c424:	d202      	bcs.n	800c42c <mem_trim+0x1c0>
      lfree = mem2;
 800c426:	4a1d      	ldr	r2, [pc, #116]	; (800c49c <mem_trim+0x230>)
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	2200      	movs	r2, #0
 800c430:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	881a      	ldrh	r2, [r3, #0]
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	8afa      	ldrh	r2, [r7, #22]
 800c43e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	89fa      	ldrh	r2, [r7, #14]
 800c444:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c44e:	4293      	cmp	r3, r2
 800c450:	d007      	beq.n	800c462 <mem_trim+0x1f6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	4618      	mov	r0, r3
 800c458:	f7ff fd1a 	bl	800be90 <ptr_to_mem>
 800c45c:	4602      	mov	r2, r0
 800c45e:	89fb      	ldrh	r3, [r7, #14]
 800c460:	8053      	strh	r3, [r2, #2]
    to create another struct mem
    -> don't do anyhting.
    -> the remaining space stays unused since it is too small
  } */
#if MEM_OVERFLOW_CHECK
  mem_overflow_init_element(mem, new_size);
 800c462:	887b      	ldrh	r3, [r7, #2]
 800c464:	4619      	mov	r1, r3
 800c466:	69b8      	ldr	r0, [r7, #24]
 800c468:	f7ff fce4 	bl	800be34 <mem_overflow_init_element>
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c46c:	4809      	ldr	r0, [pc, #36]	; (800c494 <mem_trim+0x228>)
 800c46e:	f00a fc26 	bl	8016cbe <sys_mutex_unlock>
  return rmem;
 800c472:	687b      	ldr	r3, [r7, #4]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3720      	adds	r7, #32
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	20011c4c 	.word	0x20011c4c
 800c480:	20011c50 	.word	0x20011c50
 800c484:	0801919c 	.word	0x0801919c
 800c488:	08019354 	.word	0x08019354
 800c48c:	080191cc 	.word	0x080191cc
 800c490:	0801936c 	.word	0x0801936c
 800c494:	20011c54 	.word	0x20011c54
 800c498:	0801938c 	.word	0x0801938c
 800c49c:	20011c58 	.word	0x20011c58

0800c4a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b088      	sub	sp, #32
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c4aa:	88fb      	ldrh	r3, [r7, #6]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <mem_malloc+0x14>
    return NULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e0ee      	b.n	800c692 <mem_malloc+0x1f2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	3303      	adds	r3, #3
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	f023 0303 	bic.w	r3, r3, #3
 800c4be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c4c0:	8bbb      	ldrh	r3, [r7, #28]
 800c4c2:	2b0b      	cmp	r3, #11
 800c4c4:	d801      	bhi.n	800c4ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c4c6:	230c      	movs	r3, #12
 800c4c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 800c4ca:	8bbb      	ldrh	r3, [r7, #28]
 800c4cc:	3320      	adds	r3, #32
 800c4ce:	83bb      	strh	r3, [r7, #28]
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c4d0:	8bbb      	ldrh	r3, [r7, #28]
 800c4d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d803      	bhi.n	800c4e2 <mem_malloc+0x42>
 800c4da:	8bba      	ldrh	r2, [r7, #28]
 800c4dc:	88fb      	ldrh	r3, [r7, #6]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d201      	bcs.n	800c4e6 <mem_malloc+0x46>
    return NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e0d5      	b.n	800c692 <mem_malloc+0x1f2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c4e6:	486d      	ldr	r0, [pc, #436]	; (800c69c <mem_malloc+0x1fc>)
 800c4e8:	f00a fbda 	bl	8016ca0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c4ec:	4b6c      	ldr	r3, [pc, #432]	; (800c6a0 <mem_malloc+0x200>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff fcdf 	bl	800beb4 <mem_to_ptr>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	83fb      	strh	r3, [r7, #30]
 800c4fa:	e0be      	b.n	800c67a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c4fc:	8bfb      	ldrh	r3, [r7, #30]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff fcc6 	bl	800be90 <ptr_to_mem>
 800c504:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	791b      	ldrb	r3, [r3, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f040 80ae 	bne.w	800c66c <mem_malloc+0x1cc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	461a      	mov	r2, r3
 800c516:	8bfb      	ldrh	r3, [r7, #30]
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	f1a3 0208 	sub.w	r2, r3, #8
 800c51e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c520:	429a      	cmp	r2, r3
 800c522:	f0c0 80a3 	bcc.w	800c66c <mem_malloc+0x1cc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	881b      	ldrh	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	8bfb      	ldrh	r3, [r7, #30]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	f1a3 0208 	sub.w	r2, r3, #8
 800c534:	8bbb      	ldrh	r3, [r7, #28]
 800c536:	3314      	adds	r3, #20
 800c538:	429a      	cmp	r2, r3
 800c53a:	d335      	bcc.n	800c5a8 <mem_malloc+0x108>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c53c:	8bfa      	ldrh	r2, [r7, #30]
 800c53e:	8bbb      	ldrh	r3, [r7, #28]
 800c540:	4413      	add	r3, r2
 800c542:	b29b      	uxth	r3, r3
 800c544:	3308      	adds	r3, #8
 800c546:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c548:	8a7b      	ldrh	r3, [r7, #18]
 800c54a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c54e:	4293      	cmp	r3, r2
 800c550:	d106      	bne.n	800c560 <mem_malloc+0xc0>
 800c552:	4b54      	ldr	r3, [pc, #336]	; (800c6a4 <mem_malloc+0x204>)
 800c554:	f240 3287 	movw	r2, #903	; 0x387
 800c558:	4953      	ldr	r1, [pc, #332]	; (800c6a8 <mem_malloc+0x208>)
 800c55a:	4854      	ldr	r0, [pc, #336]	; (800c6ac <mem_malloc+0x20c>)
 800c55c:	f00a fe4e 	bl	80171fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c560:	8a7b      	ldrh	r3, [r7, #18]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fc94 	bl	800be90 <ptr_to_mem>
 800c568:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	881a      	ldrh	r2, [r3, #0]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	8bfa      	ldrh	r2, [r7, #30]
 800c57c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	8a7a      	ldrh	r2, [r7, #18]
 800c582:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2201      	movs	r2, #1
 800c588:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c592:	4293      	cmp	r3, r2
 800c594:	d00b      	beq.n	800c5ae <mem_malloc+0x10e>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7ff fc78 	bl	800be90 <ptr_to_mem>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	8a7b      	ldrh	r3, [r7, #18]
 800c5a4:	8053      	strh	r3, [r2, #2]
 800c5a6:	e002      	b.n	800c5ae <mem_malloc+0x10e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c5ae:	4b3c      	ldr	r3, [pc, #240]	; (800c6a0 <mem_malloc+0x200>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d127      	bne.n	800c608 <mem_malloc+0x168>
          struct mem *cur = lfree;
 800c5b8:	4b39      	ldr	r3, [pc, #228]	; (800c6a0 <mem_malloc+0x200>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c5be:	e005      	b.n	800c5cc <mem_malloc+0x12c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	881b      	ldrh	r3, [r3, #0]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fc63 	bl	800be90 <ptr_to_mem>
 800c5ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	791b      	ldrb	r3, [r3, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <mem_malloc+0x13e>
 800c5d4:	4b36      	ldr	r3, [pc, #216]	; (800c6b0 <mem_malloc+0x210>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d1f0      	bne.n	800c5c0 <mem_malloc+0x120>
          }
          lfree = cur;
 800c5de:	4a30      	ldr	r2, [pc, #192]	; (800c6a0 <mem_malloc+0x200>)
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c5e4:	4b2e      	ldr	r3, [pc, #184]	; (800c6a0 <mem_malloc+0x200>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	4b31      	ldr	r3, [pc, #196]	; (800c6b0 <mem_malloc+0x210>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d00b      	beq.n	800c608 <mem_malloc+0x168>
 800c5f0:	4b2b      	ldr	r3, [pc, #172]	; (800c6a0 <mem_malloc+0x200>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	791b      	ldrb	r3, [r3, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <mem_malloc+0x168>
 800c5fa:	4b2a      	ldr	r3, [pc, #168]	; (800c6a4 <mem_malloc+0x204>)
 800c5fc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c600:	492c      	ldr	r1, [pc, #176]	; (800c6b4 <mem_malloc+0x214>)
 800c602:	482a      	ldr	r0, [pc, #168]	; (800c6ac <mem_malloc+0x20c>)
 800c604:	f00a fdfa 	bl	80171fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c608:	4824      	ldr	r0, [pc, #144]	; (800c69c <mem_malloc+0x1fc>)
 800c60a:	f00a fb58 	bl	8016cbe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c60e:	8bba      	ldrh	r2, [r7, #28]
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	4413      	add	r3, r2
 800c614:	3308      	adds	r3, #8
 800c616:	4a26      	ldr	r2, [pc, #152]	; (800c6b0 <mem_malloc+0x210>)
 800c618:	6812      	ldr	r2, [r2, #0]
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d906      	bls.n	800c62c <mem_malloc+0x18c>
 800c61e:	4b21      	ldr	r3, [pc, #132]	; (800c6a4 <mem_malloc+0x204>)
 800c620:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c624:	4924      	ldr	r1, [pc, #144]	; (800c6b8 <mem_malloc+0x218>)
 800c626:	4821      	ldr	r0, [pc, #132]	; (800c6ac <mem_malloc+0x20c>)
 800c628:	f00a fde8 	bl	80171fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <mem_malloc+0x1a4>
 800c636:	4b1b      	ldr	r3, [pc, #108]	; (800c6a4 <mem_malloc+0x204>)
 800c638:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c63c:	491f      	ldr	r1, [pc, #124]	; (800c6bc <mem_malloc+0x21c>)
 800c63e:	481b      	ldr	r0, [pc, #108]	; (800c6ac <mem_malloc+0x20c>)
 800c640:	f00a fddc 	bl	80171fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	f003 0303 	and.w	r3, r3, #3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d006      	beq.n	800c65c <mem_malloc+0x1bc>
 800c64e:	4b15      	ldr	r3, [pc, #84]	; (800c6a4 <mem_malloc+0x204>)
 800c650:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c654:	491a      	ldr	r1, [pc, #104]	; (800c6c0 <mem_malloc+0x220>)
 800c656:	4815      	ldr	r0, [pc, #84]	; (800c6ac <mem_malloc+0x20c>)
 800c658:	f00a fdd0 	bl	80171fc <iprintf>
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
 800c65c:	88fb      	ldrh	r3, [r7, #6]
 800c65e:	4619      	mov	r1, r3
 800c660:	6978      	ldr	r0, [r7, #20]
 800c662:	f7ff fbe7 	bl	800be34 <mem_overflow_init_element>
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	3318      	adds	r3, #24
 800c66a:	e012      	b.n	800c692 <mem_malloc+0x1f2>
         ptr = ptr_to_mem(ptr)->next) {
 800c66c:	8bfb      	ldrh	r3, [r7, #30]
 800c66e:	4618      	mov	r0, r3
 800c670:	f7ff fc0e 	bl	800be90 <ptr_to_mem>
 800c674:	4603      	mov	r3, r0
 800c676:	881b      	ldrh	r3, [r3, #0]
 800c678:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c67a:	8bfa      	ldrh	r2, [r7, #30]
 800c67c:	8bbb      	ldrh	r3, [r7, #28]
 800c67e:	f5c3 4343 	rsb	r3, r3, #49920	; 0xc300
 800c682:	3350      	adds	r3, #80	; 0x50
 800c684:	429a      	cmp	r2, r3
 800c686:	f4ff af39 	bcc.w	800c4fc <mem_malloc+0x5c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c68a:	4804      	ldr	r0, [pc, #16]	; (800c69c <mem_malloc+0x1fc>)
 800c68c:	f00a fb17 	bl	8016cbe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3720      	adds	r7, #32
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	20011c54 	.word	0x20011c54
 800c6a0:	20011c58 	.word	0x20011c58
 800c6a4:	0801919c 	.word	0x0801919c
 800c6a8:	0801938c 	.word	0x0801938c
 800c6ac:	080191cc 	.word	0x080191cc
 800c6b0:	20011c50 	.word	0x20011c50
 800c6b4:	080193a0 	.word	0x080193a0
 800c6b8:	080193bc 	.word	0x080193bc
 800c6bc:	080193ec 	.word	0x080193ec
 800c6c0:	0801941c 	.word	0x0801941c

0800c6c4 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	460a      	mov	r2, r1
 800c6ce:	80fb      	strh	r3, [r7, #6]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800c6d4:	88fb      	ldrh	r3, [r7, #6]
 800c6d6:	88ba      	ldrh	r2, [r7, #4]
 800c6d8:	fb02 f303 	mul.w	r3, r2, r3
 800c6dc:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d001      	beq.n	800c6ee <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e00e      	b.n	800c70c <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff fed4 	bl	800c4a0 <mem_malloc>
 800c6f8:	60b8      	str	r0, [r7, #8]
  if (p) {
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d004      	beq.n	800c70a <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	2100      	movs	r1, #0
 800c704:	68b8      	ldr	r0, [r7, #8]
 800c706:	f00a fc91 	bl	801702c <memset>
  }
  return p;
 800c70a:	68bb      	ldr	r3, [r7, #8]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <memp_overflow_check_element>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element(struct memp *p, const struct memp_desc *desc)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f103 001c 	add.w	r0, r3, #28
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	889b      	ldrh	r3, [r3, #4]
 800c728:	4619      	mov	r1, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a03      	ldr	r2, [pc, #12]	; (800c73c <memp_overflow_check_element+0x28>)
 800c730:	f7ff fafe 	bl	800bd30 <mem_overflow_check_raw>
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	080194d8 	.word	0x080194d8

0800c740 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f103 021c 	add.w	r2, r3, #28
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	889b      	ldrh	r3, [r3, #4]
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f7ff fb52 	bl	800be00 <mem_overflow_init_raw>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
  u16_t i, j;
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c76a:	f00a fadb 	bl	8016d24 <sys_arch_protect>
 800c76e:	6078      	str	r0, [r7, #4]

  for (i = 0; i < MEMP_MAX; ++i) {
 800c770:	2300      	movs	r3, #0
 800c772:	81fb      	strh	r3, [r7, #14]
 800c774:	e02a      	b.n	800c7cc <memp_overflow_check_all+0x68>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 800c776:	89fb      	ldrh	r3, [r7, #14]
 800c778:	4a19      	ldr	r2, [pc, #100]	; (800c7e0 <memp_overflow_check_all+0x7c>)
 800c77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	3303      	adds	r3, #3
 800c782:	f023 0303 	bic.w	r3, r3, #3
 800c786:	60bb      	str	r3, [r7, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 800c788:	2300      	movs	r3, #0
 800c78a:	81bb      	strh	r3, [r7, #12]
 800c78c:	e013      	b.n	800c7b6 <memp_overflow_check_all+0x52>
      memp_overflow_check_element(p, memp_pools[i]);
 800c78e:	89fb      	ldrh	r3, [r7, #14]
 800c790:	4a13      	ldr	r2, [pc, #76]	; (800c7e0 <memp_overflow_check_all+0x7c>)
 800c792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c796:	4619      	mov	r1, r3
 800c798:	68b8      	ldr	r0, [r7, #8]
 800c79a:	f7ff ffbb 	bl	800c714 <memp_overflow_check_element>
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 800c79e:	89fb      	ldrh	r3, [r7, #14]
 800c7a0:	4a0f      	ldr	r2, [pc, #60]	; (800c7e0 <memp_overflow_check_all+0x7c>)
 800c7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a6:	889b      	ldrh	r3, [r3, #4]
 800c7a8:	332c      	adds	r3, #44	; 0x2c
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	60bb      	str	r3, [r7, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 800c7b0:	89bb      	ldrh	r3, [r7, #12]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	81bb      	strh	r3, [r7, #12]
 800c7b6:	89fb      	ldrh	r3, [r7, #14]
 800c7b8:	4a09      	ldr	r2, [pc, #36]	; (800c7e0 <memp_overflow_check_all+0x7c>)
 800c7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7be:	88db      	ldrh	r3, [r3, #6]
 800c7c0:	89ba      	ldrh	r2, [r7, #12]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d3e3      	bcc.n	800c78e <memp_overflow_check_all+0x2a>
  for (i = 0; i < MEMP_MAX; ++i) {
 800c7c6:	89fb      	ldrh	r3, [r7, #14]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	81fb      	strh	r3, [r7, #14]
 800c7cc:	89fb      	ldrh	r3, [r7, #14]
 800c7ce:	2b0c      	cmp	r3, #12
 800c7d0:	d9d1      	bls.n	800c776 <memp_overflow_check_all+0x12>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f00a fab4 	bl	8016d40 <sys_arch_unprotect>
}
 800c7d8:	bf00      	nop
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	0801d1ec 	.word	0x0801d1ec

0800c7e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	60bb      	str	r3, [r7, #8]
#if MEMP_MEM_INIT
  /* force memset on pool memory */
  memset(memp, 0, (size_t)desc->num * (MEMP_SIZE + desc->size
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	88db      	ldrh	r3, [r3, #6]
 800c804:	461a      	mov	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	889b      	ldrh	r3, [r3, #4]
#if MEMP_OVERFLOW_CHECK
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
 800c80a:	332c      	adds	r3, #44	; 0x2c
  memset(memp, 0, (size_t)desc->num * (MEMP_SIZE + desc->size
 800c80c:	fb02 f303 	mul.w	r3, r2, r3
 800c810:	461a      	mov	r2, r3
 800c812:	2100      	movs	r1, #0
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f00a fc09 	bl	801702c <memset>
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c81a:	2300      	movs	r3, #0
 800c81c:	60fb      	str	r3, [r7, #12]
 800c81e:	e015      	b.n	800c84c <memp_init_pool+0x68>
    memp->next = *desc->tab;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
 800c832:	6879      	ldr	r1, [r7, #4]
 800c834:	68b8      	ldr	r0, [r7, #8]
 800c836:	f7ff ff83 	bl	800c740 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	889b      	ldrh	r3, [r3, #4]
#if MEMP_OVERFLOW_CHECK
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 800c83e:	332c      	adds	r3, #44	; 0x2c
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	4413      	add	r3, r2
 800c844:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3301      	adds	r3, #1
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	88db      	ldrh	r3, [r3, #6]
 800c850:	461a      	mov	r2, r3
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4293      	cmp	r3, r2
 800c856:	dbe3      	blt.n	800c820 <memp_init_pool+0x3c>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c86a:	2300      	movs	r3, #0
 800c86c:	80fb      	strh	r3, [r7, #6]
 800c86e:	e009      	b.n	800c884 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c870:	88fb      	ldrh	r3, [r7, #6]
 800c872:	4a09      	ldr	r2, [pc, #36]	; (800c898 <memp_init+0x34>)
 800c874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7ff ffb3 	bl	800c7e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	3301      	adds	r3, #1
 800c882:	80fb      	strh	r3, [r7, #6]
 800c884:	88fb      	ldrh	r3, [r7, #6]
 800c886:	2b0c      	cmp	r3, #12
 800c888:	d9f2      	bls.n	800c870 <memp_init+0xc>
#endif
  }

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
 800c88a:	f7ff ff6b 	bl	800c764 <memp_overflow_check_all>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c88e:	bf00      	nop
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	0801d1ec 	.word	0x0801d1ec

0800c89c <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c8a8:	f00a fa3c 	bl	8016d24 <sys_arch_protect>
 800c8ac:	6178      	str	r0, [r7, #20]

  memp = *desc->tab;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	613b      	str	r3, [r7, #16]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d01f      	beq.n	800c8fc <do_memp_malloc_pool_fn+0x60>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	6812      	ldr	r2, [r2, #0]
 800c8c4:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	605a      	str	r2, [r3, #4]
    memp->line = line;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	609a      	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f003 0303 	and.w	r3, r3, #3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <do_memp_malloc_pool_fn+0x54>
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <do_memp_malloc_pool_fn+0x70>)
 800c8e4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c8e8:	4909      	ldr	r1, [pc, #36]	; (800c910 <do_memp_malloc_pool_fn+0x74>)
 800c8ea:	480a      	ldr	r0, [pc, #40]	; (800c914 <do_memp_malloc_pool_fn+0x78>)
 800c8ec:	f00a fc86 	bl	80171fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c8f0:	6978      	ldr	r0, [r7, #20]
 800c8f2:	f00a fa25 	bl	8016d40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	331c      	adds	r3, #28
 800c8fa:	e003      	b.n	800c904 <do_memp_malloc_pool_fn+0x68>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c8fc:	6978      	ldr	r0, [r7, #20]
 800c8fe:	f00a fa1f 	bl	8016d40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3718      	adds	r7, #24
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	080194e0 	.word	0x080194e0
 800c910:	08019510 	.word	0x08019510
 800c914:	08019534 	.word	0x08019534

0800c918 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d106      	bne.n	800c938 <memp_malloc_pool_fn+0x20>
 800c92a:	4b0b      	ldr	r3, [pc, #44]	; (800c958 <memp_malloc_pool_fn+0x40>)
 800c92c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c930:	490a      	ldr	r1, [pc, #40]	; (800c95c <memp_malloc_pool_fn+0x44>)
 800c932:	480b      	ldr	r0, [pc, #44]	; (800c960 <memp_malloc_pool_fn+0x48>)
 800c934:	f00a fc62 	bl	80171fc <iprintf>
  if (desc == NULL) {
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d101      	bne.n	800c942 <memp_malloc_pool_fn+0x2a>
    return NULL;
 800c93e:	2300      	movs	r3, #0
 800c940:	e005      	b.n	800c94e <memp_malloc_pool_fn+0x36>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	68b9      	ldr	r1, [r7, #8]
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff ffa8 	bl	800c89c <do_memp_malloc_pool_fn>
 800c94c:	4603      	mov	r3, r0
#endif
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	080194e0 	.word	0x080194e0
 800c95c:	0801955c 	.word	0x0801955c
 800c960:	08019534 	.word	0x08019534

0800c964 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	73fb      	strb	r3, [r7, #15]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b0c      	cmp	r3, #12
 800c976:	d908      	bls.n	800c98a <memp_malloc_fn+0x26>
 800c978:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <memp_malloc_fn+0x48>)
 800c97a:	f240 1257 	movw	r2, #343	; 0x157
 800c97e:	490c      	ldr	r1, [pc, #48]	; (800c9b0 <memp_malloc_fn+0x4c>)
 800c980:	480c      	ldr	r0, [pc, #48]	; (800c9b4 <memp_malloc_fn+0x50>)
 800c982:	f00a fc3b 	bl	80171fc <iprintf>
 800c986:	2300      	movs	r3, #0
 800c988:	e00c      	b.n	800c9a4 <memp_malloc_fn+0x40>

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 800c98a:	f7ff feeb 	bl	800c764 <memp_overflow_check_all>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	4a09      	ldr	r2, [pc, #36]	; (800c9b8 <memp_malloc_fn+0x54>)
 800c992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	68b9      	ldr	r1, [r7, #8]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff ff7e 	bl	800c89c <do_memp_malloc_pool_fn>
 800c9a0:	6178      	str	r0, [r7, #20]
#endif

  return memp;
 800c9a2:	697b      	ldr	r3, [r7, #20]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	080194e0 	.word	0x080194e0
 800c9b0:	08019570 	.word	0x08019570
 800c9b4:	08019534 	.word	0x08019534
 800c9b8:	0801d1ec 	.word	0x0801d1ec

0800c9bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	f003 0303 	and.w	r3, r3, #3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d006      	beq.n	800c9de <do_memp_free_pool+0x22>
 800c9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ca0c <do_memp_free_pool+0x50>)
 800c9d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c9d6:	490e      	ldr	r1, [pc, #56]	; (800ca10 <do_memp_free_pool+0x54>)
 800c9d8:	480e      	ldr	r0, [pc, #56]	; (800ca14 <do_memp_free_pool+0x58>)
 800c9da:	f00a fc0f 	bl	80171fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	3b1c      	subs	r3, #28
 800c9e2:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c9e4:	f00a f99e 	bl	8016d24 <sys_arch_protect>
 800c9e8:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c9fc:	68b8      	ldr	r0, [r7, #8]
 800c9fe:	f00a f99f 	bl	8016d40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ca02:	bf00      	nop
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	080194e0 	.word	0x080194e0
 800ca10:	08019590 	.word	0x08019590
 800ca14:	08019534 	.word	0x08019534

0800ca18 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d106      	bne.n	800ca36 <memp_free_pool+0x1e>
 800ca28:	4b0a      	ldr	r3, [pc, #40]	; (800ca54 <memp_free_pool+0x3c>)
 800ca2a:	f240 1295 	movw	r2, #405	; 0x195
 800ca2e:	490a      	ldr	r1, [pc, #40]	; (800ca58 <memp_free_pool+0x40>)
 800ca30:	480a      	ldr	r0, [pc, #40]	; (800ca5c <memp_free_pool+0x44>)
 800ca32:	f00a fbe3 	bl	80171fc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d007      	beq.n	800ca4c <memp_free_pool+0x34>
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7ff ffb9 	bl	800c9bc <do_memp_free_pool>
 800ca4a:	e000      	b.n	800ca4e <memp_free_pool+0x36>
    return;
 800ca4c:	bf00      	nop
}
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	080194e0 	.word	0x080194e0
 800ca58:	0801955c 	.word	0x0801955c
 800ca5c:	08019534 	.word	0x08019534

0800ca60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	6039      	str	r1, [r7, #0]
 800ca6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	2b0c      	cmp	r3, #12
 800ca70:	d907      	bls.n	800ca82 <memp_free+0x22>
 800ca72:	4b0d      	ldr	r3, [pc, #52]	; (800caa8 <memp_free+0x48>)
 800ca74:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ca78:	490c      	ldr	r1, [pc, #48]	; (800caac <memp_free+0x4c>)
 800ca7a:	480d      	ldr	r0, [pc, #52]	; (800cab0 <memp_free+0x50>)
 800ca7c:	f00a fbbe 	bl	80171fc <iprintf>
 800ca80:	e00e      	b.n	800caa0 <memp_free+0x40>

  if (mem == NULL) {
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <memp_free+0x3e>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 800ca88:	f7ff fe6c 	bl	800c764 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	4a09      	ldr	r2, [pc, #36]	; (800cab4 <memp_free+0x54>)
 800ca90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff ff90 	bl	800c9bc <do_memp_free_pool>
 800ca9c:	e000      	b.n	800caa0 <memp_free+0x40>
    return;
 800ca9e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	080194e0 	.word	0x080194e0
 800caac:	080195b0 	.word	0x080195b0
 800cab0:	08019534 	.word	0x08019534
 800cab4:	0801d1ec 	.word	0x0801d1ec

0800cab8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cab8:	b480      	push	{r7}
 800caba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cabc:	bf00      	nop
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
	...

0800cac8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d108      	bne.n	800caee <netif_add+0x26>
 800cadc:	4b57      	ldr	r3, [pc, #348]	; (800cc3c <netif_add+0x174>)
 800cade:	f240 1227 	movw	r2, #295	; 0x127
 800cae2:	4957      	ldr	r1, [pc, #348]	; (800cc40 <netif_add+0x178>)
 800cae4:	4857      	ldr	r0, [pc, #348]	; (800cc44 <netif_add+0x17c>)
 800cae6:	f00a fb89 	bl	80171fc <iprintf>
 800caea:	2300      	movs	r3, #0
 800caec:	e0a2      	b.n	800cc34 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d108      	bne.n	800cb06 <netif_add+0x3e>
 800caf4:	4b51      	ldr	r3, [pc, #324]	; (800cc3c <netif_add+0x174>)
 800caf6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cafa:	4953      	ldr	r1, [pc, #332]	; (800cc48 <netif_add+0x180>)
 800cafc:	4851      	ldr	r0, [pc, #324]	; (800cc44 <netif_add+0x17c>)
 800cafe:	f00a fb7d 	bl	80171fc <iprintf>
 800cb02:	2300      	movs	r3, #0
 800cb04:	e096      	b.n	800cc34 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d101      	bne.n	800cb10 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cb0c:	4b4f      	ldr	r3, [pc, #316]	; (800cc4c <netif_add+0x184>)
 800cb0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cb16:	4b4d      	ldr	r3, [pc, #308]	; (800cc4c <netif_add+0x184>)
 800cb18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cb20:	4b4a      	ldr	r3, [pc, #296]	; (800cc4c <netif_add+0x184>)
 800cb22:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	4a45      	ldr	r2, [pc, #276]	; (800cc50 <netif_add+0x188>)
 800cb3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6a3a      	ldr	r2, [r7, #32]
 800cb54:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cb56:	4b3f      	ldr	r3, [pc, #252]	; (800cc54 <netif_add+0x18c>)
 800cb58:	781a      	ldrb	r2, [r3, #0]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb64:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 f913 	bl	800cd98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	4798      	blx	r3
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <netif_add+0xba>
    return NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e058      	b.n	800cc34 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb88:	2bff      	cmp	r3, #255	; 0xff
 800cb8a:	d103      	bne.n	800cb94 <netif_add+0xcc>
        netif->num = 0;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cb94:	2300      	movs	r3, #0
 800cb96:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb98:	4b2f      	ldr	r3, [pc, #188]	; (800cc58 <netif_add+0x190>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e02b      	b.n	800cbf8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d106      	bne.n	800cbb6 <netif_add+0xee>
 800cba8:	4b24      	ldr	r3, [pc, #144]	; (800cc3c <netif_add+0x174>)
 800cbaa:	f240 128b 	movw	r2, #395	; 0x18b
 800cbae:	492b      	ldr	r1, [pc, #172]	; (800cc5c <netif_add+0x194>)
 800cbb0:	4824      	ldr	r0, [pc, #144]	; (800cc44 <netif_add+0x17c>)
 800cbb2:	f00a fb23 	bl	80171fc <iprintf>
        num_netifs++;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	2bff      	cmp	r3, #255	; 0xff
 800cbc0:	dd06      	ble.n	800cbd0 <netif_add+0x108>
 800cbc2:	4b1e      	ldr	r3, [pc, #120]	; (800cc3c <netif_add+0x174>)
 800cbc4:	f240 128d 	movw	r2, #397	; 0x18d
 800cbc8:	4925      	ldr	r1, [pc, #148]	; (800cc60 <netif_add+0x198>)
 800cbca:	481e      	ldr	r0, [pc, #120]	; (800cc44 <netif_add+0x17c>)
 800cbcc:	f00a fb16 	bl	80171fc <iprintf>
        if (netif2->num == netif->num) {
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d108      	bne.n	800cbf2 <netif_add+0x12a>
          netif->num++;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cbf0:	e005      	b.n	800cbfe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1d0      	bne.n	800cba0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1be      	bne.n	800cb82 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc0a:	2bfe      	cmp	r3, #254	; 0xfe
 800cc0c:	d103      	bne.n	800cc16 <netif_add+0x14e>
    netif_num = 0;
 800cc0e:	4b11      	ldr	r3, [pc, #68]	; (800cc54 <netif_add+0x18c>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	e006      	b.n	800cc24 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <netif_add+0x18c>)
 800cc22:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cc24:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <netif_add+0x190>)
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cc2c:	4a0a      	ldr	r2, [pc, #40]	; (800cc58 <netif_add+0x190>)
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cc32:	68fb      	ldr	r3, [r7, #12]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	080195cc 	.word	0x080195cc
 800cc40:	08019660 	.word	0x08019660
 800cc44:	0801961c 	.word	0x0801961c
 800cc48:	0801967c 	.word	0x0801967c
 800cc4c:	0801d260 	.word	0x0801d260
 800cc50:	0800d073 	.word	0x0800d073
 800cc54:	2001a6b0 	.word	0x2001a6b0
 800cc58:	2001a6a8 	.word	0x2001a6a8
 800cc5c:	080196a0 	.word	0x080196a0
 800cc60:	080196b4 	.word	0x080196b4

0800cc64 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f002 fead 	bl	800f9d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f007 fc57 	bl	801452c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cc7e:	bf00      	nop
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
	...

0800cc88 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b086      	sub	sp, #24
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d106      	bne.n	800cca8 <netif_do_set_ipaddr+0x20>
 800cc9a:	4b1d      	ldr	r3, [pc, #116]	; (800cd10 <netif_do_set_ipaddr+0x88>)
 800cc9c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cca0:	491c      	ldr	r1, [pc, #112]	; (800cd14 <netif_do_set_ipaddr+0x8c>)
 800cca2:	481d      	ldr	r0, [pc, #116]	; (800cd18 <netif_do_set_ipaddr+0x90>)
 800cca4:	f00a faaa 	bl	80171fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <netif_do_set_ipaddr+0x34>
 800ccae:	4b18      	ldr	r3, [pc, #96]	; (800cd10 <netif_do_set_ipaddr+0x88>)
 800ccb0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ccb4:	4917      	ldr	r1, [pc, #92]	; (800cd14 <netif_do_set_ipaddr+0x8c>)
 800ccb6:	4818      	ldr	r0, [pc, #96]	; (800cd18 <netif_do_set_ipaddr+0x90>)
 800ccb8:	f00a faa0 	bl	80171fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d01c      	beq.n	800cd04 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3304      	adds	r3, #4
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ccda:	f107 0314 	add.w	r3, r7, #20
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff ffbf 	bl	800cc64 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <netif_do_set_ipaddr+0x6a>
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	e000      	b.n	800ccf4 <netif_do_set_ipaddr+0x6c>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ccf8:	2101      	movs	r1, #1
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f000 f8d2 	bl	800cea4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cd00:	2301      	movs	r3, #1
 800cd02:	e000      	b.n	800cd06 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3718      	adds	r7, #24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	080195cc 	.word	0x080195cc
 800cd14:	080196e4 	.word	0x080196e4
 800cd18:	0801961c 	.word	0x0801961c

0800cd1c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d00a      	beq.n	800cd4c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <netif_do_set_netmask+0x26>
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	e000      	b.n	800cd44 <netif_do_set_netmask+0x28>
 800cd42:	2300      	movs	r3, #0
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cd48:	2301      	movs	r3, #1
 800cd4a:	e000      	b.n	800cd4e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3714      	adds	r7, #20
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	330c      	adds	r3, #12
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d00a      	beq.n	800cd8a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <netif_do_set_gw+0x26>
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	e000      	b.n	800cd82 <netif_do_set_gw+0x28>
 800cd80:	2300      	movs	r3, #0
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cd86:	2301      	movs	r3, #1
 800cd88:	e000      	b.n	800cd8c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b088      	sub	sp, #32
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d101      	bne.n	800cdb8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cdb4:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <netif_set_addr+0x90>)
 800cdb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cdbe:	4b1a      	ldr	r3, [pc, #104]	; (800ce28 <netif_set_addr+0x90>)
 800cdc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cdc8:	4b17      	ldr	r3, [pc, #92]	; (800ce28 <netif_set_addr+0x90>)
 800cdca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d003      	beq.n	800cdda <netif_set_addr+0x42>
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <netif_set_addr+0x46>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e000      	b.n	800cde0 <netif_set_addr+0x48>
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d006      	beq.n	800cdf6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cde8:	f107 0310 	add.w	r3, r7, #16
 800cdec:	461a      	mov	r2, r3
 800cdee:	68b9      	ldr	r1, [r7, #8]
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f7ff ff49 	bl	800cc88 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cdf6:	69fa      	ldr	r2, [r7, #28]
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f7ff ff8e 	bl	800cd1c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ce00:	69ba      	ldr	r2, [r7, #24]
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff ffa8 	bl	800cd5a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ce10:	f107 0310 	add.w	r3, r7, #16
 800ce14:	461a      	mov	r2, r3
 800ce16:	68b9      	ldr	r1, [r7, #8]
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff ff35 	bl	800cc88 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ce1e:	bf00      	nop
 800ce20:	3720      	adds	r7, #32
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	0801d260 	.word	0x0801d260

0800ce2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ce34:	4a04      	ldr	r2, [pc, #16]	; (800ce48 <netif_set_default+0x1c>)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ce3a:	bf00      	nop
 800ce3c:	370c      	adds	r7, #12
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	2001a6ac 	.word	0x2001a6ac

0800ce4c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d107      	bne.n	800ce6a <netif_set_up+0x1e>
 800ce5a:	4b0f      	ldr	r3, [pc, #60]	; (800ce98 <netif_set_up+0x4c>)
 800ce5c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ce60:	490e      	ldr	r1, [pc, #56]	; (800ce9c <netif_set_up+0x50>)
 800ce62:	480f      	ldr	r0, [pc, #60]	; (800cea0 <netif_set_up+0x54>)
 800ce64:	f00a f9ca 	bl	80171fc <iprintf>
 800ce68:	e013      	b.n	800ce92 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10c      	bne.n	800ce92 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce7e:	f043 0301 	orr.w	r3, r3, #1
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce8a:	2103      	movs	r1, #3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f809 	bl	800cea4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	080195cc 	.word	0x080195cc
 800ce9c:	08019754 	.word	0x08019754
 800cea0:	0801961c 	.word	0x0801961c

0800cea4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <netif_issue_reports+0x20>
 800ceb6:	4b18      	ldr	r3, [pc, #96]	; (800cf18 <netif_issue_reports+0x74>)
 800ceb8:	f240 326d 	movw	r2, #877	; 0x36d
 800cebc:	4917      	ldr	r1, [pc, #92]	; (800cf1c <netif_issue_reports+0x78>)
 800cebe:	4818      	ldr	r0, [pc, #96]	; (800cf20 <netif_issue_reports+0x7c>)
 800cec0:	f00a f99c 	bl	80171fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ceca:	f003 0304 	and.w	r3, r3, #4
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d01e      	beq.n	800cf10 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ced8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d017      	beq.n	800cf10 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d013      	beq.n	800cf12 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3304      	adds	r3, #4
 800ceee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00e      	beq.n	800cf12 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cefa:	f003 0308 	and.w	r3, r3, #8
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	3304      	adds	r3, #4
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f008 fa79 	bl	8015400 <etharp_request>
 800cf0e:	e000      	b.n	800cf12 <netif_issue_reports+0x6e>
    return;
 800cf10:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	080195cc 	.word	0x080195cc
 800cf1c:	08019770 	.word	0x08019770
 800cf20:	0801961c 	.word	0x0801961c

0800cf24 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d107      	bne.n	800cf42 <netif_set_down+0x1e>
 800cf32:	4b12      	ldr	r3, [pc, #72]	; (800cf7c <netif_set_down+0x58>)
 800cf34:	f240 329b 	movw	r2, #923	; 0x39b
 800cf38:	4911      	ldr	r1, [pc, #68]	; (800cf80 <netif_set_down+0x5c>)
 800cf3a:	4812      	ldr	r0, [pc, #72]	; (800cf84 <netif_set_down+0x60>)
 800cf3c:	f00a f95e 	bl	80171fc <iprintf>
 800cf40:	e019      	b.n	800cf76 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d012      	beq.n	800cf76 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf56:	f023 0301 	bic.w	r3, r3, #1
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf68:	f003 0308 	and.w	r3, r3, #8
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f007 fe03 	bl	8014b7c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	080195cc 	.word	0x080195cc
 800cf80:	08019794 	.word	0x08019794
 800cf84:	0801961c 	.word	0x0801961c

0800cf88 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d107      	bne.n	800cfa6 <netif_set_link_up+0x1e>
 800cf96:	4b13      	ldr	r3, [pc, #76]	; (800cfe4 <netif_set_link_up+0x5c>)
 800cf98:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cf9c:	4912      	ldr	r1, [pc, #72]	; (800cfe8 <netif_set_link_up+0x60>)
 800cf9e:	4813      	ldr	r0, [pc, #76]	; (800cfec <netif_set_link_up+0x64>)
 800cfa0:	f00a f92c 	bl	80171fc <iprintf>
 800cfa4:	e01b      	b.n	800cfde <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfac:	f003 0304 	and.w	r3, r3, #4
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d114      	bne.n	800cfde <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfba:	f043 0304 	orr.w	r3, r3, #4
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cfc6:	2103      	movs	r1, #3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7ff ff6b 	bl	800cea4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	69db      	ldr	r3, [r3, #28]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <netif_set_link_up+0x56>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	080195cc 	.word	0x080195cc
 800cfe8:	080197b4 	.word	0x080197b4
 800cfec:	0801961c 	.word	0x0801961c

0800cff0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d107      	bne.n	800d00e <netif_set_link_down+0x1e>
 800cffe:	4b11      	ldr	r3, [pc, #68]	; (800d044 <netif_set_link_down+0x54>)
 800d000:	f240 4206 	movw	r2, #1030	; 0x406
 800d004:	4910      	ldr	r1, [pc, #64]	; (800d048 <netif_set_link_down+0x58>)
 800d006:	4811      	ldr	r0, [pc, #68]	; (800d04c <netif_set_link_down+0x5c>)
 800d008:	f00a f8f8 	bl	80171fc <iprintf>
 800d00c:	e017      	b.n	800d03e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d010      	beq.n	800d03e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d022:	f023 0304 	bic.w	r3, r3, #4
 800d026:	b2da      	uxtb	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <netif_set_link_down+0x4e>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	080195cc 	.word	0x080195cc
 800d048:	080197d8 	.word	0x080197d8
 800d04c:	0801961c 	.word	0x0801961c

0800d050 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	61da      	str	r2, [r3, #28]
  }
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d072:	b480      	push	{r7}
 800d074:	b085      	sub	sp, #20
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d07e:	f06f 030b 	mvn.w	r3, #11
}
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
	...

0800d090 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d013      	beq.n	800d0c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d0a0:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <netif_get_by_index+0x48>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	e00c      	b.n	800d0c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	79fa      	ldrb	r2, [r7, #7]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d101      	bne.n	800d0bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	e006      	b.n	800d0ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1ef      	bne.n	800d0a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	2001a6a8 	.word	0x2001a6a8

0800d0dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d0e2:	f009 fe1f 	bl	8016d24 <sys_arch_protect>
 800d0e6:	6038      	str	r0, [r7, #0]
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <pbuf_free_ooseq+0x44>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	6838      	ldr	r0, [r7, #0]
 800d0f0:	f009 fe26 	bl	8016d40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d0f4:	4b0b      	ldr	r3, [pc, #44]	; (800d124 <pbuf_free_ooseq+0x48>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	607b      	str	r3, [r7, #4]
 800d0fa:	e00a      	b.n	800d112 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d100:	2b00      	cmp	r3, #0
 800d102:	d003      	beq.n	800d10c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f002 fca1 	bl	800fa4c <tcp_free_ooseq>
      return;
 800d10a:	e005      	b.n	800d118 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	607b      	str	r3, [r7, #4]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1f1      	bne.n	800d0fc <pbuf_free_ooseq+0x20>
    }
  }
}
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	2001a6b1 	.word	0x2001a6b1
 800d124:	2001a6c0 	.word	0x2001a6c0

0800d128 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d130:	f7ff ffd4 	bl	800d0dc <pbuf_free_ooseq>
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d142:	f009 fdef 	bl	8016d24 <sys_arch_protect>
 800d146:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d148:	4b0f      	ldr	r3, [pc, #60]	; (800d188 <pbuf_pool_is_empty+0x4c>)
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d14e:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <pbuf_pool_is_empty+0x4c>)
 800d150:	2201      	movs	r2, #1
 800d152:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f009 fdf3 	bl	8016d40 <sys_arch_unprotect>

  if (!queued) {
 800d15a:	78fb      	ldrb	r3, [r7, #3]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10f      	bne.n	800d180 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d160:	2100      	movs	r1, #0
 800d162:	480a      	ldr	r0, [pc, #40]	; (800d18c <pbuf_pool_is_empty+0x50>)
 800d164:	f7fc ffd6 	bl	800a114 <tcpip_try_callback>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d008      	beq.n	800d180 <pbuf_pool_is_empty+0x44>
 800d16e:	f009 fdd9 	bl	8016d24 <sys_arch_protect>
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	4b04      	ldr	r3, [pc, #16]	; (800d188 <pbuf_pool_is_empty+0x4c>)
 800d176:	2200      	movs	r2, #0
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f009 fde0 	bl	8016d40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d180:	bf00      	nop
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	2001a6b1 	.word	0x2001a6b1
 800d18c:	0800d129 	.word	0x0800d129

0800d190 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	4611      	mov	r1, r2
 800d19c:	461a      	mov	r2, r3
 800d19e:	460b      	mov	r3, r1
 800d1a0:	80fb      	strh	r3, [r7, #6]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	88fa      	ldrh	r2, [r7, #6]
 800d1b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	88ba      	ldrh	r2, [r7, #4]
 800d1bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d1be:	8b3b      	ldrh	r3, [r7, #24]
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	7f3a      	ldrb	r2, [r7, #28]
 800d1ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	73da      	strb	r2, [r3, #15]
}
 800d1d8:	bf00      	nop
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08c      	sub	sp, #48	; 0x30
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	71fb      	strb	r3, [r7, #7]
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	80bb      	strh	r3, [r7, #4]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
 800d1f8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d1fa:	887b      	ldrh	r3, [r7, #2]
 800d1fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d200:	f000 8082 	beq.w	800d308 <pbuf_alloc+0x124>
 800d204:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d208:	f300 80ca 	bgt.w	800d3a0 <pbuf_alloc+0x1bc>
 800d20c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d210:	d010      	beq.n	800d234 <pbuf_alloc+0x50>
 800d212:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d216:	f300 80c3 	bgt.w	800d3a0 <pbuf_alloc+0x1bc>
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d002      	beq.n	800d224 <pbuf_alloc+0x40>
 800d21e:	2b41      	cmp	r3, #65	; 0x41
 800d220:	f040 80be 	bne.w	800d3a0 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d224:	887a      	ldrh	r2, [r7, #2]
 800d226:	88bb      	ldrh	r3, [r7, #4]
 800d228:	4619      	mov	r1, r3
 800d22a:	2000      	movs	r0, #0
 800d22c:	f000 f8d4 	bl	800d3d8 <pbuf_alloc_reference>
 800d230:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d232:	e0bf      	b.n	800d3b4 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d234:	2300      	movs	r3, #0
 800d236:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d238:	2300      	movs	r3, #0
 800d23a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d23c:	88bb      	ldrh	r3, [r7, #4]
 800d23e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d240:	22f3      	movs	r2, #243	; 0xf3
 800d242:	495f      	ldr	r1, [pc, #380]	; (800d3c0 <pbuf_alloc+0x1dc>)
 800d244:	200c      	movs	r0, #12
 800d246:	f7ff fb8d 	bl	800c964 <memp_malloc_fn>
 800d24a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d109      	bne.n	800d266 <pbuf_alloc+0x82>
          PBUF_POOL_IS_EMPTY();
 800d252:	f7ff ff73 	bl	800d13c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <pbuf_alloc+0x7e>
            pbuf_free(p);
 800d25c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d25e:	f000 faad 	bl	800d7bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	e0a7      	b.n	800d3b6 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d266:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d268:	3303      	adds	r3, #3
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	f023 0303 	bic.w	r3, r3, #3
 800d270:	b29b      	uxth	r3, r3
 800d272:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d276:	b29b      	uxth	r3, r3
 800d278:	8b7a      	ldrh	r2, [r7, #26]
 800d27a:	4293      	cmp	r3, r2
 800d27c:	bf28      	it	cs
 800d27e:	4613      	movcs	r3, r2
 800d280:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d284:	3310      	adds	r3, #16
 800d286:	693a      	ldr	r2, [r7, #16]
 800d288:	4413      	add	r3, r2
 800d28a:	3303      	adds	r3, #3
 800d28c:	f023 0303 	bic.w	r3, r3, #3
 800d290:	4618      	mov	r0, r3
 800d292:	89f9      	ldrh	r1, [r7, #14]
 800d294:	8b7a      	ldrh	r2, [r7, #26]
 800d296:	2300      	movs	r3, #0
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	887b      	ldrh	r3, [r7, #2]
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4601      	mov	r1, r0
 800d2a2:	6938      	ldr	r0, [r7, #16]
 800d2a4:	f7ff ff74 	bl	800d190 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	f003 0303 	and.w	r3, r3, #3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d006      	beq.n	800d2c2 <pbuf_alloc+0xde>
 800d2b4:	4b42      	ldr	r3, [pc, #264]	; (800d3c0 <pbuf_alloc+0x1dc>)
 800d2b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2ba:	4942      	ldr	r1, [pc, #264]	; (800d3c4 <pbuf_alloc+0x1e0>)
 800d2bc:	4842      	ldr	r0, [pc, #264]	; (800d3c8 <pbuf_alloc+0x1e4>)
 800d2be:	f009 ff9d 	bl	80171fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d2c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2c4:	3303      	adds	r3, #3
 800d2c6:	f023 0303 	bic.w	r3, r3, #3
 800d2ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2ce:	d106      	bne.n	800d2de <pbuf_alloc+0xfa>
 800d2d0:	4b3b      	ldr	r3, [pc, #236]	; (800d3c0 <pbuf_alloc+0x1dc>)
 800d2d2:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d2d6:	493d      	ldr	r1, [pc, #244]	; (800d3cc <pbuf_alloc+0x1e8>)
 800d2d8:	483b      	ldr	r0, [pc, #236]	; (800d3c8 <pbuf_alloc+0x1e4>)
 800d2da:	f009 ff8f 	bl	80171fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d102      	bne.n	800d2ea <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d2e8:	e002      	b.n	800d2f0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d2f4:	8b7a      	ldrh	r2, [r7, #26]
 800d2f6:	89fb      	ldrh	r3, [r7, #14]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d300:	8b7b      	ldrh	r3, [r7, #26]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d19c      	bne.n	800d240 <pbuf_alloc+0x5c>
      break;
 800d306:	e055      	b.n	800d3b4 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d308:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d30a:	3303      	adds	r3, #3
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	f023 0303 	bic.w	r3, r3, #3
 800d312:	b29a      	uxth	r2, r3
 800d314:	88bb      	ldrh	r3, [r7, #4]
 800d316:	3303      	adds	r3, #3
 800d318:	b29b      	uxth	r3, r3
 800d31a:	f023 0303 	bic.w	r3, r3, #3
 800d31e:	b29b      	uxth	r3, r3
 800d320:	4413      	add	r3, r2
 800d322:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d324:	8b3b      	ldrh	r3, [r7, #24]
 800d326:	3310      	adds	r3, #16
 800d328:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d32a:	8b3a      	ldrh	r2, [r7, #24]
 800d32c:	88bb      	ldrh	r3, [r7, #4]
 800d32e:	3303      	adds	r3, #3
 800d330:	f023 0303 	bic.w	r3, r3, #3
 800d334:	429a      	cmp	r2, r3
 800d336:	d306      	bcc.n	800d346 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d338:	8afa      	ldrh	r2, [r7, #22]
 800d33a:	88bb      	ldrh	r3, [r7, #4]
 800d33c:	3303      	adds	r3, #3
 800d33e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d342:	429a      	cmp	r2, r3
 800d344:	d201      	bcs.n	800d34a <pbuf_alloc+0x166>
        return NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	e035      	b.n	800d3b6 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d34a:	8afb      	ldrh	r3, [r7, #22]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff f8a7 	bl	800c4a0 <mem_malloc>
 800d352:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <pbuf_alloc+0x17a>
        return NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e02b      	b.n	800d3b6 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d35e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d360:	3310      	adds	r3, #16
 800d362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d364:	4413      	add	r3, r2
 800d366:	3303      	adds	r3, #3
 800d368:	f023 0303 	bic.w	r3, r3, #3
 800d36c:	4618      	mov	r0, r3
 800d36e:	88b9      	ldrh	r1, [r7, #4]
 800d370:	88ba      	ldrh	r2, [r7, #4]
 800d372:	2300      	movs	r3, #0
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	887b      	ldrh	r3, [r7, #2]
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	460b      	mov	r3, r1
 800d37c:	4601      	mov	r1, r0
 800d37e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d380:	f7ff ff06 	bl	800d190 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d010      	beq.n	800d3b2 <pbuf_alloc+0x1ce>
 800d390:	4b0b      	ldr	r3, [pc, #44]	; (800d3c0 <pbuf_alloc+0x1dc>)
 800d392:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d396:	490e      	ldr	r1, [pc, #56]	; (800d3d0 <pbuf_alloc+0x1ec>)
 800d398:	480b      	ldr	r0, [pc, #44]	; (800d3c8 <pbuf_alloc+0x1e4>)
 800d39a:	f009 ff2f 	bl	80171fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d39e:	e008      	b.n	800d3b2 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d3a0:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <pbuf_alloc+0x1dc>)
 800d3a2:	f240 1227 	movw	r2, #295	; 0x127
 800d3a6:	490b      	ldr	r1, [pc, #44]	; (800d3d4 <pbuf_alloc+0x1f0>)
 800d3a8:	4807      	ldr	r0, [pc, #28]	; (800d3c8 <pbuf_alloc+0x1e4>)
 800d3aa:	f009 ff27 	bl	80171fc <iprintf>
      return NULL;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e001      	b.n	800d3b6 <pbuf_alloc+0x1d2>
      break;
 800d3b2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3728      	adds	r7, #40	; 0x28
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	080197fc 	.word	0x080197fc
 800d3c4:	0801982c 	.word	0x0801982c
 800d3c8:	0801985c 	.word	0x0801985c
 800d3cc:	08019884 	.word	0x08019884
 800d3d0:	080198b8 	.word	0x080198b8
 800d3d4:	080198e4 	.word	0x080198e4

0800d3d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	807b      	strh	r3, [r7, #2]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d3e8:	883b      	ldrh	r3, [r7, #0]
 800d3ea:	2b41      	cmp	r3, #65	; 0x41
 800d3ec:	d009      	beq.n	800d402 <pbuf_alloc_reference+0x2a>
 800d3ee:	883b      	ldrh	r3, [r7, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d006      	beq.n	800d402 <pbuf_alloc_reference+0x2a>
 800d3f4:	4b11      	ldr	r3, [pc, #68]	; (800d43c <pbuf_alloc_reference+0x64>)
 800d3f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d3fa:	4911      	ldr	r1, [pc, #68]	; (800d440 <pbuf_alloc_reference+0x68>)
 800d3fc:	4811      	ldr	r0, [pc, #68]	; (800d444 <pbuf_alloc_reference+0x6c>)
 800d3fe:	f009 fefd 	bl	80171fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d402:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800d406:	490d      	ldr	r1, [pc, #52]	; (800d43c <pbuf_alloc_reference+0x64>)
 800d408:	200b      	movs	r0, #11
 800d40a:	f7ff faab 	bl	800c964 <memp_malloc_fn>
 800d40e:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <pbuf_alloc_reference+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d416:	2300      	movs	r3, #0
 800d418:	e00b      	b.n	800d432 <pbuf_alloc_reference+0x5a>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d41a:	8879      	ldrh	r1, [r7, #2]
 800d41c:	887a      	ldrh	r2, [r7, #2]
 800d41e:	2300      	movs	r3, #0
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	883b      	ldrh	r3, [r7, #0]
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	460b      	mov	r3, r1
 800d428:	6879      	ldr	r1, [r7, #4]
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f7ff feb0 	bl	800d190 <pbuf_init_alloced_pbuf>
  return p;
 800d430:	68fb      	ldr	r3, [r7, #12]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	080197fc 	.word	0x080197fc
 800d440:	08019900 	.word	0x08019900
 800d444:	0801985c 	.word	0x0801985c

0800d448 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	607b      	str	r3, [r7, #4]
 800d450:	4603      	mov	r3, r0
 800d452:	73fb      	strb	r3, [r7, #15]
 800d454:	460b      	mov	r3, r1
 800d456:	81bb      	strh	r3, [r7, #12]
 800d458:	4613      	mov	r3, r2
 800d45a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
 800d45e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d460:	8a7b      	ldrh	r3, [r7, #18]
 800d462:	3303      	adds	r3, #3
 800d464:	f023 0203 	bic.w	r2, r3, #3
 800d468:	89bb      	ldrh	r3, [r7, #12]
 800d46a:	441a      	add	r2, r3
 800d46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d46e:	429a      	cmp	r2, r3
 800d470:	d901      	bls.n	800d476 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	e018      	b.n	800d4a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d007      	beq.n	800d48c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d47c:	8a7b      	ldrh	r3, [r7, #18]
 800d47e:	3303      	adds	r3, #3
 800d480:	f023 0303 	bic.w	r3, r3, #3
 800d484:	6a3a      	ldr	r2, [r7, #32]
 800d486:	4413      	add	r3, r2
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e001      	b.n	800d490 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d48c:	2300      	movs	r3, #0
 800d48e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	89b9      	ldrh	r1, [r7, #12]
 800d494:	89ba      	ldrh	r2, [r7, #12]
 800d496:	2302      	movs	r3, #2
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	897b      	ldrh	r3, [r7, #10]
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	6979      	ldr	r1, [r7, #20]
 800d4a2:	f7ff fe75 	bl	800d190 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d4a6:	687b      	ldr	r3, [r7, #4]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3718      	adds	r7, #24
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <pbuf_realloc+0x20>
 800d4c2:	4b3a      	ldr	r3, [pc, #232]	; (800d5ac <pbuf_realloc+0xfc>)
 800d4c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d4c8:	4939      	ldr	r1, [pc, #228]	; (800d5b0 <pbuf_realloc+0x100>)
 800d4ca:	483a      	ldr	r0, [pc, #232]	; (800d5b4 <pbuf_realloc+0x104>)
 800d4cc:	f009 fe96 	bl	80171fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	891b      	ldrh	r3, [r3, #8]
 800d4d4:	887a      	ldrh	r2, [r7, #2]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d263      	bcs.n	800d5a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	891a      	ldrh	r2, [r3, #8]
 800d4de:	887b      	ldrh	r3, [r7, #2]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d4e4:	887b      	ldrh	r3, [r7, #2]
 800d4e6:	817b      	strh	r3, [r7, #10]
  q = p;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d4ec:	e018      	b.n	800d520 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	895b      	ldrh	r3, [r3, #10]
 800d4f2:	897a      	ldrh	r2, [r7, #10]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	891a      	ldrh	r2, [r3, #8]
 800d4fc:	893b      	ldrh	r3, [r7, #8]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	b29a      	uxth	r2, r3
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <pbuf_realloc+0x70>
 800d512:	4b26      	ldr	r3, [pc, #152]	; (800d5ac <pbuf_realloc+0xfc>)
 800d514:	f240 12af 	movw	r2, #431	; 0x1af
 800d518:	4927      	ldr	r1, [pc, #156]	; (800d5b8 <pbuf_realloc+0x108>)
 800d51a:	4826      	ldr	r0, [pc, #152]	; (800d5b4 <pbuf_realloc+0x104>)
 800d51c:	f009 fe6e 	bl	80171fc <iprintf>
  while (rem_len > q->len) {
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	895b      	ldrh	r3, [r3, #10]
 800d524:	897a      	ldrh	r2, [r7, #10]
 800d526:	429a      	cmp	r2, r3
 800d528:	d8e1      	bhi.n	800d4ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	7b1b      	ldrb	r3, [r3, #12]
 800d52e:	f003 030f 	and.w	r3, r3, #15
 800d532:	2b00      	cmp	r3, #0
 800d534:	d121      	bne.n	800d57a <pbuf_realloc+0xca>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	895b      	ldrh	r3, [r3, #10]
 800d53a:	897a      	ldrh	r2, [r7, #10]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d01c      	beq.n	800d57a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	7b5b      	ldrb	r3, [r3, #13]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d116      	bne.n	800d57a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	685a      	ldr	r2, [r3, #4]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	b29a      	uxth	r2, r3
 800d556:	897b      	ldrh	r3, [r7, #10]
 800d558:	4413      	add	r3, r2
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	4619      	mov	r1, r3
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f7fe fe84 	bl	800c26c <mem_trim>
 800d564:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <pbuf_realloc+0xca>
 800d56c:	4b0f      	ldr	r3, [pc, #60]	; (800d5ac <pbuf_realloc+0xfc>)
 800d56e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d572:	4912      	ldr	r1, [pc, #72]	; (800d5bc <pbuf_realloc+0x10c>)
 800d574:	480f      	ldr	r0, [pc, #60]	; (800d5b4 <pbuf_realloc+0x104>)
 800d576:	f009 fe41 	bl	80171fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	897a      	ldrh	r2, [r7, #10]
 800d57e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	895a      	ldrh	r2, [r3, #10]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d004      	beq.n	800d59a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4618      	mov	r0, r3
 800d596:	f000 f911 	bl	800d7bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2200      	movs	r2, #0
 800d59e:	601a      	str	r2, [r3, #0]
 800d5a0:	e000      	b.n	800d5a4 <pbuf_realloc+0xf4>
    return;
 800d5a2:	bf00      	nop

}
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	080197fc 	.word	0x080197fc
 800d5b0:	08019914 	.word	0x08019914
 800d5b4:	0801985c 	.word	0x0801985c
 800d5b8:	0801992c 	.word	0x0801992c
 800d5bc:	08019944 	.word	0x08019944

0800d5c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d106      	bne.n	800d5e2 <pbuf_add_header_impl+0x22>
 800d5d4:	4b2b      	ldr	r3, [pc, #172]	; (800d684 <pbuf_add_header_impl+0xc4>)
 800d5d6:	f240 12df 	movw	r2, #479	; 0x1df
 800d5da:	492b      	ldr	r1, [pc, #172]	; (800d688 <pbuf_add_header_impl+0xc8>)
 800d5dc:	482b      	ldr	r0, [pc, #172]	; (800d68c <pbuf_add_header_impl+0xcc>)
 800d5de:	f009 fe0d 	bl	80171fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d003      	beq.n	800d5f0 <pbuf_add_header_impl+0x30>
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5ee:	d301      	bcc.n	800d5f4 <pbuf_add_header_impl+0x34>
    return 1;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e043      	b.n	800d67c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d101      	bne.n	800d5fe <pbuf_add_header_impl+0x3e>
    return 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	e03e      	b.n	800d67c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	891a      	ldrh	r2, [r3, #8]
 800d606:	8a7b      	ldrh	r3, [r7, #18]
 800d608:	4413      	add	r3, r2
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	8a7a      	ldrh	r2, [r7, #18]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d901      	bls.n	800d616 <pbuf_add_header_impl+0x56>
    return 1;
 800d612:	2301      	movs	r3, #1
 800d614:	e032      	b.n	800d67c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	7b1b      	ldrb	r3, [r3, #12]
 800d61a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d61c:	8a3b      	ldrh	r3, [r7, #16]
 800d61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00c      	beq.n	800d640 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	425b      	negs	r3, r3
 800d62e:	4413      	add	r3, r2
 800d630:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3310      	adds	r3, #16
 800d636:	697a      	ldr	r2, [r7, #20]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d20d      	bcs.n	800d658 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e01d      	b.n	800d67c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d640:	79fb      	ldrb	r3, [r7, #7]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d006      	beq.n	800d654 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	425b      	negs	r3, r3
 800d64e:	4413      	add	r3, r2
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	e001      	b.n	800d658 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d654:	2301      	movs	r3, #1
 800d656:	e011      	b.n	800d67c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	895a      	ldrh	r2, [r3, #10]
 800d662:	8a7b      	ldrh	r3, [r7, #18]
 800d664:	4413      	add	r3, r2
 800d666:	b29a      	uxth	r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	891a      	ldrh	r2, [r3, #8]
 800d670:	8a7b      	ldrh	r3, [r7, #18]
 800d672:	4413      	add	r3, r2
 800d674:	b29a      	uxth	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	811a      	strh	r2, [r3, #8]


  return 0;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	080197fc 	.word	0x080197fc
 800d688:	08019960 	.word	0x08019960
 800d68c:	0801985c 	.word	0x0801985c

0800d690 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d69a:	2200      	movs	r2, #0
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7ff ff8e 	bl	800d5c0 <pbuf_add_header_impl>
 800d6a4:	4603      	mov	r3, r0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
	...

0800d6b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <pbuf_remove_header+0x1e>
 800d6c0:	4b20      	ldr	r3, [pc, #128]	; (800d744 <pbuf_remove_header+0x94>)
 800d6c2:	f240 224b 	movw	r2, #587	; 0x24b
 800d6c6:	4920      	ldr	r1, [pc, #128]	; (800d748 <pbuf_remove_header+0x98>)
 800d6c8:	4820      	ldr	r0, [pc, #128]	; (800d74c <pbuf_remove_header+0x9c>)
 800d6ca:	f009 fd97 	bl	80171fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d003      	beq.n	800d6dc <pbuf_remove_header+0x2c>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6da:	d301      	bcc.n	800d6e0 <pbuf_remove_header+0x30>
    return 1;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e02c      	b.n	800d73a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <pbuf_remove_header+0x3a>
    return 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e027      	b.n	800d73a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	895b      	ldrh	r3, [r3, #10]
 800d6f2:	89fa      	ldrh	r2, [r7, #14]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d908      	bls.n	800d70a <pbuf_remove_header+0x5a>
 800d6f8:	4b12      	ldr	r3, [pc, #72]	; (800d744 <pbuf_remove_header+0x94>)
 800d6fa:	f240 2255 	movw	r2, #597	; 0x255
 800d6fe:	4914      	ldr	r1, [pc, #80]	; (800d750 <pbuf_remove_header+0xa0>)
 800d700:	4812      	ldr	r0, [pc, #72]	; (800d74c <pbuf_remove_header+0x9c>)
 800d702:	f009 fd7b 	bl	80171fc <iprintf>
 800d706:	2301      	movs	r3, #1
 800d708:	e017      	b.n	800d73a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	441a      	add	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	895a      	ldrh	r2, [r3, #10]
 800d720:	89fb      	ldrh	r3, [r7, #14]
 800d722:	1ad3      	subs	r3, r2, r3
 800d724:	b29a      	uxth	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	891a      	ldrh	r2, [r3, #8]
 800d72e:	89fb      	ldrh	r3, [r7, #14]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	b29a      	uxth	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	080197fc 	.word	0x080197fc
 800d748:	08019960 	.word	0x08019960
 800d74c:	0801985c 	.word	0x0801985c
 800d750:	0801996c 	.word	0x0801996c

0800d754 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	807b      	strh	r3, [r7, #2]
 800d760:	4613      	mov	r3, r2
 800d762:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da08      	bge.n	800d77e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d76c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d770:	425b      	negs	r3, r3
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff ff9b 	bl	800d6b0 <pbuf_remove_header>
 800d77a:	4603      	mov	r3, r0
 800d77c:	e007      	b.n	800d78e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d77e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d782:	787a      	ldrb	r2, [r7, #1]
 800d784:	4619      	mov	r1, r3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff ff1a 	bl	800d5c0 <pbuf_add_header_impl>
 800d78c:	4603      	mov	r3, r0
  }
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d7a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff ffd2 	bl	800d754 <pbuf_header_impl>
 800d7b0:	4603      	mov	r3, r0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10b      	bne.n	800d7e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d106      	bne.n	800d7de <pbuf_free+0x22>
 800d7d0:	4b3b      	ldr	r3, [pc, #236]	; (800d8c0 <pbuf_free+0x104>)
 800d7d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d7d6:	493b      	ldr	r1, [pc, #236]	; (800d8c4 <pbuf_free+0x108>)
 800d7d8:	483b      	ldr	r0, [pc, #236]	; (800d8c8 <pbuf_free+0x10c>)
 800d7da:	f009 fd0f 	bl	80171fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e069      	b.n	800d8b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d7e6:	e062      	b.n	800d8ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d7e8:	f009 fa9c 	bl	8016d24 <sys_arch_protect>
 800d7ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	7b9b      	ldrb	r3, [r3, #14]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d106      	bne.n	800d804 <pbuf_free+0x48>
 800d7f6:	4b32      	ldr	r3, [pc, #200]	; (800d8c0 <pbuf_free+0x104>)
 800d7f8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d7fc:	4933      	ldr	r1, [pc, #204]	; (800d8cc <pbuf_free+0x110>)
 800d7fe:	4832      	ldr	r0, [pc, #200]	; (800d8c8 <pbuf_free+0x10c>)
 800d800:	f009 fcfc 	bl	80171fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7b9b      	ldrb	r3, [r3, #14]
 800d808:	3b01      	subs	r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	739a      	strb	r2, [r3, #14]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7b9b      	ldrb	r3, [r3, #14]
 800d814:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d816:	69b8      	ldr	r0, [r7, #24]
 800d818:	f009 fa92 	bl	8016d40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d81c:	7dfb      	ldrb	r3, [r7, #23]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d143      	bne.n	800d8aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	7b1b      	ldrb	r3, [r3, #12]
 800d82c:	f003 030f 	and.w	r3, r3, #15
 800d830:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	7b5b      	ldrb	r3, [r3, #13]
 800d836:	f003 0302 	and.w	r3, r3, #2
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d011      	beq.n	800d862 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <pbuf_free+0x9c>
 800d84a:	4b1d      	ldr	r3, [pc, #116]	; (800d8c0 <pbuf_free+0x104>)
 800d84c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d850:	491f      	ldr	r1, [pc, #124]	; (800d8d0 <pbuf_free+0x114>)
 800d852:	481d      	ldr	r0, [pc, #116]	; (800d8c8 <pbuf_free+0x10c>)
 800d854:	f009 fcd2 	bl	80171fc <iprintf>
        pc->custom_free_function(p);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	4798      	blx	r3
 800d860:	e01d      	b.n	800d89e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d862:	7bfb      	ldrb	r3, [r7, #15]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d104      	bne.n	800d872 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d868:	6879      	ldr	r1, [r7, #4]
 800d86a:	200c      	movs	r0, #12
 800d86c:	f7ff f8f8 	bl	800ca60 <memp_free>
 800d870:	e015      	b.n	800d89e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d104      	bne.n	800d882 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d878:	6879      	ldr	r1, [r7, #4]
 800d87a:	200b      	movs	r0, #11
 800d87c:	f7ff f8f0 	bl	800ca60 <memp_free>
 800d880:	e00d      	b.n	800d89e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d882:	7bfb      	ldrb	r3, [r7, #15]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d103      	bne.n	800d890 <pbuf_free+0xd4>
          mem_free(p);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7fe fc5b 	bl	800c144 <mem_free>
 800d88e:	e006      	b.n	800d89e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d890:	4b0b      	ldr	r3, [pc, #44]	; (800d8c0 <pbuf_free+0x104>)
 800d892:	f240 320f 	movw	r2, #783	; 0x30f
 800d896:	490f      	ldr	r1, [pc, #60]	; (800d8d4 <pbuf_free+0x118>)
 800d898:	480b      	ldr	r0, [pc, #44]	; (800d8c8 <pbuf_free+0x10c>)
 800d89a:	f009 fcaf 	bl	80171fc <iprintf>
        }
      }
      count++;
 800d89e:	7ffb      	ldrb	r3, [r7, #31]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	607b      	str	r3, [r7, #4]
 800d8a8:	e001      	b.n	800d8ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d199      	bne.n	800d7e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d8b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	080197fc 	.word	0x080197fc
 800d8c4:	08019960 	.word	0x08019960
 800d8c8:	0801985c 	.word	0x0801985c
 800d8cc:	0801998c 	.word	0x0801998c
 800d8d0:	080199a4 	.word	0x080199a4
 800d8d4:	080199c8 	.word	0x080199c8

0800d8d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d8e4:	e005      	b.n	800d8f2 <pbuf_clen+0x1a>
    ++len;
 800d8e6:	89fb      	ldrh	r3, [r7, #14]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1f6      	bne.n	800d8e6 <pbuf_clen+0xe>
  }
  return len;
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
	...

0800d908 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d016      	beq.n	800d944 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d916:	f009 fa05 	bl	8016d24 <sys_arch_protect>
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	7b9b      	ldrb	r3, [r3, #14]
 800d920:	3301      	adds	r3, #1
 800d922:	b2da      	uxtb	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	739a      	strb	r2, [r3, #14]
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f009 fa09 	bl	8016d40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	7b9b      	ldrb	r3, [r3, #14]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d106      	bne.n	800d944 <pbuf_ref+0x3c>
 800d936:	4b05      	ldr	r3, [pc, #20]	; (800d94c <pbuf_ref+0x44>)
 800d938:	f240 3242 	movw	r2, #834	; 0x342
 800d93c:	4904      	ldr	r1, [pc, #16]	; (800d950 <pbuf_ref+0x48>)
 800d93e:	4805      	ldr	r0, [pc, #20]	; (800d954 <pbuf_ref+0x4c>)
 800d940:	f009 fc5c 	bl	80171fc <iprintf>
  }
}
 800d944:	bf00      	nop
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	080197fc 	.word	0x080197fc
 800d950:	080199dc 	.word	0x080199dc
 800d954:	0801985c 	.word	0x0801985c

0800d958 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <pbuf_cat+0x16>
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d107      	bne.n	800d97e <pbuf_cat+0x26>
 800d96e:	4b20      	ldr	r3, [pc, #128]	; (800d9f0 <pbuf_cat+0x98>)
 800d970:	f240 3259 	movw	r2, #857	; 0x359
 800d974:	491f      	ldr	r1, [pc, #124]	; (800d9f4 <pbuf_cat+0x9c>)
 800d976:	4820      	ldr	r0, [pc, #128]	; (800d9f8 <pbuf_cat+0xa0>)
 800d978:	f009 fc40 	bl	80171fc <iprintf>
 800d97c:	e034      	b.n	800d9e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	e00a      	b.n	800d99a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	891a      	ldrh	r2, [r3, #8]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	891b      	ldrh	r3, [r3, #8]
 800d98c:	4413      	add	r3, r2
 800d98e:	b29a      	uxth	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1f0      	bne.n	800d984 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	891a      	ldrh	r2, [r3, #8]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	895b      	ldrh	r3, [r3, #10]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d006      	beq.n	800d9bc <pbuf_cat+0x64>
 800d9ae:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <pbuf_cat+0x98>)
 800d9b0:	f240 3262 	movw	r2, #866	; 0x362
 800d9b4:	4911      	ldr	r1, [pc, #68]	; (800d9fc <pbuf_cat+0xa4>)
 800d9b6:	4810      	ldr	r0, [pc, #64]	; (800d9f8 <pbuf_cat+0xa0>)
 800d9b8:	f009 fc20 	bl	80171fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d006      	beq.n	800d9d2 <pbuf_cat+0x7a>
 800d9c4:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <pbuf_cat+0x98>)
 800d9c6:	f240 3263 	movw	r2, #867	; 0x363
 800d9ca:	490d      	ldr	r1, [pc, #52]	; (800da00 <pbuf_cat+0xa8>)
 800d9cc:	480a      	ldr	r0, [pc, #40]	; (800d9f8 <pbuf_cat+0xa0>)
 800d9ce:	f009 fc15 	bl	80171fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	891a      	ldrh	r2, [r3, #8]
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	891b      	ldrh	r3, [r3, #8]
 800d9da:	4413      	add	r3, r2
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	683a      	ldr	r2, [r7, #0]
 800d9e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	080197fc 	.word	0x080197fc
 800d9f4:	080199f0 	.word	0x080199f0
 800d9f8:	0801985c 	.word	0x0801985c
 800d9fc:	08019a28 	.word	0x08019a28
 800da00:	08019a58 	.word	0x08019a58

0800da04 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800da0e:	2300      	movs	r3, #0
 800da10:	617b      	str	r3, [r7, #20]
 800da12:	2300      	movs	r3, #0
 800da14:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d008      	beq.n	800da2e <pbuf_copy+0x2a>
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d005      	beq.n	800da2e <pbuf_copy+0x2a>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	891a      	ldrh	r2, [r3, #8]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	891b      	ldrh	r3, [r3, #8]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d209      	bcs.n	800da42 <pbuf_copy+0x3e>
 800da2e:	4b57      	ldr	r3, [pc, #348]	; (800db8c <pbuf_copy+0x188>)
 800da30:	f240 32c9 	movw	r2, #969	; 0x3c9
 800da34:	4956      	ldr	r1, [pc, #344]	; (800db90 <pbuf_copy+0x18c>)
 800da36:	4857      	ldr	r0, [pc, #348]	; (800db94 <pbuf_copy+0x190>)
 800da38:	f009 fbe0 	bl	80171fc <iprintf>
 800da3c:	f06f 030f 	mvn.w	r3, #15
 800da40:	e09f      	b.n	800db82 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	895b      	ldrh	r3, [r3, #10]
 800da46:	461a      	mov	r2, r3
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	1ad2      	subs	r2, r2, r3
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	4619      	mov	r1, r3
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	1acb      	subs	r3, r1, r3
 800da56:	429a      	cmp	r2, r3
 800da58:	d306      	bcc.n	800da68 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	895b      	ldrh	r3, [r3, #10]
 800da5e:	461a      	mov	r2, r3
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	e005      	b.n	800da74 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	895b      	ldrh	r3, [r3, #10]
 800da6c:	461a      	mov	r2, r3
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	18d0      	adds	r0, r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	4413      	add	r3, r2
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4619      	mov	r1, r3
 800da88:	f009 faa8 	bl	8016fdc <memcpy>
    offset_to += len;
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	4413      	add	r3, r2
 800da92:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	4413      	add	r3, r2
 800da9a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	895b      	ldrh	r3, [r3, #10]
 800daa0:	461a      	mov	r2, r3
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d906      	bls.n	800dab6 <pbuf_copy+0xb2>
 800daa8:	4b38      	ldr	r3, [pc, #224]	; (800db8c <pbuf_copy+0x188>)
 800daaa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800daae:	493a      	ldr	r1, [pc, #232]	; (800db98 <pbuf_copy+0x194>)
 800dab0:	4838      	ldr	r0, [pc, #224]	; (800db94 <pbuf_copy+0x190>)
 800dab2:	f009 fba3 	bl	80171fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	895b      	ldrh	r3, [r3, #10]
 800daba:	461a      	mov	r2, r3
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d906      	bls.n	800dad0 <pbuf_copy+0xcc>
 800dac2:	4b32      	ldr	r3, [pc, #200]	; (800db8c <pbuf_copy+0x188>)
 800dac4:	f240 32da 	movw	r2, #986	; 0x3da
 800dac8:	4934      	ldr	r1, [pc, #208]	; (800db9c <pbuf_copy+0x198>)
 800daca:	4832      	ldr	r0, [pc, #200]	; (800db94 <pbuf_copy+0x190>)
 800dacc:	f009 fb96 	bl	80171fc <iprintf>
    if (offset_from >= p_from->len) {
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	895b      	ldrh	r3, [r3, #10]
 800dad4:	461a      	mov	r2, r3
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	4293      	cmp	r3, r2
 800dada:	d304      	bcc.n	800dae6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	895b      	ldrh	r3, [r3, #10]
 800daea:	461a      	mov	r2, r3
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	4293      	cmp	r3, r2
 800daf0:	d114      	bne.n	800db1c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10c      	bne.n	800db1c <pbuf_copy+0x118>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d009      	beq.n	800db1c <pbuf_copy+0x118>
 800db08:	4b20      	ldr	r3, [pc, #128]	; (800db8c <pbuf_copy+0x188>)
 800db0a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800db0e:	4924      	ldr	r1, [pc, #144]	; (800dba0 <pbuf_copy+0x19c>)
 800db10:	4820      	ldr	r0, [pc, #128]	; (800db94 <pbuf_copy+0x190>)
 800db12:	f009 fb73 	bl	80171fc <iprintf>
 800db16:	f06f 030f 	mvn.w	r3, #15
 800db1a:	e032      	b.n	800db82 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d013      	beq.n	800db4a <pbuf_copy+0x146>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	895a      	ldrh	r2, [r3, #10]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	891b      	ldrh	r3, [r3, #8]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d10d      	bne.n	800db4a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d009      	beq.n	800db4a <pbuf_copy+0x146>
 800db36:	4b15      	ldr	r3, [pc, #84]	; (800db8c <pbuf_copy+0x188>)
 800db38:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800db3c:	4919      	ldr	r1, [pc, #100]	; (800dba4 <pbuf_copy+0x1a0>)
 800db3e:	4815      	ldr	r0, [pc, #84]	; (800db94 <pbuf_copy+0x190>)
 800db40:	f009 fb5c 	bl	80171fc <iprintf>
 800db44:	f06f 0305 	mvn.w	r3, #5
 800db48:	e01b      	b.n	800db82 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d013      	beq.n	800db78 <pbuf_copy+0x174>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	895a      	ldrh	r2, [r3, #10]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	891b      	ldrh	r3, [r3, #8]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d10d      	bne.n	800db78 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d009      	beq.n	800db78 <pbuf_copy+0x174>
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <pbuf_copy+0x188>)
 800db66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800db6a:	490e      	ldr	r1, [pc, #56]	; (800dba4 <pbuf_copy+0x1a0>)
 800db6c:	4809      	ldr	r0, [pc, #36]	; (800db94 <pbuf_copy+0x190>)
 800db6e:	f009 fb45 	bl	80171fc <iprintf>
 800db72:	f06f 0305 	mvn.w	r3, #5
 800db76:	e004      	b.n	800db82 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f47f af61 	bne.w	800da42 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	080197fc 	.word	0x080197fc
 800db90:	08019aa4 	.word	0x08019aa4
 800db94:	0801985c 	.word	0x0801985c
 800db98:	08019ad4 	.word	0x08019ad4
 800db9c:	08019aec 	.word	0x08019aec
 800dba0:	08019b08 	.word	0x08019b08
 800dba4:	08019b18 	.word	0x08019b18

0800dba8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	80fb      	strh	r3, [r7, #6]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d108      	bne.n	800dbde <pbuf_copy_partial+0x36>
 800dbcc:	4b2b      	ldr	r3, [pc, #172]	; (800dc7c <pbuf_copy_partial+0xd4>)
 800dbce:	f240 420a 	movw	r2, #1034	; 0x40a
 800dbd2:	492b      	ldr	r1, [pc, #172]	; (800dc80 <pbuf_copy_partial+0xd8>)
 800dbd4:	482b      	ldr	r0, [pc, #172]	; (800dc84 <pbuf_copy_partial+0xdc>)
 800dbd6:	f009 fb11 	bl	80171fc <iprintf>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e04a      	b.n	800dc74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d108      	bne.n	800dbf6 <pbuf_copy_partial+0x4e>
 800dbe4:	4b25      	ldr	r3, [pc, #148]	; (800dc7c <pbuf_copy_partial+0xd4>)
 800dbe6:	f240 420b 	movw	r2, #1035	; 0x40b
 800dbea:	4927      	ldr	r1, [pc, #156]	; (800dc88 <pbuf_copy_partial+0xe0>)
 800dbec:	4825      	ldr	r0, [pc, #148]	; (800dc84 <pbuf_copy_partial+0xdc>)
 800dbee:	f009 fb05 	bl	80171fc <iprintf>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e03e      	b.n	800dc74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	e034      	b.n	800dc66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dbfc:	88bb      	ldrh	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00a      	beq.n	800dc18 <pbuf_copy_partial+0x70>
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	895b      	ldrh	r3, [r3, #10]
 800dc06:	88ba      	ldrh	r2, [r7, #4]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d305      	bcc.n	800dc18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	895b      	ldrh	r3, [r3, #10]
 800dc10:	88ba      	ldrh	r2, [r7, #4]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	80bb      	strh	r3, [r7, #4]
 800dc16:	e023      	b.n	800dc60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	895a      	ldrh	r2, [r3, #10]
 800dc1c:	88bb      	ldrh	r3, [r7, #4]
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dc22:	8b3a      	ldrh	r2, [r7, #24]
 800dc24:	88fb      	ldrh	r3, [r7, #6]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d901      	bls.n	800dc2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dc2a:	88fb      	ldrh	r3, [r7, #6]
 800dc2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dc2e:	8b7b      	ldrh	r3, [r7, #26]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	18d0      	adds	r0, r2, r3
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	88bb      	ldrh	r3, [r7, #4]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	8b3a      	ldrh	r2, [r7, #24]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	f009 f9cc 	bl	8016fdc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dc44:	8afa      	ldrh	r2, [r7, #22]
 800dc46:	8b3b      	ldrh	r3, [r7, #24]
 800dc48:	4413      	add	r3, r2
 800dc4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dc4c:	8b7a      	ldrh	r2, [r7, #26]
 800dc4e:	8b3b      	ldrh	r3, [r7, #24]
 800dc50:	4413      	add	r3, r2
 800dc52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dc54:	88fa      	ldrh	r2, [r7, #6]
 800dc56:	8b3b      	ldrh	r3, [r7, #24]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	61fb      	str	r3, [r7, #28]
 800dc66:	88fb      	ldrh	r3, [r7, #6]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <pbuf_copy_partial+0xca>
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1c4      	bne.n	800dbfc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dc72:	8afb      	ldrh	r3, [r7, #22]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	080197fc 	.word	0x080197fc
 800dc80:	08019b44 	.word	0x08019b44
 800dc84:	0801985c 	.word	0x0801985c
 800dc88:	08019b64 	.word	0x08019b64

0800dc8c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	460b      	mov	r3, r1
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800dc9a:	897b      	ldrh	r3, [r7, #10]
 800dc9c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800dca2:	e007      	b.n	800dcb4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	895b      	ldrh	r3, [r3, #10]
 800dca8:	8afa      	ldrh	r2, [r7, #22]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d004      	beq.n	800dcc4 <pbuf_skip_const+0x38>
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	895b      	ldrh	r3, [r3, #10]
 800dcbe:	8afa      	ldrh	r2, [r7, #22]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d2ef      	bcs.n	800dca4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d002      	beq.n	800dcd0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	8afa      	ldrh	r2, [r7, #22]
 800dcce:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800dcd0:	693b      	ldr	r3, [r7, #16]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
	...

0800dce0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	603a      	str	r2, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
 800dcec:	460b      	mov	r3, r1
 800dcee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	8919      	ldrh	r1, [r3, #8]
 800dcf4:	88ba      	ldrh	r2, [r7, #4]
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff fa73 	bl	800d1e4 <pbuf_alloc>
 800dcfe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <pbuf_clone+0x2a>
    return NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	e011      	b.n	800dd2e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f7ff fe79 	bl	800da04 <pbuf_copy>
 800dd12:	4603      	mov	r3, r0
 800dd14:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dd16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <pbuf_clone+0x4c>
 800dd1e:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <pbuf_clone+0x58>)
 800dd20:	f240 5224 	movw	r2, #1316	; 0x524
 800dd24:	4905      	ldr	r1, [pc, #20]	; (800dd3c <pbuf_clone+0x5c>)
 800dd26:	4806      	ldr	r0, [pc, #24]	; (800dd40 <pbuf_clone+0x60>)
 800dd28:	f009 fa68 	bl	80171fc <iprintf>
  return q;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	080197fc 	.word	0x080197fc
 800dd3c:	08019c70 	.word	0x08019c70
 800dd40:	0801985c 	.word	0x0801985c

0800dd44 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800dd50:	887b      	ldrh	r3, [r7, #2]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f80c 	bl	800dd72 <pbuf_try_get_at>
 800dd5a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	db02      	blt.n	800dd68 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	e000      	b.n	800dd6a <pbuf_get_at+0x26>
  }
  return 0;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800dd7e:	f107 020a 	add.w	r2, r7, #10
 800dd82:	887b      	ldrh	r3, [r7, #2]
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff ff80 	bl	800dc8c <pbuf_skip_const>
 800dd8c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00a      	beq.n	800ddaa <pbuf_try_get_at+0x38>
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	895a      	ldrh	r2, [r3, #10]
 800dd98:	897b      	ldrh	r3, [r7, #10]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d905      	bls.n	800ddaa <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	897a      	ldrh	r2, [r7, #10]
 800dda4:	4413      	add	r3, r2
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	e001      	b.n	800ddae <pbuf_try_get_at+0x3c>
  }
  return -1;
 800ddaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ddbc:	f009 faac 	bl	8017318 <rand>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	4b01      	ldr	r3, [pc, #4]	; (800ddd8 <tcp_init+0x20>)
 800ddd2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ddd4:	bf00      	nop
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20000034 	.word	0x20000034

0800dddc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7d1b      	ldrb	r3, [r3, #20]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d105      	bne.n	800ddf8 <tcp_free+0x1c>
 800ddec:	4b06      	ldr	r3, [pc, #24]	; (800de08 <tcp_free+0x2c>)
 800ddee:	22d4      	movs	r2, #212	; 0xd4
 800ddf0:	4906      	ldr	r1, [pc, #24]	; (800de0c <tcp_free+0x30>)
 800ddf2:	4807      	ldr	r0, [pc, #28]	; (800de10 <tcp_free+0x34>)
 800ddf4:	f009 fa02 	bl	80171fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ddf8:	6879      	ldr	r1, [r7, #4]
 800ddfa:	2001      	movs	r0, #1
 800ddfc:	f7fe fe30 	bl	800ca60 <memp_free>
}
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	08019cfc 	.word	0x08019cfc
 800de0c:	08019d2c 	.word	0x08019d2c
 800de10:	08019d40 	.word	0x08019d40

0800de14 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	7d1b      	ldrb	r3, [r3, #20]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d105      	bne.n	800de30 <tcp_free_listen+0x1c>
 800de24:	4b06      	ldr	r3, [pc, #24]	; (800de40 <tcp_free_listen+0x2c>)
 800de26:	22df      	movs	r2, #223	; 0xdf
 800de28:	4906      	ldr	r1, [pc, #24]	; (800de44 <tcp_free_listen+0x30>)
 800de2a:	4807      	ldr	r0, [pc, #28]	; (800de48 <tcp_free_listen+0x34>)
 800de2c:	f009 f9e6 	bl	80171fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800de30:	6879      	ldr	r1, [r7, #4]
 800de32:	2002      	movs	r0, #2
 800de34:	f7fe fe14 	bl	800ca60 <memp_free>
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	08019cfc 	.word	0x08019cfc
 800de44:	08019d68 	.word	0x08019d68
 800de48:	08019d40 	.word	0x08019d40

0800de4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800de50:	f001 f89a 	bl	800ef88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800de54:	4b07      	ldr	r3, [pc, #28]	; (800de74 <tcp_tmr+0x28>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	3301      	adds	r3, #1
 800de5a:	b2da      	uxtb	r2, r3
 800de5c:	4b05      	ldr	r3, [pc, #20]	; (800de74 <tcp_tmr+0x28>)
 800de5e:	701a      	strb	r2, [r3, #0]
 800de60:	4b04      	ldr	r3, [pc, #16]	; (800de74 <tcp_tmr+0x28>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f003 0301 	and.w	r3, r3, #1
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800de6c:	f000 fd4c 	bl	800e908 <tcp_slowtmr>
  }
}
 800de70:	bf00      	nop
 800de72:	bd80      	pop	{r7, pc}
 800de74:	2001a6c9 	.word	0x2001a6c9

0800de78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d105      	bne.n	800de94 <tcp_remove_listener+0x1c>
 800de88:	4b0d      	ldr	r3, [pc, #52]	; (800dec0 <tcp_remove_listener+0x48>)
 800de8a:	22ff      	movs	r2, #255	; 0xff
 800de8c:	490d      	ldr	r1, [pc, #52]	; (800dec4 <tcp_remove_listener+0x4c>)
 800de8e:	480e      	ldr	r0, [pc, #56]	; (800dec8 <tcp_remove_listener+0x50>)
 800de90:	f009 f9b4 	bl	80171fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	60fb      	str	r3, [r7, #12]
 800de98:	e00a      	b.n	800deb0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d102      	bne.n	800deaa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d1f1      	bne.n	800de9a <tcp_remove_listener+0x22>
    }
  }
}
 800deb6:	bf00      	nop
 800deb8:	bf00      	nop
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	08019cfc 	.word	0x08019cfc
 800dec4:	08019d84 	.word	0x08019d84
 800dec8:	08019d40 	.word	0x08019d40

0800decc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d106      	bne.n	800dee8 <tcp_listen_closed+0x1c>
 800deda:	4b14      	ldr	r3, [pc, #80]	; (800df2c <tcp_listen_closed+0x60>)
 800dedc:	f240 1211 	movw	r2, #273	; 0x111
 800dee0:	4913      	ldr	r1, [pc, #76]	; (800df30 <tcp_listen_closed+0x64>)
 800dee2:	4814      	ldr	r0, [pc, #80]	; (800df34 <tcp_listen_closed+0x68>)
 800dee4:	f009 f98a 	bl	80171fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d006      	beq.n	800defe <tcp_listen_closed+0x32>
 800def0:	4b0e      	ldr	r3, [pc, #56]	; (800df2c <tcp_listen_closed+0x60>)
 800def2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800def6:	4910      	ldr	r1, [pc, #64]	; (800df38 <tcp_listen_closed+0x6c>)
 800def8:	480e      	ldr	r0, [pc, #56]	; (800df34 <tcp_listen_closed+0x68>)
 800defa:	f009 f97f 	bl	80171fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800defe:	2301      	movs	r3, #1
 800df00:	60fb      	str	r3, [r7, #12]
 800df02:	e00b      	b.n	800df1c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800df04:	4a0d      	ldr	r2, [pc, #52]	; (800df3c <tcp_listen_closed+0x70>)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff ffb1 	bl	800de78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	3301      	adds	r3, #1
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b03      	cmp	r3, #3
 800df20:	d9f0      	bls.n	800df04 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800df22:	bf00      	nop
 800df24:	bf00      	nop
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	08019cfc 	.word	0x08019cfc
 800df30:	08019dac 	.word	0x08019dac
 800df34:	08019d40 	.word	0x08019d40
 800df38:	08019db8 	.word	0x08019db8
 800df3c:	0801d238 	.word	0x0801d238

0800df40 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b088      	sub	sp, #32
 800df44:	af04      	add	r7, sp, #16
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d106      	bne.n	800df60 <tcp_close_shutdown+0x20>
 800df52:	4b63      	ldr	r3, [pc, #396]	; (800e0e0 <tcp_close_shutdown+0x1a0>)
 800df54:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800df58:	4962      	ldr	r1, [pc, #392]	; (800e0e4 <tcp_close_shutdown+0x1a4>)
 800df5a:	4863      	ldr	r0, [pc, #396]	; (800e0e8 <tcp_close_shutdown+0x1a8>)
 800df5c:	f009 f94e 	bl	80171fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d067      	beq.n	800e036 <tcp_close_shutdown+0xf6>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	7d1b      	ldrb	r3, [r3, #20]
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	d003      	beq.n	800df76 <tcp_close_shutdown+0x36>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7d1b      	ldrb	r3, [r3, #20]
 800df72:	2b07      	cmp	r3, #7
 800df74:	d15f      	bne.n	800e036 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d105      	bne.n	800df8a <tcp_close_shutdown+0x4a>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df82:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800df86:	4293      	cmp	r3, r2
 800df88:	d055      	beq.n	800e036 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	8b5b      	ldrh	r3, [r3, #26]
 800df8e:	f003 0310 	and.w	r3, r3, #16
 800df92:	2b00      	cmp	r3, #0
 800df94:	d106      	bne.n	800dfa4 <tcp_close_shutdown+0x64>
 800df96:	4b52      	ldr	r3, [pc, #328]	; (800e0e0 <tcp_close_shutdown+0x1a0>)
 800df98:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800df9c:	4953      	ldr	r1, [pc, #332]	; (800e0ec <tcp_close_shutdown+0x1ac>)
 800df9e:	4852      	ldr	r0, [pc, #328]	; (800e0e8 <tcp_close_shutdown+0x1a8>)
 800dfa0:	f009 f92c 	bl	80171fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dfac:	687d      	ldr	r5, [r7, #4]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	8ad2      	ldrh	r2, [r2, #22]
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	8b09      	ldrh	r1, [r1, #24]
 800dfba:	9102      	str	r1, [sp, #8]
 800dfbc:	9201      	str	r2, [sp, #4]
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	462b      	mov	r3, r5
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4601      	mov	r1, r0
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f005 fdae 	bl	8013b28 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f001 fb89 	bl	800f6e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dfd2:	4b47      	ldr	r3, [pc, #284]	; (800e0f0 <tcp_close_shutdown+0x1b0>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d105      	bne.n	800dfe8 <tcp_close_shutdown+0xa8>
 800dfdc:	4b44      	ldr	r3, [pc, #272]	; (800e0f0 <tcp_close_shutdown+0x1b0>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	4a43      	ldr	r2, [pc, #268]	; (800e0f0 <tcp_close_shutdown+0x1b0>)
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	e013      	b.n	800e010 <tcp_close_shutdown+0xd0>
 800dfe8:	4b41      	ldr	r3, [pc, #260]	; (800e0f0 <tcp_close_shutdown+0x1b0>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e00c      	b.n	800e00a <tcp_close_shutdown+0xca>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d104      	bne.n	800e004 <tcp_close_shutdown+0xc4>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	68da      	ldr	r2, [r3, #12]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	e005      	b.n	800e010 <tcp_close_shutdown+0xd0>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1ef      	bne.n	800dff0 <tcp_close_shutdown+0xb0>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	60da      	str	r2, [r3, #12]
 800e016:	4b37      	ldr	r3, [pc, #220]	; (800e0f4 <tcp_close_shutdown+0x1b4>)
 800e018:	2201      	movs	r2, #1
 800e01a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e01c:	4b36      	ldr	r3, [pc, #216]	; (800e0f8 <tcp_close_shutdown+0x1b8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	429a      	cmp	r2, r3
 800e024:	d102      	bne.n	800e02c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e026:	f004 f821 	bl	801206c <tcp_trigger_input_pcb_close>
 800e02a:	e002      	b.n	800e032 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff fed5 	bl	800dddc <tcp_free>
      }
      return ERR_OK;
 800e032:	2300      	movs	r3, #0
 800e034:	e050      	b.n	800e0d8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	7d1b      	ldrb	r3, [r3, #20]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	d03b      	beq.n	800e0b6 <tcp_close_shutdown+0x176>
 800e03e:	2b02      	cmp	r3, #2
 800e040:	dc44      	bgt.n	800e0cc <tcp_close_shutdown+0x18c>
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <tcp_close_shutdown+0x10c>
 800e046:	2b01      	cmp	r3, #1
 800e048:	d02a      	beq.n	800e0a0 <tcp_close_shutdown+0x160>
 800e04a:	e03f      	b.n	800e0cc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	8adb      	ldrh	r3, [r3, #22]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d021      	beq.n	800e098 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e054:	4b29      	ldr	r3, [pc, #164]	; (800e0fc <tcp_close_shutdown+0x1bc>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d105      	bne.n	800e06a <tcp_close_shutdown+0x12a>
 800e05e:	4b27      	ldr	r3, [pc, #156]	; (800e0fc <tcp_close_shutdown+0x1bc>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	4a25      	ldr	r2, [pc, #148]	; (800e0fc <tcp_close_shutdown+0x1bc>)
 800e066:	6013      	str	r3, [r2, #0]
 800e068:	e013      	b.n	800e092 <tcp_close_shutdown+0x152>
 800e06a:	4b24      	ldr	r3, [pc, #144]	; (800e0fc <tcp_close_shutdown+0x1bc>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	60bb      	str	r3, [r7, #8]
 800e070:	e00c      	b.n	800e08c <tcp_close_shutdown+0x14c>
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d104      	bne.n	800e086 <tcp_close_shutdown+0x146>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	68da      	ldr	r2, [r3, #12]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	60da      	str	r2, [r3, #12]
 800e084:	e005      	b.n	800e092 <tcp_close_shutdown+0x152>
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	60bb      	str	r3, [r7, #8]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1ef      	bne.n	800e072 <tcp_close_shutdown+0x132>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff fe9f 	bl	800dddc <tcp_free>
      break;
 800e09e:	e01a      	b.n	800e0d6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff ff13 	bl	800decc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	4815      	ldr	r0, [pc, #84]	; (800e100 <tcp_close_shutdown+0x1c0>)
 800e0aa:	f001 fb6b 	bl	800f784 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff feb0 	bl	800de14 <tcp_free_listen>
      break;
 800e0b4:	e00f      	b.n	800e0d6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e0b6:	6879      	ldr	r1, [r7, #4]
 800e0b8:	480d      	ldr	r0, [pc, #52]	; (800e0f0 <tcp_close_shutdown+0x1b0>)
 800e0ba:	f001 fb63 	bl	800f784 <tcp_pcb_remove>
 800e0be:	4b0d      	ldr	r3, [pc, #52]	; (800e0f4 <tcp_close_shutdown+0x1b4>)
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff fe89 	bl	800dddc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e0ca:	e004      	b.n	800e0d6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f819 	bl	800e104 <tcp_close_shutdown_fin>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	e000      	b.n	800e0d8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bdb0      	pop	{r4, r5, r7, pc}
 800e0e0:	08019cfc 	.word	0x08019cfc
 800e0e4:	08019dd0 	.word	0x08019dd0
 800e0e8:	08019d40 	.word	0x08019d40
 800e0ec:	08019df0 	.word	0x08019df0
 800e0f0:	2001a6c0 	.word	0x2001a6c0
 800e0f4:	2001a6c8 	.word	0x2001a6c8
 800e0f8:	2001a700 	.word	0x2001a700
 800e0fc:	2001a6b8 	.word	0x2001a6b8
 800e100:	2001a6bc 	.word	0x2001a6bc

0800e104 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d106      	bne.n	800e120 <tcp_close_shutdown_fin+0x1c>
 800e112:	4b2e      	ldr	r3, [pc, #184]	; (800e1cc <tcp_close_shutdown_fin+0xc8>)
 800e114:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e118:	492d      	ldr	r1, [pc, #180]	; (800e1d0 <tcp_close_shutdown_fin+0xcc>)
 800e11a:	482e      	ldr	r0, [pc, #184]	; (800e1d4 <tcp_close_shutdown_fin+0xd0>)
 800e11c:	f009 f86e 	bl	80171fc <iprintf>

  switch (pcb->state) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7d1b      	ldrb	r3, [r3, #20]
 800e124:	2b07      	cmp	r3, #7
 800e126:	d020      	beq.n	800e16a <tcp_close_shutdown_fin+0x66>
 800e128:	2b07      	cmp	r3, #7
 800e12a:	dc2b      	bgt.n	800e184 <tcp_close_shutdown_fin+0x80>
 800e12c:	2b03      	cmp	r3, #3
 800e12e:	d002      	beq.n	800e136 <tcp_close_shutdown_fin+0x32>
 800e130:	2b04      	cmp	r3, #4
 800e132:	d00d      	beq.n	800e150 <tcp_close_shutdown_fin+0x4c>
 800e134:	e026      	b.n	800e184 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f004 fe04 	bl	8012d44 <tcp_send_fin>
 800e13c:	4603      	mov	r3, r0
 800e13e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d11f      	bne.n	800e188 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2205      	movs	r2, #5
 800e14c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e14e:	e01b      	b.n	800e188 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f004 fdf7 	bl	8012d44 <tcp_send_fin>
 800e156:	4603      	mov	r3, r0
 800e158:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d114      	bne.n	800e18c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2205      	movs	r2, #5
 800e166:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e168:	e010      	b.n	800e18c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f004 fdea 	bl	8012d44 <tcp_send_fin>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d109      	bne.n	800e190 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2209      	movs	r2, #9
 800e180:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e182:	e005      	b.n	800e190 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	e01c      	b.n	800e1c2 <tcp_close_shutdown_fin+0xbe>
      break;
 800e188:	bf00      	nop
 800e18a:	e002      	b.n	800e192 <tcp_close_shutdown_fin+0x8e>
      break;
 800e18c:	bf00      	nop
 800e18e:	e000      	b.n	800e192 <tcp_close_shutdown_fin+0x8e>
      break;
 800e190:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d103      	bne.n	800e1a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f004 ff10 	bl	8012fc0 <tcp_output>
 800e1a0:	e00d      	b.n	800e1be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1aa:	d108      	bne.n	800e1be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	8b5b      	ldrh	r3, [r3, #26]
 800e1b0:	f043 0308 	orr.w	r3, r3, #8
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e001      	b.n	800e1c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08019cfc 	.word	0x08019cfc
 800e1d0:	08019dac 	.word	0x08019dac
 800e1d4:	08019d40 	.word	0x08019d40

0800e1d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d109      	bne.n	800e1fa <tcp_close+0x22>
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	; (800e224 <tcp_close+0x4c>)
 800e1e8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e1ec:	490e      	ldr	r1, [pc, #56]	; (800e228 <tcp_close+0x50>)
 800e1ee:	480f      	ldr	r0, [pc, #60]	; (800e22c <tcp_close+0x54>)
 800e1f0:	f009 f804 	bl	80171fc <iprintf>
 800e1f4:	f06f 030f 	mvn.w	r3, #15
 800e1f8:	e00f      	b.n	800e21a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	7d1b      	ldrb	r3, [r3, #20]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d006      	beq.n	800e210 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	8b5b      	ldrh	r3, [r3, #26]
 800e206:	f043 0310 	orr.w	r3, r3, #16
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e210:	2101      	movs	r1, #1
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fe94 	bl	800df40 <tcp_close_shutdown>
 800e218:	4603      	mov	r3, r0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	08019cfc 	.word	0x08019cfc
 800e228:	08019e0c 	.word	0x08019e0c
 800e22c:	08019d40 	.word	0x08019d40

0800e230 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08e      	sub	sp, #56	; 0x38
 800e234:	af04      	add	r7, sp, #16
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d107      	bne.n	800e250 <tcp_abandon+0x20>
 800e240:	4b52      	ldr	r3, [pc, #328]	; (800e38c <tcp_abandon+0x15c>)
 800e242:	f240 223d 	movw	r2, #573	; 0x23d
 800e246:	4952      	ldr	r1, [pc, #328]	; (800e390 <tcp_abandon+0x160>)
 800e248:	4852      	ldr	r0, [pc, #328]	; (800e394 <tcp_abandon+0x164>)
 800e24a:	f008 ffd7 	bl	80171fc <iprintf>
 800e24e:	e099      	b.n	800e384 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	7d1b      	ldrb	r3, [r3, #20]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d106      	bne.n	800e266 <tcp_abandon+0x36>
 800e258:	4b4c      	ldr	r3, [pc, #304]	; (800e38c <tcp_abandon+0x15c>)
 800e25a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e25e:	494e      	ldr	r1, [pc, #312]	; (800e398 <tcp_abandon+0x168>)
 800e260:	484c      	ldr	r0, [pc, #304]	; (800e394 <tcp_abandon+0x164>)
 800e262:	f008 ffcb 	bl	80171fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7d1b      	ldrb	r3, [r3, #20]
 800e26a:	2b0a      	cmp	r3, #10
 800e26c:	d107      	bne.n	800e27e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	484a      	ldr	r0, [pc, #296]	; (800e39c <tcp_abandon+0x16c>)
 800e272:	f001 fa87 	bl	800f784 <tcp_pcb_remove>
    tcp_free(pcb);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f7ff fdb0 	bl	800dddc <tcp_free>
 800e27c:	e082      	b.n	800e384 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e282:	2300      	movs	r3, #0
 800e284:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e28a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e290:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e298:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	7d1b      	ldrb	r3, [r3, #20]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d126      	bne.n	800e2f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	8adb      	ldrh	r3, [r3, #22]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d02e      	beq.n	800e30e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e2b0:	4b3b      	ldr	r3, [pc, #236]	; (800e3a0 <tcp_abandon+0x170>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d105      	bne.n	800e2c6 <tcp_abandon+0x96>
 800e2ba:	4b39      	ldr	r3, [pc, #228]	; (800e3a0 <tcp_abandon+0x170>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	4a37      	ldr	r2, [pc, #220]	; (800e3a0 <tcp_abandon+0x170>)
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	e013      	b.n	800e2ee <tcp_abandon+0xbe>
 800e2c6:	4b36      	ldr	r3, [pc, #216]	; (800e3a0 <tcp_abandon+0x170>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	61fb      	str	r3, [r7, #28]
 800e2cc:	e00c      	b.n	800e2e8 <tcp_abandon+0xb8>
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d104      	bne.n	800e2e2 <tcp_abandon+0xb2>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	68da      	ldr	r2, [r3, #12]
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	60da      	str	r2, [r3, #12]
 800e2e0:	e005      	b.n	800e2ee <tcp_abandon+0xbe>
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	61fb      	str	r3, [r7, #28]
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1ef      	bne.n	800e2ce <tcp_abandon+0x9e>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	60da      	str	r2, [r3, #12]
 800e2f4:	e00b      	b.n	800e30e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	8adb      	ldrh	r3, [r3, #22]
 800e2fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	4828      	ldr	r0, [pc, #160]	; (800e3a4 <tcp_abandon+0x174>)
 800e304:	f001 fa3e 	bl	800f784 <tcp_pcb_remove>
 800e308:	4b27      	ldr	r3, [pc, #156]	; (800e3a8 <tcp_abandon+0x178>)
 800e30a:	2201      	movs	r2, #1
 800e30c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e312:	2b00      	cmp	r3, #0
 800e314:	d004      	beq.n	800e320 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 ff16 	bl	800f14c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e324:	2b00      	cmp	r3, #0
 800e326:	d004      	beq.n	800e332 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e32c:	4618      	mov	r0, r3
 800e32e:	f000 ff0d 	bl	800f14c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e336:	2b00      	cmp	r3, #0
 800e338:	d004      	beq.n	800e344 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 ff04 	bl	800f14c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00e      	beq.n	800e368 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3304      	adds	r3, #4
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	8b12      	ldrh	r2, [r2, #24]
 800e354:	9202      	str	r2, [sp, #8]
 800e356:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e358:	9201      	str	r2, [sp, #4]
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	460b      	mov	r3, r1
 800e35e:	697a      	ldr	r2, [r7, #20]
 800e360:	69b9      	ldr	r1, [r7, #24]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f005 fbe0 	bl	8013b28 <tcp_rst>
    }
    last_state = pcb->state;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	7d1b      	ldrb	r3, [r3, #20]
 800e36c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff fd34 	bl	800dddc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d004      	beq.n	800e384 <tcp_abandon+0x154>
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	f06f 010c 	mvn.w	r1, #12
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	4798      	blx	r3
  }
}
 800e384:	3728      	adds	r7, #40	; 0x28
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	08019cfc 	.word	0x08019cfc
 800e390:	08019e40 	.word	0x08019e40
 800e394:	08019d40 	.word	0x08019d40
 800e398:	08019e5c 	.word	0x08019e5c
 800e39c:	2001a6c4 	.word	0x2001a6c4
 800e3a0:	2001a6b8 	.word	0x2001a6b8
 800e3a4:	2001a6c0 	.word	0x2001a6c0
 800e3a8:	2001a6c8 	.word	0x2001a6c8

0800e3ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff ff3a 	bl	800e230 <tcp_abandon>
}
 800e3bc:	bf00      	nop
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e3d2:	2304      	movs	r3, #4
 800e3d4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d101      	bne.n	800e3e0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e3dc:	4b3e      	ldr	r3, [pc, #248]	; (800e4d8 <tcp_bind+0x114>)
 800e3de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d109      	bne.n	800e3fa <tcp_bind+0x36>
 800e3e6:	4b3d      	ldr	r3, [pc, #244]	; (800e4dc <tcp_bind+0x118>)
 800e3e8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e3ec:	493c      	ldr	r1, [pc, #240]	; (800e4e0 <tcp_bind+0x11c>)
 800e3ee:	483d      	ldr	r0, [pc, #244]	; (800e4e4 <tcp_bind+0x120>)
 800e3f0:	f008 ff04 	bl	80171fc <iprintf>
 800e3f4:	f06f 030f 	mvn.w	r3, #15
 800e3f8:	e06a      	b.n	800e4d0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	7d1b      	ldrb	r3, [r3, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d009      	beq.n	800e416 <tcp_bind+0x52>
 800e402:	4b36      	ldr	r3, [pc, #216]	; (800e4dc <tcp_bind+0x118>)
 800e404:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e408:	4937      	ldr	r1, [pc, #220]	; (800e4e8 <tcp_bind+0x124>)
 800e40a:	4836      	ldr	r0, [pc, #216]	; (800e4e4 <tcp_bind+0x120>)
 800e40c:	f008 fef6 	bl	80171fc <iprintf>
 800e410:	f06f 0305 	mvn.w	r3, #5
 800e414:	e05c      	b.n	800e4d0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e416:	88fb      	ldrh	r3, [r7, #6]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d109      	bne.n	800e430 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e41c:	f000 f916 	bl	800e64c <tcp_new_port>
 800e420:	4603      	mov	r3, r0
 800e422:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e424:	88fb      	ldrh	r3, [r7, #6]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d135      	bne.n	800e496 <tcp_bind+0xd2>
      return ERR_BUF;
 800e42a:	f06f 0301 	mvn.w	r3, #1
 800e42e:	e04f      	b.n	800e4d0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e430:	2300      	movs	r3, #0
 800e432:	61fb      	str	r3, [r7, #28]
 800e434:	e02b      	b.n	800e48e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e436:	4a2d      	ldr	r2, [pc, #180]	; (800e4ec <tcp_bind+0x128>)
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	61bb      	str	r3, [r7, #24]
 800e442:	e01e      	b.n	800e482 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	8adb      	ldrh	r3, [r3, #22]
 800e448:	88fa      	ldrh	r2, [r7, #6]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d116      	bne.n	800e47c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e44e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e450:	2b00      	cmp	r3, #0
 800e452:	d010      	beq.n	800e476 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00c      	beq.n	800e476 <tcp_bind+0xb2>
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d009      	beq.n	800e476 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d005      	beq.n	800e476 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	681a      	ldr	r2, [r3, #0]
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e472:	429a      	cmp	r2, r3
 800e474:	d102      	bne.n	800e47c <tcp_bind+0xb8>
              return ERR_USE;
 800e476:	f06f 0307 	mvn.w	r3, #7
 800e47a:	e029      	b.n	800e4d0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e47c:	69bb      	ldr	r3, [r7, #24]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	61bb      	str	r3, [r7, #24]
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1dd      	bne.n	800e444 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	3301      	adds	r3, #1
 800e48c:	61fb      	str	r3, [r7, #28]
 800e48e:	69fa      	ldr	r2, [r7, #28]
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	429a      	cmp	r2, r3
 800e494:	dbcf      	blt.n	800e436 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00c      	beq.n	800e4b6 <tcp_bind+0xf2>
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d008      	beq.n	800e4b6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d002      	beq.n	800e4b0 <tcp_bind+0xec>
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	e000      	b.n	800e4b2 <tcp_bind+0xee>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	68fa      	ldr	r2, [r7, #12]
 800e4b4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	88fa      	ldrh	r2, [r7, #6]
 800e4ba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e4bc:	4b0c      	ldr	r3, [pc, #48]	; (800e4f0 <tcp_bind+0x12c>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	60da      	str	r2, [r3, #12]
 800e4c4:	4a0a      	ldr	r2, [pc, #40]	; (800e4f0 <tcp_bind+0x12c>)
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6013      	str	r3, [r2, #0]
 800e4ca:	f005 fcef 	bl	8013eac <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	0801d260 	.word	0x0801d260
 800e4dc:	08019cfc 	.word	0x08019cfc
 800e4e0:	08019e90 	.word	0x08019e90
 800e4e4:	08019d40 	.word	0x08019d40
 800e4e8:	08019ea8 	.word	0x08019ea8
 800e4ec:	0801d238 	.word	0x0801d238
 800e4f0:	2001a6b8 	.word	0x2001a6b8

0800e4f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <tcp_update_rcv_ann_wnd+0x1c>
 800e502:	4b25      	ldr	r3, [pc, #148]	; (800e598 <tcp_update_rcv_ann_wnd+0xa4>)
 800e504:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e508:	4924      	ldr	r1, [pc, #144]	; (800e59c <tcp_update_rcv_ann_wnd+0xa8>)
 800e50a:	4825      	ldr	r0, [pc, #148]	; (800e5a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e50c:	f008 fe76 	bl	80171fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e518:	4413      	add	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e524:	f640 3168 	movw	r1, #2920	; 0xb68
 800e528:	428a      	cmp	r2, r1
 800e52a:	bf28      	it	cs
 800e52c:	460a      	movcs	r2, r1
 800e52e:	b292      	uxth	r2, r2
 800e530:	4413      	add	r3, r2
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	2b00      	cmp	r3, #0
 800e538:	db08      	blt.n	800e54c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e546:	68fa      	ldr	r2, [r7, #12]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	e020      	b.n	800e58e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e554:	1ad3      	subs	r3, r2, r3
 800e556:	2b00      	cmp	r3, #0
 800e558:	dd03      	ble.n	800e562 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e560:	e014      	b.n	800e58c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e574:	d306      	bcc.n	800e584 <tcp_update_rcv_ann_wnd+0x90>
 800e576:	4b08      	ldr	r3, [pc, #32]	; (800e598 <tcp_update_rcv_ann_wnd+0xa4>)
 800e578:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e57c:	4909      	ldr	r1, [pc, #36]	; (800e5a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e57e:	4808      	ldr	r0, [pc, #32]	; (800e5a0 <tcp_update_rcv_ann_wnd+0xac>)
 800e580:	f008 fe3c 	bl	80171fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	b29a      	uxth	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e58c:	2300      	movs	r3, #0
  }
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	08019cfc 	.word	0x08019cfc
 800e59c:	08019f58 	.word	0x08019f58
 800e5a0:	08019d40 	.word	0x08019d40
 800e5a4:	08019f7c 	.word	0x08019f7c

0800e5a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d107      	bne.n	800e5ca <tcp_recved+0x22>
 800e5ba:	4b20      	ldr	r3, [pc, #128]	; (800e63c <tcp_recved+0x94>)
 800e5bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e5c0:	491f      	ldr	r1, [pc, #124]	; (800e640 <tcp_recved+0x98>)
 800e5c2:	4820      	ldr	r0, [pc, #128]	; (800e644 <tcp_recved+0x9c>)
 800e5c4:	f008 fe1a 	bl	80171fc <iprintf>
 800e5c8:	e034      	b.n	800e634 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	7d1b      	ldrb	r3, [r3, #20]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d106      	bne.n	800e5e0 <tcp_recved+0x38>
 800e5d2:	4b1a      	ldr	r3, [pc, #104]	; (800e63c <tcp_recved+0x94>)
 800e5d4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e5d8:	491b      	ldr	r1, [pc, #108]	; (800e648 <tcp_recved+0xa0>)
 800e5da:	481a      	ldr	r0, [pc, #104]	; (800e644 <tcp_recved+0x9c>)
 800e5dc:	f008 fe0e 	bl	80171fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e5e4:	887b      	ldrh	r3, [r7, #2]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e5ea:	89fb      	ldrh	r3, [r7, #14]
 800e5ec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d804      	bhi.n	800e5fe <tcp_recved+0x56>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5f8:	89fa      	ldrh	r2, [r7, #14]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d204      	bcs.n	800e608 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e604:	851a      	strh	r2, [r3, #40]	; 0x28
 800e606:	e002      	b.n	800e60e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	89fa      	ldrh	r2, [r7, #14]
 800e60c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff ff70 	bl	800e4f4 <tcp_update_rcv_ann_wnd>
 800e614:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d909      	bls.n	800e634 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	8b5b      	ldrh	r3, [r3, #26]
 800e624:	f043 0302 	orr.w	r3, r3, #2
 800e628:	b29a      	uxth	r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f004 fcc6 	bl	8012fc0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	08019cfc 	.word	0x08019cfc
 800e640:	08019f98 	.word	0x08019f98
 800e644:	08019d40 	.word	0x08019d40
 800e648:	08019fb0 	.word	0x08019fb0

0800e64c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e652:	2300      	movs	r3, #0
 800e654:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e656:	4b1e      	ldr	r3, [pc, #120]	; (800e6d0 <tcp_new_port+0x84>)
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	3301      	adds	r3, #1
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	4b1c      	ldr	r3, [pc, #112]	; (800e6d0 <tcp_new_port+0x84>)
 800e660:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e662:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <tcp_new_port+0x84>)
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d103      	bne.n	800e676 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e66e:	4b18      	ldr	r3, [pc, #96]	; (800e6d0 <tcp_new_port+0x84>)
 800e670:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e674:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e676:	2300      	movs	r3, #0
 800e678:	71fb      	strb	r3, [r7, #7]
 800e67a:	e01e      	b.n	800e6ba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	4a15      	ldr	r2, [pc, #84]	; (800e6d4 <tcp_new_port+0x88>)
 800e680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	603b      	str	r3, [r7, #0]
 800e688:	e011      	b.n	800e6ae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	8ada      	ldrh	r2, [r3, #22]
 800e68e:	4b10      	ldr	r3, [pc, #64]	; (800e6d0 <tcp_new_port+0x84>)
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	429a      	cmp	r2, r3
 800e694:	d108      	bne.n	800e6a8 <tcp_new_port+0x5c>
        n++;
 800e696:	88bb      	ldrh	r3, [r7, #4]
 800e698:	3301      	adds	r3, #1
 800e69a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e69c:	88bb      	ldrh	r3, [r7, #4]
 800e69e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6a2:	d3d8      	bcc.n	800e656 <tcp_new_port+0xa>
          return 0;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	e00d      	b.n	800e6c4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	603b      	str	r3, [r7, #0]
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1ea      	bne.n	800e68a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e6b4:	79fb      	ldrb	r3, [r7, #7]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	71fb      	strb	r3, [r7, #7]
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	2b03      	cmp	r3, #3
 800e6be:	d9dd      	bls.n	800e67c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e6c0:	4b03      	ldr	r3, [pc, #12]	; (800e6d0 <tcp_new_port+0x84>)
 800e6c2:	881b      	ldrh	r3, [r3, #0]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	20000034 	.word	0x20000034
 800e6d4:	0801d238 	.word	0x0801d238

0800e6d8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08a      	sub	sp, #40	; 0x28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d109      	bne.n	800e706 <tcp_connect+0x2e>
 800e6f2:	4b7d      	ldr	r3, [pc, #500]	; (800e8e8 <tcp_connect+0x210>)
 800e6f4:	f240 4235 	movw	r2, #1077	; 0x435
 800e6f8:	497c      	ldr	r1, [pc, #496]	; (800e8ec <tcp_connect+0x214>)
 800e6fa:	487d      	ldr	r0, [pc, #500]	; (800e8f0 <tcp_connect+0x218>)
 800e6fc:	f008 fd7e 	bl	80171fc <iprintf>
 800e700:	f06f 030f 	mvn.w	r3, #15
 800e704:	e0ec      	b.n	800e8e0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d109      	bne.n	800e720 <tcp_connect+0x48>
 800e70c:	4b76      	ldr	r3, [pc, #472]	; (800e8e8 <tcp_connect+0x210>)
 800e70e:	f240 4236 	movw	r2, #1078	; 0x436
 800e712:	4978      	ldr	r1, [pc, #480]	; (800e8f4 <tcp_connect+0x21c>)
 800e714:	4876      	ldr	r0, [pc, #472]	; (800e8f0 <tcp_connect+0x218>)
 800e716:	f008 fd71 	bl	80171fc <iprintf>
 800e71a:	f06f 030f 	mvn.w	r3, #15
 800e71e:	e0df      	b.n	800e8e0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	7d1b      	ldrb	r3, [r3, #20]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d009      	beq.n	800e73c <tcp_connect+0x64>
 800e728:	4b6f      	ldr	r3, [pc, #444]	; (800e8e8 <tcp_connect+0x210>)
 800e72a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e72e:	4972      	ldr	r1, [pc, #456]	; (800e8f8 <tcp_connect+0x220>)
 800e730:	486f      	ldr	r0, [pc, #444]	; (800e8f0 <tcp_connect+0x218>)
 800e732:	f008 fd63 	bl	80171fc <iprintf>
 800e736:	f06f 0309 	mvn.w	r3, #9
 800e73a:	e0d1      	b.n	800e8e0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d002      	beq.n	800e748 <tcp_connect+0x70>
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	e000      	b.n	800e74a <tcp_connect+0x72>
 800e748:	2300      	movs	r3, #0
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	88fa      	ldrh	r2, [r7, #6]
 800e752:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	7a1b      	ldrb	r3, [r3, #8]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d006      	beq.n	800e76a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	7a1b      	ldrb	r3, [r3, #8]
 800e760:	4618      	mov	r0, r3
 800e762:	f7fe fc95 	bl	800d090 <netif_get_by_index>
 800e766:	6278      	str	r0, [r7, #36]	; 0x24
 800e768:	e005      	b.n	800e776 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3304      	adds	r3, #4
 800e76e:	4618      	mov	r0, r3
 800e770:	f006 ffe6 	bl	8015740 <ip4_route>
 800e774:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d102      	bne.n	800e782 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e77c:	f06f 0303 	mvn.w	r3, #3
 800e780:	e0ae      	b.n	800e8e0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d003      	beq.n	800e790 <tcp_connect+0xb8>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d111      	bne.n	800e7b4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e792:	2b00      	cmp	r3, #0
 800e794:	d002      	beq.n	800e79c <tcp_connect+0xc4>
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	3304      	adds	r3, #4
 800e79a:	e000      	b.n	800e79e <tcp_connect+0xc6>
 800e79c:	2300      	movs	r3, #0
 800e79e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d102      	bne.n	800e7ac <tcp_connect+0xd4>
      return ERR_RTE;
 800e7a6:	f06f 0303 	mvn.w	r3, #3
 800e7aa:	e099      	b.n	800e8e0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	8adb      	ldrh	r3, [r3, #22]
 800e7b8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	8adb      	ldrh	r3, [r3, #22]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d10c      	bne.n	800e7dc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e7c2:	f7ff ff43 	bl	800e64c <tcp_new_port>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	8adb      	ldrh	r3, [r3, #22]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d102      	bne.n	800e7dc <tcp_connect+0x104>
      return ERR_BUF;
 800e7d6:	f06f 0301 	mvn.w	r3, #1
 800e7da:	e081      	b.n	800e8e0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f001 f865 	bl	800f8ac <tcp_next_iss>
 800e7e2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	1e5a      	subs	r2, r3, #1
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	1e5a      	subs	r2, r3, #1
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	1e5a      	subs	r2, r3, #1
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e80e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800e826:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e830:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3304      	adds	r3, #4
 800e83a:	461a      	mov	r2, r3
 800e83c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e83e:	f001 f85b 	bl	800f8f8 <tcp_eff_send_mss_netif>
 800e842:	4603      	mov	r3, r0
 800e844:	461a      	mov	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e85a:	2102      	movs	r1, #2
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f004 fac1 	bl	8012de4 <tcp_enqueue_flags>
 800e862:	4603      	mov	r3, r0
 800e864:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e866:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d136      	bne.n	800e8dc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2202      	movs	r2, #2
 800e872:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e874:	8b7b      	ldrh	r3, [r7, #26]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d021      	beq.n	800e8be <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e87a:	4b20      	ldr	r3, [pc, #128]	; (800e8fc <tcp_connect+0x224>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	429a      	cmp	r2, r3
 800e882:	d105      	bne.n	800e890 <tcp_connect+0x1b8>
 800e884:	4b1d      	ldr	r3, [pc, #116]	; (800e8fc <tcp_connect+0x224>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	68db      	ldr	r3, [r3, #12]
 800e88a:	4a1c      	ldr	r2, [pc, #112]	; (800e8fc <tcp_connect+0x224>)
 800e88c:	6013      	str	r3, [r2, #0]
 800e88e:	e013      	b.n	800e8b8 <tcp_connect+0x1e0>
 800e890:	4b1a      	ldr	r3, [pc, #104]	; (800e8fc <tcp_connect+0x224>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	623b      	str	r3, [r7, #32]
 800e896:	e00c      	b.n	800e8b2 <tcp_connect+0x1da>
 800e898:	6a3b      	ldr	r3, [r7, #32]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d104      	bne.n	800e8ac <tcp_connect+0x1d4>
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	68da      	ldr	r2, [r3, #12]
 800e8a6:	6a3b      	ldr	r3, [r7, #32]
 800e8a8:	60da      	str	r2, [r3, #12]
 800e8aa:	e005      	b.n	800e8b8 <tcp_connect+0x1e0>
 800e8ac:	6a3b      	ldr	r3, [r7, #32]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	623b      	str	r3, [r7, #32]
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1ef      	bne.n	800e898 <tcp_connect+0x1c0>
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e8be:	4b10      	ldr	r3, [pc, #64]	; (800e900 <tcp_connect+0x228>)
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	60da      	str	r2, [r3, #12]
 800e8c6:	4a0e      	ldr	r2, [pc, #56]	; (800e900 <tcp_connect+0x228>)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	6013      	str	r3, [r2, #0]
 800e8cc:	f005 faee 	bl	8013eac <tcp_timer_needed>
 800e8d0:	4b0c      	ldr	r3, [pc, #48]	; (800e904 <tcp_connect+0x22c>)
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f004 fb72 	bl	8012fc0 <tcp_output>
  }
  return ret;
 800e8dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3728      	adds	r7, #40	; 0x28
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	08019cfc 	.word	0x08019cfc
 800e8ec:	08019fd8 	.word	0x08019fd8
 800e8f0:	08019d40 	.word	0x08019d40
 800e8f4:	08019ff4 	.word	0x08019ff4
 800e8f8:	0801a010 	.word	0x0801a010
 800e8fc:	2001a6b8 	.word	0x2001a6b8
 800e900:	2001a6c0 	.word	0x2001a6c0
 800e904:	2001a6c8 	.word	0x2001a6c8

0800e908 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e908:	b5b0      	push	{r4, r5, r7, lr}
 800e90a:	b090      	sub	sp, #64	; 0x40
 800e90c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e914:	4b94      	ldr	r3, [pc, #592]	; (800eb68 <tcp_slowtmr+0x260>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3301      	adds	r3, #1
 800e91a:	4a93      	ldr	r2, [pc, #588]	; (800eb68 <tcp_slowtmr+0x260>)
 800e91c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e91e:	4b93      	ldr	r3, [pc, #588]	; (800eb6c <tcp_slowtmr+0x264>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	3301      	adds	r3, #1
 800e924:	b2da      	uxtb	r2, r3
 800e926:	4b91      	ldr	r3, [pc, #580]	; (800eb6c <tcp_slowtmr+0x264>)
 800e928:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e92e:	4b90      	ldr	r3, [pc, #576]	; (800eb70 <tcp_slowtmr+0x268>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e934:	e29f      	b.n	800ee76 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	7d1b      	ldrb	r3, [r3, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d106      	bne.n	800e94c <tcp_slowtmr+0x44>
 800e93e:	4b8d      	ldr	r3, [pc, #564]	; (800eb74 <tcp_slowtmr+0x26c>)
 800e940:	f240 42be 	movw	r2, #1214	; 0x4be
 800e944:	498c      	ldr	r1, [pc, #560]	; (800eb78 <tcp_slowtmr+0x270>)
 800e946:	488d      	ldr	r0, [pc, #564]	; (800eb7c <tcp_slowtmr+0x274>)
 800e948:	f008 fc58 	bl	80171fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	7d1b      	ldrb	r3, [r3, #20]
 800e950:	2b01      	cmp	r3, #1
 800e952:	d106      	bne.n	800e962 <tcp_slowtmr+0x5a>
 800e954:	4b87      	ldr	r3, [pc, #540]	; (800eb74 <tcp_slowtmr+0x26c>)
 800e956:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e95a:	4989      	ldr	r1, [pc, #548]	; (800eb80 <tcp_slowtmr+0x278>)
 800e95c:	4887      	ldr	r0, [pc, #540]	; (800eb7c <tcp_slowtmr+0x274>)
 800e95e:	f008 fc4d 	bl	80171fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	7d1b      	ldrb	r3, [r3, #20]
 800e966:	2b0a      	cmp	r3, #10
 800e968:	d106      	bne.n	800e978 <tcp_slowtmr+0x70>
 800e96a:	4b82      	ldr	r3, [pc, #520]	; (800eb74 <tcp_slowtmr+0x26c>)
 800e96c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e970:	4984      	ldr	r1, [pc, #528]	; (800eb84 <tcp_slowtmr+0x27c>)
 800e972:	4882      	ldr	r0, [pc, #520]	; (800eb7c <tcp_slowtmr+0x274>)
 800e974:	f008 fc42 	bl	80171fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	7f9a      	ldrb	r2, [r3, #30]
 800e97c:	4b7b      	ldr	r3, [pc, #492]	; (800eb6c <tcp_slowtmr+0x264>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	429a      	cmp	r2, r3
 800e982:	d105      	bne.n	800e990 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e98e:	e272      	b.n	800ee76 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e990:	4b76      	ldr	r3, [pc, #472]	; (800eb6c <tcp_slowtmr+0x264>)
 800e992:	781a      	ldrb	r2, [r3, #0]
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a6:	7d1b      	ldrb	r3, [r3, #20]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d10a      	bne.n	800e9c2 <tcp_slowtmr+0xba>
 800e9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9b2:	2b05      	cmp	r3, #5
 800e9b4:	d905      	bls.n	800e9c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e9b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9c0:	e11e      	b.n	800ec00 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e9c8:	2b0b      	cmp	r3, #11
 800e9ca:	d905      	bls.n	800e9d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9d6:	e113      	b.n	800ec00 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d075      	beq.n	800eace <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d006      	beq.n	800e9f8 <tcp_slowtmr+0xf0>
 800e9ea:	4b62      	ldr	r3, [pc, #392]	; (800eb74 <tcp_slowtmr+0x26c>)
 800e9ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e9f0:	4965      	ldr	r1, [pc, #404]	; (800eb88 <tcp_slowtmr+0x280>)
 800e9f2:	4862      	ldr	r0, [pc, #392]	; (800eb7c <tcp_slowtmr+0x274>)
 800e9f4:	f008 fc02 	bl	80171fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d106      	bne.n	800ea0e <tcp_slowtmr+0x106>
 800ea00:	4b5c      	ldr	r3, [pc, #368]	; (800eb74 <tcp_slowtmr+0x26c>)
 800ea02:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ea06:	4961      	ldr	r1, [pc, #388]	; (800eb8c <tcp_slowtmr+0x284>)
 800ea08:	485c      	ldr	r0, [pc, #368]	; (800eb7c <tcp_slowtmr+0x274>)
 800ea0a:	f008 fbf7 	bl	80171fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ea0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ea14:	2b0b      	cmp	r3, #11
 800ea16:	d905      	bls.n	800ea24 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ea18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ea22:	e0ed      	b.n	800ec00 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	4a58      	ldr	r2, [pc, #352]	; (800eb90 <tcp_slowtmr+0x288>)
 800ea2e:	5cd3      	ldrb	r3, [r2, r3]
 800ea30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ea32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ea38:	7c7a      	ldrb	r2, [r7, #17]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d907      	bls.n	800ea4e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ea44:	3301      	adds	r3, #1
 800ea46:	b2da      	uxtb	r2, r3
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ea54:	7c7a      	ldrb	r2, [r7, #17]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	f200 80d2 	bhi.w	800ec00 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ea60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d108      	bne.n	800ea7c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ea6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea6c:	f005 f950 	bl	8013d10 <tcp_zero_window_probe>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d014      	beq.n	800eaa0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ea76:	2300      	movs	r3, #0
 800ea78:	623b      	str	r3, [r7, #32]
 800ea7a:	e011      	b.n	800eaa0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea82:	4619      	mov	r1, r3
 800ea84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea86:	f004 f815 	bl	8012ab4 <tcp_split_unsent_seg>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d107      	bne.n	800eaa0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ea90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea92:	f004 fa95 	bl	8012fc0 <tcp_output>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d101      	bne.n	800eaa0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800eaa0:	6a3b      	ldr	r3, [r7, #32]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f000 80ac 	beq.w	800ec00 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eab6:	2b06      	cmp	r3, #6
 800eab8:	f200 80a2 	bhi.w	800ec00 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eac2:	3301      	adds	r3, #1
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800eacc:	e098      	b.n	800ec00 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	db0f      	blt.n	800eaf8 <tcp_slowtmr+0x1f0>
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eade:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d008      	beq.n	800eaf8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800eae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	3301      	adds	r3, #1
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	b21a      	sxth	r2, r3
 800eaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800eaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800eafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800eb04:	429a      	cmp	r2, r3
 800eb06:	db7b      	blt.n	800ec00 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800eb08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb0a:	f004 fd4b 	bl	80135a4 <tcp_rexmit_rto_prepare>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <tcp_slowtmr+0x21c>
 800eb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d171      	bne.n	800ec00 <tcp_slowtmr+0x2f8>
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d06d      	beq.n	800ec00 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	7d1b      	ldrb	r3, [r3, #20]
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	d03a      	beq.n	800eba2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb32:	2b0c      	cmp	r3, #12
 800eb34:	bf28      	it	cs
 800eb36:	230c      	movcs	r3, #12
 800eb38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800eb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eb40:	10db      	asrs	r3, r3, #3
 800eb42:	b21b      	sxth	r3, r3
 800eb44:	461a      	mov	r2, r3
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eb4c:	4413      	add	r3, r2
 800eb4e:	7efa      	ldrb	r2, [r7, #27]
 800eb50:	4910      	ldr	r1, [pc, #64]	; (800eb94 <tcp_slowtmr+0x28c>)
 800eb52:	5c8a      	ldrb	r2, [r1, r2]
 800eb54:	4093      	lsls	r3, r2
 800eb56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	dc1a      	bgt.n	800eb98 <tcp_slowtmr+0x290>
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	b21a      	sxth	r2, r3
 800eb66:	e019      	b.n	800eb9c <tcp_slowtmr+0x294>
 800eb68:	2001a6b4 	.word	0x2001a6b4
 800eb6c:	2001a6ca 	.word	0x2001a6ca
 800eb70:	2001a6c0 	.word	0x2001a6c0
 800eb74:	08019cfc 	.word	0x08019cfc
 800eb78:	0801a040 	.word	0x0801a040
 800eb7c:	08019d40 	.word	0x08019d40
 800eb80:	0801a06c 	.word	0x0801a06c
 800eb84:	0801a098 	.word	0x0801a098
 800eb88:	0801a0c8 	.word	0x0801a0c8
 800eb8c:	0801a0fc 	.word	0x0801a0fc
 800eb90:	0801d230 	.word	0x0801d230
 800eb94:	0801d220 	.word	0x0801d220
 800eb98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800eb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	2200      	movs	r2, #0
 800eba6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	bf28      	it	cs
 800ebb8:	4613      	movcs	r3, r2
 800ebba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ebbc:	8a7b      	ldrh	r3, [r7, #18]
 800ebbe:	085b      	lsrs	r3, r3, #1
 800ebc0:	b29a      	uxth	r2, r3
 800ebc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ebc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ebce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebd2:	005b      	lsls	r3, r3, #1
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d206      	bcs.n	800ebe8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ebda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebde:	005b      	lsls	r3, r3, #1
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ebf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ebfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebfc:	f004 fd42 	bl	8013684 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	7d1b      	ldrb	r3, [r3, #20]
 800ec04:	2b06      	cmp	r3, #6
 800ec06:	d111      	bne.n	800ec2c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0a:	8b5b      	ldrh	r3, [r3, #26]
 800ec0c:	f003 0310 	and.w	r3, r3, #16
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00b      	beq.n	800ec2c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec14:	4b9d      	ldr	r3, [pc, #628]	; (800ee8c <tcp_slowtmr+0x584>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	2b28      	cmp	r3, #40	; 0x28
 800ec20:	d904      	bls.n	800ec2c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ec22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec26:	3301      	adds	r3, #1
 800ec28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	7a5b      	ldrb	r3, [r3, #9]
 800ec30:	f003 0308 	and.w	r3, r3, #8
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d04c      	beq.n	800ecd2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ec3c:	2b04      	cmp	r3, #4
 800ec3e:	d003      	beq.n	800ec48 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ec40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec42:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ec44:	2b07      	cmp	r3, #7
 800ec46:	d144      	bne.n	800ecd2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec48:	4b90      	ldr	r3, [pc, #576]	; (800ee8c <tcp_slowtmr+0x584>)
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	6a1b      	ldr	r3, [r3, #32]
 800ec50:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ec52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ec58:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ec5c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ec60:	498b      	ldr	r1, [pc, #556]	; (800ee90 <tcp_slowtmr+0x588>)
 800ec62:	fba1 1303 	umull	r1, r3, r1, r3
 800ec66:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d90a      	bls.n	800ec82 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ec6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec70:	3301      	adds	r3, #1
 800ec72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ec76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ec80:	e027      	b.n	800ecd2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec82:	4b82      	ldr	r3, [pc, #520]	; (800ee8c <tcp_slowtmr+0x584>)
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ec8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ec92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ec98:	4618      	mov	r0, r3
 800ec9a:	4b7e      	ldr	r3, [pc, #504]	; (800ee94 <tcp_slowtmr+0x58c>)
 800ec9c:	fb00 f303 	mul.w	r3, r0, r3
 800eca0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eca2:	497b      	ldr	r1, [pc, #492]	; (800ee90 <tcp_slowtmr+0x588>)
 800eca4:	fba1 1303 	umull	r1, r3, r1, r3
 800eca8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d911      	bls.n	800ecd2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ecae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecb0:	f004 ffee 	bl	8013c90 <tcp_keepalive>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ecba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d107      	bne.n	800ecd2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ecc8:	3301      	adds	r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d011      	beq.n	800ecfe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ecda:	4b6c      	ldr	r3, [pc, #432]	; (800ee8c <tcp_slowtmr+0x584>)
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	1ad2      	subs	r2, r2, r3
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ecea:	4619      	mov	r1, r3
 800ecec:	460b      	mov	r3, r1
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	440b      	add	r3, r1
 800ecf2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d302      	bcc.n	800ecfe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ecf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecfa:	f000 fea7 	bl	800fa4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	7d1b      	ldrb	r3, [r3, #20]
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d10b      	bne.n	800ed1e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed06:	4b61      	ldr	r3, [pc, #388]	; (800ee8c <tcp_slowtmr+0x584>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b28      	cmp	r3, #40	; 0x28
 800ed12:	d904      	bls.n	800ed1e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ed14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed18:	3301      	adds	r3, #1
 800ed1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ed1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed20:	7d1b      	ldrb	r3, [r3, #20]
 800ed22:	2b09      	cmp	r3, #9
 800ed24:	d10b      	bne.n	800ed3e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ed26:	4b59      	ldr	r3, [pc, #356]	; (800ee8c <tcp_slowtmr+0x584>)
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2c:	6a1b      	ldr	r3, [r3, #32]
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	2bf0      	cmp	r3, #240	; 0xf0
 800ed32:	d904      	bls.n	800ed3e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed38:	3301      	adds	r3, #1
 800ed3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ed3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d060      	beq.n	800ee08 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed4c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ed4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed50:	f000 fcc8 	bl	800f6e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d010      	beq.n	800ed7c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ed5a:	4b4f      	ldr	r3, [pc, #316]	; (800ee98 <tcp_slowtmr+0x590>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d106      	bne.n	800ed72 <tcp_slowtmr+0x46a>
 800ed64:	4b4d      	ldr	r3, [pc, #308]	; (800ee9c <tcp_slowtmr+0x594>)
 800ed66:	f240 526d 	movw	r2, #1389	; 0x56d
 800ed6a:	494d      	ldr	r1, [pc, #308]	; (800eea0 <tcp_slowtmr+0x598>)
 800ed6c:	484d      	ldr	r0, [pc, #308]	; (800eea4 <tcp_slowtmr+0x59c>)
 800ed6e:	f008 fa45 	bl	80171fc <iprintf>
        prev->next = pcb->next;
 800ed72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed74:	68da      	ldr	r2, [r3, #12]
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	60da      	str	r2, [r3, #12]
 800ed7a:	e00f      	b.n	800ed9c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ed7c:	4b46      	ldr	r3, [pc, #280]	; (800ee98 <tcp_slowtmr+0x590>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d006      	beq.n	800ed94 <tcp_slowtmr+0x48c>
 800ed86:	4b45      	ldr	r3, [pc, #276]	; (800ee9c <tcp_slowtmr+0x594>)
 800ed88:	f240 5271 	movw	r2, #1393	; 0x571
 800ed8c:	4946      	ldr	r1, [pc, #280]	; (800eea8 <tcp_slowtmr+0x5a0>)
 800ed8e:	4845      	ldr	r0, [pc, #276]	; (800eea4 <tcp_slowtmr+0x59c>)
 800ed90:	f008 fa34 	bl	80171fc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	4a3f      	ldr	r2, [pc, #252]	; (800ee98 <tcp_slowtmr+0x590>)
 800ed9a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ed9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d013      	beq.n	800edcc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edaa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800edac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	3304      	adds	r3, #4
 800edb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edb4:	8ad2      	ldrh	r2, [r2, #22]
 800edb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edb8:	8b09      	ldrh	r1, [r1, #24]
 800edba:	9102      	str	r1, [sp, #8]
 800edbc:	9201      	str	r2, [sp, #4]
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	462b      	mov	r3, r5
 800edc2:	4622      	mov	r2, r4
 800edc4:	4601      	mov	r1, r0
 800edc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edc8:	f004 feae 	bl	8013b28 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800edcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800edd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd4:	7d1b      	ldrb	r3, [r3, #20]
 800edd6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ede2:	6838      	ldr	r0, [r7, #0]
 800ede4:	f7fe fffa 	bl	800dddc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ede8:	4b30      	ldr	r3, [pc, #192]	; (800eeac <tcp_slowtmr+0x5a4>)
 800edea:	2200      	movs	r2, #0
 800edec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d004      	beq.n	800edfe <tcp_slowtmr+0x4f6>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f06f 010c 	mvn.w	r1, #12
 800edfa:	68b8      	ldr	r0, [r7, #8]
 800edfc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800edfe:	4b2b      	ldr	r3, [pc, #172]	; (800eeac <tcp_slowtmr+0x5a4>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d037      	beq.n	800ee76 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ee06:	e590      	b.n	800e92a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ee08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee14:	7f1b      	ldrb	r3, [r3, #28]
 800ee16:	3301      	adds	r3, #1
 800ee18:	b2da      	uxtb	r2, r3
 800ee1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	7f1a      	ldrb	r2, [r3, #28]
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	7f5b      	ldrb	r3, [r3, #29]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d325      	bcc.n	800ee76 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ee2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ee30:	4b1e      	ldr	r3, [pc, #120]	; (800eeac <tcp_slowtmr+0x5a4>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00b      	beq.n	800ee58 <tcp_slowtmr+0x550>
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee48:	6912      	ldr	r2, [r2, #16]
 800ee4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	4798      	blx	r3
 800ee50:	4603      	mov	r3, r0
 800ee52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ee56:	e002      	b.n	800ee5e <tcp_slowtmr+0x556>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ee5e:	4b13      	ldr	r3, [pc, #76]	; (800eeac <tcp_slowtmr+0x5a4>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d000      	beq.n	800ee68 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ee66:	e560      	b.n	800e92a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ee68:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d102      	bne.n	800ee76 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ee70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee72:	f004 f8a5 	bl	8012fc0 <tcp_output>
  while (pcb != NULL) {
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f47f ad5c 	bne.w	800e936 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ee82:	4b0b      	ldr	r3, [pc, #44]	; (800eeb0 <tcp_slowtmr+0x5a8>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ee88:	e067      	b.n	800ef5a <tcp_slowtmr+0x652>
 800ee8a:	bf00      	nop
 800ee8c:	2001a6b4 	.word	0x2001a6b4
 800ee90:	10624dd3 	.word	0x10624dd3
 800ee94:	000124f8 	.word	0x000124f8
 800ee98:	2001a6c0 	.word	0x2001a6c0
 800ee9c:	08019cfc 	.word	0x08019cfc
 800eea0:	0801a134 	.word	0x0801a134
 800eea4:	08019d40 	.word	0x08019d40
 800eea8:	0801a160 	.word	0x0801a160
 800eeac:	2001a6c8 	.word	0x2001a6c8
 800eeb0:	2001a6c4 	.word	0x2001a6c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
 800eeb8:	2b0a      	cmp	r3, #10
 800eeba:	d006      	beq.n	800eeca <tcp_slowtmr+0x5c2>
 800eebc:	4b2b      	ldr	r3, [pc, #172]	; (800ef6c <tcp_slowtmr+0x664>)
 800eebe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800eec2:	492b      	ldr	r1, [pc, #172]	; (800ef70 <tcp_slowtmr+0x668>)
 800eec4:	482b      	ldr	r0, [pc, #172]	; (800ef74 <tcp_slowtmr+0x66c>)
 800eec6:	f008 f999 	bl	80171fc <iprintf>
    pcb_remove = 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eed0:	4b29      	ldr	r3, [pc, #164]	; (800ef78 <tcp_slowtmr+0x670>)
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	6a1b      	ldr	r3, [r3, #32]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	2bf0      	cmp	r3, #240	; 0xf0
 800eedc:	d904      	bls.n	800eee8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800eede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eee2:	3301      	adds	r3, #1
 800eee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d02f      	beq.n	800ef50 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800eef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eef2:	f000 fbf7 	bl	800f6e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d010      	beq.n	800ef1e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800eefc:	4b1f      	ldr	r3, [pc, #124]	; (800ef7c <tcp_slowtmr+0x674>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d106      	bne.n	800ef14 <tcp_slowtmr+0x60c>
 800ef06:	4b19      	ldr	r3, [pc, #100]	; (800ef6c <tcp_slowtmr+0x664>)
 800ef08:	f240 52af 	movw	r2, #1455	; 0x5af
 800ef0c:	491c      	ldr	r1, [pc, #112]	; (800ef80 <tcp_slowtmr+0x678>)
 800ef0e:	4819      	ldr	r0, [pc, #100]	; (800ef74 <tcp_slowtmr+0x66c>)
 800ef10:	f008 f974 	bl	80171fc <iprintf>
        prev->next = pcb->next;
 800ef14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef16:	68da      	ldr	r2, [r3, #12]
 800ef18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1a:	60da      	str	r2, [r3, #12]
 800ef1c:	e00f      	b.n	800ef3e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ef1e:	4b17      	ldr	r3, [pc, #92]	; (800ef7c <tcp_slowtmr+0x674>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d006      	beq.n	800ef36 <tcp_slowtmr+0x62e>
 800ef28:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <tcp_slowtmr+0x664>)
 800ef2a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ef2e:	4915      	ldr	r1, [pc, #84]	; (800ef84 <tcp_slowtmr+0x67c>)
 800ef30:	4810      	ldr	r0, [pc, #64]	; (800ef74 <tcp_slowtmr+0x66c>)
 800ef32:	f008 f963 	bl	80171fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	4a10      	ldr	r2, [pc, #64]	; (800ef7c <tcp_slowtmr+0x674>)
 800ef3c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ef42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ef48:	69f8      	ldr	r0, [r7, #28]
 800ef4a:	f7fe ff47 	bl	800dddc <tcp_free>
 800ef4e:	e004      	b.n	800ef5a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ef5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1a9      	bne.n	800eeb4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ef60:	bf00      	nop
 800ef62:	bf00      	nop
 800ef64:	3730      	adds	r7, #48	; 0x30
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bdb0      	pop	{r4, r5, r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	08019cfc 	.word	0x08019cfc
 800ef70:	0801a18c 	.word	0x0801a18c
 800ef74:	08019d40 	.word	0x08019d40
 800ef78:	2001a6b4 	.word	0x2001a6b4
 800ef7c:	2001a6c4 	.word	0x2001a6c4
 800ef80:	0801a1bc 	.word	0x0801a1bc
 800ef84:	0801a1e4 	.word	0x0801a1e4

0800ef88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ef8e:	4b2d      	ldr	r3, [pc, #180]	; (800f044 <tcp_fasttmr+0xbc>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	3301      	adds	r3, #1
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	4b2b      	ldr	r3, [pc, #172]	; (800f044 <tcp_fasttmr+0xbc>)
 800ef98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ef9a:	4b2b      	ldr	r3, [pc, #172]	; (800f048 <tcp_fasttmr+0xc0>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800efa0:	e048      	b.n	800f034 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	7f9a      	ldrb	r2, [r3, #30]
 800efa6:	4b27      	ldr	r3, [pc, #156]	; (800f044 <tcp_fasttmr+0xbc>)
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d03f      	beq.n	800f02e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800efae:	4b25      	ldr	r3, [pc, #148]	; (800f044 <tcp_fasttmr+0xbc>)
 800efb0:	781a      	ldrb	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	8b5b      	ldrh	r3, [r3, #26]
 800efba:	f003 0301 	and.w	r3, r3, #1
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d010      	beq.n	800efe4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	8b5b      	ldrh	r3, [r3, #26]
 800efc6:	f043 0302 	orr.w	r3, r3, #2
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f003 fff5 	bl	8012fc0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	8b5b      	ldrh	r3, [r3, #26]
 800efda:	f023 0303 	bic.w	r3, r3, #3
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	8b5b      	ldrh	r3, [r3, #26]
 800efe8:	f003 0308 	and.w	r3, r3, #8
 800efec:	2b00      	cmp	r3, #0
 800efee:	d009      	beq.n	800f004 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	8b5b      	ldrh	r3, [r3, #26]
 800eff4:	f023 0308 	bic.w	r3, r3, #8
 800eff8:	b29a      	uxth	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f7ff f880 	bl	800e104 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00a      	beq.n	800f028 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f012:	4b0e      	ldr	r3, [pc, #56]	; (800f04c <tcp_fasttmr+0xc4>)
 800f014:	2200      	movs	r2, #0
 800f016:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f819 	bl	800f050 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f01e:	4b0b      	ldr	r3, [pc, #44]	; (800f04c <tcp_fasttmr+0xc4>)
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d000      	beq.n	800f028 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f026:	e7b8      	b.n	800ef9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	607b      	str	r3, [r7, #4]
 800f02c:	e002      	b.n	800f034 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d1b3      	bne.n	800efa2 <tcp_fasttmr+0x1a>
    }
  }
}
 800f03a:	bf00      	nop
 800f03c:	bf00      	nop
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	2001a6ca 	.word	0x2001a6ca
 800f048:	2001a6c0 	.word	0x2001a6c0
 800f04c:	2001a6c8 	.word	0x2001a6c8

0800f050 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f050:	b590      	push	{r4, r7, lr}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d109      	bne.n	800f072 <tcp_process_refused_data+0x22>
 800f05e:	4b38      	ldr	r3, [pc, #224]	; (800f140 <tcp_process_refused_data+0xf0>)
 800f060:	f240 6209 	movw	r2, #1545	; 0x609
 800f064:	4937      	ldr	r1, [pc, #220]	; (800f144 <tcp_process_refused_data+0xf4>)
 800f066:	4838      	ldr	r0, [pc, #224]	; (800f148 <tcp_process_refused_data+0xf8>)
 800f068:	f008 f8c8 	bl	80171fc <iprintf>
 800f06c:	f06f 030f 	mvn.w	r3, #15
 800f070:	e061      	b.n	800f136 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f076:	7b5b      	ldrb	r3, [r3, #13]
 800f078:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f07e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00b      	beq.n	800f0a8 <tcp_process_refused_data+0x58>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6918      	ldr	r0, [r3, #16]
 800f09a:	2300      	movs	r3, #0
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	6879      	ldr	r1, [r7, #4]
 800f0a0:	47a0      	blx	r4
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73fb      	strb	r3, [r7, #15]
 800f0a6:	e007      	b.n	800f0b8 <tcp_process_refused_data+0x68>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	68ba      	ldr	r2, [r7, #8]
 800f0ac:	6879      	ldr	r1, [r7, #4]
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	f000 f8aa 	bl	800f208 <tcp_recv_null>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f0b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d12b      	bne.n	800f118 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	f003 0320 	and.w	r3, r3, #32
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d034      	beq.n	800f134 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0ce:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d005      	beq.n	800f0e2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0da:	3301      	adds	r3, #1
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <tcp_process_refused_data+0xb4>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6918      	ldr	r0, [r3, #16]
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	47a0      	blx	r4
 800f0fe:	4603      	mov	r3, r0
 800f100:	73fb      	strb	r3, [r7, #15]
 800f102:	e001      	b.n	800f108 <tcp_process_refused_data+0xb8>
 800f104:	2300      	movs	r3, #0
 800f106:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f10c:	f113 0f0d 	cmn.w	r3, #13
 800f110:	d110      	bne.n	800f134 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800f112:	f06f 030c 	mvn.w	r3, #12
 800f116:	e00e      	b.n	800f136 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800f118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f11c:	f113 0f0d 	cmn.w	r3, #13
 800f120:	d102      	bne.n	800f128 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f122:	f06f 030c 	mvn.w	r3, #12
 800f126:	e006      	b.n	800f136 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f12e:	f06f 0304 	mvn.w	r3, #4
 800f132:	e000      	b.n	800f136 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3714      	adds	r7, #20
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd90      	pop	{r4, r7, pc}
 800f13e:	bf00      	nop
 800f140:	08019cfc 	.word	0x08019cfc
 800f144:	0801a20c 	.word	0x0801a20c
 800f148:	08019d40 	.word	0x08019d40

0800f14c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f154:	e007      	b.n	800f166 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 f80a 	bl	800f176 <tcp_seg_free>
    seg = next;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1f4      	bne.n	800f156 <tcp_segs_free+0xa>
  }
}
 800f16c:	bf00      	nop
 800f16e:	bf00      	nop
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00c      	beq.n	800f19e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d004      	beq.n	800f196 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	4618      	mov	r0, r3
 800f192:	f7fe fb13 	bl	800d7bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f196:	6879      	ldr	r1, [r7, #4]
 800f198:	2003      	movs	r0, #3
 800f19a:	f7fd fc61 	bl	800ca60 <memp_free>
  }
}
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
	...

0800f1a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b084      	sub	sp, #16
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d106      	bne.n	800f1c4 <tcp_seg_copy+0x1c>
 800f1b6:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <tcp_seg_copy+0x54>)
 800f1b8:	f240 6282 	movw	r2, #1666	; 0x682
 800f1bc:	4910      	ldr	r1, [pc, #64]	; (800f200 <tcp_seg_copy+0x58>)
 800f1be:	4811      	ldr	r0, [pc, #68]	; (800f204 <tcp_seg_copy+0x5c>)
 800f1c0:	f008 f81c 	bl	80171fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f1c4:	f240 6284 	movw	r2, #1668	; 0x684
 800f1c8:	490c      	ldr	r1, [pc, #48]	; (800f1fc <tcp_seg_copy+0x54>)
 800f1ca:	2003      	movs	r0, #3
 800f1cc:	f7fd fbca 	bl	800c964 <memp_malloc_fn>
 800f1d0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d101      	bne.n	800f1dc <tcp_seg_copy+0x34>
    return NULL;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	e00a      	b.n	800f1f2 <tcp_seg_copy+0x4a>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f1dc:	2210      	movs	r2, #16
 800f1de:	6879      	ldr	r1, [r7, #4]
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f007 fefb 	bl	8016fdc <memcpy>
  pbuf_ref(cseg->p);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe fb8c 	bl	800d908 <pbuf_ref>
  return cseg;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	08019cfc 	.word	0x08019cfc
 800f200:	0801a250 	.word	0x0801a250
 800f204:	08019d40 	.word	0x08019d40

0800f208 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]
 800f214:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d109      	bne.n	800f230 <tcp_recv_null+0x28>
 800f21c:	4b12      	ldr	r3, [pc, #72]	; (800f268 <tcp_recv_null+0x60>)
 800f21e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f222:	4912      	ldr	r1, [pc, #72]	; (800f26c <tcp_recv_null+0x64>)
 800f224:	4812      	ldr	r0, [pc, #72]	; (800f270 <tcp_recv_null+0x68>)
 800f226:	f007 ffe9 	bl	80171fc <iprintf>
 800f22a:	f06f 030f 	mvn.w	r3, #15
 800f22e:	e016      	b.n	800f25e <tcp_recv_null+0x56>

  if (p != NULL) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d009      	beq.n	800f24a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	891b      	ldrh	r3, [r3, #8]
 800f23a:	4619      	mov	r1, r3
 800f23c:	68b8      	ldr	r0, [r7, #8]
 800f23e:	f7ff f9b3 	bl	800e5a8 <tcp_recved>
    pbuf_free(p);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7fe faba 	bl	800d7bc <pbuf_free>
 800f248:	e008      	b.n	800f25c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f24a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d104      	bne.n	800f25c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f252:	68b8      	ldr	r0, [r7, #8]
 800f254:	f7fe ffc0 	bl	800e1d8 <tcp_close>
 800f258:	4603      	mov	r3, r0
 800f25a:	e000      	b.n	800f25e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	08019cfc 	.word	0x08019cfc
 800f26c:	0801a26c 	.word	0x0801a26c
 800f270:	08019d40 	.word	0x08019d40

0800f274 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f282:	2b00      	cmp	r3, #0
 800f284:	db01      	blt.n	800f28a <tcp_kill_prio+0x16>
 800f286:	79fb      	ldrb	r3, [r7, #7]
 800f288:	e000      	b.n	800f28c <tcp_kill_prio+0x18>
 800f28a:	237f      	movs	r3, #127	; 0x7f
 800f28c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f28e:	7afb      	ldrb	r3, [r7, #11]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d034      	beq.n	800f2fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f294:	7afb      	ldrb	r3, [r7, #11]
 800f296:	3b01      	subs	r3, #1
 800f298:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f29a:	2300      	movs	r3, #0
 800f29c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2a2:	4b19      	ldr	r3, [pc, #100]	; (800f308 <tcp_kill_prio+0x94>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	617b      	str	r3, [r7, #20]
 800f2a8:	e01f      	b.n	800f2ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	7d5b      	ldrb	r3, [r3, #21]
 800f2ae:	7afa      	ldrb	r2, [r7, #11]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d80c      	bhi.n	800f2ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f2b8:	7afa      	ldrb	r2, [r7, #11]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d112      	bne.n	800f2e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f2be:	4b13      	ldr	r3, [pc, #76]	; (800f30c <tcp_kill_prio+0x98>)
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d80a      	bhi.n	800f2e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f2ce:	4b0f      	ldr	r3, [pc, #60]	; (800f30c <tcp_kill_prio+0x98>)
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	7d5b      	ldrb	r3, [r3, #21]
 800f2e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	617b      	str	r3, [r7, #20]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1dc      	bne.n	800f2aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d004      	beq.n	800f300 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f2f6:	6938      	ldr	r0, [r7, #16]
 800f2f8:	f7ff f858 	bl	800e3ac <tcp_abort>
 800f2fc:	e000      	b.n	800f300 <tcp_kill_prio+0x8c>
    return;
 800f2fe:	bf00      	nop
  }
}
 800f300:	3718      	adds	r7, #24
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2001a6c0 	.word	0x2001a6c0
 800f30c:	2001a6b4 	.word	0x2001a6b4

0800f310 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b086      	sub	sp, #24
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	2b08      	cmp	r3, #8
 800f31e:	d009      	beq.n	800f334 <tcp_kill_state+0x24>
 800f320:	79fb      	ldrb	r3, [r7, #7]
 800f322:	2b09      	cmp	r3, #9
 800f324:	d006      	beq.n	800f334 <tcp_kill_state+0x24>
 800f326:	4b1a      	ldr	r3, [pc, #104]	; (800f390 <tcp_kill_state+0x80>)
 800f328:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f32c:	4919      	ldr	r1, [pc, #100]	; (800f394 <tcp_kill_state+0x84>)
 800f32e:	481a      	ldr	r0, [pc, #104]	; (800f398 <tcp_kill_state+0x88>)
 800f330:	f007 ff64 	bl	80171fc <iprintf>

  inactivity = 0;
 800f334:	2300      	movs	r3, #0
 800f336:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f338:	2300      	movs	r3, #0
 800f33a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f33c:	4b17      	ldr	r3, [pc, #92]	; (800f39c <tcp_kill_state+0x8c>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	617b      	str	r3, [r7, #20]
 800f342:	e017      	b.n	800f374 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	7d1b      	ldrb	r3, [r3, #20]
 800f348:	79fa      	ldrb	r2, [r7, #7]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d10f      	bne.n	800f36e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f34e:	4b14      	ldr	r3, [pc, #80]	; (800f3a0 <tcp_kill_state+0x90>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d807      	bhi.n	800f36e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f35e:	4b10      	ldr	r3, [pc, #64]	; (800f3a0 <tcp_kill_state+0x90>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	68db      	ldr	r3, [r3, #12]
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1e4      	bne.n	800f344 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d003      	beq.n	800f388 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f380:	2100      	movs	r1, #0
 800f382:	6938      	ldr	r0, [r7, #16]
 800f384:	f7fe ff54 	bl	800e230 <tcp_abandon>
  }
}
 800f388:	bf00      	nop
 800f38a:	3718      	adds	r7, #24
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	08019cfc 	.word	0x08019cfc
 800f394:	0801a288 	.word	0x0801a288
 800f398:	08019d40 	.word	0x08019d40
 800f39c:	2001a6c0 	.word	0x2001a6c0
 800f3a0:	2001a6b4 	.word	0x2001a6b4

0800f3a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3b2:	4b12      	ldr	r3, [pc, #72]	; (800f3fc <tcp_kill_timewait+0x58>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	e012      	b.n	800f3e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f3ba:	4b11      	ldr	r3, [pc, #68]	; (800f400 <tcp_kill_timewait+0x5c>)
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6a1b      	ldr	r3, [r3, #32]
 800f3c2:	1ad3      	subs	r3, r2, r3
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d807      	bhi.n	800f3da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f3ca:	4b0d      	ldr	r3, [pc, #52]	; (800f400 <tcp_kill_timewait+0x5c>)
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1e9      	bne.n	800f3ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d002      	beq.n	800f3f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f3ec:	68b8      	ldr	r0, [r7, #8]
 800f3ee:	f7fe ffdd 	bl	800e3ac <tcp_abort>
  }
}
 800f3f2:	bf00      	nop
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	2001a6c4 	.word	0x2001a6c4
 800f400:	2001a6b4 	.word	0x2001a6b4

0800f404 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f40a:	4b10      	ldr	r3, [pc, #64]	; (800f44c <tcp_handle_closepend+0x48>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f410:	e014      	b.n	800f43c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	8b5b      	ldrh	r3, [r3, #26]
 800f41c:	f003 0308 	and.w	r3, r3, #8
 800f420:	2b00      	cmp	r3, #0
 800f422:	d009      	beq.n	800f438 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	8b5b      	ldrh	r3, [r3, #26]
 800f428:	f023 0308 	bic.w	r3, r3, #8
 800f42c:	b29a      	uxth	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7fe fe66 	bl	800e104 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1e7      	bne.n	800f412 <tcp_handle_closepend+0xe>
  }
}
 800f442:	bf00      	nop
 800f444:	bf00      	nop
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	2001a6c0 	.word	0x2001a6c0

0800f450 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	4603      	mov	r3, r0
 800f458:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f45a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800f45e:	4941      	ldr	r1, [pc, #260]	; (800f564 <tcp_alloc+0x114>)
 800f460:	2001      	movs	r0, #1
 800f462:	f7fd fa7f 	bl	800c964 <memp_malloc_fn>
 800f466:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d132      	bne.n	800f4d4 <tcp_alloc+0x84>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f46e:	f7ff ffc9 	bl	800f404 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f472:	f7ff ff97 	bl	800f3a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f476:	f240 7239 	movw	r2, #1849	; 0x739
 800f47a:	493a      	ldr	r1, [pc, #232]	; (800f564 <tcp_alloc+0x114>)
 800f47c:	2001      	movs	r0, #1
 800f47e:	f7fd fa71 	bl	800c964 <memp_malloc_fn>
 800f482:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d124      	bne.n	800f4d4 <tcp_alloc+0x84>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f48a:	2009      	movs	r0, #9
 800f48c:	f7ff ff40 	bl	800f310 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f490:	f240 723f 	movw	r2, #1855	; 0x73f
 800f494:	4933      	ldr	r1, [pc, #204]	; (800f564 <tcp_alloc+0x114>)
 800f496:	2001      	movs	r0, #1
 800f498:	f7fd fa64 	bl	800c964 <memp_malloc_fn>
 800f49c:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d117      	bne.n	800f4d4 <tcp_alloc+0x84>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f4a4:	2008      	movs	r0, #8
 800f4a6:	f7ff ff33 	bl	800f310 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f4aa:	f240 7245 	movw	r2, #1861	; 0x745
 800f4ae:	492d      	ldr	r1, [pc, #180]	; (800f564 <tcp_alloc+0x114>)
 800f4b0:	2001      	movs	r0, #1
 800f4b2:	f7fd fa57 	bl	800c964 <memp_malloc_fn>
 800f4b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10a      	bne.n	800f4d4 <tcp_alloc+0x84>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff fed7 	bl	800f274 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f4c6:	f240 724b 	movw	r2, #1867	; 0x74b
 800f4ca:	4926      	ldr	r1, [pc, #152]	; (800f564 <tcp_alloc+0x114>)
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	f7fd fa49 	bl	800c964 <memp_malloc_fn>
 800f4d2:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d03f      	beq.n	800f55a <tcp_alloc+0x10a>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f4da:	229c      	movs	r2, #156	; 0x9c
 800f4dc:	2100      	movs	r1, #0
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f007 fda4 	bl	801702c <memset>
    pcb->prio = prio;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	79fa      	ldrb	r2, [r7, #7]
 800f4e8:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f640 3268 	movw	r2, #2920	; 0xb68
 800f4f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800f4fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	22ff      	movs	r2, #255	; 0xff
 800f508:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f510:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2206      	movs	r2, #6
 800f516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2206      	movs	r2, #6
 800f51e:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f526:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f530:	4b0d      	ldr	r3, [pc, #52]	; (800f568 <tcp_alloc+0x118>)
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f538:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <tcp_alloc+0x11c>)
 800f53a:	781a      	ldrb	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f640 3268 	movw	r2, #2920	; 0xb68
 800f546:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	4a08      	ldr	r2, [pc, #32]	; (800f570 <tcp_alloc+0x120>)
 800f54e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	4a07      	ldr	r2, [pc, #28]	; (800f574 <tcp_alloc+0x124>)
 800f556:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f55a:	68fb      	ldr	r3, [r7, #12]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	08019cfc 	.word	0x08019cfc
 800f568:	2001a6b4 	.word	0x2001a6b4
 800f56c:	2001a6ca 	.word	0x2001a6ca
 800f570:	0800f209 	.word	0x0800f209
 800f574:	006ddd00 	.word	0x006ddd00

0800f578 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f582:	2040      	movs	r0, #64	; 0x40
 800f584:	f7ff ff64 	bl	800f450 <tcp_alloc>
 800f588:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f58a:	68fb      	ldr	r3, [r7, #12]
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d002      	beq.n	800f5aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	683a      	ldr	r2, [r7, #0]
 800f5a8:	611a      	str	r2, [r3, #16]
  }
}
 800f5aa:	bf00      	nop
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
	...

0800f5b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00e      	beq.n	800f5e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	7d1b      	ldrb	r3, [r3, #20]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d106      	bne.n	800f5de <tcp_recv+0x26>
 800f5d0:	4b07      	ldr	r3, [pc, #28]	; (800f5f0 <tcp_recv+0x38>)
 800f5d2:	f240 72df 	movw	r2, #2015	; 0x7df
 800f5d6:	4907      	ldr	r1, [pc, #28]	; (800f5f4 <tcp_recv+0x3c>)
 800f5d8:	4807      	ldr	r0, [pc, #28]	; (800f5f8 <tcp_recv+0x40>)
 800f5da:	f007 fe0f 	bl	80171fc <iprintf>
    pcb->recv = recv;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	683a      	ldr	r2, [r7, #0]
 800f5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f5e6:	bf00      	nop
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	08019cfc 	.word	0x08019cfc
 800f5f4:	0801a298 	.word	0x0801a298
 800f5f8:	08019d40 	.word	0x08019d40

0800f5fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00e      	beq.n	800f62a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	7d1b      	ldrb	r3, [r3, #20]
 800f610:	2b01      	cmp	r3, #1
 800f612:	d106      	bne.n	800f622 <tcp_sent+0x26>
 800f614:	4b07      	ldr	r3, [pc, #28]	; (800f634 <tcp_sent+0x38>)
 800f616:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f61a:	4907      	ldr	r1, [pc, #28]	; (800f638 <tcp_sent+0x3c>)
 800f61c:	4807      	ldr	r0, [pc, #28]	; (800f63c <tcp_sent+0x40>)
 800f61e:	f007 fded 	bl	80171fc <iprintf>
    pcb->sent = sent;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f62a:	bf00      	nop
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	08019cfc 	.word	0x08019cfc
 800f638:	0801a2c0 	.word	0x0801a2c0
 800f63c:	08019d40 	.word	0x08019d40

0800f640 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00e      	beq.n	800f66e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	7d1b      	ldrb	r3, [r3, #20]
 800f654:	2b01      	cmp	r3, #1
 800f656:	d106      	bne.n	800f666 <tcp_err+0x26>
 800f658:	4b07      	ldr	r3, [pc, #28]	; (800f678 <tcp_err+0x38>)
 800f65a:	f640 020d 	movw	r2, #2061	; 0x80d
 800f65e:	4907      	ldr	r1, [pc, #28]	; (800f67c <tcp_err+0x3c>)
 800f660:	4807      	ldr	r0, [pc, #28]	; (800f680 <tcp_err+0x40>)
 800f662:	f007 fdcb 	bl	80171fc <iprintf>
    pcb->errf = err;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	683a      	ldr	r2, [r7, #0]
 800f66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	08019cfc 	.word	0x08019cfc
 800f67c:	0801a2e8 	.word	0x0801a2e8
 800f680:	08019d40 	.word	0x08019d40

0800f684 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	4613      	mov	r3, r2
 800f690:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d107      	bne.n	800f6a8 <tcp_poll+0x24>
 800f698:	4b0e      	ldr	r3, [pc, #56]	; (800f6d4 <tcp_poll+0x50>)
 800f69a:	f640 023d 	movw	r2, #2109	; 0x83d
 800f69e:	490e      	ldr	r1, [pc, #56]	; (800f6d8 <tcp_poll+0x54>)
 800f6a0:	480e      	ldr	r0, [pc, #56]	; (800f6dc <tcp_poll+0x58>)
 800f6a2:	f007 fdab 	bl	80171fc <iprintf>
 800f6a6:	e011      	b.n	800f6cc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	7d1b      	ldrb	r3, [r3, #20]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d106      	bne.n	800f6be <tcp_poll+0x3a>
 800f6b0:	4b08      	ldr	r3, [pc, #32]	; (800f6d4 <tcp_poll+0x50>)
 800f6b2:	f640 023e 	movw	r2, #2110	; 0x83e
 800f6b6:	490a      	ldr	r1, [pc, #40]	; (800f6e0 <tcp_poll+0x5c>)
 800f6b8:	4808      	ldr	r0, [pc, #32]	; (800f6dc <tcp_poll+0x58>)
 800f6ba:	f007 fd9f 	bl	80171fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	79fa      	ldrb	r2, [r7, #7]
 800f6ca:	775a      	strb	r2, [r3, #29]
}
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	08019cfc 	.word	0x08019cfc
 800f6d8:	0801a310 	.word	0x0801a310
 800f6dc:	08019d40 	.word	0x08019d40
 800f6e0:	0801a328 	.word	0x0801a328

0800f6e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d107      	bne.n	800f702 <tcp_pcb_purge+0x1e>
 800f6f2:	4b21      	ldr	r3, [pc, #132]	; (800f778 <tcp_pcb_purge+0x94>)
 800f6f4:	f640 0251 	movw	r2, #2129	; 0x851
 800f6f8:	4920      	ldr	r1, [pc, #128]	; (800f77c <tcp_pcb_purge+0x98>)
 800f6fa:	4821      	ldr	r0, [pc, #132]	; (800f780 <tcp_pcb_purge+0x9c>)
 800f6fc:	f007 fd7e 	bl	80171fc <iprintf>
 800f700:	e037      	b.n	800f772 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	7d1b      	ldrb	r3, [r3, #20]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d033      	beq.n	800f772 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f70e:	2b0a      	cmp	r3, #10
 800f710:	d02f      	beq.n	800f772 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f716:	2b01      	cmp	r3, #1
 800f718:	d02b      	beq.n	800f772 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d007      	beq.n	800f732 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f726:	4618      	mov	r0, r3
 800f728:	f7fe f848 	bl	800d7bc <pbuf_free>
      pcb->refused_data = NULL;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f736:	2b00      	cmp	r3, #0
 800f738:	d002      	beq.n	800f740 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f986 	bl	800fa4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f746:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7ff fcfd 	bl	800f14c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f756:	4618      	mov	r0, r3
 800f758:	f7ff fcf8 	bl	800f14c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	66da      	str	r2, [r3, #108]	; 0x6c
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	08019cfc 	.word	0x08019cfc
 800f77c:	0801a348 	.word	0x0801a348
 800f780:	08019d40 	.word	0x08019d40

0800f784 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d106      	bne.n	800f7a2 <tcp_pcb_remove+0x1e>
 800f794:	4b3e      	ldr	r3, [pc, #248]	; (800f890 <tcp_pcb_remove+0x10c>)
 800f796:	f640 0283 	movw	r2, #2179	; 0x883
 800f79a:	493e      	ldr	r1, [pc, #248]	; (800f894 <tcp_pcb_remove+0x110>)
 800f79c:	483e      	ldr	r0, [pc, #248]	; (800f898 <tcp_pcb_remove+0x114>)
 800f79e:	f007 fd2d 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d106      	bne.n	800f7b6 <tcp_pcb_remove+0x32>
 800f7a8:	4b39      	ldr	r3, [pc, #228]	; (800f890 <tcp_pcb_remove+0x10c>)
 800f7aa:	f640 0284 	movw	r2, #2180	; 0x884
 800f7ae:	493b      	ldr	r1, [pc, #236]	; (800f89c <tcp_pcb_remove+0x118>)
 800f7b0:	4839      	ldr	r0, [pc, #228]	; (800f898 <tcp_pcb_remove+0x114>)
 800f7b2:	f007 fd23 	bl	80171fc <iprintf>

  TCP_RMV(pcblist, pcb);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d105      	bne.n	800f7cc <tcp_pcb_remove+0x48>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68da      	ldr	r2, [r3, #12]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	e013      	b.n	800f7f4 <tcp_pcb_remove+0x70>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	60fb      	str	r3, [r7, #12]
 800f7d2:	e00c      	b.n	800f7ee <tcp_pcb_remove+0x6a>
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d104      	bne.n	800f7e8 <tcp_pcb_remove+0x64>
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	68da      	ldr	r2, [r3, #12]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	60da      	str	r2, [r3, #12]
 800f7e6:	e005      	b.n	800f7f4 <tcp_pcb_remove+0x70>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	60fb      	str	r3, [r7, #12]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d1ef      	bne.n	800f7d4 <tcp_pcb_remove+0x50>
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f7fa:	6838      	ldr	r0, [r7, #0]
 800f7fc:	f7ff ff72 	bl	800f6e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	7d1b      	ldrb	r3, [r3, #20]
 800f804:	2b0a      	cmp	r3, #10
 800f806:	d013      	beq.n	800f830 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d00f      	beq.n	800f830 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	8b5b      	ldrh	r3, [r3, #26]
 800f814:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d009      	beq.n	800f830 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	8b5b      	ldrh	r3, [r3, #26]
 800f820:	f043 0302 	orr.w	r3, r3, #2
 800f824:	b29a      	uxth	r2, r3
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f82a:	6838      	ldr	r0, [r7, #0]
 800f82c:	f003 fbc8 	bl	8012fc0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	7d1b      	ldrb	r3, [r3, #20]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d020      	beq.n	800f87a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d006      	beq.n	800f84e <tcp_pcb_remove+0xca>
 800f840:	4b13      	ldr	r3, [pc, #76]	; (800f890 <tcp_pcb_remove+0x10c>)
 800f842:	f640 0293 	movw	r2, #2195	; 0x893
 800f846:	4916      	ldr	r1, [pc, #88]	; (800f8a0 <tcp_pcb_remove+0x11c>)
 800f848:	4813      	ldr	r0, [pc, #76]	; (800f898 <tcp_pcb_remove+0x114>)
 800f84a:	f007 fcd7 	bl	80171fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f852:	2b00      	cmp	r3, #0
 800f854:	d006      	beq.n	800f864 <tcp_pcb_remove+0xe0>
 800f856:	4b0e      	ldr	r3, [pc, #56]	; (800f890 <tcp_pcb_remove+0x10c>)
 800f858:	f640 0294 	movw	r2, #2196	; 0x894
 800f85c:	4911      	ldr	r1, [pc, #68]	; (800f8a4 <tcp_pcb_remove+0x120>)
 800f85e:	480e      	ldr	r0, [pc, #56]	; (800f898 <tcp_pcb_remove+0x114>)
 800f860:	f007 fccc 	bl	80171fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d006      	beq.n	800f87a <tcp_pcb_remove+0xf6>
 800f86c:	4b08      	ldr	r3, [pc, #32]	; (800f890 <tcp_pcb_remove+0x10c>)
 800f86e:	f640 0296 	movw	r2, #2198	; 0x896
 800f872:	490d      	ldr	r1, [pc, #52]	; (800f8a8 <tcp_pcb_remove+0x124>)
 800f874:	4808      	ldr	r0, [pc, #32]	; (800f898 <tcp_pcb_remove+0x114>)
 800f876:	f007 fcc1 	bl	80171fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	2200      	movs	r2, #0
 800f87e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	2200      	movs	r2, #0
 800f884:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f886:	bf00      	nop
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	08019cfc 	.word	0x08019cfc
 800f894:	0801a364 	.word	0x0801a364
 800f898:	08019d40 	.word	0x08019d40
 800f89c:	0801a380 	.word	0x0801a380
 800f8a0:	0801a3a0 	.word	0x0801a3a0
 800f8a4:	0801a3b8 	.word	0x0801a3b8
 800f8a8:	0801a3d4 	.word	0x0801a3d4

0800f8ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d106      	bne.n	800f8c8 <tcp_next_iss+0x1c>
 800f8ba:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <tcp_next_iss+0x38>)
 800f8bc:	f640 02af 	movw	r2, #2223	; 0x8af
 800f8c0:	4909      	ldr	r1, [pc, #36]	; (800f8e8 <tcp_next_iss+0x3c>)
 800f8c2:	480a      	ldr	r0, [pc, #40]	; (800f8ec <tcp_next_iss+0x40>)
 800f8c4:	f007 fc9a 	bl	80171fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f8c8:	4b09      	ldr	r3, [pc, #36]	; (800f8f0 <tcp_next_iss+0x44>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	4b09      	ldr	r3, [pc, #36]	; (800f8f4 <tcp_next_iss+0x48>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	4a07      	ldr	r2, [pc, #28]	; (800f8f0 <tcp_next_iss+0x44>)
 800f8d4:	6013      	str	r3, [r2, #0]
  return iss;
 800f8d6:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <tcp_next_iss+0x44>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	08019cfc 	.word	0x08019cfc
 800f8e8:	0801a3ec 	.word	0x0801a3ec
 800f8ec:	08019d40 	.word	0x08019d40
 800f8f0:	20000038 	.word	0x20000038
 800f8f4:	2001a6b4 	.word	0x2001a6b4

0800f8f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	4603      	mov	r3, r0
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	607a      	str	r2, [r7, #4]
 800f904:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d106      	bne.n	800f91a <tcp_eff_send_mss_netif+0x22>
 800f90c:	4b14      	ldr	r3, [pc, #80]	; (800f960 <tcp_eff_send_mss_netif+0x68>)
 800f90e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f912:	4914      	ldr	r1, [pc, #80]	; (800f964 <tcp_eff_send_mss_netif+0x6c>)
 800f914:	4814      	ldr	r0, [pc, #80]	; (800f968 <tcp_eff_send_mss_netif+0x70>)
 800f916:	f007 fc71 	bl	80171fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d101      	bne.n	800f924 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f920:	89fb      	ldrh	r3, [r7, #14]
 800f922:	e019      	b.n	800f958 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f928:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f92a:	8afb      	ldrh	r3, [r7, #22]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d012      	beq.n	800f956 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f930:	2328      	movs	r3, #40	; 0x28
 800f932:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f934:	8afa      	ldrh	r2, [r7, #22]
 800f936:	8abb      	ldrh	r3, [r7, #20]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d904      	bls.n	800f946 <tcp_eff_send_mss_netif+0x4e>
 800f93c:	8afa      	ldrh	r2, [r7, #22]
 800f93e:	8abb      	ldrh	r3, [r7, #20]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	b29b      	uxth	r3, r3
 800f944:	e000      	b.n	800f948 <tcp_eff_send_mss_netif+0x50>
 800f946:	2300      	movs	r3, #0
 800f948:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f94a:	8a7a      	ldrh	r2, [r7, #18]
 800f94c:	89fb      	ldrh	r3, [r7, #14]
 800f94e:	4293      	cmp	r3, r2
 800f950:	bf28      	it	cs
 800f952:	4613      	movcs	r3, r2
 800f954:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f956:	89fb      	ldrh	r3, [r7, #14]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3718      	adds	r7, #24
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	08019cfc 	.word	0x08019cfc
 800f964:	0801a408 	.word	0x0801a408
 800f968:	08019d40 	.word	0x08019d40

0800f96c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d119      	bne.n	800f9b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f980:	4b10      	ldr	r3, [pc, #64]	; (800f9c4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f982:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f986:	4910      	ldr	r1, [pc, #64]	; (800f9c8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f988:	4810      	ldr	r0, [pc, #64]	; (800f9cc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f98a:	f007 fc37 	bl	80171fc <iprintf>

  while (pcb != NULL) {
 800f98e:	e011      	b.n	800f9b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d108      	bne.n	800f9ae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7fe fd02 	bl	800e3ac <tcp_abort>
      pcb = next;
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	60fb      	str	r3, [r7, #12]
 800f9ac:	e002      	b.n	800f9b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1ea      	bne.n	800f990 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f9ba:	bf00      	nop
 800f9bc:	bf00      	nop
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	08019cfc 	.word	0x08019cfc
 800f9c8:	0801a430 	.word	0x0801a430
 800f9cc:	08019d40 	.word	0x08019d40

0800f9d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d02a      	beq.n	800fa36 <tcp_netif_ip_addr_changed+0x66>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d026      	beq.n	800fa36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f9e8:	4b15      	ldr	r3, [pc, #84]	; (800fa40 <tcp_netif_ip_addr_changed+0x70>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7ff ffbc 	bl	800f96c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f9f4:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <tcp_netif_ip_addr_changed+0x74>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff ffb6 	bl	800f96c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d017      	beq.n	800fa36 <tcp_netif_ip_addr_changed+0x66>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d013      	beq.n	800fa36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa0e:	4b0e      	ldr	r3, [pc, #56]	; (800fa48 <tcp_netif_ip_addr_changed+0x78>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	60fb      	str	r3, [r7, #12]
 800fa14:	e00c      	b.n	800fa30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d103      	bne.n	800fa2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	60fb      	str	r3, [r7, #12]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d1ef      	bne.n	800fa16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fa36:	bf00      	nop
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	2001a6c0 	.word	0x2001a6c0
 800fa44:	2001a6b8 	.word	0x2001a6b8
 800fa48:	2001a6bc 	.word	0x2001a6bc

0800fa4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d007      	beq.n	800fa6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff fb73 	bl	800f14c <tcp_segs_free>
    pcb->ooseq = NULL;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fa6c:	bf00      	nop
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fa74:	b590      	push	{r4, r7, lr}
 800fa76:	b08d      	sub	sp, #52	; 0x34
 800fa78:	af04      	add	r7, sp, #16
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d105      	bne.n	800fa90 <tcp_input+0x1c>
 800fa84:	4b9b      	ldr	r3, [pc, #620]	; (800fcf4 <tcp_input+0x280>)
 800fa86:	2283      	movs	r2, #131	; 0x83
 800fa88:	499b      	ldr	r1, [pc, #620]	; (800fcf8 <tcp_input+0x284>)
 800fa8a:	489c      	ldr	r0, [pc, #624]	; (800fcfc <tcp_input+0x288>)
 800fa8c:	f007 fbb6 	bl	80171fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	4a9a      	ldr	r2, [pc, #616]	; (800fd00 <tcp_input+0x28c>)
 800fa96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	895b      	ldrh	r3, [r3, #10]
 800fa9c:	2b13      	cmp	r3, #19
 800fa9e:	f240 83d1 	bls.w	8010244 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800faa2:	4b98      	ldr	r3, [pc, #608]	; (800fd04 <tcp_input+0x290>)
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	4a97      	ldr	r2, [pc, #604]	; (800fd04 <tcp_input+0x290>)
 800faa8:	6812      	ldr	r2, [r2, #0]
 800faaa:	4611      	mov	r1, r2
 800faac:	4618      	mov	r0, r3
 800faae:	f006 f8dd 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	f040 83c7 	bne.w	8010248 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800faba:	4b92      	ldr	r3, [pc, #584]	; (800fd04 <tcp_input+0x290>)
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fac2:	2be0      	cmp	r3, #224	; 0xe0
 800fac4:	f000 83c0 	beq.w	8010248 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fac8:	4b8d      	ldr	r3, [pc, #564]	; (800fd00 <tcp_input+0x28c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	899b      	ldrh	r3, [r3, #12]
 800face:	b29b      	uxth	r3, r3
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fc f8e7 	bl	800bca4 <lwip_htons>
 800fad6:	4603      	mov	r3, r0
 800fad8:	0b1b      	lsrs	r3, r3, #12
 800fada:	b29b      	uxth	r3, r3
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fae2:	7cbb      	ldrb	r3, [r7, #18]
 800fae4:	2b13      	cmp	r3, #19
 800fae6:	f240 83b1 	bls.w	801024c <tcp_input+0x7d8>
 800faea:	7cbb      	ldrb	r3, [r7, #18]
 800faec:	b29a      	uxth	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	891b      	ldrh	r3, [r3, #8]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	f200 83aa 	bhi.w	801024c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800faf8:	7cbb      	ldrb	r3, [r7, #18]
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	3b14      	subs	r3, #20
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	4b81      	ldr	r3, [pc, #516]	; (800fd08 <tcp_input+0x294>)
 800fb02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fb04:	4b81      	ldr	r3, [pc, #516]	; (800fd0c <tcp_input+0x298>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	895a      	ldrh	r2, [r3, #10]
 800fb0e:	7cbb      	ldrb	r3, [r7, #18]
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d309      	bcc.n	800fb2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fb16:	4b7c      	ldr	r3, [pc, #496]	; (800fd08 <tcp_input+0x294>)
 800fb18:	881a      	ldrh	r2, [r3, #0]
 800fb1a:	4b7d      	ldr	r3, [pc, #500]	; (800fd10 <tcp_input+0x29c>)
 800fb1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fb1e:	7cbb      	ldrb	r3, [r7, #18]
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7fd fdc4 	bl	800d6b0 <pbuf_remove_header>
 800fb28:	e04e      	b.n	800fbc8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d105      	bne.n	800fb3e <tcp_input+0xca>
 800fb32:	4b70      	ldr	r3, [pc, #448]	; (800fcf4 <tcp_input+0x280>)
 800fb34:	22c2      	movs	r2, #194	; 0xc2
 800fb36:	4977      	ldr	r1, [pc, #476]	; (800fd14 <tcp_input+0x2a0>)
 800fb38:	4870      	ldr	r0, [pc, #448]	; (800fcfc <tcp_input+0x288>)
 800fb3a:	f007 fb5f 	bl	80171fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fb3e:	2114      	movs	r1, #20
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7fd fdb5 	bl	800d6b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	895a      	ldrh	r2, [r3, #10]
 800fb4a:	4b71      	ldr	r3, [pc, #452]	; (800fd10 <tcp_input+0x29c>)
 800fb4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fb4e:	4b6e      	ldr	r3, [pc, #440]	; (800fd08 <tcp_input+0x294>)
 800fb50:	881a      	ldrh	r2, [r3, #0]
 800fb52:	4b6f      	ldr	r3, [pc, #444]	; (800fd10 <tcp_input+0x29c>)
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fb5a:	4b6d      	ldr	r3, [pc, #436]	; (800fd10 <tcp_input+0x29c>)
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f7fd fda5 	bl	800d6b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	895b      	ldrh	r3, [r3, #10]
 800fb6c:	8a3a      	ldrh	r2, [r7, #16]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	f200 836e 	bhi.w	8010250 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	4a64      	ldr	r2, [pc, #400]	; (800fd0c <tcp_input+0x298>)
 800fb7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	8a3a      	ldrh	r2, [r7, #16]
 800fb84:	4611      	mov	r1, r2
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7fd fd92 	bl	800d6b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	891a      	ldrh	r2, [r3, #8]
 800fb90:	8a3b      	ldrh	r3, [r7, #16]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	b29a      	uxth	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	895b      	ldrh	r3, [r3, #10]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d005      	beq.n	800fbae <tcp_input+0x13a>
 800fba2:	4b54      	ldr	r3, [pc, #336]	; (800fcf4 <tcp_input+0x280>)
 800fba4:	22df      	movs	r2, #223	; 0xdf
 800fba6:	495c      	ldr	r1, [pc, #368]	; (800fd18 <tcp_input+0x2a4>)
 800fba8:	4854      	ldr	r0, [pc, #336]	; (800fcfc <tcp_input+0x288>)
 800fbaa:	f007 fb27 	bl	80171fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	891a      	ldrh	r2, [r3, #8]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	891b      	ldrh	r3, [r3, #8]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d005      	beq.n	800fbc8 <tcp_input+0x154>
 800fbbc:	4b4d      	ldr	r3, [pc, #308]	; (800fcf4 <tcp_input+0x280>)
 800fbbe:	22e0      	movs	r2, #224	; 0xe0
 800fbc0:	4956      	ldr	r1, [pc, #344]	; (800fd1c <tcp_input+0x2a8>)
 800fbc2:	484e      	ldr	r0, [pc, #312]	; (800fcfc <tcp_input+0x288>)
 800fbc4:	f007 fb1a 	bl	80171fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fbc8:	4b4d      	ldr	r3, [pc, #308]	; (800fd00 <tcp_input+0x28c>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	4a4b      	ldr	r2, [pc, #300]	; (800fd00 <tcp_input+0x28c>)
 800fbd2:	6814      	ldr	r4, [r2, #0]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fc f865 	bl	800bca4 <lwip_htons>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fbde:	4b48      	ldr	r3, [pc, #288]	; (800fd00 <tcp_input+0x28c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	885b      	ldrh	r3, [r3, #2]
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	4a46      	ldr	r2, [pc, #280]	; (800fd00 <tcp_input+0x28c>)
 800fbe8:	6814      	ldr	r4, [r2, #0]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fc f85a 	bl	800bca4 <lwip_htons>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fbf4:	4b42      	ldr	r3, [pc, #264]	; (800fd00 <tcp_input+0x28c>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	4a41      	ldr	r2, [pc, #260]	; (800fd00 <tcp_input+0x28c>)
 800fbfc:	6814      	ldr	r4, [r2, #0]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fc f865 	bl	800bcce <lwip_htonl>
 800fc04:	4603      	mov	r3, r0
 800fc06:	6063      	str	r3, [r4, #4]
 800fc08:	6863      	ldr	r3, [r4, #4]
 800fc0a:	4a45      	ldr	r2, [pc, #276]	; (800fd20 <tcp_input+0x2ac>)
 800fc0c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fc0e:	4b3c      	ldr	r3, [pc, #240]	; (800fd00 <tcp_input+0x28c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	4a3a      	ldr	r2, [pc, #232]	; (800fd00 <tcp_input+0x28c>)
 800fc16:	6814      	ldr	r4, [r2, #0]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fc f858 	bl	800bcce <lwip_htonl>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	60a3      	str	r3, [r4, #8]
 800fc22:	68a3      	ldr	r3, [r4, #8]
 800fc24:	4a3f      	ldr	r2, [pc, #252]	; (800fd24 <tcp_input+0x2b0>)
 800fc26:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fc28:	4b35      	ldr	r3, [pc, #212]	; (800fd00 <tcp_input+0x28c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	89db      	ldrh	r3, [r3, #14]
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	4a33      	ldr	r2, [pc, #204]	; (800fd00 <tcp_input+0x28c>)
 800fc32:	6814      	ldr	r4, [r2, #0]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7fc f835 	bl	800bca4 <lwip_htons>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fc3e:	4b30      	ldr	r3, [pc, #192]	; (800fd00 <tcp_input+0x28c>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	899b      	ldrh	r3, [r3, #12]
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7fc f82c 	bl	800bca4 <lwip_htons>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc54:	b2da      	uxtb	r2, r3
 800fc56:	4b34      	ldr	r3, [pc, #208]	; (800fd28 <tcp_input+0x2b4>)
 800fc58:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	891a      	ldrh	r2, [r3, #8]
 800fc5e:	4b33      	ldr	r3, [pc, #204]	; (800fd2c <tcp_input+0x2b8>)
 800fc60:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fc62:	4b31      	ldr	r3, [pc, #196]	; (800fd28 <tcp_input+0x2b4>)
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	f003 0303 	and.w	r3, r3, #3
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d00c      	beq.n	800fc88 <tcp_input+0x214>
    tcplen++;
 800fc6e:	4b2f      	ldr	r3, [pc, #188]	; (800fd2c <tcp_input+0x2b8>)
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	3301      	adds	r3, #1
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	4b2d      	ldr	r3, [pc, #180]	; (800fd2c <tcp_input+0x2b8>)
 800fc78:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	891a      	ldrh	r2, [r3, #8]
 800fc7e:	4b2b      	ldr	r3, [pc, #172]	; (800fd2c <tcp_input+0x2b8>)
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	f200 82e6 	bhi.w	8010254 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc8c:	4b28      	ldr	r3, [pc, #160]	; (800fd30 <tcp_input+0x2bc>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	61fb      	str	r3, [r7, #28]
 800fc92:	e09d      	b.n	800fdd0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	7d1b      	ldrb	r3, [r3, #20]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d105      	bne.n	800fca8 <tcp_input+0x234>
 800fc9c:	4b15      	ldr	r3, [pc, #84]	; (800fcf4 <tcp_input+0x280>)
 800fc9e:	22fb      	movs	r2, #251	; 0xfb
 800fca0:	4924      	ldr	r1, [pc, #144]	; (800fd34 <tcp_input+0x2c0>)
 800fca2:	4816      	ldr	r0, [pc, #88]	; (800fcfc <tcp_input+0x288>)
 800fca4:	f007 faaa 	bl	80171fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	7d1b      	ldrb	r3, [r3, #20]
 800fcac:	2b0a      	cmp	r3, #10
 800fcae:	d105      	bne.n	800fcbc <tcp_input+0x248>
 800fcb0:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <tcp_input+0x280>)
 800fcb2:	22fc      	movs	r2, #252	; 0xfc
 800fcb4:	4920      	ldr	r1, [pc, #128]	; (800fd38 <tcp_input+0x2c4>)
 800fcb6:	4811      	ldr	r0, [pc, #68]	; (800fcfc <tcp_input+0x288>)
 800fcb8:	f007 faa0 	bl	80171fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	7d1b      	ldrb	r3, [r3, #20]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d105      	bne.n	800fcd0 <tcp_input+0x25c>
 800fcc4:	4b0b      	ldr	r3, [pc, #44]	; (800fcf4 <tcp_input+0x280>)
 800fcc6:	22fd      	movs	r2, #253	; 0xfd
 800fcc8:	491c      	ldr	r1, [pc, #112]	; (800fd3c <tcp_input+0x2c8>)
 800fcca:	480c      	ldr	r0, [pc, #48]	; (800fcfc <tcp_input+0x288>)
 800fccc:	f007 fa96 	bl	80171fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	7a1b      	ldrb	r3, [r3, #8]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d033      	beq.n	800fd40 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	7a1a      	ldrb	r2, [r3, #8]
 800fcdc:	4b09      	ldr	r3, [pc, #36]	; (800fd04 <tcp_input+0x290>)
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fce4:	3301      	adds	r3, #1
 800fce6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d029      	beq.n	800fd40 <tcp_input+0x2cc>
      prev = pcb;
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	61bb      	str	r3, [r7, #24]
      continue;
 800fcf0:	e06b      	b.n	800fdca <tcp_input+0x356>
 800fcf2:	bf00      	nop
 800fcf4:	0801a464 	.word	0x0801a464
 800fcf8:	0801a498 	.word	0x0801a498
 800fcfc:	0801a4b0 	.word	0x0801a4b0
 800fd00:	2001a6dc 	.word	0x2001a6dc
 800fd04:	200058d0 	.word	0x200058d0
 800fd08:	2001a6e0 	.word	0x2001a6e0
 800fd0c:	2001a6e4 	.word	0x2001a6e4
 800fd10:	2001a6e2 	.word	0x2001a6e2
 800fd14:	0801a4d8 	.word	0x0801a4d8
 800fd18:	0801a4e8 	.word	0x0801a4e8
 800fd1c:	0801a4f4 	.word	0x0801a4f4
 800fd20:	2001a6ec 	.word	0x2001a6ec
 800fd24:	2001a6f0 	.word	0x2001a6f0
 800fd28:	2001a6f8 	.word	0x2001a6f8
 800fd2c:	2001a6f6 	.word	0x2001a6f6
 800fd30:	2001a6c0 	.word	0x2001a6c0
 800fd34:	0801a514 	.word	0x0801a514
 800fd38:	0801a53c 	.word	0x0801a53c
 800fd3c:	0801a568 	.word	0x0801a568
    }

    if (pcb->remote_port == tcphdr->src &&
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	8b1a      	ldrh	r2, [r3, #24]
 800fd44:	4b72      	ldr	r3, [pc, #456]	; (800ff10 <tcp_input+0x49c>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	881b      	ldrh	r3, [r3, #0]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d13a      	bne.n	800fdc6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	8ada      	ldrh	r2, [r3, #22]
 800fd54:	4b6e      	ldr	r3, [pc, #440]	; (800ff10 <tcp_input+0x49c>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	885b      	ldrh	r3, [r3, #2]
 800fd5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d132      	bne.n	800fdc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	685a      	ldr	r2, [r3, #4]
 800fd64:	4b6b      	ldr	r3, [pc, #428]	; (800ff14 <tcp_input+0x4a0>)
 800fd66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d12c      	bne.n	800fdc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	4b68      	ldr	r3, [pc, #416]	; (800ff14 <tcp_input+0x4a0>)
 800fd72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d126      	bne.n	800fdc6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	69fa      	ldr	r2, [r7, #28]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d106      	bne.n	800fd90 <tcp_input+0x31c>
 800fd82:	4b65      	ldr	r3, [pc, #404]	; (800ff18 <tcp_input+0x4a4>)
 800fd84:	f240 120d 	movw	r2, #269	; 0x10d
 800fd88:	4964      	ldr	r1, [pc, #400]	; (800ff1c <tcp_input+0x4a8>)
 800fd8a:	4865      	ldr	r0, [pc, #404]	; (800ff20 <tcp_input+0x4ac>)
 800fd8c:	f007 fa36 	bl	80171fc <iprintf>
      if (prev != NULL) {
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00a      	beq.n	800fdac <tcp_input+0x338>
        prev->next = pcb->next;
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	68da      	ldr	r2, [r3, #12]
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd9e:	4b61      	ldr	r3, [pc, #388]	; (800ff24 <tcp_input+0x4b0>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fda6:	4a5f      	ldr	r2, [pc, #380]	; (800ff24 <tcp_input+0x4b0>)
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	69fa      	ldr	r2, [r7, #28]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d111      	bne.n	800fdda <tcp_input+0x366>
 800fdb6:	4b58      	ldr	r3, [pc, #352]	; (800ff18 <tcp_input+0x4a4>)
 800fdb8:	f240 1215 	movw	r2, #277	; 0x115
 800fdbc:	495a      	ldr	r1, [pc, #360]	; (800ff28 <tcp_input+0x4b4>)
 800fdbe:	4858      	ldr	r0, [pc, #352]	; (800ff20 <tcp_input+0x4ac>)
 800fdc0:	f007 fa1c 	bl	80171fc <iprintf>
      break;
 800fdc4:	e009      	b.n	800fdda <tcp_input+0x366>
    }
    prev = pcb;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	61fb      	str	r3, [r7, #28]
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f47f af5e 	bne.w	800fc94 <tcp_input+0x220>
 800fdd8:	e000      	b.n	800fddc <tcp_input+0x368>
      break;
 800fdda:	bf00      	nop
  }

  if (pcb == NULL) {
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f040 80aa 	bne.w	800ff38 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fde4:	4b51      	ldr	r3, [pc, #324]	; (800ff2c <tcp_input+0x4b8>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	61fb      	str	r3, [r7, #28]
 800fdea:	e03f      	b.n	800fe6c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	7d1b      	ldrb	r3, [r3, #20]
 800fdf0:	2b0a      	cmp	r3, #10
 800fdf2:	d006      	beq.n	800fe02 <tcp_input+0x38e>
 800fdf4:	4b48      	ldr	r3, [pc, #288]	; (800ff18 <tcp_input+0x4a4>)
 800fdf6:	f240 121f 	movw	r2, #287	; 0x11f
 800fdfa:	494d      	ldr	r1, [pc, #308]	; (800ff30 <tcp_input+0x4bc>)
 800fdfc:	4848      	ldr	r0, [pc, #288]	; (800ff20 <tcp_input+0x4ac>)
 800fdfe:	f007 f9fd 	bl	80171fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	7a1b      	ldrb	r3, [r3, #8]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d009      	beq.n	800fe1e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	7a1a      	ldrb	r2, [r3, #8]
 800fe0e:	4b41      	ldr	r3, [pc, #260]	; (800ff14 <tcp_input+0x4a0>)
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe16:	3301      	adds	r3, #1
 800fe18:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d122      	bne.n	800fe64 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	8b1a      	ldrh	r2, [r3, #24]
 800fe22:	4b3b      	ldr	r3, [pc, #236]	; (800ff10 <tcp_input+0x49c>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	881b      	ldrh	r3, [r3, #0]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d11b      	bne.n	800fe66 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	8ada      	ldrh	r2, [r3, #22]
 800fe32:	4b37      	ldr	r3, [pc, #220]	; (800ff10 <tcp_input+0x49c>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	885b      	ldrh	r3, [r3, #2]
 800fe38:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d113      	bne.n	800fe66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	685a      	ldr	r2, [r3, #4]
 800fe42:	4b34      	ldr	r3, [pc, #208]	; (800ff14 <tcp_input+0x4a0>)
 800fe44:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d10d      	bne.n	800fe66 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	4b31      	ldr	r3, [pc, #196]	; (800ff14 <tcp_input+0x4a0>)
 800fe50:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d107      	bne.n	800fe66 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fe56:	69f8      	ldr	r0, [r7, #28]
 800fe58:	f000 fb56 	bl	8010508 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7fd fcad 	bl	800d7bc <pbuf_free>
        return;
 800fe62:	e1fd      	b.n	8010260 <tcp_input+0x7ec>
        continue;
 800fe64:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	61fb      	str	r3, [r7, #28]
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1bc      	bne.n	800fdec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe76:	4b2f      	ldr	r3, [pc, #188]	; (800ff34 <tcp_input+0x4c0>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	617b      	str	r3, [r7, #20]
 800fe7c:	e02a      	b.n	800fed4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	7a1b      	ldrb	r3, [r3, #8]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00c      	beq.n	800fea0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	7a1a      	ldrb	r2, [r3, #8]
 800fe8a:	4b22      	ldr	r3, [pc, #136]	; (800ff14 <tcp_input+0x4a0>)
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe92:	3301      	adds	r3, #1
 800fe94:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d002      	beq.n	800fea0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	61bb      	str	r3, [r7, #24]
        continue;
 800fe9e:	e016      	b.n	800fece <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	8ada      	ldrh	r2, [r3, #22]
 800fea4:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <tcp_input+0x49c>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	885b      	ldrh	r3, [r3, #2]
 800feaa:	b29b      	uxth	r3, r3
 800feac:	429a      	cmp	r2, r3
 800feae:	d10c      	bne.n	800feca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	4b17      	ldr	r3, [pc, #92]	; (800ff14 <tcp_input+0x4a0>)
 800feb6:	695b      	ldr	r3, [r3, #20]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d00f      	beq.n	800fedc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00d      	beq.n	800fede <tcp_input+0x46a>
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d009      	beq.n	800fede <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	68db      	ldr	r3, [r3, #12]
 800fed2:	617b      	str	r3, [r7, #20]
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1d1      	bne.n	800fe7e <tcp_input+0x40a>
 800feda:	e000      	b.n	800fede <tcp_input+0x46a>
            break;
 800fedc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d029      	beq.n	800ff38 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d00a      	beq.n	800ff00 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	68da      	ldr	r2, [r3, #12]
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fef2:	4b10      	ldr	r3, [pc, #64]	; (800ff34 <tcp_input+0x4c0>)
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fefa:	4a0e      	ldr	r2, [pc, #56]	; (800ff34 <tcp_input+0x4c0>)
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ff00:	6978      	ldr	r0, [r7, #20]
 800ff02:	f000 fa03 	bl	801030c <tcp_listen_input>
      }
      pbuf_free(p);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7fd fc58 	bl	800d7bc <pbuf_free>
      return;
 800ff0c:	e1a8      	b.n	8010260 <tcp_input+0x7ec>
 800ff0e:	bf00      	nop
 800ff10:	2001a6dc 	.word	0x2001a6dc
 800ff14:	200058d0 	.word	0x200058d0
 800ff18:	0801a464 	.word	0x0801a464
 800ff1c:	0801a590 	.word	0x0801a590
 800ff20:	0801a4b0 	.word	0x0801a4b0
 800ff24:	2001a6c0 	.word	0x2001a6c0
 800ff28:	0801a5bc 	.word	0x0801a5bc
 800ff2c:	2001a6c4 	.word	0x2001a6c4
 800ff30:	0801a5e8 	.word	0x0801a5e8
 800ff34:	2001a6bc 	.word	0x2001a6bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f000 8158 	beq.w	80101f0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ff40:	4b95      	ldr	r3, [pc, #596]	; (8010198 <tcp_input+0x724>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	891a      	ldrh	r2, [r3, #8]
 800ff4a:	4b93      	ldr	r3, [pc, #588]	; (8010198 <tcp_input+0x724>)
 800ff4c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ff4e:	4a92      	ldr	r2, [pc, #584]	; (8010198 <tcp_input+0x724>)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ff54:	4b91      	ldr	r3, [pc, #580]	; (801019c <tcp_input+0x728>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a8f      	ldr	r2, [pc, #572]	; (8010198 <tcp_input+0x724>)
 800ff5a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ff5c:	4b90      	ldr	r3, [pc, #576]	; (80101a0 <tcp_input+0x72c>)
 800ff5e:	2200      	movs	r2, #0
 800ff60:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ff62:	4b90      	ldr	r3, [pc, #576]	; (80101a4 <tcp_input+0x730>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ff68:	4b8f      	ldr	r3, [pc, #572]	; (80101a8 <tcp_input+0x734>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ff6e:	4b8f      	ldr	r3, [pc, #572]	; (80101ac <tcp_input+0x738>)
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	f003 0308 	and.w	r3, r3, #8
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d006      	beq.n	800ff88 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	7b5b      	ldrb	r3, [r3, #13]
 800ff7e:	f043 0301 	orr.w	r3, r3, #1
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d017      	beq.n	800ffc0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff90:	69f8      	ldr	r0, [r7, #28]
 800ff92:	f7ff f85d 	bl	800f050 <tcp_process_refused_data>
 800ff96:	4603      	mov	r3, r0
 800ff98:	f113 0f0d 	cmn.w	r3, #13
 800ff9c:	d007      	beq.n	800ffae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00c      	beq.n	800ffc0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ffa6:	4b82      	ldr	r3, [pc, #520]	; (80101b0 <tcp_input+0x73c>)
 800ffa8:	881b      	ldrh	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d008      	beq.n	800ffc0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f040 80e4 	bne.w	8010180 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ffb8:	69f8      	ldr	r0, [r7, #28]
 800ffba:	f003 fe07 	bl	8013bcc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ffbe:	e0df      	b.n	8010180 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800ffc0:	4a7c      	ldr	r2, [pc, #496]	; (80101b4 <tcp_input+0x740>)
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ffc6:	69f8      	ldr	r0, [r7, #28]
 800ffc8:	f000 fb18 	bl	80105fc <tcp_process>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ffd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffd4:	f113 0f0d 	cmn.w	r3, #13
 800ffd8:	f000 80d4 	beq.w	8010184 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800ffdc:	4b71      	ldr	r3, [pc, #452]	; (80101a4 <tcp_input+0x730>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 0308 	and.w	r3, r3, #8
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d015      	beq.n	8010014 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d008      	beq.n	8010004 <tcp_input+0x590>
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fff8:	69fa      	ldr	r2, [r7, #28]
 800fffa:	6912      	ldr	r2, [r2, #16]
 800fffc:	f06f 010d 	mvn.w	r1, #13
 8010000:	4610      	mov	r0, r2
 8010002:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010004:	69f9      	ldr	r1, [r7, #28]
 8010006:	486c      	ldr	r0, [pc, #432]	; (80101b8 <tcp_input+0x744>)
 8010008:	f7ff fbbc 	bl	800f784 <tcp_pcb_remove>
        tcp_free(pcb);
 801000c:	69f8      	ldr	r0, [r7, #28]
 801000e:	f7fd fee5 	bl	800dddc <tcp_free>
 8010012:	e0da      	b.n	80101ca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010014:	2300      	movs	r3, #0
 8010016:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010018:	4b63      	ldr	r3, [pc, #396]	; (80101a8 <tcp_input+0x734>)
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d01d      	beq.n	801005c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010020:	4b61      	ldr	r3, [pc, #388]	; (80101a8 <tcp_input+0x734>)
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00a      	beq.n	8010046 <tcp_input+0x5d2>
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010036:	69fa      	ldr	r2, [r7, #28]
 8010038:	6910      	ldr	r0, [r2, #16]
 801003a:	89fa      	ldrh	r2, [r7, #14]
 801003c:	69f9      	ldr	r1, [r7, #28]
 801003e:	4798      	blx	r3
 8010040:	4603      	mov	r3, r0
 8010042:	74fb      	strb	r3, [r7, #19]
 8010044:	e001      	b.n	801004a <tcp_input+0x5d6>
 8010046:	2300      	movs	r3, #0
 8010048:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801004a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801004e:	f113 0f0d 	cmn.w	r3, #13
 8010052:	f000 8099 	beq.w	8010188 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010056:	4b54      	ldr	r3, [pc, #336]	; (80101a8 <tcp_input+0x734>)
 8010058:	2200      	movs	r2, #0
 801005a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801005c:	69f8      	ldr	r0, [r7, #28]
 801005e:	f000 f915 	bl	801028c <tcp_input_delayed_close>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	f040 8091 	bne.w	801018c <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801006a:	4b4d      	ldr	r3, [pc, #308]	; (80101a0 <tcp_input+0x72c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d041      	beq.n	80100f6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010076:	2b00      	cmp	r3, #0
 8010078:	d006      	beq.n	8010088 <tcp_input+0x614>
 801007a:	4b50      	ldr	r3, [pc, #320]	; (80101bc <tcp_input+0x748>)
 801007c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010080:	494f      	ldr	r1, [pc, #316]	; (80101c0 <tcp_input+0x74c>)
 8010082:	4850      	ldr	r0, [pc, #320]	; (80101c4 <tcp_input+0x750>)
 8010084:	f007 f8ba 	bl	80171fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	8b5b      	ldrh	r3, [r3, #26]
 801008c:	f003 0310 	and.w	r3, r3, #16
 8010090:	2b00      	cmp	r3, #0
 8010092:	d008      	beq.n	80100a6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010094:	4b42      	ldr	r3, [pc, #264]	; (80101a0 <tcp_input+0x72c>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4618      	mov	r0, r3
 801009a:	f7fd fb8f 	bl	800d7bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801009e:	69f8      	ldr	r0, [r7, #28]
 80100a0:	f7fe f984 	bl	800e3ac <tcp_abort>
            goto aborted;
 80100a4:	e091      	b.n	80101ca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00c      	beq.n	80100ca <tcp_input+0x656>
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	6918      	ldr	r0, [r3, #16]
 80100ba:	4b39      	ldr	r3, [pc, #228]	; (80101a0 <tcp_input+0x72c>)
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	2300      	movs	r3, #0
 80100c0:	69f9      	ldr	r1, [r7, #28]
 80100c2:	47a0      	blx	r4
 80100c4:	4603      	mov	r3, r0
 80100c6:	74fb      	strb	r3, [r7, #19]
 80100c8:	e008      	b.n	80100dc <tcp_input+0x668>
 80100ca:	4b35      	ldr	r3, [pc, #212]	; (80101a0 <tcp_input+0x72c>)
 80100cc:	681a      	ldr	r2, [r3, #0]
 80100ce:	2300      	movs	r3, #0
 80100d0:	69f9      	ldr	r1, [r7, #28]
 80100d2:	2000      	movs	r0, #0
 80100d4:	f7ff f898 	bl	800f208 <tcp_recv_null>
 80100d8:	4603      	mov	r3, r0
 80100da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80100dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100e0:	f113 0f0d 	cmn.w	r3, #13
 80100e4:	d054      	beq.n	8010190 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80100e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d003      	beq.n	80100f6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80100ee:	4b2c      	ldr	r3, [pc, #176]	; (80101a0 <tcp_input+0x72c>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80100f6:	4b2b      	ldr	r3, [pc, #172]	; (80101a4 <tcp_input+0x730>)
 80100f8:	781b      	ldrb	r3, [r3, #0]
 80100fa:	f003 0320 	and.w	r3, r3, #32
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d031      	beq.n	8010166 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010106:	2b00      	cmp	r3, #0
 8010108:	d009      	beq.n	801011e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801010e:	7b5a      	ldrb	r2, [r3, #13]
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010114:	f042 0220 	orr.w	r2, r2, #32
 8010118:	b2d2      	uxtb	r2, r2
 801011a:	735a      	strb	r2, [r3, #13]
 801011c:	e023      	b.n	8010166 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010122:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010126:	4293      	cmp	r3, r2
 8010128:	d005      	beq.n	8010136 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801012e:	3301      	adds	r3, #1
 8010130:	b29a      	uxth	r2, r3
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00b      	beq.n	8010158 <tcp_input+0x6e4>
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	6918      	ldr	r0, [r3, #16]
 801014a:	2300      	movs	r3, #0
 801014c:	2200      	movs	r2, #0
 801014e:	69f9      	ldr	r1, [r7, #28]
 8010150:	47a0      	blx	r4
 8010152:	4603      	mov	r3, r0
 8010154:	74fb      	strb	r3, [r7, #19]
 8010156:	e001      	b.n	801015c <tcp_input+0x6e8>
 8010158:	2300      	movs	r3, #0
 801015a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801015c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010160:	f113 0f0d 	cmn.w	r3, #13
 8010164:	d016      	beq.n	8010194 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010166:	4b13      	ldr	r3, [pc, #76]	; (80101b4 <tcp_input+0x740>)
 8010168:	2200      	movs	r2, #0
 801016a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801016c:	69f8      	ldr	r0, [r7, #28]
 801016e:	f000 f88d 	bl	801028c <tcp_input_delayed_close>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d127      	bne.n	80101c8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010178:	69f8      	ldr	r0, [r7, #28]
 801017a:	f002 ff21 	bl	8012fc0 <tcp_output>
 801017e:	e024      	b.n	80101ca <tcp_input+0x756>
        goto aborted;
 8010180:	bf00      	nop
 8010182:	e022      	b.n	80101ca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010184:	bf00      	nop
 8010186:	e020      	b.n	80101ca <tcp_input+0x756>
              goto aborted;
 8010188:	bf00      	nop
 801018a:	e01e      	b.n	80101ca <tcp_input+0x756>
          goto aborted;
 801018c:	bf00      	nop
 801018e:	e01c      	b.n	80101ca <tcp_input+0x756>
            goto aborted;
 8010190:	bf00      	nop
 8010192:	e01a      	b.n	80101ca <tcp_input+0x756>
              goto aborted;
 8010194:	bf00      	nop
 8010196:	e018      	b.n	80101ca <tcp_input+0x756>
 8010198:	2001a6cc 	.word	0x2001a6cc
 801019c:	2001a6dc 	.word	0x2001a6dc
 80101a0:	2001a6fc 	.word	0x2001a6fc
 80101a4:	2001a6f9 	.word	0x2001a6f9
 80101a8:	2001a6f4 	.word	0x2001a6f4
 80101ac:	2001a6f8 	.word	0x2001a6f8
 80101b0:	2001a6f6 	.word	0x2001a6f6
 80101b4:	2001a700 	.word	0x2001a700
 80101b8:	2001a6c0 	.word	0x2001a6c0
 80101bc:	0801a464 	.word	0x0801a464
 80101c0:	0801a618 	.word	0x0801a618
 80101c4:	0801a4b0 	.word	0x0801a4b0
          goto aborted;
 80101c8:	bf00      	nop
    tcp_input_pcb = NULL;
 80101ca:	4b27      	ldr	r3, [pc, #156]	; (8010268 <tcp_input+0x7f4>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80101d0:	4b26      	ldr	r3, [pc, #152]	; (801026c <tcp_input+0x7f8>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80101d6:	4b26      	ldr	r3, [pc, #152]	; (8010270 <tcp_input+0x7fc>)
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d03f      	beq.n	801025e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80101de:	4b24      	ldr	r3, [pc, #144]	; (8010270 <tcp_input+0x7fc>)
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fd faea 	bl	800d7bc <pbuf_free>
      inseg.p = NULL;
 80101e8:	4b21      	ldr	r3, [pc, #132]	; (8010270 <tcp_input+0x7fc>)
 80101ea:	2200      	movs	r2, #0
 80101ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80101ee:	e036      	b.n	801025e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80101f0:	4b20      	ldr	r3, [pc, #128]	; (8010274 <tcp_input+0x800>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	899b      	ldrh	r3, [r3, #12]
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fb fd53 	bl	800bca4 <lwip_htons>
 80101fe:	4603      	mov	r3, r0
 8010200:	b2db      	uxtb	r3, r3
 8010202:	f003 0304 	and.w	r3, r3, #4
 8010206:	2b00      	cmp	r3, #0
 8010208:	d118      	bne.n	801023c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801020a:	4b1b      	ldr	r3, [pc, #108]	; (8010278 <tcp_input+0x804>)
 801020c:	6819      	ldr	r1, [r3, #0]
 801020e:	4b1b      	ldr	r3, [pc, #108]	; (801027c <tcp_input+0x808>)
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	461a      	mov	r2, r3
 8010214:	4b1a      	ldr	r3, [pc, #104]	; (8010280 <tcp_input+0x80c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801021a:	4b16      	ldr	r3, [pc, #88]	; (8010274 <tcp_input+0x800>)
 801021c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801021e:	885b      	ldrh	r3, [r3, #2]
 8010220:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010222:	4a14      	ldr	r2, [pc, #80]	; (8010274 <tcp_input+0x800>)
 8010224:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010226:	8812      	ldrh	r2, [r2, #0]
 8010228:	b292      	uxth	r2, r2
 801022a:	9202      	str	r2, [sp, #8]
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	4b15      	ldr	r3, [pc, #84]	; (8010284 <tcp_input+0x810>)
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	4b15      	ldr	r3, [pc, #84]	; (8010288 <tcp_input+0x814>)
 8010234:	4602      	mov	r2, r0
 8010236:	2000      	movs	r0, #0
 8010238:	f003 fc76 	bl	8013b28 <tcp_rst>
    pbuf_free(p);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7fd fabd 	bl	800d7bc <pbuf_free>
  return;
 8010242:	e00c      	b.n	801025e <tcp_input+0x7ea>
    goto dropped;
 8010244:	bf00      	nop
 8010246:	e006      	b.n	8010256 <tcp_input+0x7e2>
    goto dropped;
 8010248:	bf00      	nop
 801024a:	e004      	b.n	8010256 <tcp_input+0x7e2>
    goto dropped;
 801024c:	bf00      	nop
 801024e:	e002      	b.n	8010256 <tcp_input+0x7e2>
      goto dropped;
 8010250:	bf00      	nop
 8010252:	e000      	b.n	8010256 <tcp_input+0x7e2>
      goto dropped;
 8010254:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7fd fab0 	bl	800d7bc <pbuf_free>
 801025c:	e000      	b.n	8010260 <tcp_input+0x7ec>
  return;
 801025e:	bf00      	nop
}
 8010260:	3724      	adds	r7, #36	; 0x24
 8010262:	46bd      	mov	sp, r7
 8010264:	bd90      	pop	{r4, r7, pc}
 8010266:	bf00      	nop
 8010268:	2001a700 	.word	0x2001a700
 801026c:	2001a6fc 	.word	0x2001a6fc
 8010270:	2001a6cc 	.word	0x2001a6cc
 8010274:	2001a6dc 	.word	0x2001a6dc
 8010278:	2001a6f0 	.word	0x2001a6f0
 801027c:	2001a6f6 	.word	0x2001a6f6
 8010280:	2001a6ec 	.word	0x2001a6ec
 8010284:	200058e0 	.word	0x200058e0
 8010288:	200058e4 	.word	0x200058e4

0801028c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <tcp_input_delayed_close+0x1c>
 801029a:	4b17      	ldr	r3, [pc, #92]	; (80102f8 <tcp_input_delayed_close+0x6c>)
 801029c:	f240 225a 	movw	r2, #602	; 0x25a
 80102a0:	4916      	ldr	r1, [pc, #88]	; (80102fc <tcp_input_delayed_close+0x70>)
 80102a2:	4817      	ldr	r0, [pc, #92]	; (8010300 <tcp_input_delayed_close+0x74>)
 80102a4:	f006 ffaa 	bl	80171fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80102a8:	4b16      	ldr	r3, [pc, #88]	; (8010304 <tcp_input_delayed_close+0x78>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	f003 0310 	and.w	r3, r3, #16
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d01c      	beq.n	80102ee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	8b5b      	ldrh	r3, [r3, #26]
 80102b8:	f003 0310 	and.w	r3, r3, #16
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10d      	bne.n	80102dc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d008      	beq.n	80102dc <tcp_input_delayed_close+0x50>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	6912      	ldr	r2, [r2, #16]
 80102d4:	f06f 010e 	mvn.w	r1, #14
 80102d8:	4610      	mov	r0, r2
 80102da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80102dc:	6879      	ldr	r1, [r7, #4]
 80102de:	480a      	ldr	r0, [pc, #40]	; (8010308 <tcp_input_delayed_close+0x7c>)
 80102e0:	f7ff fa50 	bl	800f784 <tcp_pcb_remove>
    tcp_free(pcb);
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f7fd fd79 	bl	800dddc <tcp_free>
    return 1;
 80102ea:	2301      	movs	r3, #1
 80102ec:	e000      	b.n	80102f0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80102ee:	2300      	movs	r3, #0
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	0801a464 	.word	0x0801a464
 80102fc:	0801a634 	.word	0x0801a634
 8010300:	0801a4b0 	.word	0x0801a4b0
 8010304:	2001a6f9 	.word	0x2001a6f9
 8010308:	2001a6c0 	.word	0x2001a6c0

0801030c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801030c:	b590      	push	{r4, r7, lr}
 801030e:	b08b      	sub	sp, #44	; 0x2c
 8010310:	af04      	add	r7, sp, #16
 8010312:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010314:	4b6f      	ldr	r3, [pc, #444]	; (80104d4 <tcp_listen_input+0x1c8>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	f003 0304 	and.w	r3, r3, #4
 801031c:	2b00      	cmp	r3, #0
 801031e:	f040 80d2 	bne.w	80104c6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d106      	bne.n	8010336 <tcp_listen_input+0x2a>
 8010328:	4b6b      	ldr	r3, [pc, #428]	; (80104d8 <tcp_listen_input+0x1cc>)
 801032a:	f240 2281 	movw	r2, #641	; 0x281
 801032e:	496b      	ldr	r1, [pc, #428]	; (80104dc <tcp_listen_input+0x1d0>)
 8010330:	486b      	ldr	r0, [pc, #428]	; (80104e0 <tcp_listen_input+0x1d4>)
 8010332:	f006 ff63 	bl	80171fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010336:	4b67      	ldr	r3, [pc, #412]	; (80104d4 <tcp_listen_input+0x1c8>)
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	f003 0310 	and.w	r3, r3, #16
 801033e:	2b00      	cmp	r3, #0
 8010340:	d019      	beq.n	8010376 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010342:	4b68      	ldr	r3, [pc, #416]	; (80104e4 <tcp_listen_input+0x1d8>)
 8010344:	6819      	ldr	r1, [r3, #0]
 8010346:	4b68      	ldr	r3, [pc, #416]	; (80104e8 <tcp_listen_input+0x1dc>)
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	4b67      	ldr	r3, [pc, #412]	; (80104ec <tcp_listen_input+0x1e0>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010352:	4b67      	ldr	r3, [pc, #412]	; (80104f0 <tcp_listen_input+0x1e4>)
 8010354:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010356:	885b      	ldrh	r3, [r3, #2]
 8010358:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801035a:	4a65      	ldr	r2, [pc, #404]	; (80104f0 <tcp_listen_input+0x1e4>)
 801035c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801035e:	8812      	ldrh	r2, [r2, #0]
 8010360:	b292      	uxth	r2, r2
 8010362:	9202      	str	r2, [sp, #8]
 8010364:	9301      	str	r3, [sp, #4]
 8010366:	4b63      	ldr	r3, [pc, #396]	; (80104f4 <tcp_listen_input+0x1e8>)
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	4b63      	ldr	r3, [pc, #396]	; (80104f8 <tcp_listen_input+0x1ec>)
 801036c:	4602      	mov	r2, r0
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f003 fbda 	bl	8013b28 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010374:	e0a9      	b.n	80104ca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010376:	4b57      	ldr	r3, [pc, #348]	; (80104d4 <tcp_listen_input+0x1c8>)
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	f003 0302 	and.w	r3, r3, #2
 801037e:	2b00      	cmp	r3, #0
 8010380:	f000 80a3 	beq.w	80104ca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	7d5b      	ldrb	r3, [r3, #21]
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff f861 	bl	800f450 <tcp_alloc>
 801038e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d111      	bne.n	80103ba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00a      	beq.n	80103b4 <tcp_listen_input+0xa8>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	6910      	ldr	r0, [r2, #16]
 80103a6:	f04f 32ff 	mov.w	r2, #4294967295
 80103aa:	2100      	movs	r1, #0
 80103ac:	4798      	blx	r3
 80103ae:	4603      	mov	r3, r0
 80103b0:	73bb      	strb	r3, [r7, #14]
      return;
 80103b2:	e08b      	b.n	80104cc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80103b4:	23f0      	movs	r3, #240	; 0xf0
 80103b6:	73bb      	strb	r3, [r7, #14]
      return;
 80103b8:	e088      	b.n	80104cc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80103ba:	4b50      	ldr	r3, [pc, #320]	; (80104fc <tcp_listen_input+0x1f0>)
 80103bc:	695a      	ldr	r2, [r3, #20]
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80103c2:	4b4e      	ldr	r3, [pc, #312]	; (80104fc <tcp_listen_input+0x1f0>)
 80103c4:	691a      	ldr	r2, [r3, #16]
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	8ada      	ldrh	r2, [r3, #22]
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80103d2:	4b47      	ldr	r3, [pc, #284]	; (80104f0 <tcp_listen_input+0x1e4>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	b29a      	uxth	r2, r3
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	2203      	movs	r2, #3
 80103e2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80103e4:	4b41      	ldr	r3, [pc, #260]	; (80104ec <tcp_listen_input+0x1e0>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80103f6:	6978      	ldr	r0, [r7, #20]
 80103f8:	f7ff fa58 	bl	800f8ac <tcp_next_iss>
 80103fc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	693a      	ldr	r2, [r7, #16]
 8010402:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	693a      	ldr	r2, [r7, #16]
 801040e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	693a      	ldr	r2, [r7, #16]
 8010414:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010416:	4b35      	ldr	r3, [pc, #212]	; (80104ec <tcp_listen_input+0x1e0>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	1e5a      	subs	r2, r3, #1
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	691a      	ldr	r2, [r3, #16]
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	7a5b      	ldrb	r3, [r3, #9]
 8010432:	f003 030c 	and.w	r3, r3, #12
 8010436:	b2da      	uxtb	r2, r3
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7a1a      	ldrb	r2, [r3, #8]
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010444:	4b2e      	ldr	r3, [pc, #184]	; (8010500 <tcp_listen_input+0x1f4>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	60da      	str	r2, [r3, #12]
 801044c:	4a2c      	ldr	r2, [pc, #176]	; (8010500 <tcp_listen_input+0x1f4>)
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	6013      	str	r3, [r2, #0]
 8010452:	f003 fd2b 	bl	8013eac <tcp_timer_needed>
 8010456:	4b2b      	ldr	r3, [pc, #172]	; (8010504 <tcp_listen_input+0x1f8>)
 8010458:	2201      	movs	r2, #1
 801045a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801045c:	6978      	ldr	r0, [r7, #20]
 801045e:	f001 fd8f 	bl	8011f80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010462:	4b23      	ldr	r3, [pc, #140]	; (80104f0 <tcp_listen_input+0x1e4>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	89db      	ldrh	r3, [r3, #14]
 8010468:	b29a      	uxth	r2, r3
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010480:	697b      	ldr	r3, [r7, #20]
 8010482:	3304      	adds	r3, #4
 8010484:	4618      	mov	r0, r3
 8010486:	f005 f95b 	bl	8015740 <ip4_route>
 801048a:	4601      	mov	r1, r0
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	3304      	adds	r3, #4
 8010490:	461a      	mov	r2, r3
 8010492:	4620      	mov	r0, r4
 8010494:	f7ff fa30 	bl	800f8f8 <tcp_eff_send_mss_netif>
 8010498:	4603      	mov	r3, r0
 801049a:	461a      	mov	r2, r3
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80104a0:	2112      	movs	r1, #18
 80104a2:	6978      	ldr	r0, [r7, #20]
 80104a4:	f002 fc9e 	bl	8012de4 <tcp_enqueue_flags>
 80104a8:	4603      	mov	r3, r0
 80104aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80104ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d004      	beq.n	80104be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80104b4:	2100      	movs	r1, #0
 80104b6:	6978      	ldr	r0, [r7, #20]
 80104b8:	f7fd feba 	bl	800e230 <tcp_abandon>
      return;
 80104bc:	e006      	b.n	80104cc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80104be:	6978      	ldr	r0, [r7, #20]
 80104c0:	f002 fd7e 	bl	8012fc0 <tcp_output>
  return;
 80104c4:	e001      	b.n	80104ca <tcp_listen_input+0x1be>
    return;
 80104c6:	bf00      	nop
 80104c8:	e000      	b.n	80104cc <tcp_listen_input+0x1c0>
  return;
 80104ca:	bf00      	nop
}
 80104cc:	371c      	adds	r7, #28
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd90      	pop	{r4, r7, pc}
 80104d2:	bf00      	nop
 80104d4:	2001a6f8 	.word	0x2001a6f8
 80104d8:	0801a464 	.word	0x0801a464
 80104dc:	0801a65c 	.word	0x0801a65c
 80104e0:	0801a4b0 	.word	0x0801a4b0
 80104e4:	2001a6f0 	.word	0x2001a6f0
 80104e8:	2001a6f6 	.word	0x2001a6f6
 80104ec:	2001a6ec 	.word	0x2001a6ec
 80104f0:	2001a6dc 	.word	0x2001a6dc
 80104f4:	200058e0 	.word	0x200058e0
 80104f8:	200058e4 	.word	0x200058e4
 80104fc:	200058d0 	.word	0x200058d0
 8010500:	2001a6c0 	.word	0x2001a6c0
 8010504:	2001a6c8 	.word	0x2001a6c8

08010508 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af04      	add	r7, sp, #16
 801050e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010510:	4b2f      	ldr	r3, [pc, #188]	; (80105d0 <tcp_timewait_input+0xc8>)
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	f003 0304 	and.w	r3, r3, #4
 8010518:	2b00      	cmp	r3, #0
 801051a:	d153      	bne.n	80105c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d106      	bne.n	8010530 <tcp_timewait_input+0x28>
 8010522:	4b2c      	ldr	r3, [pc, #176]	; (80105d4 <tcp_timewait_input+0xcc>)
 8010524:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010528:	492b      	ldr	r1, [pc, #172]	; (80105d8 <tcp_timewait_input+0xd0>)
 801052a:	482c      	ldr	r0, [pc, #176]	; (80105dc <tcp_timewait_input+0xd4>)
 801052c:	f006 fe66 	bl	80171fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010530:	4b27      	ldr	r3, [pc, #156]	; (80105d0 <tcp_timewait_input+0xc8>)
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	f003 0302 	and.w	r3, r3, #2
 8010538:	2b00      	cmp	r3, #0
 801053a:	d02a      	beq.n	8010592 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801053c:	4b28      	ldr	r3, [pc, #160]	; (80105e0 <tcp_timewait_input+0xd8>)
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	2b00      	cmp	r3, #0
 8010548:	db2d      	blt.n	80105a6 <tcp_timewait_input+0x9e>
 801054a:	4b25      	ldr	r3, [pc, #148]	; (80105e0 <tcp_timewait_input+0xd8>)
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010552:	6879      	ldr	r1, [r7, #4]
 8010554:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010556:	440b      	add	r3, r1
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	dc23      	bgt.n	80105a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801055e:	4b21      	ldr	r3, [pc, #132]	; (80105e4 <tcp_timewait_input+0xdc>)
 8010560:	6819      	ldr	r1, [r3, #0]
 8010562:	4b21      	ldr	r3, [pc, #132]	; (80105e8 <tcp_timewait_input+0xe0>)
 8010564:	881b      	ldrh	r3, [r3, #0]
 8010566:	461a      	mov	r2, r3
 8010568:	4b1d      	ldr	r3, [pc, #116]	; (80105e0 <tcp_timewait_input+0xd8>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801056e:	4b1f      	ldr	r3, [pc, #124]	; (80105ec <tcp_timewait_input+0xe4>)
 8010570:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010572:	885b      	ldrh	r3, [r3, #2]
 8010574:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010576:	4a1d      	ldr	r2, [pc, #116]	; (80105ec <tcp_timewait_input+0xe4>)
 8010578:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801057a:	8812      	ldrh	r2, [r2, #0]
 801057c:	b292      	uxth	r2, r2
 801057e:	9202      	str	r2, [sp, #8]
 8010580:	9301      	str	r3, [sp, #4]
 8010582:	4b1b      	ldr	r3, [pc, #108]	; (80105f0 <tcp_timewait_input+0xe8>)
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	4b1b      	ldr	r3, [pc, #108]	; (80105f4 <tcp_timewait_input+0xec>)
 8010588:	4602      	mov	r2, r0
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f003 facc 	bl	8013b28 <tcp_rst>
      return;
 8010590:	e01b      	b.n	80105ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010592:	4b0f      	ldr	r3, [pc, #60]	; (80105d0 <tcp_timewait_input+0xc8>)
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	f003 0301 	and.w	r3, r3, #1
 801059a:	2b00      	cmp	r3, #0
 801059c:	d003      	beq.n	80105a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801059e:	4b16      	ldr	r3, [pc, #88]	; (80105f8 <tcp_timewait_input+0xf0>)
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80105a6:	4b10      	ldr	r3, [pc, #64]	; (80105e8 <tcp_timewait_input+0xe0>)
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00c      	beq.n	80105c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	8b5b      	ldrh	r3, [r3, #26]
 80105b2:	f043 0302 	orr.w	r3, r3, #2
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f002 fcff 	bl	8012fc0 <tcp_output>
  }
  return;
 80105c2:	e001      	b.n	80105c8 <tcp_timewait_input+0xc0>
    return;
 80105c4:	bf00      	nop
 80105c6:	e000      	b.n	80105ca <tcp_timewait_input+0xc2>
  return;
 80105c8:	bf00      	nop
}
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	2001a6f8 	.word	0x2001a6f8
 80105d4:	0801a464 	.word	0x0801a464
 80105d8:	0801a67c 	.word	0x0801a67c
 80105dc:	0801a4b0 	.word	0x0801a4b0
 80105e0:	2001a6ec 	.word	0x2001a6ec
 80105e4:	2001a6f0 	.word	0x2001a6f0
 80105e8:	2001a6f6 	.word	0x2001a6f6
 80105ec:	2001a6dc 	.word	0x2001a6dc
 80105f0:	200058e0 	.word	0x200058e0
 80105f4:	200058e4 	.word	0x200058e4
 80105f8:	2001a6b4 	.word	0x2001a6b4

080105fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80105fc:	b590      	push	{r4, r7, lr}
 80105fe:	b08d      	sub	sp, #52	; 0x34
 8010600:	af04      	add	r7, sp, #16
 8010602:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010608:	2300      	movs	r3, #0
 801060a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <tcp_process+0x24>
 8010612:	4b9d      	ldr	r3, [pc, #628]	; (8010888 <tcp_process+0x28c>)
 8010614:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010618:	499c      	ldr	r1, [pc, #624]	; (801088c <tcp_process+0x290>)
 801061a:	489d      	ldr	r0, [pc, #628]	; (8010890 <tcp_process+0x294>)
 801061c:	f006 fdee 	bl	80171fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010620:	4b9c      	ldr	r3, [pc, #624]	; (8010894 <tcp_process+0x298>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	f003 0304 	and.w	r3, r3, #4
 8010628:	2b00      	cmp	r3, #0
 801062a:	d04e      	beq.n	80106ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7d1b      	ldrb	r3, [r3, #20]
 8010630:	2b02      	cmp	r3, #2
 8010632:	d108      	bne.n	8010646 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010638:	4b97      	ldr	r3, [pc, #604]	; (8010898 <tcp_process+0x29c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	429a      	cmp	r2, r3
 801063e:	d123      	bne.n	8010688 <tcp_process+0x8c>
        acceptable = 1;
 8010640:	2301      	movs	r3, #1
 8010642:	76fb      	strb	r3, [r7, #27]
 8010644:	e020      	b.n	8010688 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801064a:	4b94      	ldr	r3, [pc, #592]	; (801089c <tcp_process+0x2a0>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	429a      	cmp	r2, r3
 8010650:	d102      	bne.n	8010658 <tcp_process+0x5c>
        acceptable = 1;
 8010652:	2301      	movs	r3, #1
 8010654:	76fb      	strb	r3, [r7, #27]
 8010656:	e017      	b.n	8010688 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010658:	4b90      	ldr	r3, [pc, #576]	; (801089c <tcp_process+0x2a0>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010660:	1ad3      	subs	r3, r2, r3
 8010662:	2b00      	cmp	r3, #0
 8010664:	db10      	blt.n	8010688 <tcp_process+0x8c>
 8010666:	4b8d      	ldr	r3, [pc, #564]	; (801089c <tcp_process+0x2a0>)
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066e:	6879      	ldr	r1, [r7, #4]
 8010670:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010672:	440b      	add	r3, r1
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	2b00      	cmp	r3, #0
 8010678:	dc06      	bgt.n	8010688 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	8b5b      	ldrh	r3, [r3, #26]
 801067e:	f043 0302 	orr.w	r3, r3, #2
 8010682:	b29a      	uxth	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010688:	7efb      	ldrb	r3, [r7, #27]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d01b      	beq.n	80106c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	7d1b      	ldrb	r3, [r3, #20]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d106      	bne.n	80106a4 <tcp_process+0xa8>
 8010696:	4b7c      	ldr	r3, [pc, #496]	; (8010888 <tcp_process+0x28c>)
 8010698:	f44f 724e 	mov.w	r2, #824	; 0x338
 801069c:	4980      	ldr	r1, [pc, #512]	; (80108a0 <tcp_process+0x2a4>)
 801069e:	487c      	ldr	r0, [pc, #496]	; (8010890 <tcp_process+0x294>)
 80106a0:	f006 fdac 	bl	80171fc <iprintf>
      recv_flags |= TF_RESET;
 80106a4:	4b7f      	ldr	r3, [pc, #508]	; (80108a4 <tcp_process+0x2a8>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	f043 0308 	orr.w	r3, r3, #8
 80106ac:	b2da      	uxtb	r2, r3
 80106ae:	4b7d      	ldr	r3, [pc, #500]	; (80108a4 <tcp_process+0x2a8>)
 80106b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	8b5b      	ldrh	r3, [r3, #26]
 80106b6:	f023 0301 	bic.w	r3, r3, #1
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80106c0:	f06f 030d 	mvn.w	r3, #13
 80106c4:	e37a      	b.n	8010dbc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80106c6:	2300      	movs	r3, #0
 80106c8:	e378      	b.n	8010dbc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80106ca:	4b72      	ldr	r3, [pc, #456]	; (8010894 <tcp_process+0x298>)
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	f003 0302 	and.w	r3, r3, #2
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d010      	beq.n	80106f8 <tcp_process+0xfc>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	7d1b      	ldrb	r3, [r3, #20]
 80106da:	2b02      	cmp	r3, #2
 80106dc:	d00c      	beq.n	80106f8 <tcp_process+0xfc>
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	7d1b      	ldrb	r3, [r3, #20]
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	d008      	beq.n	80106f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	8b5b      	ldrh	r3, [r3, #26]
 80106ea:	f043 0302 	orr.w	r3, r3, #2
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80106f4:	2300      	movs	r3, #0
 80106f6:	e361      	b.n	8010dbc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	8b5b      	ldrh	r3, [r3, #26]
 80106fc:	f003 0310 	and.w	r3, r3, #16
 8010700:	2b00      	cmp	r3, #0
 8010702:	d103      	bne.n	801070c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010704:	4b68      	ldr	r3, [pc, #416]	; (80108a8 <tcp_process+0x2ac>)
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2200      	movs	r2, #0
 8010718:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f001 fc2f 	bl	8011f80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	7d1b      	ldrb	r3, [r3, #20]
 8010726:	3b02      	subs	r3, #2
 8010728:	2b07      	cmp	r3, #7
 801072a:	f200 8337 	bhi.w	8010d9c <tcp_process+0x7a0>
 801072e:	a201      	add	r2, pc, #4	; (adr r2, 8010734 <tcp_process+0x138>)
 8010730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010734:	08010755 	.word	0x08010755
 8010738:	08010985 	.word	0x08010985
 801073c:	08010afd 	.word	0x08010afd
 8010740:	08010b27 	.word	0x08010b27
 8010744:	08010c4b 	.word	0x08010c4b
 8010748:	08010afd 	.word	0x08010afd
 801074c:	08010cd7 	.word	0x08010cd7
 8010750:	08010d67 	.word	0x08010d67
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010754:	4b4f      	ldr	r3, [pc, #316]	; (8010894 <tcp_process+0x298>)
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	f003 0310 	and.w	r3, r3, #16
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 80e4 	beq.w	801092a <tcp_process+0x32e>
 8010762:	4b4c      	ldr	r3, [pc, #304]	; (8010894 <tcp_process+0x298>)
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	f003 0302 	and.w	r3, r3, #2
 801076a:	2b00      	cmp	r3, #0
 801076c:	f000 80dd 	beq.w	801092a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	4b48      	ldr	r3, [pc, #288]	; (8010898 <tcp_process+0x29c>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	429a      	cmp	r2, r3
 801077c:	f040 80d5 	bne.w	801092a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010780:	4b46      	ldr	r3, [pc, #280]	; (801089c <tcp_process+0x2a0>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	1c5a      	adds	r2, r3, #1
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010792:	4b41      	ldr	r3, [pc, #260]	; (8010898 <tcp_process+0x29c>)
 8010794:	681a      	ldr	r2, [r3, #0]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801079a:	4b44      	ldr	r3, [pc, #272]	; (80108ac <tcp_process+0x2b0>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	89db      	ldrh	r3, [r3, #14]
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80107b4:	4b39      	ldr	r3, [pc, #228]	; (801089c <tcp_process+0x2a0>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	1e5a      	subs	r2, r3, #1
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2204      	movs	r2, #4
 80107c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	3304      	adds	r3, #4
 80107cc:	4618      	mov	r0, r3
 80107ce:	f004 ffb7 	bl	8015740 <ip4_route>
 80107d2:	4601      	mov	r1, r0
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	3304      	adds	r3, #4
 80107d8:	461a      	mov	r2, r3
 80107da:	4620      	mov	r0, r4
 80107dc:	f7ff f88c 	bl	800f8f8 <tcp_eff_send_mss_netif>
 80107e0:	4603      	mov	r3, r0
 80107e2:	461a      	mov	r2, r3
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ec:	009a      	lsls	r2, r3, #2
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107f2:	005b      	lsls	r3, r3, #1
 80107f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80107f8:	428b      	cmp	r3, r1
 80107fa:	bf38      	it	cc
 80107fc:	460b      	movcc	r3, r1
 80107fe:	429a      	cmp	r2, r3
 8010800:	d204      	bcs.n	801080c <tcp_process+0x210>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	b29b      	uxth	r3, r3
 801080a:	e00d      	b.n	8010828 <tcp_process+0x22c>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	f241 121c 	movw	r2, #4380	; 0x111c
 8010816:	4293      	cmp	r3, r2
 8010818:	d904      	bls.n	8010824 <tcp_process+0x228>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801081e:	005b      	lsls	r3, r3, #1
 8010820:	b29b      	uxth	r3, r3
 8010822:	e001      	b.n	8010828 <tcp_process+0x22c>
 8010824:	f241 131c 	movw	r3, #4380	; 0x111c
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010834:	2b00      	cmp	r3, #0
 8010836:	d106      	bne.n	8010846 <tcp_process+0x24a>
 8010838:	4b13      	ldr	r3, [pc, #76]	; (8010888 <tcp_process+0x28c>)
 801083a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801083e:	491c      	ldr	r1, [pc, #112]	; (80108b0 <tcp_process+0x2b4>)
 8010840:	4813      	ldr	r0, [pc, #76]	; (8010890 <tcp_process+0x294>)
 8010842:	f006 fcdb 	bl	80171fc <iprintf>
        --pcb->snd_queuelen;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801084c:	3b01      	subs	r3, #1
 801084e:	b29a      	uxth	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801085a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d12a      	bne.n	80108b8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010866:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <tcp_process+0x280>
 801086e:	4b06      	ldr	r3, [pc, #24]	; (8010888 <tcp_process+0x28c>)
 8010870:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010874:	490f      	ldr	r1, [pc, #60]	; (80108b4 <tcp_process+0x2b8>)
 8010876:	4806      	ldr	r0, [pc, #24]	; (8010890 <tcp_process+0x294>)
 8010878:	f006 fcc0 	bl	80171fc <iprintf>
          pcb->unsent = rseg->next;
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	66da      	str	r2, [r3, #108]	; 0x6c
 8010884:	e01c      	b.n	80108c0 <tcp_process+0x2c4>
 8010886:	bf00      	nop
 8010888:	0801a464 	.word	0x0801a464
 801088c:	0801a69c 	.word	0x0801a69c
 8010890:	0801a4b0 	.word	0x0801a4b0
 8010894:	2001a6f8 	.word	0x2001a6f8
 8010898:	2001a6f0 	.word	0x2001a6f0
 801089c:	2001a6ec 	.word	0x2001a6ec
 80108a0:	0801a6b8 	.word	0x0801a6b8
 80108a4:	2001a6f9 	.word	0x2001a6f9
 80108a8:	2001a6b4 	.word	0x2001a6b4
 80108ac:	2001a6dc 	.word	0x2001a6dc
 80108b0:	0801a6d8 	.word	0x0801a6d8
 80108b4:	0801a6f0 	.word	0x0801a6f0
        } else {
          pcb->unacked = rseg->next;
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80108c0:	69f8      	ldr	r0, [r7, #28]
 80108c2:	f7fe fc58 	bl	800f176 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d104      	bne.n	80108d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80108d6:	e006      	b.n	80108e6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00a      	beq.n	8010906 <tcp_process+0x30a>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	6910      	ldr	r0, [r2, #16]
 80108fa:	2200      	movs	r2, #0
 80108fc:	6879      	ldr	r1, [r7, #4]
 80108fe:	4798      	blx	r3
 8010900:	4603      	mov	r3, r0
 8010902:	76bb      	strb	r3, [r7, #26]
 8010904:	e001      	b.n	801090a <tcp_process+0x30e>
 8010906:	2300      	movs	r3, #0
 8010908:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801090a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801090e:	f113 0f0d 	cmn.w	r3, #13
 8010912:	d102      	bne.n	801091a <tcp_process+0x31e>
          return ERR_ABRT;
 8010914:	f06f 030c 	mvn.w	r3, #12
 8010918:	e250      	b.n	8010dbc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	8b5b      	ldrh	r3, [r3, #26]
 801091e:	f043 0302 	orr.w	r3, r3, #2
 8010922:	b29a      	uxth	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010928:	e23a      	b.n	8010da0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801092a:	4b98      	ldr	r3, [pc, #608]	; (8010b8c <tcp_process+0x590>)
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	f003 0310 	and.w	r3, r3, #16
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 8234 	beq.w	8010da0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010938:	4b95      	ldr	r3, [pc, #596]	; (8010b90 <tcp_process+0x594>)
 801093a:	6819      	ldr	r1, [r3, #0]
 801093c:	4b95      	ldr	r3, [pc, #596]	; (8010b94 <tcp_process+0x598>)
 801093e:	881b      	ldrh	r3, [r3, #0]
 8010940:	461a      	mov	r2, r3
 8010942:	4b95      	ldr	r3, [pc, #596]	; (8010b98 <tcp_process+0x59c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010948:	4b94      	ldr	r3, [pc, #592]	; (8010b9c <tcp_process+0x5a0>)
 801094a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801094c:	885b      	ldrh	r3, [r3, #2]
 801094e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010950:	4a92      	ldr	r2, [pc, #584]	; (8010b9c <tcp_process+0x5a0>)
 8010952:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010954:	8812      	ldrh	r2, [r2, #0]
 8010956:	b292      	uxth	r2, r2
 8010958:	9202      	str	r2, [sp, #8]
 801095a:	9301      	str	r3, [sp, #4]
 801095c:	4b90      	ldr	r3, [pc, #576]	; (8010ba0 <tcp_process+0x5a4>)
 801095e:	9300      	str	r3, [sp, #0]
 8010960:	4b90      	ldr	r3, [pc, #576]	; (8010ba4 <tcp_process+0x5a8>)
 8010962:	4602      	mov	r2, r0
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f003 f8df 	bl	8013b28 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010970:	2b05      	cmp	r3, #5
 8010972:	f200 8215 	bhi.w	8010da0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f002 fea9 	bl	80136d4 <tcp_rexmit_rto>
      break;
 8010982:	e20d      	b.n	8010da0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010984:	4b81      	ldr	r3, [pc, #516]	; (8010b8c <tcp_process+0x590>)
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	f003 0310 	and.w	r3, r3, #16
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 80a1 	beq.w	8010ad4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010992:	4b7f      	ldr	r3, [pc, #508]	; (8010b90 <tcp_process+0x594>)
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	3b01      	subs	r3, #1
 801099e:	2b00      	cmp	r3, #0
 80109a0:	db7e      	blt.n	8010aa0 <tcp_process+0x4a4>
 80109a2:	4b7b      	ldr	r3, [pc, #492]	; (8010b90 <tcp_process+0x594>)
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	dc77      	bgt.n	8010aa0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2204      	movs	r2, #4
 80109b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d102      	bne.n	80109c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80109be:	23fa      	movs	r3, #250	; 0xfa
 80109c0:	76bb      	strb	r3, [r7, #26]
 80109c2:	e01d      	b.n	8010a00 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d106      	bne.n	80109dc <tcp_process+0x3e0>
 80109ce:	4b76      	ldr	r3, [pc, #472]	; (8010ba8 <tcp_process+0x5ac>)
 80109d0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80109d4:	4975      	ldr	r1, [pc, #468]	; (8010bac <tcp_process+0x5b0>)
 80109d6:	4876      	ldr	r0, [pc, #472]	; (8010bb0 <tcp_process+0x5b4>)
 80109d8:	f006 fc10 	bl	80171fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00a      	beq.n	80109fc <tcp_process+0x400>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109ea:	699b      	ldr	r3, [r3, #24]
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	6910      	ldr	r0, [r2, #16]
 80109f0:	2200      	movs	r2, #0
 80109f2:	6879      	ldr	r1, [r7, #4]
 80109f4:	4798      	blx	r3
 80109f6:	4603      	mov	r3, r0
 80109f8:	76bb      	strb	r3, [r7, #26]
 80109fa:	e001      	b.n	8010a00 <tcp_process+0x404>
 80109fc:	23f0      	movs	r3, #240	; 0xf0
 80109fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010a00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d00a      	beq.n	8010a1e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010a08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010a0c:	f113 0f0d 	cmn.w	r3, #13
 8010a10:	d002      	beq.n	8010a18 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7fd fcca 	bl	800e3ac <tcp_abort>
            }
            return ERR_ABRT;
 8010a18:	f06f 030c 	mvn.w	r3, #12
 8010a1c:	e1ce      	b.n	8010dbc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fae0 	bl	8010fe4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010a24:	4b63      	ldr	r3, [pc, #396]	; (8010bb4 <tcp_process+0x5b8>)
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d005      	beq.n	8010a38 <tcp_process+0x43c>
            recv_acked--;
 8010a2c:	4b61      	ldr	r3, [pc, #388]	; (8010bb4 <tcp_process+0x5b8>)
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	3b01      	subs	r3, #1
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	4b5f      	ldr	r3, [pc, #380]	; (8010bb4 <tcp_process+0x5b8>)
 8010a36:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a3c:	009a      	lsls	r2, r3, #2
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	f241 111c 	movw	r1, #4380	; 0x111c
 8010a48:	428b      	cmp	r3, r1
 8010a4a:	bf38      	it	cc
 8010a4c:	460b      	movcc	r3, r1
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d204      	bcs.n	8010a5c <tcp_process+0x460>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	e00d      	b.n	8010a78 <tcp_process+0x47c>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	f241 121c 	movw	r2, #4380	; 0x111c
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d904      	bls.n	8010a74 <tcp_process+0x478>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	e001      	b.n	8010a78 <tcp_process+0x47c>
 8010a74:	f241 131c 	movw	r3, #4380	; 0x111c
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010a7e:	4b4e      	ldr	r3, [pc, #312]	; (8010bb8 <tcp_process+0x5bc>)
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	f003 0320 	and.w	r3, r3, #32
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d037      	beq.n	8010afa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8b5b      	ldrh	r3, [r3, #26]
 8010a8e:	f043 0302 	orr.w	r3, r3, #2
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2207      	movs	r2, #7
 8010a9c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a9e:	e02c      	b.n	8010afa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aa0:	4b3b      	ldr	r3, [pc, #236]	; (8010b90 <tcp_process+0x594>)
 8010aa2:	6819      	ldr	r1, [r3, #0]
 8010aa4:	4b3b      	ldr	r3, [pc, #236]	; (8010b94 <tcp_process+0x598>)
 8010aa6:	881b      	ldrh	r3, [r3, #0]
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	4b3b      	ldr	r3, [pc, #236]	; (8010b98 <tcp_process+0x59c>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ab0:	4b3a      	ldr	r3, [pc, #232]	; (8010b9c <tcp_process+0x5a0>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ab4:	885b      	ldrh	r3, [r3, #2]
 8010ab6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ab8:	4a38      	ldr	r2, [pc, #224]	; (8010b9c <tcp_process+0x5a0>)
 8010aba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010abc:	8812      	ldrh	r2, [r2, #0]
 8010abe:	b292      	uxth	r2, r2
 8010ac0:	9202      	str	r2, [sp, #8]
 8010ac2:	9301      	str	r3, [sp, #4]
 8010ac4:	4b36      	ldr	r3, [pc, #216]	; (8010ba0 <tcp_process+0x5a4>)
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	4b36      	ldr	r3, [pc, #216]	; (8010ba4 <tcp_process+0x5a8>)
 8010aca:	4602      	mov	r2, r0
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f003 f82b 	bl	8013b28 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010ad2:	e167      	b.n	8010da4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010ad4:	4b2d      	ldr	r3, [pc, #180]	; (8010b8c <tcp_process+0x590>)
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	f003 0302 	and.w	r3, r3, #2
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f000 8161 	beq.w	8010da4 <tcp_process+0x7a8>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae6:	1e5a      	subs	r2, r3, #1
 8010ae8:	4b2b      	ldr	r3, [pc, #172]	; (8010b98 <tcp_process+0x59c>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	f040 8159 	bne.w	8010da4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f002 fe10 	bl	8013718 <tcp_rexmit>
      break;
 8010af8:	e154      	b.n	8010da4 <tcp_process+0x7a8>
 8010afa:	e153      	b.n	8010da4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f000 fa71 	bl	8010fe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010b02:	4b2d      	ldr	r3, [pc, #180]	; (8010bb8 <tcp_process+0x5bc>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	f003 0320 	and.w	r3, r3, #32
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 814c 	beq.w	8010da8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	8b5b      	ldrh	r3, [r3, #26]
 8010b14:	f043 0302 	orr.w	r3, r3, #2
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2207      	movs	r2, #7
 8010b22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b24:	e140      	b.n	8010da8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 fa5c 	bl	8010fe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b2c:	4b22      	ldr	r3, [pc, #136]	; (8010bb8 <tcp_process+0x5bc>)
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	f003 0320 	and.w	r3, r3, #32
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d071      	beq.n	8010c1c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b38:	4b14      	ldr	r3, [pc, #80]	; (8010b8c <tcp_process+0x590>)
 8010b3a:	781b      	ldrb	r3, [r3, #0]
 8010b3c:	f003 0310 	and.w	r3, r3, #16
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d060      	beq.n	8010c06 <tcp_process+0x60a>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b48:	4b11      	ldr	r3, [pc, #68]	; (8010b90 <tcp_process+0x594>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d15a      	bne.n	8010c06 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d156      	bne.n	8010c06 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	8b5b      	ldrh	r3, [r3, #26]
 8010b5c:	f043 0302 	orr.w	r3, r3, #2
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7fe fdbc 	bl	800f6e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010b6c:	4b13      	ldr	r3, [pc, #76]	; (8010bbc <tcp_process+0x5c0>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d105      	bne.n	8010b82 <tcp_process+0x586>
 8010b76:	4b11      	ldr	r3, [pc, #68]	; (8010bbc <tcp_process+0x5c0>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	4a0f      	ldr	r2, [pc, #60]	; (8010bbc <tcp_process+0x5c0>)
 8010b7e:	6013      	str	r3, [r2, #0]
 8010b80:	e02e      	b.n	8010be0 <tcp_process+0x5e4>
 8010b82:	4b0e      	ldr	r3, [pc, #56]	; (8010bbc <tcp_process+0x5c0>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	617b      	str	r3, [r7, #20]
 8010b88:	e027      	b.n	8010bda <tcp_process+0x5de>
 8010b8a:	bf00      	nop
 8010b8c:	2001a6f8 	.word	0x2001a6f8
 8010b90:	2001a6f0 	.word	0x2001a6f0
 8010b94:	2001a6f6 	.word	0x2001a6f6
 8010b98:	2001a6ec 	.word	0x2001a6ec
 8010b9c:	2001a6dc 	.word	0x2001a6dc
 8010ba0:	200058e0 	.word	0x200058e0
 8010ba4:	200058e4 	.word	0x200058e4
 8010ba8:	0801a464 	.word	0x0801a464
 8010bac:	0801a704 	.word	0x0801a704
 8010bb0:	0801a4b0 	.word	0x0801a4b0
 8010bb4:	2001a6f4 	.word	0x2001a6f4
 8010bb8:	2001a6f9 	.word	0x2001a6f9
 8010bbc:	2001a6c0 	.word	0x2001a6c0
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d104      	bne.n	8010bd4 <tcp_process+0x5d8>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	68da      	ldr	r2, [r3, #12]
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	60da      	str	r2, [r3, #12]
 8010bd2:	e005      	b.n	8010be0 <tcp_process+0x5e4>
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	617b      	str	r3, [r7, #20]
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1ef      	bne.n	8010bc0 <tcp_process+0x5c4>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	60da      	str	r2, [r3, #12]
 8010be6:	4b77      	ldr	r3, [pc, #476]	; (8010dc4 <tcp_process+0x7c8>)
 8010be8:	2201      	movs	r2, #1
 8010bea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	220a      	movs	r2, #10
 8010bf0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010bf2:	4b75      	ldr	r3, [pc, #468]	; (8010dc8 <tcp_process+0x7cc>)
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	60da      	str	r2, [r3, #12]
 8010bfa:	4a73      	ldr	r2, [pc, #460]	; (8010dc8 <tcp_process+0x7cc>)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6013      	str	r3, [r2, #0]
 8010c00:	f003 f954 	bl	8013eac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010c04:	e0d2      	b.n	8010dac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	8b5b      	ldrh	r3, [r3, #26]
 8010c0a:	f043 0302 	orr.w	r3, r3, #2
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2208      	movs	r2, #8
 8010c18:	751a      	strb	r2, [r3, #20]
      break;
 8010c1a:	e0c7      	b.n	8010dac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c1c:	4b6b      	ldr	r3, [pc, #428]	; (8010dcc <tcp_process+0x7d0>)
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f000 80c1 	beq.w	8010dac <tcp_process+0x7b0>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c2e:	4b68      	ldr	r3, [pc, #416]	; (8010dd0 <tcp_process+0x7d4>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	f040 80ba 	bne.w	8010dac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f040 80b5 	bne.w	8010dac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	2206      	movs	r2, #6
 8010c46:	751a      	strb	r2, [r3, #20]
      break;
 8010c48:	e0b0      	b.n	8010dac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 f9ca 	bl	8010fe4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010c50:	4b60      	ldr	r3, [pc, #384]	; (8010dd4 <tcp_process+0x7d8>)
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	f003 0320 	and.w	r3, r3, #32
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f000 80a9 	beq.w	8010db0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	8b5b      	ldrh	r3, [r3, #26]
 8010c62:	f043 0302 	orr.w	r3, r3, #2
 8010c66:	b29a      	uxth	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f7fe fd39 	bl	800f6e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c72:	4b59      	ldr	r3, [pc, #356]	; (8010dd8 <tcp_process+0x7dc>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d105      	bne.n	8010c88 <tcp_process+0x68c>
 8010c7c:	4b56      	ldr	r3, [pc, #344]	; (8010dd8 <tcp_process+0x7dc>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	4a55      	ldr	r2, [pc, #340]	; (8010dd8 <tcp_process+0x7dc>)
 8010c84:	6013      	str	r3, [r2, #0]
 8010c86:	e013      	b.n	8010cb0 <tcp_process+0x6b4>
 8010c88:	4b53      	ldr	r3, [pc, #332]	; (8010dd8 <tcp_process+0x7dc>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	613b      	str	r3, [r7, #16]
 8010c8e:	e00c      	b.n	8010caa <tcp_process+0x6ae>
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d104      	bne.n	8010ca4 <tcp_process+0x6a8>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	68da      	ldr	r2, [r3, #12]
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	60da      	str	r2, [r3, #12]
 8010ca2:	e005      	b.n	8010cb0 <tcp_process+0x6b4>
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	613b      	str	r3, [r7, #16]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1ef      	bne.n	8010c90 <tcp_process+0x694>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	60da      	str	r2, [r3, #12]
 8010cb6:	4b43      	ldr	r3, [pc, #268]	; (8010dc4 <tcp_process+0x7c8>)
 8010cb8:	2201      	movs	r2, #1
 8010cba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	220a      	movs	r2, #10
 8010cc0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010cc2:	4b41      	ldr	r3, [pc, #260]	; (8010dc8 <tcp_process+0x7cc>)
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	60da      	str	r2, [r3, #12]
 8010cca:	4a3f      	ldr	r2, [pc, #252]	; (8010dc8 <tcp_process+0x7cc>)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6013      	str	r3, [r2, #0]
 8010cd0:	f003 f8ec 	bl	8013eac <tcp_timer_needed>
      }
      break;
 8010cd4:	e06c      	b.n	8010db0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f000 f984 	bl	8010fe4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010cdc:	4b3b      	ldr	r3, [pc, #236]	; (8010dcc <tcp_process+0x7d0>)
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	f003 0310 	and.w	r3, r3, #16
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d065      	beq.n	8010db4 <tcp_process+0x7b8>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cec:	4b38      	ldr	r3, [pc, #224]	; (8010dd0 <tcp_process+0x7d4>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d15f      	bne.n	8010db4 <tcp_process+0x7b8>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d15b      	bne.n	8010db4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f7fe fcf1 	bl	800f6e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010d02:	4b35      	ldr	r3, [pc, #212]	; (8010dd8 <tcp_process+0x7dc>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	687a      	ldr	r2, [r7, #4]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d105      	bne.n	8010d18 <tcp_process+0x71c>
 8010d0c:	4b32      	ldr	r3, [pc, #200]	; (8010dd8 <tcp_process+0x7dc>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68db      	ldr	r3, [r3, #12]
 8010d12:	4a31      	ldr	r2, [pc, #196]	; (8010dd8 <tcp_process+0x7dc>)
 8010d14:	6013      	str	r3, [r2, #0]
 8010d16:	e013      	b.n	8010d40 <tcp_process+0x744>
 8010d18:	4b2f      	ldr	r3, [pc, #188]	; (8010dd8 <tcp_process+0x7dc>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	60fb      	str	r3, [r7, #12]
 8010d1e:	e00c      	b.n	8010d3a <tcp_process+0x73e>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d104      	bne.n	8010d34 <tcp_process+0x738>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	68da      	ldr	r2, [r3, #12]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	60da      	str	r2, [r3, #12]
 8010d32:	e005      	b.n	8010d40 <tcp_process+0x744>
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1ef      	bne.n	8010d20 <tcp_process+0x724>
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	60da      	str	r2, [r3, #12]
 8010d46:	4b1f      	ldr	r3, [pc, #124]	; (8010dc4 <tcp_process+0x7c8>)
 8010d48:	2201      	movs	r2, #1
 8010d4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	220a      	movs	r2, #10
 8010d50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010d52:	4b1d      	ldr	r3, [pc, #116]	; (8010dc8 <tcp_process+0x7cc>)
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	4a1b      	ldr	r2, [pc, #108]	; (8010dc8 <tcp_process+0x7cc>)
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	f003 f8a4 	bl	8013eac <tcp_timer_needed>
      }
      break;
 8010d64:	e026      	b.n	8010db4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 f93c 	bl	8010fe4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010d6c:	4b17      	ldr	r3, [pc, #92]	; (8010dcc <tcp_process+0x7d0>)
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	f003 0310 	and.w	r3, r3, #16
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d01f      	beq.n	8010db8 <tcp_process+0x7bc>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d7c:	4b14      	ldr	r3, [pc, #80]	; (8010dd0 <tcp_process+0x7d4>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d119      	bne.n	8010db8 <tcp_process+0x7bc>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d115      	bne.n	8010db8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d8c:	4b11      	ldr	r3, [pc, #68]	; (8010dd4 <tcp_process+0x7d8>)
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	f043 0310 	orr.w	r3, r3, #16
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	4b0f      	ldr	r3, [pc, #60]	; (8010dd4 <tcp_process+0x7d8>)
 8010d98:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010d9a:	e00d      	b.n	8010db8 <tcp_process+0x7bc>
    default:
      break;
 8010d9c:	bf00      	nop
 8010d9e:	e00c      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010da0:	bf00      	nop
 8010da2:	e00a      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010da4:	bf00      	nop
 8010da6:	e008      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010da8:	bf00      	nop
 8010daa:	e006      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010dac:	bf00      	nop
 8010dae:	e004      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010db0:	bf00      	nop
 8010db2:	e002      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010db4:	bf00      	nop
 8010db6:	e000      	b.n	8010dba <tcp_process+0x7be>
      break;
 8010db8:	bf00      	nop
  }
  return ERR_OK;
 8010dba:	2300      	movs	r3, #0
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3724      	adds	r7, #36	; 0x24
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd90      	pop	{r4, r7, pc}
 8010dc4:	2001a6c8 	.word	0x2001a6c8
 8010dc8:	2001a6c4 	.word	0x2001a6c4
 8010dcc:	2001a6f8 	.word	0x2001a6f8
 8010dd0:	2001a6f0 	.word	0x2001a6f0
 8010dd4:	2001a6f9 	.word	0x2001a6f9
 8010dd8:	2001a6c0 	.word	0x2001a6c0

08010ddc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010ddc:	b590      	push	{r4, r7, lr}
 8010dde:	b085      	sub	sp, #20
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d106      	bne.n	8010dfa <tcp_oos_insert_segment+0x1e>
 8010dec:	4b3b      	ldr	r3, [pc, #236]	; (8010edc <tcp_oos_insert_segment+0x100>)
 8010dee:	f240 421f 	movw	r2, #1055	; 0x41f
 8010df2:	493b      	ldr	r1, [pc, #236]	; (8010ee0 <tcp_oos_insert_segment+0x104>)
 8010df4:	483b      	ldr	r0, [pc, #236]	; (8010ee4 <tcp_oos_insert_segment+0x108>)
 8010df6:	f006 fa01 	bl	80171fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	899b      	ldrh	r3, [r3, #12]
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fa ff4e 	bl	800bca4 <lwip_htons>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d028      	beq.n	8010e66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010e14:	6838      	ldr	r0, [r7, #0]
 8010e16:	f7fe f999 	bl	800f14c <tcp_segs_free>
    next = NULL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	603b      	str	r3, [r7, #0]
 8010e1e:	e056      	b.n	8010ece <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	899b      	ldrh	r3, [r3, #12]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7fa ff3b 	bl	800bca4 <lwip_htons>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	f003 0301 	and.w	r3, r3, #1
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00d      	beq.n	8010e56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	899b      	ldrh	r3, [r3, #12]
 8010e40:	b29c      	uxth	r4, r3
 8010e42:	2001      	movs	r0, #1
 8010e44:	f7fa ff2e 	bl	800bca4 <lwip_htons>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	4322      	orrs	r2, r4
 8010e52:	b292      	uxth	r2, r2
 8010e54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f7fe f988 	bl	800f176 <tcp_seg_free>
    while (next &&
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00e      	beq.n	8010e8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	891b      	ldrh	r3, [r3, #8]
 8010e70:	461a      	mov	r2, r3
 8010e72:	4b1d      	ldr	r3, [pc, #116]	; (8010ee8 <tcp_oos_insert_segment+0x10c>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	441a      	add	r2, r3
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	8909      	ldrh	r1, [r1, #8]
 8010e82:	440b      	add	r3, r1
 8010e84:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	daca      	bge.n	8010e20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d01e      	beq.n	8010ece <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	891b      	ldrh	r3, [r3, #8]
 8010e94:	461a      	mov	r2, r3
 8010e96:	4b14      	ldr	r3, [pc, #80]	; (8010ee8 <tcp_oos_insert_segment+0x10c>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	441a      	add	r2, r3
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	685b      	ldr	r3, [r3, #4]
 8010ea2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	dd12      	ble.n	8010ece <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	4b0d      	ldr	r3, [pc, #52]	; (8010ee8 <tcp_oos_insert_segment+0x10c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	685a      	ldr	r2, [r3, #4]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	891b      	ldrh	r3, [r3, #8]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	4610      	mov	r0, r2
 8010eca:	f7fc faf1 	bl	800d4b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	683a      	ldr	r2, [r7, #0]
 8010ed2:	601a      	str	r2, [r3, #0]
}
 8010ed4:	bf00      	nop
 8010ed6:	3714      	adds	r7, #20
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd90      	pop	{r4, r7, pc}
 8010edc:	0801a464 	.word	0x0801a464
 8010ee0:	0801a724 	.word	0x0801a724
 8010ee4:	0801a4b0 	.word	0x0801a4b0
 8010ee8:	2001a6ec 	.word	0x2001a6ec

08010eec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010eec:	b5b0      	push	{r4, r5, r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010efa:	e03e      	b.n	8010f7a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fc fce4 	bl	800d8d8 <pbuf_clen>
 8010f10:	4603      	mov	r3, r0
 8010f12:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f1a:	8a7a      	ldrh	r2, [r7, #18]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d906      	bls.n	8010f2e <tcp_free_acked_segments+0x42>
 8010f20:	4b2a      	ldr	r3, [pc, #168]	; (8010fcc <tcp_free_acked_segments+0xe0>)
 8010f22:	f240 4257 	movw	r2, #1111	; 0x457
 8010f26:	492a      	ldr	r1, [pc, #168]	; (8010fd0 <tcp_free_acked_segments+0xe4>)
 8010f28:	482a      	ldr	r0, [pc, #168]	; (8010fd4 <tcp_free_acked_segments+0xe8>)
 8010f2a:	f006 f967 	bl	80171fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010f34:	8a7b      	ldrh	r3, [r7, #18]
 8010f36:	1ad3      	subs	r3, r2, r3
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	891a      	ldrh	r2, [r3, #8]
 8010f44:	4b24      	ldr	r3, [pc, #144]	; (8010fd8 <tcp_free_acked_segments+0xec>)
 8010f46:	881b      	ldrh	r3, [r3, #0]
 8010f48:	4413      	add	r3, r2
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	4b22      	ldr	r3, [pc, #136]	; (8010fd8 <tcp_free_acked_segments+0xec>)
 8010f4e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010f50:	6978      	ldr	r0, [r7, #20]
 8010f52:	f7fe f910 	bl	800f176 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00c      	beq.n	8010f7a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d109      	bne.n	8010f7a <tcp_free_acked_segments+0x8e>
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d106      	bne.n	8010f7a <tcp_free_acked_segments+0x8e>
 8010f6c:	4b17      	ldr	r3, [pc, #92]	; (8010fcc <tcp_free_acked_segments+0xe0>)
 8010f6e:	f240 4261 	movw	r2, #1121	; 0x461
 8010f72:	491a      	ldr	r1, [pc, #104]	; (8010fdc <tcp_free_acked_segments+0xf0>)
 8010f74:	4817      	ldr	r0, [pc, #92]	; (8010fd4 <tcp_free_acked_segments+0xe8>)
 8010f76:	f006 f941 	bl	80171fc <iprintf>
  while (seg_list != NULL &&
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d020      	beq.n	8010fc2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7fa fea1 	bl	800bcce <lwip_htonl>
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	891b      	ldrh	r3, [r3, #8]
 8010f92:	461d      	mov	r5, r3
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	899b      	ldrh	r3, [r3, #12]
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fa fe81 	bl	800bca4 <lwip_htons>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	f003 0303 	and.w	r3, r3, #3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d001      	beq.n	8010fb2 <tcp_free_acked_segments+0xc6>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e000      	b.n	8010fb4 <tcp_free_acked_segments+0xc8>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	442b      	add	r3, r5
 8010fb6:	18e2      	adds	r2, r4, r3
 8010fb8:	4b09      	ldr	r3, [pc, #36]	; (8010fe0 <tcp_free_acked_segments+0xf4>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	dd9c      	ble.n	8010efc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010fc2:	68bb      	ldr	r3, [r7, #8]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3718      	adds	r7, #24
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bdb0      	pop	{r4, r5, r7, pc}
 8010fcc:	0801a464 	.word	0x0801a464
 8010fd0:	0801a74c 	.word	0x0801a74c
 8010fd4:	0801a4b0 	.word	0x0801a4b0
 8010fd8:	2001a6f4 	.word	0x2001a6f4
 8010fdc:	0801a774 	.word	0x0801a774
 8010fe0:	2001a6f0 	.word	0x2001a6f0

08010fe4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010fe4:	b5b0      	push	{r4, r5, r7, lr}
 8010fe6:	b094      	sub	sp, #80	; 0x50
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_receive+0x20>
 8010ff6:	4b91      	ldr	r3, [pc, #580]	; (801123c <tcp_receive+0x258>)
 8010ff8:	f240 427b 	movw	r2, #1147	; 0x47b
 8010ffc:	4990      	ldr	r1, [pc, #576]	; (8011240 <tcp_receive+0x25c>)
 8010ffe:	4891      	ldr	r0, [pc, #580]	; (8011244 <tcp_receive+0x260>)
 8011000:	f006 f8fc 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	7d1b      	ldrb	r3, [r3, #20]
 8011008:	2b03      	cmp	r3, #3
 801100a:	d806      	bhi.n	801101a <tcp_receive+0x36>
 801100c:	4b8b      	ldr	r3, [pc, #556]	; (801123c <tcp_receive+0x258>)
 801100e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011012:	498d      	ldr	r1, [pc, #564]	; (8011248 <tcp_receive+0x264>)
 8011014:	488b      	ldr	r0, [pc, #556]	; (8011244 <tcp_receive+0x260>)
 8011016:	f006 f8f1 	bl	80171fc <iprintf>

  if (flags & TCP_ACK) {
 801101a:	4b8c      	ldr	r3, [pc, #560]	; (801124c <tcp_receive+0x268>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	f003 0310 	and.w	r3, r3, #16
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 8264 	beq.w	80114f0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801102e:	461a      	mov	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011034:	4413      	add	r3, r2
 8011036:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801103c:	4b84      	ldr	r3, [pc, #528]	; (8011250 <tcp_receive+0x26c>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	2b00      	cmp	r3, #0
 8011044:	db1b      	blt.n	801107e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801104a:	4b81      	ldr	r3, [pc, #516]	; (8011250 <tcp_receive+0x26c>)
 801104c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801104e:	429a      	cmp	r2, r3
 8011050:	d106      	bne.n	8011060 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011056:	4b7f      	ldr	r3, [pc, #508]	; (8011254 <tcp_receive+0x270>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	2b00      	cmp	r3, #0
 801105e:	db0e      	blt.n	801107e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011064:	4b7b      	ldr	r3, [pc, #492]	; (8011254 <tcp_receive+0x270>)
 8011066:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011068:	429a      	cmp	r2, r3
 801106a:	d125      	bne.n	80110b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801106c:	4b7a      	ldr	r3, [pc, #488]	; (8011258 <tcp_receive+0x274>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	89db      	ldrh	r3, [r3, #14]
 8011072:	b29a      	uxth	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801107a:	429a      	cmp	r2, r3
 801107c:	d91c      	bls.n	80110b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801107e:	4b76      	ldr	r3, [pc, #472]	; (8011258 <tcp_receive+0x274>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	89db      	ldrh	r3, [r3, #14]
 8011084:	b29a      	uxth	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011098:	429a      	cmp	r2, r3
 801109a:	d205      	bcs.n	80110a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80110a8:	4b69      	ldr	r3, [pc, #420]	; (8011250 <tcp_receive+0x26c>)
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80110b0:	4b68      	ldr	r3, [pc, #416]	; (8011254 <tcp_receive+0x270>)
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80110b8:	4b66      	ldr	r3, [pc, #408]	; (8011254 <tcp_receive+0x270>)
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	dc58      	bgt.n	8011178 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80110c6:	4b65      	ldr	r3, [pc, #404]	; (801125c <tcp_receive+0x278>)
 80110c8:	881b      	ldrh	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d14b      	bne.n	8011166 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80110d8:	4413      	add	r3, r2
 80110da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110dc:	429a      	cmp	r2, r3
 80110de:	d142      	bne.n	8011166 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	db3d      	blt.n	8011166 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110ee:	4b59      	ldr	r3, [pc, #356]	; (8011254 <tcp_receive+0x270>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d137      	bne.n	8011166 <tcp_receive+0x182>
              found_dupack = 1;
 80110f6:	2301      	movs	r3, #1
 80110f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011100:	2bff      	cmp	r3, #255	; 0xff
 8011102:	d007      	beq.n	8011114 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801110a:	3301      	adds	r3, #1
 801110c:	b2da      	uxtb	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801111a:	2b03      	cmp	r3, #3
 801111c:	d91b      	bls.n	8011156 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011128:	4413      	add	r3, r2
 801112a:	b29a      	uxth	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011132:	429a      	cmp	r2, r3
 8011134:	d30a      	bcc.n	801114c <tcp_receive+0x168>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011140:	4413      	add	r3, r2
 8011142:	b29a      	uxth	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801114a:	e004      	b.n	8011156 <tcp_receive+0x172>
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011152:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801115c:	2b02      	cmp	r3, #2
 801115e:	d902      	bls.n	8011166 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f002 fb45 	bl	80137f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011168:	2b00      	cmp	r3, #0
 801116a:	f040 8161 	bne.w	8011430 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2200      	movs	r2, #0
 8011172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011176:	e15b      	b.n	8011430 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011178:	4b36      	ldr	r3, [pc, #216]	; (8011254 <tcp_receive+0x270>)
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	3b01      	subs	r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	f2c0 814e 	blt.w	8011426 <tcp_receive+0x442>
 801118a:	4b32      	ldr	r3, [pc, #200]	; (8011254 <tcp_receive+0x270>)
 801118c:	681a      	ldr	r2, [r3, #0]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	f300 8146 	bgt.w	8011426 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8b5b      	ldrh	r3, [r3, #26]
 801119e:	f003 0304 	and.w	r3, r3, #4
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d010      	beq.n	80111c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	8b5b      	ldrh	r3, [r3, #26]
 80111aa:	f023 0304 	bic.w	r3, r3, #4
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80111d6:	10db      	asrs	r3, r3, #3
 80111d8:	b21b      	sxth	r3, r3
 80111da:	b29a      	uxth	r2, r3
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	4413      	add	r3, r2
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	b21a      	sxth	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80111f0:	4b18      	ldr	r3, [pc, #96]	; (8011254 <tcp_receive+0x270>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011208:	4b12      	ldr	r3, [pc, #72]	; (8011254 <tcp_receive+0x270>)
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	7d1b      	ldrb	r3, [r3, #20]
 8011214:	2b03      	cmp	r3, #3
 8011216:	f240 8097 	bls.w	8011348 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011226:	429a      	cmp	r2, r3
 8011228:	d245      	bcs.n	80112b6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	8b5b      	ldrh	r3, [r3, #26]
 801122e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011232:	2b00      	cmp	r3, #0
 8011234:	d014      	beq.n	8011260 <tcp_receive+0x27c>
 8011236:	2301      	movs	r3, #1
 8011238:	e013      	b.n	8011262 <tcp_receive+0x27e>
 801123a:	bf00      	nop
 801123c:	0801a464 	.word	0x0801a464
 8011240:	0801a794 	.word	0x0801a794
 8011244:	0801a4b0 	.word	0x0801a4b0
 8011248:	0801a7b0 	.word	0x0801a7b0
 801124c:	2001a6f8 	.word	0x2001a6f8
 8011250:	2001a6ec 	.word	0x2001a6ec
 8011254:	2001a6f0 	.word	0x2001a6f0
 8011258:	2001a6dc 	.word	0x2001a6dc
 801125c:	2001a6f6 	.word	0x2001a6f6
 8011260:	2302      	movs	r3, #2
 8011262:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011266:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801126a:	b29a      	uxth	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011270:	fb12 f303 	smulbb	r3, r2, r3
 8011274:	b29b      	uxth	r3, r3
 8011276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011278:	4293      	cmp	r3, r2
 801127a:	bf28      	it	cs
 801127c:	4613      	movcs	r3, r2
 801127e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011288:	4413      	add	r3, r2
 801128a:	b29a      	uxth	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011292:	429a      	cmp	r2, r3
 8011294:	d309      	bcc.n	80112aa <tcp_receive+0x2c6>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801129c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801129e:	4413      	add	r3, r2
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80112a8:	e04e      	b.n	8011348 <tcp_receive+0x364>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80112b4:	e048      	b.n	8011348 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112be:	4413      	add	r3, r2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d309      	bcc.n	80112e0 <tcp_receive+0x2fc>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112d4:	4413      	add	r3, r2
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80112de:	e004      	b.n	80112ea <tcp_receive+0x306>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d326      	bcc.n	8011348 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	b29a      	uxth	r2, r3
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801131a:	4413      	add	r3, r2
 801131c:	b29a      	uxth	r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011324:	429a      	cmp	r2, r3
 8011326:	d30a      	bcc.n	801133e <tcp_receive+0x35a>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011332:	4413      	add	r3, r2
 8011334:	b29a      	uxth	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801133c:	e004      	b.n	8011348 <tcp_receive+0x364>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011344:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011350:	4a98      	ldr	r2, [pc, #608]	; (80115b4 <tcp_receive+0x5d0>)
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f7ff fdca 	bl	8010eec <tcp_free_acked_segments>
 8011358:	4602      	mov	r2, r0
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011366:	4a94      	ldr	r2, [pc, #592]	; (80115b8 <tcp_receive+0x5d4>)
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f7ff fdbf 	bl	8010eec <tcp_free_acked_segments>
 801136e:	4602      	mov	r2, r0
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011378:	2b00      	cmp	r3, #0
 801137a:	d104      	bne.n	8011386 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011382:	861a      	strh	r2, [r3, #48]	; 0x30
 8011384:	e002      	b.n	801138c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011396:	2b00      	cmp	r3, #0
 8011398:	d103      	bne.n	80113a2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2200      	movs	r2, #0
 801139e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80113a8:	4b84      	ldr	r3, [pc, #528]	; (80115bc <tcp_receive+0x5d8>)
 80113aa:	881b      	ldrh	r3, [r3, #0]
 80113ac:	4413      	add	r3, r2
 80113ae:	b29a      	uxth	r2, r3
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	8b5b      	ldrh	r3, [r3, #26]
 80113ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d035      	beq.n	801142e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d118      	bne.n	80113fc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00c      	beq.n	80113ec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fa fc75 	bl	800bcce <lwip_htonl>
 80113e4:	4603      	mov	r3, r0
 80113e6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	dc20      	bgt.n	801142e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	8b5b      	ldrh	r3, [r3, #26]
 80113f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80113f4:	b29a      	uxth	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113fa:	e018      	b.n	801142e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	685b      	ldr	r3, [r3, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	f7fa fc60 	bl	800bcce <lwip_htonl>
 801140e:	4603      	mov	r3, r0
 8011410:	1ae3      	subs	r3, r4, r3
 8011412:	2b00      	cmp	r3, #0
 8011414:	dc0b      	bgt.n	801142e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	8b5b      	ldrh	r3, [r3, #26]
 801141a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011424:	e003      	b.n	801142e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f002 fbd0 	bl	8013bcc <tcp_send_empty_ack>
 801142c:	e000      	b.n	8011430 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801142e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011434:	2b00      	cmp	r3, #0
 8011436:	d05b      	beq.n	80114f0 <tcp_receive+0x50c>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801143c:	4b60      	ldr	r3, [pc, #384]	; (80115c0 <tcp_receive+0x5dc>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	2b00      	cmp	r3, #0
 8011444:	da54      	bge.n	80114f0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011446:	4b5f      	ldr	r3, [pc, #380]	; (80115c4 <tcp_receive+0x5e0>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	b29a      	uxth	r2, r3
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011450:	b29b      	uxth	r3, r3
 8011452:	1ad3      	subs	r3, r2, r3
 8011454:	b29b      	uxth	r3, r3
 8011456:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801145a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011464:	10db      	asrs	r3, r3, #3
 8011466:	b21b      	sxth	r3, r3
 8011468:	b29b      	uxth	r3, r3
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	b29b      	uxth	r3, r3
 801146e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011478:	b29a      	uxth	r2, r3
 801147a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801147e:	4413      	add	r3, r2
 8011480:	b29b      	uxth	r3, r3
 8011482:	b21a      	sxth	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011488:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801148c:	2b00      	cmp	r3, #0
 801148e:	da05      	bge.n	801149c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011494:	425b      	negs	r3, r3
 8011496:	b29b      	uxth	r3, r3
 8011498:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801149c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114a6:	109b      	asrs	r3, r3, #2
 80114a8:	b21b      	sxth	r3, r3
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80114c0:	4413      	add	r3, r2
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	b21a      	sxth	r2, r3
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80114d0:	10db      	asrs	r3, r3, #3
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114dc:	b29b      	uxth	r3, r3
 80114de:	4413      	add	r3, r2
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	b21a      	sxth	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2200      	movs	r2, #0
 80114ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80114f0:	4b35      	ldr	r3, [pc, #212]	; (80115c8 <tcp_receive+0x5e4>)
 80114f2:	881b      	ldrh	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	f000 84e2 	beq.w	8011ebe <tcp_receive+0xeda>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	7d1b      	ldrb	r3, [r3, #20]
 80114fe:	2b06      	cmp	r3, #6
 8011500:	f200 84dd 	bhi.w	8011ebe <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011508:	4b30      	ldr	r3, [pc, #192]	; (80115cc <tcp_receive+0x5e8>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	3b01      	subs	r3, #1
 8011510:	2b00      	cmp	r3, #0
 8011512:	f2c0 808f 	blt.w	8011634 <tcp_receive+0x650>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801151a:	4b2b      	ldr	r3, [pc, #172]	; (80115c8 <tcp_receive+0x5e4>)
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	4619      	mov	r1, r3
 8011520:	4b2a      	ldr	r3, [pc, #168]	; (80115cc <tcp_receive+0x5e8>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	440b      	add	r3, r1
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	3301      	adds	r3, #1
 801152a:	2b00      	cmp	r3, #0
 801152c:	f300 8082 	bgt.w	8011634 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011530:	4b27      	ldr	r3, [pc, #156]	; (80115d0 <tcp_receive+0x5ec>)
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801153a:	4b24      	ldr	r3, [pc, #144]	; (80115cc <tcp_receive+0x5e8>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011542:	4b23      	ldr	r3, [pc, #140]	; (80115d0 <tcp_receive+0x5ec>)
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d106      	bne.n	8011558 <tcp_receive+0x574>
 801154a:	4b22      	ldr	r3, [pc, #136]	; (80115d4 <tcp_receive+0x5f0>)
 801154c:	f240 5294 	movw	r2, #1428	; 0x594
 8011550:	4921      	ldr	r1, [pc, #132]	; (80115d8 <tcp_receive+0x5f4>)
 8011552:	4822      	ldr	r0, [pc, #136]	; (80115dc <tcp_receive+0x5f8>)
 8011554:	f005 fe52 	bl	80171fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801155e:	4293      	cmp	r3, r2
 8011560:	d906      	bls.n	8011570 <tcp_receive+0x58c>
 8011562:	4b1c      	ldr	r3, [pc, #112]	; (80115d4 <tcp_receive+0x5f0>)
 8011564:	f240 5295 	movw	r2, #1429	; 0x595
 8011568:	491d      	ldr	r1, [pc, #116]	; (80115e0 <tcp_receive+0x5fc>)
 801156a:	481c      	ldr	r0, [pc, #112]	; (80115dc <tcp_receive+0x5f8>)
 801156c:	f005 fe46 	bl	80171fc <iprintf>
      off = (u16_t)off32;
 8011570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011572:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011576:	4b16      	ldr	r3, [pc, #88]	; (80115d0 <tcp_receive+0x5ec>)
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	891b      	ldrh	r3, [r3, #8]
 801157c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011580:	429a      	cmp	r2, r3
 8011582:	d906      	bls.n	8011592 <tcp_receive+0x5ae>
 8011584:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <tcp_receive+0x5f0>)
 8011586:	f240 5297 	movw	r2, #1431	; 0x597
 801158a:	4916      	ldr	r1, [pc, #88]	; (80115e4 <tcp_receive+0x600>)
 801158c:	4813      	ldr	r0, [pc, #76]	; (80115dc <tcp_receive+0x5f8>)
 801158e:	f005 fe35 	bl	80171fc <iprintf>
      inseg.len -= off;
 8011592:	4b0f      	ldr	r3, [pc, #60]	; (80115d0 <tcp_receive+0x5ec>)
 8011594:	891a      	ldrh	r2, [r3, #8]
 8011596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	b29a      	uxth	r2, r3
 801159e:	4b0c      	ldr	r3, [pc, #48]	; (80115d0 <tcp_receive+0x5ec>)
 80115a0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80115a2:	4b0b      	ldr	r3, [pc, #44]	; (80115d0 <tcp_receive+0x5ec>)
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	891a      	ldrh	r2, [r3, #8]
 80115a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80115ac:	1ad3      	subs	r3, r2, r3
 80115ae:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80115b0:	e02a      	b.n	8011608 <tcp_receive+0x624>
 80115b2:	bf00      	nop
 80115b4:	0801a7cc 	.word	0x0801a7cc
 80115b8:	0801a7d4 	.word	0x0801a7d4
 80115bc:	2001a6f4 	.word	0x2001a6f4
 80115c0:	2001a6f0 	.word	0x2001a6f0
 80115c4:	2001a6b4 	.word	0x2001a6b4
 80115c8:	2001a6f6 	.word	0x2001a6f6
 80115cc:	2001a6ec 	.word	0x2001a6ec
 80115d0:	2001a6cc 	.word	0x2001a6cc
 80115d4:	0801a464 	.word	0x0801a464
 80115d8:	0801a7dc 	.word	0x0801a7dc
 80115dc:	0801a4b0 	.word	0x0801a4b0
 80115e0:	0801a7ec 	.word	0x0801a7ec
 80115e4:	0801a7fc 	.word	0x0801a7fc
        off -= p->len;
 80115e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ea:	895b      	ldrh	r3, [r3, #10]
 80115ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80115f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80115fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80115fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115fe:	2200      	movs	r2, #0
 8011600:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801160a:	895b      	ldrh	r3, [r3, #10]
 801160c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011610:	429a      	cmp	r2, r3
 8011612:	d8e9      	bhi.n	80115e8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011614:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011618:	4619      	mov	r1, r3
 801161a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801161c:	f7fc f848 	bl	800d6b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011624:	4a91      	ldr	r2, [pc, #580]	; (801186c <tcp_receive+0x888>)
 8011626:	6013      	str	r3, [r2, #0]
 8011628:	4b91      	ldr	r3, [pc, #580]	; (8011870 <tcp_receive+0x88c>)
 801162a:	68db      	ldr	r3, [r3, #12]
 801162c:	4a8f      	ldr	r2, [pc, #572]	; (801186c <tcp_receive+0x888>)
 801162e:	6812      	ldr	r2, [r2, #0]
 8011630:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011632:	e00d      	b.n	8011650 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011634:	4b8d      	ldr	r3, [pc, #564]	; (801186c <tcp_receive+0x888>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	da06      	bge.n	8011650 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	8b5b      	ldrh	r3, [r3, #26]
 8011646:	f043 0302 	orr.w	r3, r3, #2
 801164a:	b29a      	uxth	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011650:	4b86      	ldr	r3, [pc, #536]	; (801186c <tcp_receive+0x888>)
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011658:	1ad3      	subs	r3, r2, r3
 801165a:	2b00      	cmp	r3, #0
 801165c:	f2c0 842a 	blt.w	8011eb4 <tcp_receive+0xed0>
 8011660:	4b82      	ldr	r3, [pc, #520]	; (801186c <tcp_receive+0x888>)
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	6879      	ldr	r1, [r7, #4]
 801166a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801166c:	440b      	add	r3, r1
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	3301      	adds	r3, #1
 8011672:	2b00      	cmp	r3, #0
 8011674:	f300 841e 	bgt.w	8011eb4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801167c:	4b7b      	ldr	r3, [pc, #492]	; (801186c <tcp_receive+0x888>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	429a      	cmp	r2, r3
 8011682:	f040 829a 	bne.w	8011bba <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011686:	4b7a      	ldr	r3, [pc, #488]	; (8011870 <tcp_receive+0x88c>)
 8011688:	891c      	ldrh	r4, [r3, #8]
 801168a:	4b79      	ldr	r3, [pc, #484]	; (8011870 <tcp_receive+0x88c>)
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	899b      	ldrh	r3, [r3, #12]
 8011690:	b29b      	uxth	r3, r3
 8011692:	4618      	mov	r0, r3
 8011694:	f7fa fb06 	bl	800bca4 <lwip_htons>
 8011698:	4603      	mov	r3, r0
 801169a:	b2db      	uxtb	r3, r3
 801169c:	f003 0303 	and.w	r3, r3, #3
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d001      	beq.n	80116a8 <tcp_receive+0x6c4>
 80116a4:	2301      	movs	r3, #1
 80116a6:	e000      	b.n	80116aa <tcp_receive+0x6c6>
 80116a8:	2300      	movs	r3, #0
 80116aa:	4423      	add	r3, r4
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	4b71      	ldr	r3, [pc, #452]	; (8011874 <tcp_receive+0x890>)
 80116b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80116b6:	4b6f      	ldr	r3, [pc, #444]	; (8011874 <tcp_receive+0x890>)
 80116b8:	881b      	ldrh	r3, [r3, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d275      	bcs.n	80117aa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116be:	4b6c      	ldr	r3, [pc, #432]	; (8011870 <tcp_receive+0x88c>)
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	899b      	ldrh	r3, [r3, #12]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fa faec 	bl	800bca4 <lwip_htons>
 80116cc:	4603      	mov	r3, r0
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	f003 0301 	and.w	r3, r3, #1
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d01f      	beq.n	8011718 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80116d8:	4b65      	ldr	r3, [pc, #404]	; (8011870 <tcp_receive+0x88c>)
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	899b      	ldrh	r3, [r3, #12]
 80116de:	b29b      	uxth	r3, r3
 80116e0:	b21b      	sxth	r3, r3
 80116e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80116e6:	b21c      	sxth	r4, r3
 80116e8:	4b61      	ldr	r3, [pc, #388]	; (8011870 <tcp_receive+0x88c>)
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	899b      	ldrh	r3, [r3, #12]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fa fad7 	bl	800bca4 <lwip_htons>
 80116f6:	4603      	mov	r3, r0
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011700:	b29b      	uxth	r3, r3
 8011702:	4618      	mov	r0, r3
 8011704:	f7fa face 	bl	800bca4 <lwip_htons>
 8011708:	4603      	mov	r3, r0
 801170a:	b21b      	sxth	r3, r3
 801170c:	4323      	orrs	r3, r4
 801170e:	b21a      	sxth	r2, r3
 8011710:	4b57      	ldr	r3, [pc, #348]	; (8011870 <tcp_receive+0x88c>)
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	b292      	uxth	r2, r2
 8011716:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801171c:	4b54      	ldr	r3, [pc, #336]	; (8011870 <tcp_receive+0x88c>)
 801171e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011720:	4b53      	ldr	r3, [pc, #332]	; (8011870 <tcp_receive+0x88c>)
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	899b      	ldrh	r3, [r3, #12]
 8011726:	b29b      	uxth	r3, r3
 8011728:	4618      	mov	r0, r3
 801172a:	f7fa fabb 	bl	800bca4 <lwip_htons>
 801172e:	4603      	mov	r3, r0
 8011730:	b2db      	uxtb	r3, r3
 8011732:	f003 0302 	and.w	r3, r3, #2
 8011736:	2b00      	cmp	r3, #0
 8011738:	d005      	beq.n	8011746 <tcp_receive+0x762>
            inseg.len -= 1;
 801173a:	4b4d      	ldr	r3, [pc, #308]	; (8011870 <tcp_receive+0x88c>)
 801173c:	891b      	ldrh	r3, [r3, #8]
 801173e:	3b01      	subs	r3, #1
 8011740:	b29a      	uxth	r2, r3
 8011742:	4b4b      	ldr	r3, [pc, #300]	; (8011870 <tcp_receive+0x88c>)
 8011744:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011746:	4b4a      	ldr	r3, [pc, #296]	; (8011870 <tcp_receive+0x88c>)
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	4a49      	ldr	r2, [pc, #292]	; (8011870 <tcp_receive+0x88c>)
 801174c:	8912      	ldrh	r2, [r2, #8]
 801174e:	4611      	mov	r1, r2
 8011750:	4618      	mov	r0, r3
 8011752:	f7fb fead 	bl	800d4b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011756:	4b46      	ldr	r3, [pc, #280]	; (8011870 <tcp_receive+0x88c>)
 8011758:	891c      	ldrh	r4, [r3, #8]
 801175a:	4b45      	ldr	r3, [pc, #276]	; (8011870 <tcp_receive+0x88c>)
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	899b      	ldrh	r3, [r3, #12]
 8011760:	b29b      	uxth	r3, r3
 8011762:	4618      	mov	r0, r3
 8011764:	f7fa fa9e 	bl	800bca4 <lwip_htons>
 8011768:	4603      	mov	r3, r0
 801176a:	b2db      	uxtb	r3, r3
 801176c:	f003 0303 	and.w	r3, r3, #3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <tcp_receive+0x794>
 8011774:	2301      	movs	r3, #1
 8011776:	e000      	b.n	801177a <tcp_receive+0x796>
 8011778:	2300      	movs	r3, #0
 801177a:	4423      	add	r3, r4
 801177c:	b29a      	uxth	r2, r3
 801177e:	4b3d      	ldr	r3, [pc, #244]	; (8011874 <tcp_receive+0x890>)
 8011780:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011782:	4b3c      	ldr	r3, [pc, #240]	; (8011874 <tcp_receive+0x890>)
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	4b38      	ldr	r3, [pc, #224]	; (801186c <tcp_receive+0x888>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	441a      	add	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011796:	440b      	add	r3, r1
 8011798:	429a      	cmp	r2, r3
 801179a:	d006      	beq.n	80117aa <tcp_receive+0x7c6>
 801179c:	4b36      	ldr	r3, [pc, #216]	; (8011878 <tcp_receive+0x894>)
 801179e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80117a2:	4936      	ldr	r1, [pc, #216]	; (801187c <tcp_receive+0x898>)
 80117a4:	4836      	ldr	r0, [pc, #216]	; (8011880 <tcp_receive+0x89c>)
 80117a6:	f005 fd29 	bl	80171fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	f000 80e7 	beq.w	8011982 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80117b4:	4b2e      	ldr	r3, [pc, #184]	; (8011870 <tcp_receive+0x88c>)
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	899b      	ldrh	r3, [r3, #12]
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fa fa71 	bl	800bca4 <lwip_htons>
 80117c2:	4603      	mov	r3, r0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d010      	beq.n	80117f0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80117ce:	e00a      	b.n	80117e6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	f7fd fcc8 	bl	800f176 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d1f0      	bne.n	80117d0 <tcp_receive+0x7ec>
 80117ee:	e0c8      	b.n	8011982 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80117f6:	e052      	b.n	801189e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80117f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	899b      	ldrh	r3, [r3, #12]
 80117fe:	b29b      	uxth	r3, r3
 8011800:	4618      	mov	r0, r3
 8011802:	f7fa fa4f 	bl	800bca4 <lwip_htons>
 8011806:	4603      	mov	r3, r0
 8011808:	b2db      	uxtb	r3, r3
 801180a:	f003 0301 	and.w	r3, r3, #1
 801180e:	2b00      	cmp	r3, #0
 8011810:	d03d      	beq.n	801188e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011812:	4b17      	ldr	r3, [pc, #92]	; (8011870 <tcp_receive+0x88c>)
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	899b      	ldrh	r3, [r3, #12]
 8011818:	b29b      	uxth	r3, r3
 801181a:	4618      	mov	r0, r3
 801181c:	f7fa fa42 	bl	800bca4 <lwip_htons>
 8011820:	4603      	mov	r3, r0
 8011822:	b2db      	uxtb	r3, r3
 8011824:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011828:	2b00      	cmp	r3, #0
 801182a:	d130      	bne.n	801188e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801182c:	4b10      	ldr	r3, [pc, #64]	; (8011870 <tcp_receive+0x88c>)
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	899b      	ldrh	r3, [r3, #12]
 8011832:	b29c      	uxth	r4, r3
 8011834:	2001      	movs	r0, #1
 8011836:	f7fa fa35 	bl	800bca4 <lwip_htons>
 801183a:	4603      	mov	r3, r0
 801183c:	461a      	mov	r2, r3
 801183e:	4b0c      	ldr	r3, [pc, #48]	; (8011870 <tcp_receive+0x88c>)
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	4322      	orrs	r2, r4
 8011844:	b292      	uxth	r2, r2
 8011846:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011848:	4b09      	ldr	r3, [pc, #36]	; (8011870 <tcp_receive+0x88c>)
 801184a:	891c      	ldrh	r4, [r3, #8]
 801184c:	4b08      	ldr	r3, [pc, #32]	; (8011870 <tcp_receive+0x88c>)
 801184e:	68db      	ldr	r3, [r3, #12]
 8011850:	899b      	ldrh	r3, [r3, #12]
 8011852:	b29b      	uxth	r3, r3
 8011854:	4618      	mov	r0, r3
 8011856:	f7fa fa25 	bl	800bca4 <lwip_htons>
 801185a:	4603      	mov	r3, r0
 801185c:	b2db      	uxtb	r3, r3
 801185e:	f003 0303 	and.w	r3, r3, #3
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00e      	beq.n	8011884 <tcp_receive+0x8a0>
 8011866:	2301      	movs	r3, #1
 8011868:	e00d      	b.n	8011886 <tcp_receive+0x8a2>
 801186a:	bf00      	nop
 801186c:	2001a6ec 	.word	0x2001a6ec
 8011870:	2001a6cc 	.word	0x2001a6cc
 8011874:	2001a6f6 	.word	0x2001a6f6
 8011878:	0801a464 	.word	0x0801a464
 801187c:	0801a80c 	.word	0x0801a80c
 8011880:	0801a4b0 	.word	0x0801a4b0
 8011884:	2300      	movs	r3, #0
 8011886:	4423      	add	r3, r4
 8011888:	b29a      	uxth	r2, r3
 801188a:	4b98      	ldr	r3, [pc, #608]	; (8011aec <tcp_receive+0xb08>)
 801188c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011890:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011898:	6938      	ldr	r0, [r7, #16]
 801189a:	f7fd fc6c 	bl	800f176 <tcp_seg_free>
            while (next &&
 801189e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00e      	beq.n	80118c2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80118a4:	4b91      	ldr	r3, [pc, #580]	; (8011aec <tcp_receive+0xb08>)
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	461a      	mov	r2, r3
 80118aa:	4b91      	ldr	r3, [pc, #580]	; (8011af0 <tcp_receive+0xb0c>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	441a      	add	r2, r3
 80118b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118b8:	8909      	ldrh	r1, [r1, #8]
 80118ba:	440b      	add	r3, r1
 80118bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80118be:	2b00      	cmp	r3, #0
 80118c0:	da9a      	bge.n	80117f8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80118c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d059      	beq.n	801197c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80118c8:	4b88      	ldr	r3, [pc, #544]	; (8011aec <tcp_receive+0xb08>)
 80118ca:	881b      	ldrh	r3, [r3, #0]
 80118cc:	461a      	mov	r2, r3
 80118ce:	4b88      	ldr	r3, [pc, #544]	; (8011af0 <tcp_receive+0xb0c>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	441a      	add	r2, r3
 80118d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80118dc:	2b00      	cmp	r3, #0
 80118de:	dd4d      	ble.n	801197c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80118e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	4b81      	ldr	r3, [pc, #516]	; (8011af0 <tcp_receive+0xb0c>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	4b80      	ldr	r3, [pc, #512]	; (8011af4 <tcp_receive+0xb10>)
 80118f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80118f6:	4b7f      	ldr	r3, [pc, #508]	; (8011af4 <tcp_receive+0xb10>)
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	899b      	ldrh	r3, [r3, #12]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fa f9d0 	bl	800bca4 <lwip_htons>
 8011904:	4603      	mov	r3, r0
 8011906:	b2db      	uxtb	r3, r3
 8011908:	f003 0302 	and.w	r3, r3, #2
 801190c:	2b00      	cmp	r3, #0
 801190e:	d005      	beq.n	801191c <tcp_receive+0x938>
                inseg.len -= 1;
 8011910:	4b78      	ldr	r3, [pc, #480]	; (8011af4 <tcp_receive+0xb10>)
 8011912:	891b      	ldrh	r3, [r3, #8]
 8011914:	3b01      	subs	r3, #1
 8011916:	b29a      	uxth	r2, r3
 8011918:	4b76      	ldr	r3, [pc, #472]	; (8011af4 <tcp_receive+0xb10>)
 801191a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801191c:	4b75      	ldr	r3, [pc, #468]	; (8011af4 <tcp_receive+0xb10>)
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	4a74      	ldr	r2, [pc, #464]	; (8011af4 <tcp_receive+0xb10>)
 8011922:	8912      	ldrh	r2, [r2, #8]
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f7fb fdc2 	bl	800d4b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801192c:	4b71      	ldr	r3, [pc, #452]	; (8011af4 <tcp_receive+0xb10>)
 801192e:	891c      	ldrh	r4, [r3, #8]
 8011930:	4b70      	ldr	r3, [pc, #448]	; (8011af4 <tcp_receive+0xb10>)
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	899b      	ldrh	r3, [r3, #12]
 8011936:	b29b      	uxth	r3, r3
 8011938:	4618      	mov	r0, r3
 801193a:	f7fa f9b3 	bl	800bca4 <lwip_htons>
 801193e:	4603      	mov	r3, r0
 8011940:	b2db      	uxtb	r3, r3
 8011942:	f003 0303 	and.w	r3, r3, #3
 8011946:	2b00      	cmp	r3, #0
 8011948:	d001      	beq.n	801194e <tcp_receive+0x96a>
 801194a:	2301      	movs	r3, #1
 801194c:	e000      	b.n	8011950 <tcp_receive+0x96c>
 801194e:	2300      	movs	r3, #0
 8011950:	4423      	add	r3, r4
 8011952:	b29a      	uxth	r2, r3
 8011954:	4b65      	ldr	r3, [pc, #404]	; (8011aec <tcp_receive+0xb08>)
 8011956:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011958:	4b64      	ldr	r3, [pc, #400]	; (8011aec <tcp_receive+0xb08>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	461a      	mov	r2, r3
 801195e:	4b64      	ldr	r3, [pc, #400]	; (8011af0 <tcp_receive+0xb0c>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	441a      	add	r2, r3
 8011964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	429a      	cmp	r2, r3
 801196c:	d006      	beq.n	801197c <tcp_receive+0x998>
 801196e:	4b62      	ldr	r3, [pc, #392]	; (8011af8 <tcp_receive+0xb14>)
 8011970:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011974:	4961      	ldr	r1, [pc, #388]	; (8011afc <tcp_receive+0xb18>)
 8011976:	4862      	ldr	r0, [pc, #392]	; (8011b00 <tcp_receive+0xb1c>)
 8011978:	f005 fc40 	bl	80171fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011980:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011982:	4b5a      	ldr	r3, [pc, #360]	; (8011aec <tcp_receive+0xb08>)
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	461a      	mov	r2, r3
 8011988:	4b59      	ldr	r3, [pc, #356]	; (8011af0 <tcp_receive+0xb0c>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	441a      	add	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011996:	4b55      	ldr	r3, [pc, #340]	; (8011aec <tcp_receive+0xb08>)
 8011998:	881b      	ldrh	r3, [r3, #0]
 801199a:	429a      	cmp	r2, r3
 801199c:	d206      	bcs.n	80119ac <tcp_receive+0x9c8>
 801199e:	4b56      	ldr	r3, [pc, #344]	; (8011af8 <tcp_receive+0xb14>)
 80119a0:	f240 6207 	movw	r2, #1543	; 0x607
 80119a4:	4957      	ldr	r1, [pc, #348]	; (8011b04 <tcp_receive+0xb20>)
 80119a6:	4856      	ldr	r0, [pc, #344]	; (8011b00 <tcp_receive+0xb1c>)
 80119a8:	f005 fc28 	bl	80171fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119b0:	4b4e      	ldr	r3, [pc, #312]	; (8011aec <tcp_receive+0xb08>)
 80119b2:	881b      	ldrh	r3, [r3, #0]
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f7fc fd99 	bl	800e4f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80119c2:	4b4c      	ldr	r3, [pc, #304]	; (8011af4 <tcp_receive+0xb10>)
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	891b      	ldrh	r3, [r3, #8]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d006      	beq.n	80119da <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80119cc:	4b49      	ldr	r3, [pc, #292]	; (8011af4 <tcp_receive+0xb10>)
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	4a4d      	ldr	r2, [pc, #308]	; (8011b08 <tcp_receive+0xb24>)
 80119d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80119d4:	4b47      	ldr	r3, [pc, #284]	; (8011af4 <tcp_receive+0xb10>)
 80119d6:	2200      	movs	r2, #0
 80119d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119da:	4b46      	ldr	r3, [pc, #280]	; (8011af4 <tcp_receive+0xb10>)
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	899b      	ldrh	r3, [r3, #12]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fa f95e 	bl	800bca4 <lwip_htons>
 80119e8:	4603      	mov	r3, r0
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	f003 0301 	and.w	r3, r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f000 80b8 	beq.w	8011b66 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80119f6:	4b45      	ldr	r3, [pc, #276]	; (8011b0c <tcp_receive+0xb28>)
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	f043 0320 	orr.w	r3, r3, #32
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	4b42      	ldr	r3, [pc, #264]	; (8011b0c <tcp_receive+0xb28>)
 8011a02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011a04:	e0af      	b.n	8011b66 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	4a36      	ldr	r2, [pc, #216]	; (8011af0 <tcp_receive+0xb0c>)
 8011a16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	891b      	ldrh	r3, [r3, #8]
 8011a1c:	461c      	mov	r4, r3
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	68db      	ldr	r3, [r3, #12]
 8011a22:	899b      	ldrh	r3, [r3, #12]
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fa f93c 	bl	800bca4 <lwip_htons>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	f003 0303 	and.w	r3, r3, #3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d001      	beq.n	8011a3c <tcp_receive+0xa58>
 8011a38:	2301      	movs	r3, #1
 8011a3a:	e000      	b.n	8011a3e <tcp_receive+0xa5a>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	191a      	adds	r2, r3, r4
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a44:	441a      	add	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a4e:	461c      	mov	r4, r3
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	891b      	ldrh	r3, [r3, #8]
 8011a54:	461d      	mov	r5, r3
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	899b      	ldrh	r3, [r3, #12]
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fa f920 	bl	800bca4 <lwip_htons>
 8011a64:	4603      	mov	r3, r0
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	f003 0303 	and.w	r3, r3, #3
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d001      	beq.n	8011a74 <tcp_receive+0xa90>
 8011a70:	2301      	movs	r3, #1
 8011a72:	e000      	b.n	8011a76 <tcp_receive+0xa92>
 8011a74:	2300      	movs	r3, #0
 8011a76:	442b      	add	r3, r5
 8011a78:	429c      	cmp	r4, r3
 8011a7a:	d206      	bcs.n	8011a8a <tcp_receive+0xaa6>
 8011a7c:	4b1e      	ldr	r3, [pc, #120]	; (8011af8 <tcp_receive+0xb14>)
 8011a7e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011a82:	4923      	ldr	r1, [pc, #140]	; (8011b10 <tcp_receive+0xb2c>)
 8011a84:	481e      	ldr	r0, [pc, #120]	; (8011b00 <tcp_receive+0xb1c>)
 8011a86:	f005 fbb9 	bl	80171fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	891b      	ldrh	r3, [r3, #8]
 8011a8e:	461c      	mov	r4, r3
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	899b      	ldrh	r3, [r3, #12]
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fa f903 	bl	800bca4 <lwip_htons>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	f003 0303 	and.w	r3, r3, #3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <tcp_receive+0xaca>
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e000      	b.n	8011ab0 <tcp_receive+0xacc>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	1919      	adds	r1, r3, r4
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ab6:	b28b      	uxth	r3, r1
 8011ab8:	1ad3      	subs	r3, r2, r3
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7fc fd17 	bl	800e4f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	891b      	ldrh	r3, [r3, #8]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d028      	beq.n	8011b22 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011ad0:	4b0d      	ldr	r3, [pc, #52]	; (8011b08 <tcp_receive+0xb24>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d01d      	beq.n	8011b14 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011ad8:	4b0b      	ldr	r3, [pc, #44]	; (8011b08 <tcp_receive+0xb24>)
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	4610      	mov	r0, r2
 8011ae4:	f7fb ff38 	bl	800d958 <pbuf_cat>
 8011ae8:	e018      	b.n	8011b1c <tcp_receive+0xb38>
 8011aea:	bf00      	nop
 8011aec:	2001a6f6 	.word	0x2001a6f6
 8011af0:	2001a6ec 	.word	0x2001a6ec
 8011af4:	2001a6cc 	.word	0x2001a6cc
 8011af8:	0801a464 	.word	0x0801a464
 8011afc:	0801a844 	.word	0x0801a844
 8011b00:	0801a4b0 	.word	0x0801a4b0
 8011b04:	0801a880 	.word	0x0801a880
 8011b08:	2001a6fc 	.word	0x2001a6fc
 8011b0c:	2001a6f9 	.word	0x2001a6f9
 8011b10:	0801a8a0 	.word	0x0801a8a0
            } else {
              recv_data = cseg->p;
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4a70      	ldr	r2, [pc, #448]	; (8011cdc <tcp_receive+0xcf8>)
 8011b1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	899b      	ldrh	r3, [r3, #12]
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fa f8ba 	bl	800bca4 <lwip_htons>
 8011b30:	4603      	mov	r3, r0
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	f003 0301 	and.w	r3, r3, #1
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00d      	beq.n	8011b58 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011b3c:	4b68      	ldr	r3, [pc, #416]	; (8011ce0 <tcp_receive+0xcfc>)
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	f043 0320 	orr.w	r3, r3, #32
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	4b66      	ldr	r3, [pc, #408]	; (8011ce0 <tcp_receive+0xcfc>)
 8011b48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	7d1b      	ldrb	r3, [r3, #20]
 8011b4e:	2b04      	cmp	r3, #4
 8011b50:	d102      	bne.n	8011b58 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2207      	movs	r2, #7
 8011b56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011b60:	68b8      	ldr	r0, [r7, #8]
 8011b62:	f7fd fb08 	bl	800f176 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d008      	beq.n	8011b80 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b72:	68db      	ldr	r3, [r3, #12]
 8011b74:	685a      	ldr	r2, [r3, #4]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	f43f af43 	beq.w	8011a06 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	8b5b      	ldrh	r3, [r3, #26]
 8011b84:	f003 0301 	and.w	r3, r3, #1
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d00e      	beq.n	8011baa <tcp_receive+0xbc6>
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	8b5b      	ldrh	r3, [r3, #26]
 8011b90:	f023 0301 	bic.w	r3, r3, #1
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	835a      	strh	r2, [r3, #26]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8b5b      	ldrh	r3, [r3, #26]
 8011b9e:	f043 0302 	orr.w	r3, r3, #2
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ba8:	e188      	b.n	8011ebc <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8b5b      	ldrh	r3, [r3, #26]
 8011bae:	f043 0301 	orr.w	r3, r3, #1
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011bb8:	e180      	b.n	8011ebc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d106      	bne.n	8011bd0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011bc2:	4848      	ldr	r0, [pc, #288]	; (8011ce4 <tcp_receive+0xd00>)
 8011bc4:	f7fd faf0 	bl	800f1a8 <tcp_seg_copy>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	675a      	str	r2, [r3, #116]	; 0x74
 8011bce:	e16d      	b.n	8011eac <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011bda:	e157      	b.n	8011e8c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	685a      	ldr	r2, [r3, #4]
 8011be2:	4b41      	ldr	r3, [pc, #260]	; (8011ce8 <tcp_receive+0xd04>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d11d      	bne.n	8011c26 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011bea:	4b3e      	ldr	r3, [pc, #248]	; (8011ce4 <tcp_receive+0xd00>)
 8011bec:	891a      	ldrh	r2, [r3, #8]
 8011bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf0:	891b      	ldrh	r3, [r3, #8]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	f240 814f 	bls.w	8011e96 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bf8:	483a      	ldr	r0, [pc, #232]	; (8011ce4 <tcp_receive+0xd00>)
 8011bfa:	f7fd fad5 	bl	800f1a8 <tcp_seg_copy>
 8011bfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f000 8149 	beq.w	8011e9a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d003      	beq.n	8011c16 <tcp_receive+0xc32>
                    prev->next = cseg;
 8011c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c10:	697a      	ldr	r2, [r7, #20]
 8011c12:	601a      	str	r2, [r3, #0]
 8011c14:	e002      	b.n	8011c1c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	697a      	ldr	r2, [r7, #20]
 8011c1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011c1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c1e:	6978      	ldr	r0, [r7, #20]
 8011c20:	f7ff f8dc 	bl	8010ddc <tcp_oos_insert_segment>
                }
                break;
 8011c24:	e139      	b.n	8011e9a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d117      	bne.n	8011c5c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011c2c:	4b2e      	ldr	r3, [pc, #184]	; (8011ce8 <tcp_receive+0xd04>)
 8011c2e:	681a      	ldr	r2, [r3, #0]
 8011c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	1ad3      	subs	r3, r2, r3
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	da57      	bge.n	8011cec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c3c:	4829      	ldr	r0, [pc, #164]	; (8011ce4 <tcp_receive+0xd00>)
 8011c3e:	f7fd fab3 	bl	800f1a8 <tcp_seg_copy>
 8011c42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	f000 8129 	beq.w	8011e9e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	69ba      	ldr	r2, [r7, #24]
 8011c50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c54:	69b8      	ldr	r0, [r7, #24]
 8011c56:	f7ff f8c1 	bl	8010ddc <tcp_oos_insert_segment>
                  }
                  break;
 8011c5a:	e120      	b.n	8011e9e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011c5c:	4b22      	ldr	r3, [pc, #136]	; (8011ce8 <tcp_receive+0xd04>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	1ad3      	subs	r3, r2, r3
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	db3e      	blt.n	8011cec <tcp_receive+0xd08>
 8011c6e:	4b1e      	ldr	r3, [pc, #120]	; (8011ce8 <tcp_receive+0xd04>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dc35      	bgt.n	8011cec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c80:	4818      	ldr	r0, [pc, #96]	; (8011ce4 <tcp_receive+0xd00>)
 8011c82:	f7fd fa91 	bl	800f1a8 <tcp_seg_copy>
 8011c86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f000 8109 	beq.w	8011ea2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c98:	8912      	ldrh	r2, [r2, #8]
 8011c9a:	441a      	add	r2, r3
 8011c9c:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <tcp_receive+0xd04>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	dd12      	ble.n	8011ccc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011ca6:	4b10      	ldr	r3, [pc, #64]	; (8011ce8 <tcp_receive+0xd04>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc2:	891b      	ldrh	r3, [r3, #8]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	f7fb fbf2 	bl	800d4b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cce:	69fa      	ldr	r2, [r7, #28]
 8011cd0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011cd4:	69f8      	ldr	r0, [r7, #28]
 8011cd6:	f7ff f881 	bl	8010ddc <tcp_oos_insert_segment>
                  }
                  break;
 8011cda:	e0e2      	b.n	8011ea2 <tcp_receive+0xebe>
 8011cdc:	2001a6fc 	.word	0x2001a6fc
 8011ce0:	2001a6f9 	.word	0x2001a6f9
 8011ce4:	2001a6cc 	.word	0x2001a6cc
 8011ce8:	2001a6ec 	.word	0x2001a6ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f040 80c6 	bne.w	8011e86 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011cfa:	4b80      	ldr	r3, [pc, #512]	; (8011efc <tcp_receive+0xf18>)
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f340 80bd 	ble.w	8011e86 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	899b      	ldrh	r3, [r3, #12]
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7f9 ffc5 	bl	800bca4 <lwip_htons>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	f003 0301 	and.w	r3, r3, #1
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	f040 80bf 	bne.w	8011ea6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011d28:	4875      	ldr	r0, [pc, #468]	; (8011f00 <tcp_receive+0xf1c>)
 8011d2a:	f7fd fa3d 	bl	800f1a8 <tcp_seg_copy>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f000 80b6 	beq.w	8011eaa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d46:	8912      	ldrh	r2, [r2, #8]
 8011d48:	441a      	add	r2, r3
 8011d4a:	4b6c      	ldr	r3, [pc, #432]	; (8011efc <tcp_receive+0xf18>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dd12      	ble.n	8011d7a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011d54:	4b69      	ldr	r3, [pc, #420]	; (8011efc <tcp_receive+0xf18>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	b29a      	uxth	r2, r3
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6c:	685a      	ldr	r2, [r3, #4]
 8011d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d70:	891b      	ldrh	r3, [r3, #8]
 8011d72:	4619      	mov	r1, r3
 8011d74:	4610      	mov	r0, r2
 8011d76:	f7fb fb9b 	bl	800d4b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011d7a:	4b62      	ldr	r3, [pc, #392]	; (8011f04 <tcp_receive+0xf20>)
 8011d7c:	881b      	ldrh	r3, [r3, #0]
 8011d7e:	461a      	mov	r2, r3
 8011d80:	4b5e      	ldr	r3, [pc, #376]	; (8011efc <tcp_receive+0xf18>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	441a      	add	r2, r3
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d8a:	6879      	ldr	r1, [r7, #4]
 8011d8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d8e:	440b      	add	r3, r1
 8011d90:	1ad3      	subs	r3, r2, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	f340 8089 	ble.w	8011eaa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	899b      	ldrh	r3, [r3, #12]
 8011da0:	b29b      	uxth	r3, r3
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f9 ff7e 	bl	800bca4 <lwip_htons>
 8011da8:	4603      	mov	r3, r0
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d022      	beq.n	8011dfa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	899b      	ldrh	r3, [r3, #12]
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	b21b      	sxth	r3, r3
 8011dc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011dc4:	b21c      	sxth	r4, r3
 8011dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	899b      	ldrh	r3, [r3, #12]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7f9 ff67 	bl	800bca4 <lwip_htons>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7f9 ff5e 	bl	800bca4 <lwip_htons>
 8011de8:	4603      	mov	r3, r0
 8011dea:	b21b      	sxth	r3, r3
 8011dec:	4323      	orrs	r3, r4
 8011dee:	b21a      	sxth	r2, r3
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	b292      	uxth	r2, r2
 8011df8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e04:	4413      	add	r3, r2
 8011e06:	b299      	uxth	r1, r3
 8011e08:	4b3c      	ldr	r3, [pc, #240]	; (8011efc <tcp_receive+0xf18>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	1a8a      	subs	r2, r1, r2
 8011e14:	b292      	uxth	r2, r2
 8011e16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	685a      	ldr	r2, [r3, #4]
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	891b      	ldrh	r3, [r3, #8]
 8011e24:	4619      	mov	r1, r3
 8011e26:	4610      	mov	r0, r2
 8011e28:	f7fb fb42 	bl	800d4b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	891c      	ldrh	r4, [r3, #8]
 8011e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	899b      	ldrh	r3, [r3, #12]
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7f9 ff31 	bl	800bca4 <lwip_htons>
 8011e42:	4603      	mov	r3, r0
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	f003 0303 	and.w	r3, r3, #3
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d001      	beq.n	8011e52 <tcp_receive+0xe6e>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e000      	b.n	8011e54 <tcp_receive+0xe70>
 8011e52:	2300      	movs	r3, #0
 8011e54:	4423      	add	r3, r4
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	4b2a      	ldr	r3, [pc, #168]	; (8011f04 <tcp_receive+0xf20>)
 8011e5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011e5c:	4b29      	ldr	r3, [pc, #164]	; (8011f04 <tcp_receive+0xf20>)
 8011e5e:	881b      	ldrh	r3, [r3, #0]
 8011e60:	461a      	mov	r2, r3
 8011e62:	4b26      	ldr	r3, [pc, #152]	; (8011efc <tcp_receive+0xf18>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	441a      	add	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6c:	6879      	ldr	r1, [r7, #4]
 8011e6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e70:	440b      	add	r3, r1
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d019      	beq.n	8011eaa <tcp_receive+0xec6>
 8011e76:	4b24      	ldr	r3, [pc, #144]	; (8011f08 <tcp_receive+0xf24>)
 8011e78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011e7c:	4923      	ldr	r1, [pc, #140]	; (8011f0c <tcp_receive+0xf28>)
 8011e7e:	4824      	ldr	r0, [pc, #144]	; (8011f10 <tcp_receive+0xf2c>)
 8011e80:	f005 f9bc 	bl	80171fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011e84:	e011      	b.n	8011eaa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	f47f aea4 	bne.w	8011bdc <tcp_receive+0xbf8>
 8011e94:	e00a      	b.n	8011eac <tcp_receive+0xec8>
                break;
 8011e96:	bf00      	nop
 8011e98:	e008      	b.n	8011eac <tcp_receive+0xec8>
                break;
 8011e9a:	bf00      	nop
 8011e9c:	e006      	b.n	8011eac <tcp_receive+0xec8>
                  break;
 8011e9e:	bf00      	nop
 8011ea0:	e004      	b.n	8011eac <tcp_receive+0xec8>
                  break;
 8011ea2:	bf00      	nop
 8011ea4:	e002      	b.n	8011eac <tcp_receive+0xec8>
                  break;
 8011ea6:	bf00      	nop
 8011ea8:	e000      	b.n	8011eac <tcp_receive+0xec8>
                break;
 8011eaa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f001 fe8d 	bl	8013bcc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011eb2:	e003      	b.n	8011ebc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f001 fe89 	bl	8013bcc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011eba:	e01a      	b.n	8011ef2 <tcp_receive+0xf0e>
 8011ebc:	e019      	b.n	8011ef2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011ebe:	4b0f      	ldr	r3, [pc, #60]	; (8011efc <tcp_receive+0xf18>)
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	db0a      	blt.n	8011ee2 <tcp_receive+0xefe>
 8011ecc:	4b0b      	ldr	r3, [pc, #44]	; (8011efc <tcp_receive+0xf18>)
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed4:	6879      	ldr	r1, [r7, #4]
 8011ed6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ed8:	440b      	add	r3, r1
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	3301      	adds	r3, #1
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	dd07      	ble.n	8011ef2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	8b5b      	ldrh	r3, [r3, #26]
 8011ee6:	f043 0302 	orr.w	r3, r3, #2
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011ef0:	e7ff      	b.n	8011ef2 <tcp_receive+0xf0e>
 8011ef2:	bf00      	nop
 8011ef4:	3750      	adds	r7, #80	; 0x50
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8011efa:	bf00      	nop
 8011efc:	2001a6ec 	.word	0x2001a6ec
 8011f00:	2001a6cc 	.word	0x2001a6cc
 8011f04:	2001a6f6 	.word	0x2001a6f6
 8011f08:	0801a464 	.word	0x0801a464
 8011f0c:	0801a80c 	.word	0x0801a80c
 8011f10:	0801a4b0 	.word	0x0801a4b0

08011f14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011f1a:	4b15      	ldr	r3, [pc, #84]	; (8011f70 <tcp_get_next_optbyte+0x5c>)
 8011f1c:	881b      	ldrh	r3, [r3, #0]
 8011f1e:	1c5a      	adds	r2, r3, #1
 8011f20:	b291      	uxth	r1, r2
 8011f22:	4a13      	ldr	r2, [pc, #76]	; (8011f70 <tcp_get_next_optbyte+0x5c>)
 8011f24:	8011      	strh	r1, [r2, #0]
 8011f26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011f28:	4b12      	ldr	r3, [pc, #72]	; (8011f74 <tcp_get_next_optbyte+0x60>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d004      	beq.n	8011f3a <tcp_get_next_optbyte+0x26>
 8011f30:	4b11      	ldr	r3, [pc, #68]	; (8011f78 <tcp_get_next_optbyte+0x64>)
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	88fa      	ldrh	r2, [r7, #6]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d208      	bcs.n	8011f4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011f3a:	4b10      	ldr	r3, [pc, #64]	; (8011f7c <tcp_get_next_optbyte+0x68>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	3314      	adds	r3, #20
 8011f40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011f42:	88fb      	ldrh	r3, [r7, #6]
 8011f44:	683a      	ldr	r2, [r7, #0]
 8011f46:	4413      	add	r3, r2
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	e00b      	b.n	8011f64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011f4c:	88fb      	ldrh	r3, [r7, #6]
 8011f4e:	b2da      	uxtb	r2, r3
 8011f50:	4b09      	ldr	r3, [pc, #36]	; (8011f78 <tcp_get_next_optbyte+0x64>)
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011f5a:	4b06      	ldr	r3, [pc, #24]	; (8011f74 <tcp_get_next_optbyte+0x60>)
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	797b      	ldrb	r3, [r7, #5]
 8011f60:	4413      	add	r3, r2
 8011f62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	370c      	adds	r7, #12
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr
 8011f70:	2001a6e8 	.word	0x2001a6e8
 8011f74:	2001a6e4 	.word	0x2001a6e4
 8011f78:	2001a6e2 	.word	0x2001a6e2
 8011f7c:	2001a6dc 	.word	0x2001a6dc

08011f80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d106      	bne.n	8011f9c <tcp_parseopt+0x1c>
 8011f8e:	4b32      	ldr	r3, [pc, #200]	; (8012058 <tcp_parseopt+0xd8>)
 8011f90:	f240 727d 	movw	r2, #1917	; 0x77d
 8011f94:	4931      	ldr	r1, [pc, #196]	; (801205c <tcp_parseopt+0xdc>)
 8011f96:	4832      	ldr	r0, [pc, #200]	; (8012060 <tcp_parseopt+0xe0>)
 8011f98:	f005 f930 	bl	80171fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f9c:	4b31      	ldr	r3, [pc, #196]	; (8012064 <tcp_parseopt+0xe4>)
 8011f9e:	881b      	ldrh	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d056      	beq.n	8012052 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011fa4:	4b30      	ldr	r3, [pc, #192]	; (8012068 <tcp_parseopt+0xe8>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	801a      	strh	r2, [r3, #0]
 8011faa:	e046      	b.n	801203a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011fac:	f7ff ffb2 	bl	8011f14 <tcp_get_next_optbyte>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011fb4:	7bfb      	ldrb	r3, [r7, #15]
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	d006      	beq.n	8011fc8 <tcp_parseopt+0x48>
 8011fba:	2b02      	cmp	r3, #2
 8011fbc:	dc2c      	bgt.n	8012018 <tcp_parseopt+0x98>
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d042      	beq.n	8012048 <tcp_parseopt+0xc8>
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	d128      	bne.n	8012018 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011fc6:	e038      	b.n	801203a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011fc8:	f7ff ffa4 	bl	8011f14 <tcp_get_next_optbyte>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b04      	cmp	r3, #4
 8011fd0:	d13c      	bne.n	801204c <tcp_parseopt+0xcc>
 8011fd2:	4b25      	ldr	r3, [pc, #148]	; (8012068 <tcp_parseopt+0xe8>)
 8011fd4:	881b      	ldrh	r3, [r3, #0]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	4a22      	ldr	r2, [pc, #136]	; (8012064 <tcp_parseopt+0xe4>)
 8011fda:	8812      	ldrh	r2, [r2, #0]
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	da35      	bge.n	801204c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011fe0:	f7ff ff98 	bl	8011f14 <tcp_get_next_optbyte>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	021b      	lsls	r3, r3, #8
 8011fea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011fec:	f7ff ff92 	bl	8011f14 <tcp_get_next_optbyte>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	89bb      	ldrh	r3, [r7, #12]
 8011ff6:	4313      	orrs	r3, r2
 8011ff8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011ffa:	89bb      	ldrh	r3, [r7, #12]
 8011ffc:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8012000:	4293      	cmp	r3, r2
 8012002:	d804      	bhi.n	801200e <tcp_parseopt+0x8e>
 8012004:	89bb      	ldrh	r3, [r7, #12]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d001      	beq.n	801200e <tcp_parseopt+0x8e>
 801200a:	89ba      	ldrh	r2, [r7, #12]
 801200c:	e001      	b.n	8012012 <tcp_parseopt+0x92>
 801200e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012016:	e010      	b.n	801203a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012018:	f7ff ff7c 	bl	8011f14 <tcp_get_next_optbyte>
 801201c:	4603      	mov	r3, r0
 801201e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012020:	7afb      	ldrb	r3, [r7, #11]
 8012022:	2b01      	cmp	r3, #1
 8012024:	d914      	bls.n	8012050 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012026:	7afb      	ldrb	r3, [r7, #11]
 8012028:	b29a      	uxth	r2, r3
 801202a:	4b0f      	ldr	r3, [pc, #60]	; (8012068 <tcp_parseopt+0xe8>)
 801202c:	881b      	ldrh	r3, [r3, #0]
 801202e:	4413      	add	r3, r2
 8012030:	b29b      	uxth	r3, r3
 8012032:	3b02      	subs	r3, #2
 8012034:	b29a      	uxth	r2, r3
 8012036:	4b0c      	ldr	r3, [pc, #48]	; (8012068 <tcp_parseopt+0xe8>)
 8012038:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801203a:	4b0b      	ldr	r3, [pc, #44]	; (8012068 <tcp_parseopt+0xe8>)
 801203c:	881a      	ldrh	r2, [r3, #0]
 801203e:	4b09      	ldr	r3, [pc, #36]	; (8012064 <tcp_parseopt+0xe4>)
 8012040:	881b      	ldrh	r3, [r3, #0]
 8012042:	429a      	cmp	r2, r3
 8012044:	d3b2      	bcc.n	8011fac <tcp_parseopt+0x2c>
 8012046:	e004      	b.n	8012052 <tcp_parseopt+0xd2>
          return;
 8012048:	bf00      	nop
 801204a:	e002      	b.n	8012052 <tcp_parseopt+0xd2>
            return;
 801204c:	bf00      	nop
 801204e:	e000      	b.n	8012052 <tcp_parseopt+0xd2>
            return;
 8012050:	bf00      	nop
      }
    }
  }
}
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}
 8012058:	0801a464 	.word	0x0801a464
 801205c:	0801a8c8 	.word	0x0801a8c8
 8012060:	0801a4b0 	.word	0x0801a4b0
 8012064:	2001a6e0 	.word	0x2001a6e0
 8012068:	2001a6e8 	.word	0x2001a6e8

0801206c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801206c:	b480      	push	{r7}
 801206e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012070:	4b05      	ldr	r3, [pc, #20]	; (8012088 <tcp_trigger_input_pcb_close+0x1c>)
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	f043 0310 	orr.w	r3, r3, #16
 8012078:	b2da      	uxtb	r2, r3
 801207a:	4b03      	ldr	r3, [pc, #12]	; (8012088 <tcp_trigger_input_pcb_close+0x1c>)
 801207c:	701a      	strb	r2, [r3, #0]
}
 801207e:	bf00      	nop
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	2001a6f9 	.word	0x2001a6f9

0801208c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00a      	beq.n	80120b4 <tcp_route+0x28>
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	7a1b      	ldrb	r3, [r3, #8]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d006      	beq.n	80120b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	7a1b      	ldrb	r3, [r3, #8]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fa fff0 	bl	800d090 <netif_get_by_index>
 80120b0:	4603      	mov	r3, r0
 80120b2:	e003      	b.n	80120bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f003 fb43 	bl	8015740 <ip4_route>
 80120ba:	4603      	mov	r3, r0
  }
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3710      	adds	r7, #16
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b087      	sub	sp, #28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	603b      	str	r3, [r7, #0]
 80120d0:	4613      	mov	r3, r2
 80120d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d105      	bne.n	80120e6 <tcp_create_segment+0x22>
 80120da:	4b45      	ldr	r3, [pc, #276]	; (80121f0 <tcp_create_segment+0x12c>)
 80120dc:	22a3      	movs	r2, #163	; 0xa3
 80120de:	4945      	ldr	r1, [pc, #276]	; (80121f4 <tcp_create_segment+0x130>)
 80120e0:	4845      	ldr	r0, [pc, #276]	; (80121f8 <tcp_create_segment+0x134>)
 80120e2:	f005 f88b 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d105      	bne.n	80120f8 <tcp_create_segment+0x34>
 80120ec:	4b40      	ldr	r3, [pc, #256]	; (80121f0 <tcp_create_segment+0x12c>)
 80120ee:	22a4      	movs	r2, #164	; 0xa4
 80120f0:	4942      	ldr	r1, [pc, #264]	; (80121fc <tcp_create_segment+0x138>)
 80120f2:	4841      	ldr	r0, [pc, #260]	; (80121f8 <tcp_create_segment+0x134>)
 80120f4:	f005 f882 	bl	80171fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80120f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	f003 0304 	and.w	r3, r3, #4
 8012104:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012106:	22a8      	movs	r2, #168	; 0xa8
 8012108:	4939      	ldr	r1, [pc, #228]	; (80121f0 <tcp_create_segment+0x12c>)
 801210a:	2003      	movs	r0, #3
 801210c:	f7fa fc2a 	bl	800c964 <memp_malloc_fn>
 8012110:	6138      	str	r0, [r7, #16]
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d104      	bne.n	8012122 <tcp_create_segment+0x5e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012118:	68b8      	ldr	r0, [r7, #8]
 801211a:	f7fb fb4f 	bl	800d7bc <pbuf_free>
    return NULL;
 801211e:	2300      	movs	r3, #0
 8012120:	e061      	b.n	80121e6 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012128:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	2200      	movs	r2, #0
 801212e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	68ba      	ldr	r2, [r7, #8]
 8012134:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	891a      	ldrh	r2, [r3, #8]
 801213a:	7dfb      	ldrb	r3, [r7, #23]
 801213c:	b29b      	uxth	r3, r3
 801213e:	429a      	cmp	r2, r3
 8012140:	d205      	bcs.n	801214e <tcp_create_segment+0x8a>
 8012142:	4b2b      	ldr	r3, [pc, #172]	; (80121f0 <tcp_create_segment+0x12c>)
 8012144:	22b0      	movs	r2, #176	; 0xb0
 8012146:	492e      	ldr	r1, [pc, #184]	; (8012200 <tcp_create_segment+0x13c>)
 8012148:	482b      	ldr	r0, [pc, #172]	; (80121f8 <tcp_create_segment+0x134>)
 801214a:	f005 f857 	bl	80171fc <iprintf>
  seg->len = p->tot_len - optlen;
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	891a      	ldrh	r2, [r3, #8]
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	b29b      	uxth	r3, r3
 8012156:	1ad3      	subs	r3, r2, r3
 8012158:	b29a      	uxth	r2, r3
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801215e:	2114      	movs	r1, #20
 8012160:	68b8      	ldr	r0, [r7, #8]
 8012162:	f7fb fa95 	bl	800d690 <pbuf_add_header>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d004      	beq.n	8012176 <tcp_create_segment+0xb2>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801216c:	6938      	ldr	r0, [r7, #16]
 801216e:	f7fd f802 	bl	800f176 <tcp_seg_free>
    return NULL;
 8012172:	2300      	movs	r3, #0
 8012174:	e037      	b.n	80121e6 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	685a      	ldr	r2, [r3, #4]
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	8ada      	ldrh	r2, [r3, #22]
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	68dc      	ldr	r4, [r3, #12]
 8012188:	4610      	mov	r0, r2
 801218a:	f7f9 fd8b 	bl	800bca4 <lwip_htons>
 801218e:	4603      	mov	r3, r0
 8012190:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	8b1a      	ldrh	r2, [r3, #24]
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	68dc      	ldr	r4, [r3, #12]
 801219a:	4610      	mov	r0, r2
 801219c:	f7f9 fd82 	bl	800bca4 <lwip_htons>
 80121a0:	4603      	mov	r3, r0
 80121a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	68dc      	ldr	r4, [r3, #12]
 80121a8:	6838      	ldr	r0, [r7, #0]
 80121aa:	f7f9 fd90 	bl	800bcce <lwip_htonl>
 80121ae:	4603      	mov	r3, r0
 80121b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80121b2:	7dfb      	ldrb	r3, [r7, #23]
 80121b4:	089b      	lsrs	r3, r3, #2
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	3305      	adds	r3, #5
 80121bc:	b29b      	uxth	r3, r3
 80121be:	031b      	lsls	r3, r3, #12
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	79fb      	ldrb	r3, [r7, #7]
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	4313      	orrs	r3, r2
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	68dc      	ldr	r4, [r3, #12]
 80121ce:	4610      	mov	r0, r2
 80121d0:	f7f9 fd68 	bl	800bca4 <lwip_htons>
 80121d4:	4603      	mov	r3, r0
 80121d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	749a      	strb	r2, [r3, #18]
 80121e0:	2200      	movs	r2, #0
 80121e2:	74da      	strb	r2, [r3, #19]
  return seg;
 80121e4:	693b      	ldr	r3, [r7, #16]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	371c      	adds	r7, #28
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd90      	pop	{r4, r7, pc}
 80121ee:	bf00      	nop
 80121f0:	0801a8e4 	.word	0x0801a8e4
 80121f4:	0801a918 	.word	0x0801a918
 80121f8:	0801a938 	.word	0x0801a938
 80121fc:	0801a960 	.word	0x0801a960
 8012200:	0801a984 	.word	0x0801a984

08012204 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b086      	sub	sp, #24
 8012208:	af00      	add	r7, sp, #0
 801220a:	607b      	str	r3, [r7, #4]
 801220c:	4603      	mov	r3, r0
 801220e:	73fb      	strb	r3, [r7, #15]
 8012210:	460b      	mov	r3, r1
 8012212:	81bb      	strh	r3, [r7, #12]
 8012214:	4613      	mov	r3, r2
 8012216:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012218:	89bb      	ldrh	r3, [r7, #12]
 801221a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d105      	bne.n	801222e <tcp_pbuf_prealloc+0x2a>
 8012222:	4b30      	ldr	r3, [pc, #192]	; (80122e4 <tcp_pbuf_prealloc+0xe0>)
 8012224:	22e8      	movs	r2, #232	; 0xe8
 8012226:	4930      	ldr	r1, [pc, #192]	; (80122e8 <tcp_pbuf_prealloc+0xe4>)
 8012228:	4830      	ldr	r0, [pc, #192]	; (80122ec <tcp_pbuf_prealloc+0xe8>)
 801222a:	f004 ffe7 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d105      	bne.n	8012240 <tcp_pbuf_prealloc+0x3c>
 8012234:	4b2b      	ldr	r3, [pc, #172]	; (80122e4 <tcp_pbuf_prealloc+0xe0>)
 8012236:	22e9      	movs	r2, #233	; 0xe9
 8012238:	492d      	ldr	r1, [pc, #180]	; (80122f0 <tcp_pbuf_prealloc+0xec>)
 801223a:	482c      	ldr	r0, [pc, #176]	; (80122ec <tcp_pbuf_prealloc+0xe8>)
 801223c:	f004 ffde 	bl	80171fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012240:	89ba      	ldrh	r2, [r7, #12]
 8012242:	897b      	ldrh	r3, [r7, #10]
 8012244:	429a      	cmp	r2, r3
 8012246:	d221      	bcs.n	801228c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012248:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801224c:	f003 0302 	and.w	r3, r3, #2
 8012250:	2b00      	cmp	r3, #0
 8012252:	d111      	bne.n	8012278 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	8b5b      	ldrh	r3, [r3, #26]
 8012258:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801225c:	2b00      	cmp	r3, #0
 801225e:	d115      	bne.n	801228c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012260:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012264:	2b00      	cmp	r3, #0
 8012266:	d007      	beq.n	8012278 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801226c:	2b00      	cmp	r3, #0
 801226e:	d103      	bne.n	8012278 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012270:	6a3b      	ldr	r3, [r7, #32]
 8012272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012274:	2b00      	cmp	r3, #0
 8012276:	d009      	beq.n	801228c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012278:	89bb      	ldrh	r3, [r7, #12]
 801227a:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801227e:	f023 0203 	bic.w	r2, r3, #3
 8012282:	897b      	ldrh	r3, [r7, #10]
 8012284:	4293      	cmp	r3, r2
 8012286:	bf28      	it	cs
 8012288:	4613      	movcs	r3, r2
 801228a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801228c:	8af9      	ldrh	r1, [r7, #22]
 801228e:	7bfb      	ldrb	r3, [r7, #15]
 8012290:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012294:	4618      	mov	r0, r3
 8012296:	f7fa ffa5 	bl	800d1e4 <pbuf_alloc>
 801229a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d101      	bne.n	80122a6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80122a2:	2300      	movs	r3, #0
 80122a4:	e019      	b.n	80122da <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d006      	beq.n	80122bc <tcp_pbuf_prealloc+0xb8>
 80122ae:	4b0d      	ldr	r3, [pc, #52]	; (80122e4 <tcp_pbuf_prealloc+0xe0>)
 80122b0:	f240 120b 	movw	r2, #267	; 0x10b
 80122b4:	490f      	ldr	r1, [pc, #60]	; (80122f4 <tcp_pbuf_prealloc+0xf0>)
 80122b6:	480d      	ldr	r0, [pc, #52]	; (80122ec <tcp_pbuf_prealloc+0xe8>)
 80122b8:	f004 ffa0 	bl	80171fc <iprintf>
  *oversize = p->len - length;
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	895a      	ldrh	r2, [r3, #10]
 80122c0:	89bb      	ldrh	r3, [r7, #12]
 80122c2:	1ad3      	subs	r3, r2, r3
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	89ba      	ldrh	r2, [r7, #12]
 80122ce:	811a      	strh	r2, [r3, #8]
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	891a      	ldrh	r2, [r3, #8]
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	815a      	strh	r2, [r3, #10]
  return p;
 80122d8:	693b      	ldr	r3, [r7, #16]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3718      	adds	r7, #24
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	0801a8e4 	.word	0x0801a8e4
 80122e8:	0801a99c 	.word	0x0801a99c
 80122ec:	0801a938 	.word	0x0801a938
 80122f0:	0801a9c0 	.word	0x0801a9c0
 80122f4:	0801a9e0 	.word	0x0801a9e0

080122f8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b082      	sub	sp, #8
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	460b      	mov	r3, r1
 8012302:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d106      	bne.n	8012318 <tcp_write_checks+0x20>
 801230a:	4b33      	ldr	r3, [pc, #204]	; (80123d8 <tcp_write_checks+0xe0>)
 801230c:	f240 1233 	movw	r2, #307	; 0x133
 8012310:	4932      	ldr	r1, [pc, #200]	; (80123dc <tcp_write_checks+0xe4>)
 8012312:	4833      	ldr	r0, [pc, #204]	; (80123e0 <tcp_write_checks+0xe8>)
 8012314:	f004 ff72 	bl	80171fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	7d1b      	ldrb	r3, [r3, #20]
 801231c:	2b04      	cmp	r3, #4
 801231e:	d00e      	beq.n	801233e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012324:	2b07      	cmp	r3, #7
 8012326:	d00a      	beq.n	801233e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801232c:	2b02      	cmp	r3, #2
 801232e:	d006      	beq.n	801233e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012334:	2b03      	cmp	r3, #3
 8012336:	d002      	beq.n	801233e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012338:	f06f 030a 	mvn.w	r3, #10
 801233c:	e048      	b.n	80123d0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801233e:	887b      	ldrh	r3, [r7, #2]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d101      	bne.n	8012348 <tcp_write_checks+0x50>
    return ERR_OK;
 8012344:	2300      	movs	r3, #0
 8012346:	e043      	b.n	80123d0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801234e:	887a      	ldrh	r2, [r7, #2]
 8012350:	429a      	cmp	r2, r3
 8012352:	d909      	bls.n	8012368 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	8b5b      	ldrh	r3, [r3, #26]
 8012358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801235c:	b29a      	uxth	r2, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012362:	f04f 33ff 	mov.w	r3, #4294967295
 8012366:	e033      	b.n	80123d0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801236e:	2b08      	cmp	r3, #8
 8012370:	d909      	bls.n	8012386 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	8b5b      	ldrh	r3, [r3, #26]
 8012376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801237a:	b29a      	uxth	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012380:	f04f 33ff 	mov.w	r3, #4294967295
 8012384:	e024      	b.n	80123d0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801238c:	2b00      	cmp	r3, #0
 801238e:	d00f      	beq.n	80123b0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012394:	2b00      	cmp	r3, #0
 8012396:	d11a      	bne.n	80123ce <tcp_write_checks+0xd6>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801239c:	2b00      	cmp	r3, #0
 801239e:	d116      	bne.n	80123ce <tcp_write_checks+0xd6>
 80123a0:	4b0d      	ldr	r3, [pc, #52]	; (80123d8 <tcp_write_checks+0xe0>)
 80123a2:	f240 1255 	movw	r2, #341	; 0x155
 80123a6:	490f      	ldr	r1, [pc, #60]	; (80123e4 <tcp_write_checks+0xec>)
 80123a8:	480d      	ldr	r0, [pc, #52]	; (80123e0 <tcp_write_checks+0xe8>)
 80123aa:	f004 ff27 	bl	80171fc <iprintf>
 80123ae:	e00e      	b.n	80123ce <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d103      	bne.n	80123c0 <tcp_write_checks+0xc8>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d006      	beq.n	80123ce <tcp_write_checks+0xd6>
 80123c0:	4b05      	ldr	r3, [pc, #20]	; (80123d8 <tcp_write_checks+0xe0>)
 80123c2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80123c6:	4908      	ldr	r1, [pc, #32]	; (80123e8 <tcp_write_checks+0xf0>)
 80123c8:	4805      	ldr	r0, [pc, #20]	; (80123e0 <tcp_write_checks+0xe8>)
 80123ca:	f004 ff17 	bl	80171fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	0801a8e4 	.word	0x0801a8e4
 80123dc:	0801a9f4 	.word	0x0801a9f4
 80123e0:	0801a938 	.word	0x0801a938
 80123e4:	0801aa14 	.word	0x0801aa14
 80123e8:	0801aa50 	.word	0x0801aa50

080123ec <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80123ec:	b590      	push	{r4, r7, lr}
 80123ee:	b09b      	sub	sp, #108	; 0x6c
 80123f0:	af04      	add	r7, sp, #16
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	4611      	mov	r1, r2
 80123f8:	461a      	mov	r2, r3
 80123fa:	460b      	mov	r3, r1
 80123fc:	80fb      	strh	r3, [r7, #6]
 80123fe:	4613      	mov	r3, r2
 8012400:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012402:	2300      	movs	r3, #0
 8012404:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012406:	2300      	movs	r3, #0
 8012408:	653b      	str	r3, [r7, #80]	; 0x50
 801240a:	2300      	movs	r3, #0
 801240c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801240e:	2300      	movs	r3, #0
 8012410:	64bb      	str	r3, [r7, #72]	; 0x48
 8012412:	2300      	movs	r3, #0
 8012414:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012416:	2300      	movs	r3, #0
 8012418:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012422:	2300      	movs	r3, #0
 8012424:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801242a:	2300      	movs	r3, #0
 801242c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d109      	bne.n	8012448 <tcp_write+0x5c>
 8012434:	4ba4      	ldr	r3, [pc, #656]	; (80126c8 <tcp_write+0x2dc>)
 8012436:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801243a:	49a4      	ldr	r1, [pc, #656]	; (80126cc <tcp_write+0x2e0>)
 801243c:	48a4      	ldr	r0, [pc, #656]	; (80126d0 <tcp_write+0x2e4>)
 801243e:	f004 fedd 	bl	80171fc <iprintf>
 8012442:	f06f 030f 	mvn.w	r3, #15
 8012446:	e32a      	b.n	8012a9e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801244e:	085b      	lsrs	r3, r3, #1
 8012450:	b29a      	uxth	r2, r3
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012456:	4293      	cmp	r3, r2
 8012458:	bf28      	it	cs
 801245a:	4613      	movcs	r3, r2
 801245c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801245e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012460:	2b00      	cmp	r3, #0
 8012462:	d102      	bne.n	801246a <tcp_write+0x7e>
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012468:	e000      	b.n	801246c <tcp_write+0x80>
 801246a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801246c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d109      	bne.n	8012488 <tcp_write+0x9c>
 8012474:	4b94      	ldr	r3, [pc, #592]	; (80126c8 <tcp_write+0x2dc>)
 8012476:	f240 12ad 	movw	r2, #429	; 0x1ad
 801247a:	4996      	ldr	r1, [pc, #600]	; (80126d4 <tcp_write+0x2e8>)
 801247c:	4894      	ldr	r0, [pc, #592]	; (80126d0 <tcp_write+0x2e4>)
 801247e:	f004 febd 	bl	80171fc <iprintf>
 8012482:	f06f 030f 	mvn.w	r3, #15
 8012486:	e30a      	b.n	8012a9e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012488:	88fb      	ldrh	r3, [r7, #6]
 801248a:	4619      	mov	r1, r3
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f7ff ff33 	bl	80122f8 <tcp_write_checks>
 8012492:	4603      	mov	r3, r0
 8012494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012498:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <tcp_write+0xba>
    return err;
 80124a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80124a4:	e2fb      	b.n	8012a9e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124b0:	2300      	movs	r3, #0
 80124b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 80f6 	beq.w	80126ac <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124c4:	653b      	str	r3, [r7, #80]	; 0x50
 80124c6:	e002      	b.n	80124ce <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80124c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d1f8      	bne.n	80124c8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80124d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124d8:	7a9b      	ldrb	r3, [r3, #10]
 80124da:	009b      	lsls	r3, r3, #2
 80124dc:	b29b      	uxth	r3, r3
 80124de:	f003 0304 	and.w	r3, r3, #4
 80124e2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80124e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80124e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124e8:	891b      	ldrh	r3, [r3, #8]
 80124ea:	4619      	mov	r1, r3
 80124ec:	8c3b      	ldrh	r3, [r7, #32]
 80124ee:	440b      	add	r3, r1
 80124f0:	429a      	cmp	r2, r3
 80124f2:	da06      	bge.n	8012502 <tcp_write+0x116>
 80124f4:	4b74      	ldr	r3, [pc, #464]	; (80126c8 <tcp_write+0x2dc>)
 80124f6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80124fa:	4977      	ldr	r1, [pc, #476]	; (80126d8 <tcp_write+0x2ec>)
 80124fc:	4874      	ldr	r0, [pc, #464]	; (80126d0 <tcp_write+0x2e4>)
 80124fe:	f004 fe7d 	bl	80171fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012504:	891a      	ldrh	r2, [r3, #8]
 8012506:	8c3b      	ldrh	r3, [r7, #32]
 8012508:	4413      	add	r3, r2
 801250a:	b29b      	uxth	r3, r3
 801250c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012518:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801251a:	8a7b      	ldrh	r3, [r7, #18]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d026      	beq.n	801256e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012520:	8a7b      	ldrh	r3, [r7, #18]
 8012522:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012524:	429a      	cmp	r2, r3
 8012526:	d206      	bcs.n	8012536 <tcp_write+0x14a>
 8012528:	4b67      	ldr	r3, [pc, #412]	; (80126c8 <tcp_write+0x2dc>)
 801252a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801252e:	496b      	ldr	r1, [pc, #428]	; (80126dc <tcp_write+0x2f0>)
 8012530:	4867      	ldr	r0, [pc, #412]	; (80126d0 <tcp_write+0x2e4>)
 8012532:	f004 fe63 	bl	80171fc <iprintf>
      seg = last_unsent;
 8012536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012538:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801253a:	8a7b      	ldrh	r3, [r7, #18]
 801253c:	88fa      	ldrh	r2, [r7, #6]
 801253e:	4293      	cmp	r3, r2
 8012540:	bf28      	it	cs
 8012542:	4613      	movcs	r3, r2
 8012544:	b29b      	uxth	r3, r3
 8012546:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012548:	4293      	cmp	r3, r2
 801254a:	bf28      	it	cs
 801254c:	4613      	movcs	r3, r2
 801254e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012550:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012554:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012556:	4413      	add	r3, r2
 8012558:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801255c:	8a7a      	ldrh	r2, [r7, #18]
 801255e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012560:	1ad3      	subs	r3, r2, r3
 8012562:	b29b      	uxth	r3, r3
 8012564:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012566:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801256a:	1ad3      	subs	r3, r2, r3
 801256c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801256e:	8a7b      	ldrh	r3, [r7, #18]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00b      	beq.n	801258c <tcp_write+0x1a0>
 8012574:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012578:	88fb      	ldrh	r3, [r7, #6]
 801257a:	429a      	cmp	r2, r3
 801257c:	d006      	beq.n	801258c <tcp_write+0x1a0>
 801257e:	4b52      	ldr	r3, [pc, #328]	; (80126c8 <tcp_write+0x2dc>)
 8012580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012584:	4956      	ldr	r1, [pc, #344]	; (80126e0 <tcp_write+0x2f4>)
 8012586:	4852      	ldr	r0, [pc, #328]	; (80126d0 <tcp_write+0x2e4>)
 8012588:	f004 fe38 	bl	80171fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801258c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012590:	88fb      	ldrh	r3, [r7, #6]
 8012592:	429a      	cmp	r2, r3
 8012594:	f080 8167 	bcs.w	8012866 <tcp_write+0x47a>
 8012598:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801259a:	2b00      	cmp	r3, #0
 801259c:	f000 8163 	beq.w	8012866 <tcp_write+0x47a>
 80125a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125a2:	891b      	ldrh	r3, [r3, #8]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f000 815e 	beq.w	8012866 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80125aa:	88fa      	ldrh	r2, [r7, #6]
 80125ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125b0:	1ad2      	subs	r2, r2, r3
 80125b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80125b4:	4293      	cmp	r3, r2
 80125b6:	bfa8      	it	ge
 80125b8:	4613      	movge	r3, r2
 80125ba:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80125bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125be:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80125c0:	797b      	ldrb	r3, [r7, #5]
 80125c2:	f003 0301 	and.w	r3, r3, #1
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d027      	beq.n	801261a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80125ca:	f107 0012 	add.w	r0, r7, #18
 80125ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80125d0:	8bf9      	ldrh	r1, [r7, #30]
 80125d2:	2301      	movs	r3, #1
 80125d4:	9302      	str	r3, [sp, #8]
 80125d6:	797b      	ldrb	r3, [r7, #5]
 80125d8:	9301      	str	r3, [sp, #4]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	4603      	mov	r3, r0
 80125e0:	2000      	movs	r0, #0
 80125e2:	f7ff fe0f 	bl	8012204 <tcp_pbuf_prealloc>
 80125e6:	6578      	str	r0, [r7, #84]	; 0x54
 80125e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f000 8225 	beq.w	8012a3a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80125f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125f2:	6858      	ldr	r0, [r3, #4]
 80125f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125f8:	68ba      	ldr	r2, [r7, #8]
 80125fa:	4413      	add	r3, r2
 80125fc:	8bfa      	ldrh	r2, [r7, #30]
 80125fe:	4619      	mov	r1, r3
 8012600:	f004 fcec 	bl	8016fdc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012604:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012606:	f7fb f967 	bl	800d8d8 <pbuf_clen>
 801260a:	4603      	mov	r3, r0
 801260c:	461a      	mov	r2, r3
 801260e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012612:	4413      	add	r3, r2
 8012614:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012618:	e041      	b.n	801269e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801261a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	637b      	str	r3, [r7, #52]	; 0x34
 8012620:	e002      	b.n	8012628 <tcp_write+0x23c>
 8012622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	637b      	str	r3, [r7, #52]	; 0x34
 8012628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d1f8      	bne.n	8012622 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012632:	7b1b      	ldrb	r3, [r3, #12]
 8012634:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d115      	bne.n	8012668 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801263c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012642:	8952      	ldrh	r2, [r2, #10]
 8012644:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	429a      	cmp	r2, r3
 801264a:	d10d      	bne.n	8012668 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801264c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012650:	2b00      	cmp	r3, #0
 8012652:	d006      	beq.n	8012662 <tcp_write+0x276>
 8012654:	4b1c      	ldr	r3, [pc, #112]	; (80126c8 <tcp_write+0x2dc>)
 8012656:	f240 2231 	movw	r2, #561	; 0x231
 801265a:	4922      	ldr	r1, [pc, #136]	; (80126e4 <tcp_write+0x2f8>)
 801265c:	481c      	ldr	r0, [pc, #112]	; (80126d0 <tcp_write+0x2e4>)
 801265e:	f004 fdcd 	bl	80171fc <iprintf>
          extendlen = seglen;
 8012662:	8bfb      	ldrh	r3, [r7, #30]
 8012664:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012666:	e01a      	b.n	801269e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012668:	8bfb      	ldrh	r3, [r7, #30]
 801266a:	2201      	movs	r2, #1
 801266c:	4619      	mov	r1, r3
 801266e:	2000      	movs	r0, #0
 8012670:	f7fa fdb8 	bl	800d1e4 <pbuf_alloc>
 8012674:	6578      	str	r0, [r7, #84]	; 0x54
 8012676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012678:	2b00      	cmp	r3, #0
 801267a:	f000 81e0 	beq.w	8012a3e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801267e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012682:	68ba      	ldr	r2, [r7, #8]
 8012684:	441a      	add	r2, r3
 8012686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012688:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801268a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801268c:	f7fb f924 	bl	800d8d8 <pbuf_clen>
 8012690:	4603      	mov	r3, r0
 8012692:	461a      	mov	r2, r3
 8012694:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012698:	4413      	add	r3, r2
 801269a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801269e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126a2:	8bfb      	ldrh	r3, [r7, #30]
 80126a4:	4413      	add	r3, r2
 80126a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80126aa:	e0dc      	b.n	8012866 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f000 80d7 	beq.w	8012866 <tcp_write+0x47a>
 80126b8:	4b03      	ldr	r3, [pc, #12]	; (80126c8 <tcp_write+0x2dc>)
 80126ba:	f240 224a 	movw	r2, #586	; 0x24a
 80126be:	490a      	ldr	r1, [pc, #40]	; (80126e8 <tcp_write+0x2fc>)
 80126c0:	4803      	ldr	r0, [pc, #12]	; (80126d0 <tcp_write+0x2e4>)
 80126c2:	f004 fd9b 	bl	80171fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80126c6:	e0ce      	b.n	8012866 <tcp_write+0x47a>
 80126c8:	0801a8e4 	.word	0x0801a8e4
 80126cc:	0801aa84 	.word	0x0801aa84
 80126d0:	0801a938 	.word	0x0801a938
 80126d4:	0801aa9c 	.word	0x0801aa9c
 80126d8:	0801aad0 	.word	0x0801aad0
 80126dc:	0801aae8 	.word	0x0801aae8
 80126e0:	0801ab08 	.word	0x0801ab08
 80126e4:	0801ab28 	.word	0x0801ab28
 80126e8:	0801ab54 	.word	0x0801ab54
    struct pbuf *p;
    u16_t left = len - pos;
 80126ec:	88fa      	ldrh	r2, [r7, #6]
 80126ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80126f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012702:	8b7a      	ldrh	r2, [r7, #26]
 8012704:	8bbb      	ldrh	r3, [r7, #28]
 8012706:	4293      	cmp	r3, r2
 8012708:	bf28      	it	cs
 801270a:	4613      	movcs	r3, r2
 801270c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801270e:	797b      	ldrb	r3, [r7, #5]
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	d036      	beq.n	8012786 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012718:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801271c:	b29a      	uxth	r2, r3
 801271e:	8b3b      	ldrh	r3, [r7, #24]
 8012720:	4413      	add	r3, r2
 8012722:	b299      	uxth	r1, r3
 8012724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012726:	2b00      	cmp	r3, #0
 8012728:	bf0c      	ite	eq
 801272a:	2301      	moveq	r3, #1
 801272c:	2300      	movne	r3, #0
 801272e:	b2db      	uxtb	r3, r3
 8012730:	f107 0012 	add.w	r0, r7, #18
 8012734:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012736:	9302      	str	r3, [sp, #8]
 8012738:	797b      	ldrb	r3, [r7, #5]
 801273a:	9301      	str	r3, [sp, #4]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	4603      	mov	r3, r0
 8012742:	2036      	movs	r0, #54	; 0x36
 8012744:	f7ff fd5e 	bl	8012204 <tcp_pbuf_prealloc>
 8012748:	6338      	str	r0, [r7, #48]	; 0x30
 801274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274c:	2b00      	cmp	r3, #0
 801274e:	f000 8178 	beq.w	8012a42 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	895b      	ldrh	r3, [r3, #10]
 8012756:	8b3a      	ldrh	r2, [r7, #24]
 8012758:	429a      	cmp	r2, r3
 801275a:	d906      	bls.n	801276a <tcp_write+0x37e>
 801275c:	4b8c      	ldr	r3, [pc, #560]	; (8012990 <tcp_write+0x5a4>)
 801275e:	f240 2266 	movw	r2, #614	; 0x266
 8012762:	498c      	ldr	r1, [pc, #560]	; (8012994 <tcp_write+0x5a8>)
 8012764:	488c      	ldr	r0, [pc, #560]	; (8012998 <tcp_write+0x5ac>)
 8012766:	f004 fd49 	bl	80171fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	685a      	ldr	r2, [r3, #4]
 801276e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012772:	18d0      	adds	r0, r2, r3
 8012774:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012778:	68ba      	ldr	r2, [r7, #8]
 801277a:	4413      	add	r3, r2
 801277c:	8b3a      	ldrh	r2, [r7, #24]
 801277e:	4619      	mov	r1, r3
 8012780:	f004 fc2c 	bl	8016fdc <memcpy>
 8012784:	e02f      	b.n	80127e6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012786:	8a7b      	ldrh	r3, [r7, #18]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d006      	beq.n	801279a <tcp_write+0x3ae>
 801278c:	4b80      	ldr	r3, [pc, #512]	; (8012990 <tcp_write+0x5a4>)
 801278e:	f240 2271 	movw	r2, #625	; 0x271
 8012792:	4982      	ldr	r1, [pc, #520]	; (801299c <tcp_write+0x5b0>)
 8012794:	4880      	ldr	r0, [pc, #512]	; (8012998 <tcp_write+0x5ac>)
 8012796:	f004 fd31 	bl	80171fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801279a:	8b3b      	ldrh	r3, [r7, #24]
 801279c:	2201      	movs	r2, #1
 801279e:	4619      	mov	r1, r3
 80127a0:	2036      	movs	r0, #54	; 0x36
 80127a2:	f7fa fd1f 	bl	800d1e4 <pbuf_alloc>
 80127a6:	6178      	str	r0, [r7, #20]
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	f000 814b 	beq.w	8012a46 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80127b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127b4:	68ba      	ldr	r2, [r7, #8]
 80127b6:	441a      	add	r2, r3
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80127bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127c6:	4619      	mov	r1, r3
 80127c8:	2036      	movs	r0, #54	; 0x36
 80127ca:	f7fa fd0b 	bl	800d1e4 <pbuf_alloc>
 80127ce:	6338      	str	r0, [r7, #48]	; 0x30
 80127d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d103      	bne.n	80127de <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80127d6:	6978      	ldr	r0, [r7, #20]
 80127d8:	f7fa fff0 	bl	800d7bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80127dc:	e136      	b.n	8012a4c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80127de:	6979      	ldr	r1, [r7, #20]
 80127e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127e2:	f7fb f8b9 	bl	800d958 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80127e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127e8:	f7fb f876 	bl	800d8d8 <pbuf_clen>
 80127ec:	4603      	mov	r3, r0
 80127ee:	461a      	mov	r2, r3
 80127f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80127f4:	4413      	add	r3, r2
 80127f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80127fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80127fe:	2b09      	cmp	r3, #9
 8012800:	d903      	bls.n	801280a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012804:	f7fa ffda 	bl	800d7bc <pbuf_free>
      goto memerr;
 8012808:	e120      	b.n	8012a4c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801280e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012812:	441a      	add	r2, r3
 8012814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	4613      	mov	r3, r2
 801281c:	2200      	movs	r2, #0
 801281e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f7ff fc4f 	bl	80120c4 <tcp_create_segment>
 8012826:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801282a:	2b00      	cmp	r3, #0
 801282c:	f000 810d 	beq.w	8012a4a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012832:	2b00      	cmp	r3, #0
 8012834:	d102      	bne.n	801283c <tcp_write+0x450>
      queue = seg;
 8012836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012838:	647b      	str	r3, [r7, #68]	; 0x44
 801283a:	e00c      	b.n	8012856 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801283c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801283e:	2b00      	cmp	r3, #0
 8012840:	d106      	bne.n	8012850 <tcp_write+0x464>
 8012842:	4b53      	ldr	r3, [pc, #332]	; (8012990 <tcp_write+0x5a4>)
 8012844:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012848:	4955      	ldr	r1, [pc, #340]	; (80129a0 <tcp_write+0x5b4>)
 801284a:	4853      	ldr	r0, [pc, #332]	; (8012998 <tcp_write+0x5ac>)
 801284c:	f004 fcd6 	bl	80171fc <iprintf>
      prev_seg->next = seg;
 8012850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012852:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012854:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012858:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801285a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801285e:	8b3b      	ldrh	r3, [r7, #24]
 8012860:	4413      	add	r3, r2
 8012862:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012866:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801286a:	88fb      	ldrh	r3, [r7, #6]
 801286c:	429a      	cmp	r2, r3
 801286e:	f4ff af3d 	bcc.w	80126ec <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012872:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012874:	2b00      	cmp	r3, #0
 8012876:	d02c      	beq.n	80128d2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801287e:	e01e      	b.n	80128be <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012882:	891a      	ldrh	r2, [r3, #8]
 8012884:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012886:	4413      	add	r3, r2
 8012888:	b29a      	uxth	r2, r3
 801288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d110      	bne.n	80128b8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012898:	685b      	ldr	r3, [r3, #4]
 801289a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801289c:	8952      	ldrh	r2, [r2, #10]
 801289e:	4413      	add	r3, r2
 80128a0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80128a2:	68b9      	ldr	r1, [r7, #8]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f004 fb99 	bl	8016fdc <memcpy>
        p->len += oversize_used;
 80128aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ac:	895a      	ldrh	r2, [r3, #10]
 80128ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80128b0:	4413      	add	r3, r2
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80128b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d1dd      	bne.n	8012880 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80128c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128c6:	891a      	ldrh	r2, [r3, #8]
 80128c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80128ca:	4413      	add	r3, r2
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128d0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80128d2:	8a7a      	ldrh	r2, [r7, #18]
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80128da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d018      	beq.n	8012912 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80128e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d106      	bne.n	80128f4 <tcp_write+0x508>
 80128e6:	4b2a      	ldr	r3, [pc, #168]	; (8012990 <tcp_write+0x5a4>)
 80128e8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80128ec:	492d      	ldr	r1, [pc, #180]	; (80129a4 <tcp_write+0x5b8>)
 80128ee:	482a      	ldr	r0, [pc, #168]	; (8012998 <tcp_write+0x5ac>)
 80128f0:	f004 fc84 	bl	80171fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80128f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fb f82c 	bl	800d958 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012902:	891a      	ldrh	r2, [r3, #8]
 8012904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012906:	891b      	ldrh	r3, [r3, #8]
 8012908:	4413      	add	r3, r2
 801290a:	b29a      	uxth	r2, r3
 801290c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801290e:	811a      	strh	r2, [r3, #8]
 8012910:	e037      	b.n	8012982 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012912:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012914:	2b00      	cmp	r3, #0
 8012916:	d034      	beq.n	8012982 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801291a:	2b00      	cmp	r3, #0
 801291c:	d003      	beq.n	8012926 <tcp_write+0x53a>
 801291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <tcp_write+0x548>
 8012926:	4b1a      	ldr	r3, [pc, #104]	; (8012990 <tcp_write+0x5a4>)
 8012928:	f240 22e6 	movw	r2, #742	; 0x2e6
 801292c:	491e      	ldr	r1, [pc, #120]	; (80129a8 <tcp_write+0x5bc>)
 801292e:	481a      	ldr	r0, [pc, #104]	; (8012998 <tcp_write+0x5ac>)
 8012930:	f004 fc64 	bl	80171fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	62bb      	str	r3, [r7, #40]	; 0x28
 801293a:	e009      	b.n	8012950 <tcp_write+0x564>
      p->tot_len += extendlen;
 801293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293e:	891a      	ldrh	r2, [r3, #8]
 8012940:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012942:	4413      	add	r3, r2
 8012944:	b29a      	uxth	r2, r3
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1f1      	bne.n	801293c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295a:	891a      	ldrh	r2, [r3, #8]
 801295c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801295e:	4413      	add	r3, r2
 8012960:	b29a      	uxth	r2, r3
 8012962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012964:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	895a      	ldrh	r2, [r3, #10]
 801296a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801296c:	4413      	add	r3, r2
 801296e:	b29a      	uxth	r2, r3
 8012970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012972:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012976:	891a      	ldrh	r2, [r3, #8]
 8012978:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801297a:	4413      	add	r3, r2
 801297c:	b29a      	uxth	r2, r3
 801297e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012980:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012984:	2b00      	cmp	r3, #0
 8012986:	d111      	bne.n	80129ac <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801298c:	66da      	str	r2, [r3, #108]	; 0x6c
 801298e:	e010      	b.n	80129b2 <tcp_write+0x5c6>
 8012990:	0801a8e4 	.word	0x0801a8e4
 8012994:	0801ab84 	.word	0x0801ab84
 8012998:	0801a938 	.word	0x0801a938
 801299c:	0801abc4 	.word	0x0801abc4
 80129a0:	0801abd4 	.word	0x0801abd4
 80129a4:	0801abe8 	.word	0x0801abe8
 80129a8:	0801ac20 	.word	0x0801ac20
  } else {
    last_unsent->next = queue;
 80129ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129b0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129b6:	88fb      	ldrh	r3, [r7, #6]
 80129b8:	441a      	add	r2, r3
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80129c4:	88fb      	ldrh	r3, [r7, #6]
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80129d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00e      	beq.n	8012a02 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d10a      	bne.n	8012a02 <tcp_write+0x616>
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d106      	bne.n	8012a02 <tcp_write+0x616>
 80129f4:	4b2c      	ldr	r3, [pc, #176]	; (8012aa8 <tcp_write+0x6bc>)
 80129f6:	f240 3212 	movw	r2, #786	; 0x312
 80129fa:	492c      	ldr	r1, [pc, #176]	; (8012aac <tcp_write+0x6c0>)
 80129fc:	482c      	ldr	r0, [pc, #176]	; (8012ab0 <tcp_write+0x6c4>)
 80129fe:	f004 fbfd 	bl	80171fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d016      	beq.n	8012a36 <tcp_write+0x64a>
 8012a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d012      	beq.n	8012a36 <tcp_write+0x64a>
 8012a10:	797b      	ldrb	r3, [r7, #5]
 8012a12:	f003 0302 	and.w	r3, r3, #2
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10d      	bne.n	8012a36 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	899b      	ldrh	r3, [r3, #12]
 8012a20:	b29c      	uxth	r4, r3
 8012a22:	2008      	movs	r0, #8
 8012a24:	f7f9 f93e 	bl	800bca4 <lwip_htons>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	4322      	orrs	r2, r4
 8012a32:	b292      	uxth	r2, r2
 8012a34:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012a36:	2300      	movs	r3, #0
 8012a38:	e031      	b.n	8012a9e <tcp_write+0x6b2>
          goto memerr;
 8012a3a:	bf00      	nop
 8012a3c:	e006      	b.n	8012a4c <tcp_write+0x660>
            goto memerr;
 8012a3e:	bf00      	nop
 8012a40:	e004      	b.n	8012a4c <tcp_write+0x660>
        goto memerr;
 8012a42:	bf00      	nop
 8012a44:	e002      	b.n	8012a4c <tcp_write+0x660>
        goto memerr;
 8012a46:	bf00      	nop
 8012a48:	e000      	b.n	8012a4c <tcp_write+0x660>
      goto memerr;
 8012a4a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	8b5b      	ldrh	r3, [r3, #26]
 8012a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d002      	beq.n	8012a66 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012a60:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012a62:	f7fa feab 	bl	800d7bc <pbuf_free>
  }
  if (queue != NULL) {
 8012a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d002      	beq.n	8012a72 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012a6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012a6e:	f7fc fb6d 	bl	800f14c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d00e      	beq.n	8012a9a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10a      	bne.n	8012a9a <tcp_write+0x6ae>
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d106      	bne.n	8012a9a <tcp_write+0x6ae>
 8012a8c:	4b06      	ldr	r3, [pc, #24]	; (8012aa8 <tcp_write+0x6bc>)
 8012a8e:	f240 3227 	movw	r2, #807	; 0x327
 8012a92:	4906      	ldr	r1, [pc, #24]	; (8012aac <tcp_write+0x6c0>)
 8012a94:	4806      	ldr	r0, [pc, #24]	; (8012ab0 <tcp_write+0x6c4>)
 8012a96:	f004 fbb1 	bl	80171fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	375c      	adds	r7, #92	; 0x5c
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd90      	pop	{r4, r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	0801a8e4 	.word	0x0801a8e4
 8012aac:	0801ac58 	.word	0x0801ac58
 8012ab0:	0801a938 	.word	0x0801a938

08012ab4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012ab4:	b590      	push	{r4, r7, lr}
 8012ab6:	b08b      	sub	sp, #44	; 0x2c
 8012ab8:	af02      	add	r7, sp, #8
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	460b      	mov	r3, r1
 8012abe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	61fb      	str	r3, [r7, #28]
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d106      	bne.n	8012ae0 <tcp_split_unsent_seg+0x2c>
 8012ad2:	4b95      	ldr	r3, [pc, #596]	; (8012d28 <tcp_split_unsent_seg+0x274>)
 8012ad4:	f240 324b 	movw	r2, #843	; 0x34b
 8012ad8:	4994      	ldr	r1, [pc, #592]	; (8012d2c <tcp_split_unsent_seg+0x278>)
 8012ada:	4895      	ldr	r0, [pc, #596]	; (8012d30 <tcp_split_unsent_seg+0x27c>)
 8012adc:	f004 fb8e 	bl	80171fc <iprintf>

  useg = pcb->unsent;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ae4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d102      	bne.n	8012af2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012aec:	f04f 33ff 	mov.w	r3, #4294967295
 8012af0:	e116      	b.n	8012d20 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012af2:	887b      	ldrh	r3, [r7, #2]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d109      	bne.n	8012b0c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012af8:	4b8b      	ldr	r3, [pc, #556]	; (8012d28 <tcp_split_unsent_seg+0x274>)
 8012afa:	f240 3253 	movw	r2, #851	; 0x353
 8012afe:	498d      	ldr	r1, [pc, #564]	; (8012d34 <tcp_split_unsent_seg+0x280>)
 8012b00:	488b      	ldr	r0, [pc, #556]	; (8012d30 <tcp_split_unsent_seg+0x27c>)
 8012b02:	f004 fb7b 	bl	80171fc <iprintf>
    return ERR_VAL;
 8012b06:	f06f 0305 	mvn.w	r3, #5
 8012b0a:	e109      	b.n	8012d20 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	891b      	ldrh	r3, [r3, #8]
 8012b10:	887a      	ldrh	r2, [r7, #2]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d301      	bcc.n	8012b1a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012b16:	2300      	movs	r3, #0
 8012b18:	e102      	b.n	8012d20 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b1e:	887a      	ldrh	r2, [r7, #2]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d906      	bls.n	8012b32 <tcp_split_unsent_seg+0x7e>
 8012b24:	4b80      	ldr	r3, [pc, #512]	; (8012d28 <tcp_split_unsent_seg+0x274>)
 8012b26:	f240 325b 	movw	r2, #859	; 0x35b
 8012b2a:	4983      	ldr	r1, [pc, #524]	; (8012d38 <tcp_split_unsent_seg+0x284>)
 8012b2c:	4880      	ldr	r0, [pc, #512]	; (8012d30 <tcp_split_unsent_seg+0x27c>)
 8012b2e:	f004 fb65 	bl	80171fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	891b      	ldrh	r3, [r3, #8]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d106      	bne.n	8012b48 <tcp_split_unsent_seg+0x94>
 8012b3a:	4b7b      	ldr	r3, [pc, #492]	; (8012d28 <tcp_split_unsent_seg+0x274>)
 8012b3c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012b40:	497e      	ldr	r1, [pc, #504]	; (8012d3c <tcp_split_unsent_seg+0x288>)
 8012b42:	487b      	ldr	r0, [pc, #492]	; (8012d30 <tcp_split_unsent_seg+0x27c>)
 8012b44:	f004 fb5a 	bl	80171fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	7a9b      	ldrb	r3, [r3, #10]
 8012b4c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012b4e:	7bfb      	ldrb	r3, [r7, #15]
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	f003 0304 	and.w	r3, r3, #4
 8012b58:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	891a      	ldrh	r2, [r3, #8]
 8012b5e:	887b      	ldrh	r3, [r7, #2]
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012b64:	7bbb      	ldrb	r3, [r7, #14]
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	89bb      	ldrh	r3, [r7, #12]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b72:	4619      	mov	r1, r3
 8012b74:	2036      	movs	r0, #54	; 0x36
 8012b76:	f7fa fb35 	bl	800d1e4 <pbuf_alloc>
 8012b7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	f000 80b7 	beq.w	8012cf2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	891a      	ldrh	r2, [r3, #8]
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	891b      	ldrh	r3, [r3, #8]
 8012b8e:	1ad3      	subs	r3, r2, r3
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	887b      	ldrh	r3, [r7, #2]
 8012b94:	4413      	add	r3, r2
 8012b96:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	6858      	ldr	r0, [r3, #4]
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	685a      	ldr	r2, [r3, #4]
 8012ba0:	7bbb      	ldrb	r3, [r7, #14]
 8012ba2:	18d1      	adds	r1, r2, r3
 8012ba4:	897b      	ldrh	r3, [r7, #10]
 8012ba6:	89ba      	ldrh	r2, [r7, #12]
 8012ba8:	f7fa fffe 	bl	800dba8 <pbuf_copy_partial>
 8012bac:	4603      	mov	r3, r0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	89bb      	ldrh	r3, [r7, #12]
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	f040 809f 	bne.w	8012cf6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	899b      	ldrh	r3, [r3, #12]
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7f9 f86f 	bl	800bca4 <lwip_htons>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bce:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012bd4:	7efb      	ldrb	r3, [r7, #27]
 8012bd6:	f003 0308 	and.w	r3, r3, #8
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d007      	beq.n	8012bee <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012bde:	7efb      	ldrb	r3, [r7, #27]
 8012be0:	f023 0308 	bic.w	r3, r3, #8
 8012be4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012be6:	7ebb      	ldrb	r3, [r7, #26]
 8012be8:	f043 0308 	orr.w	r3, r3, #8
 8012bec:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012bee:	7efb      	ldrb	r3, [r7, #27]
 8012bf0:	f003 0301 	and.w	r3, r3, #1
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d007      	beq.n	8012c08 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012bf8:	7efb      	ldrb	r3, [r7, #27]
 8012bfa:	f023 0301 	bic.w	r3, r3, #1
 8012bfe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012c00:	7ebb      	ldrb	r3, [r7, #26]
 8012c02:	f043 0301 	orr.w	r3, r3, #1
 8012c06:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7f9 f85d 	bl	800bcce <lwip_htonl>
 8012c14:	4602      	mov	r2, r0
 8012c16:	887b      	ldrh	r3, [r7, #2]
 8012c18:	18d1      	adds	r1, r2, r3
 8012c1a:	7eba      	ldrb	r2, [r7, #26]
 8012c1c:	7bfb      	ldrb	r3, [r7, #15]
 8012c1e:	9300      	str	r3, [sp, #0]
 8012c20:	460b      	mov	r3, r1
 8012c22:	6939      	ldr	r1, [r7, #16]
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f7ff fa4d 	bl	80120c4 <tcp_create_segment>
 8012c2a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d063      	beq.n	8012cfa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fa fe4e 	bl	800d8d8 <pbuf_clen>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	461a      	mov	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c46:	1a9b      	subs	r3, r3, r2
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	6858      	ldr	r0, [r3, #4]
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	685b      	ldr	r3, [r3, #4]
 8012c58:	891a      	ldrh	r2, [r3, #8]
 8012c5a:	89bb      	ldrh	r3, [r7, #12]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	4619      	mov	r1, r3
 8012c62:	f7fa fc25 	bl	800d4b0 <pbuf_realloc>
  useg->len -= remainder;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	891a      	ldrh	r2, [r3, #8]
 8012c6a:	89bb      	ldrh	r3, [r7, #12]
 8012c6c:	1ad3      	subs	r3, r2, r3
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	899b      	ldrh	r3, [r3, #12]
 8012c7a:	b29c      	uxth	r4, r3
 8012c7c:	7efb      	ldrb	r3, [r7, #27]
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7f9 f80f 	bl	800bca4 <lwip_htons>
 8012c86:	4603      	mov	r3, r0
 8012c88:	461a      	mov	r2, r3
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	4322      	orrs	r2, r4
 8012c90:	b292      	uxth	r2, r2
 8012c92:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f7fa fe1d 	bl	800d8d8 <pbuf_clen>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ca8:	4413      	add	r3, r2
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7fa fe0e 	bl	800d8d8 <pbuf_clen>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012cc6:	4413      	add	r3, r2
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	681a      	ldr	r2, [r3, #0]
 8012cd4:	69fb      	ldr	r3, [r7, #28]
 8012cd6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	69fa      	ldr	r2, [r7, #28]
 8012cdc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d103      	bne.n	8012cee <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2200      	movs	r2, #0
 8012cea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	e016      	b.n	8012d20 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012cf2:	bf00      	nop
 8012cf4:	e002      	b.n	8012cfc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012cf6:	bf00      	nop
 8012cf8:	e000      	b.n	8012cfc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012cfa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d006      	beq.n	8012d10 <tcp_split_unsent_seg+0x25c>
 8012d02:	4b09      	ldr	r3, [pc, #36]	; (8012d28 <tcp_split_unsent_seg+0x274>)
 8012d04:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012d08:	490d      	ldr	r1, [pc, #52]	; (8012d40 <tcp_split_unsent_seg+0x28c>)
 8012d0a:	4809      	ldr	r0, [pc, #36]	; (8012d30 <tcp_split_unsent_seg+0x27c>)
 8012d0c:	f004 fa76 	bl	80171fc <iprintf>
  if (p != NULL) {
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d002      	beq.n	8012d1c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012d16:	6938      	ldr	r0, [r7, #16]
 8012d18:	f7fa fd50 	bl	800d7bc <pbuf_free>
  }

  return ERR_MEM;
 8012d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3724      	adds	r7, #36	; 0x24
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd90      	pop	{r4, r7, pc}
 8012d28:	0801a8e4 	.word	0x0801a8e4
 8012d2c:	0801ac78 	.word	0x0801ac78
 8012d30:	0801a938 	.word	0x0801a938
 8012d34:	0801ac9c 	.word	0x0801ac9c
 8012d38:	0801acc0 	.word	0x0801acc0
 8012d3c:	0801acd0 	.word	0x0801acd0
 8012d40:	0801ace0 	.word	0x0801ace0

08012d44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012d44:	b590      	push	{r4, r7, lr}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d106      	bne.n	8012d60 <tcp_send_fin+0x1c>
 8012d52:	4b21      	ldr	r3, [pc, #132]	; (8012dd8 <tcp_send_fin+0x94>)
 8012d54:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012d58:	4920      	ldr	r1, [pc, #128]	; (8012ddc <tcp_send_fin+0x98>)
 8012d5a:	4821      	ldr	r0, [pc, #132]	; (8012de0 <tcp_send_fin+0x9c>)
 8012d5c:	f004 fa4e 	bl	80171fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d02e      	beq.n	8012dc6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d6c:	60fb      	str	r3, [r7, #12]
 8012d6e:	e002      	b.n	8012d76 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d1f8      	bne.n	8012d70 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	899b      	ldrh	r3, [r3, #12]
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7f8 ff8c 	bl	800bca4 <lwip_htons>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	f003 0307 	and.w	r3, r3, #7
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d116      	bne.n	8012dc6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	899b      	ldrh	r3, [r3, #12]
 8012d9e:	b29c      	uxth	r4, r3
 8012da0:	2001      	movs	r0, #1
 8012da2:	f7f8 ff7f 	bl	800bca4 <lwip_htons>
 8012da6:	4603      	mov	r3, r0
 8012da8:	461a      	mov	r2, r3
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	68db      	ldr	r3, [r3, #12]
 8012dae:	4322      	orrs	r2, r4
 8012db0:	b292      	uxth	r2, r2
 8012db2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	8b5b      	ldrh	r3, [r3, #26]
 8012db8:	f043 0320 	orr.w	r3, r3, #32
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	e004      	b.n	8012dd0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012dc6:	2101      	movs	r1, #1
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 f80b 	bl	8012de4 <tcp_enqueue_flags>
 8012dce:	4603      	mov	r3, r0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3714      	adds	r7, #20
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd90      	pop	{r4, r7, pc}
 8012dd8:	0801a8e4 	.word	0x0801a8e4
 8012ddc:	0801acec 	.word	0x0801acec
 8012de0:	0801a938 	.word	0x0801a938

08012de4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b08a      	sub	sp, #40	; 0x28
 8012de8:	af02      	add	r7, sp, #8
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012df0:	2300      	movs	r3, #0
 8012df2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012df8:	78fb      	ldrb	r3, [r7, #3]
 8012dfa:	f003 0303 	and.w	r3, r3, #3
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d106      	bne.n	8012e10 <tcp_enqueue_flags+0x2c>
 8012e02:	4b67      	ldr	r3, [pc, #412]	; (8012fa0 <tcp_enqueue_flags+0x1bc>)
 8012e04:	f240 4211 	movw	r2, #1041	; 0x411
 8012e08:	4966      	ldr	r1, [pc, #408]	; (8012fa4 <tcp_enqueue_flags+0x1c0>)
 8012e0a:	4867      	ldr	r0, [pc, #412]	; (8012fa8 <tcp_enqueue_flags+0x1c4>)
 8012e0c:	f004 f9f6 	bl	80171fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d106      	bne.n	8012e24 <tcp_enqueue_flags+0x40>
 8012e16:	4b62      	ldr	r3, [pc, #392]	; (8012fa0 <tcp_enqueue_flags+0x1bc>)
 8012e18:	f240 4213 	movw	r2, #1043	; 0x413
 8012e1c:	4963      	ldr	r1, [pc, #396]	; (8012fac <tcp_enqueue_flags+0x1c8>)
 8012e1e:	4862      	ldr	r0, [pc, #392]	; (8012fa8 <tcp_enqueue_flags+0x1c4>)
 8012e20:	f004 f9ec 	bl	80171fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012e24:	78fb      	ldrb	r3, [r7, #3]
 8012e26:	f003 0302 	and.w	r3, r3, #2
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d001      	beq.n	8012e32 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012e32:	7ffb      	ldrb	r3, [r7, #31]
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	f003 0304 	and.w	r3, r3, #4
 8012e3c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e46:	4619      	mov	r1, r3
 8012e48:	2036      	movs	r0, #54	; 0x36
 8012e4a:	f7fa f9cb 	bl	800d1e4 <pbuf_alloc>
 8012e4e:	6138      	str	r0, [r7, #16]
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d109      	bne.n	8012e6a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	8b5b      	ldrh	r3, [r3, #26]
 8012e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e5e:	b29a      	uxth	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295
 8012e68:	e095      	b.n	8012f96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012e6a:	693b      	ldr	r3, [r7, #16]
 8012e6c:	895a      	ldrh	r2, [r3, #10]
 8012e6e:	7dfb      	ldrb	r3, [r7, #23]
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d206      	bcs.n	8012e84 <tcp_enqueue_flags+0xa0>
 8012e76:	4b4a      	ldr	r3, [pc, #296]	; (8012fa0 <tcp_enqueue_flags+0x1bc>)
 8012e78:	f240 4239 	movw	r2, #1081	; 0x439
 8012e7c:	494c      	ldr	r1, [pc, #304]	; (8012fb0 <tcp_enqueue_flags+0x1cc>)
 8012e7e:	484a      	ldr	r0, [pc, #296]	; (8012fa8 <tcp_enqueue_flags+0x1c4>)
 8012e80:	f004 f9bc 	bl	80171fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012e88:	78fa      	ldrb	r2, [r7, #3]
 8012e8a:	7ffb      	ldrb	r3, [r7, #31]
 8012e8c:	9300      	str	r3, [sp, #0]
 8012e8e:	460b      	mov	r3, r1
 8012e90:	6939      	ldr	r1, [r7, #16]
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7ff f916 	bl	80120c4 <tcp_create_segment>
 8012e98:	60f8      	str	r0, [r7, #12]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d109      	bne.n	8012eb4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	8b5b      	ldrh	r3, [r3, #26]
 8012ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012eae:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb2:	e070      	b.n	8012f96 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	f003 0303 	and.w	r3, r3, #3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d006      	beq.n	8012ece <tcp_enqueue_flags+0xea>
 8012ec0:	4b37      	ldr	r3, [pc, #220]	; (8012fa0 <tcp_enqueue_flags+0x1bc>)
 8012ec2:	f240 4242 	movw	r2, #1090	; 0x442
 8012ec6:	493b      	ldr	r1, [pc, #236]	; (8012fb4 <tcp_enqueue_flags+0x1d0>)
 8012ec8:	4837      	ldr	r0, [pc, #220]	; (8012fa8 <tcp_enqueue_flags+0x1c4>)
 8012eca:	f004 f997 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	891b      	ldrh	r3, [r3, #8]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d006      	beq.n	8012ee4 <tcp_enqueue_flags+0x100>
 8012ed6:	4b32      	ldr	r3, [pc, #200]	; (8012fa0 <tcp_enqueue_flags+0x1bc>)
 8012ed8:	f240 4243 	movw	r2, #1091	; 0x443
 8012edc:	4936      	ldr	r1, [pc, #216]	; (8012fb8 <tcp_enqueue_flags+0x1d4>)
 8012ede:	4832      	ldr	r0, [pc, #200]	; (8012fa8 <tcp_enqueue_flags+0x1c4>)
 8012ee0:	f004 f98c 	bl	80171fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d103      	bne.n	8012ef4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	68fa      	ldr	r2, [r7, #12]
 8012ef0:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ef2:	e00d      	b.n	8012f10 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef8:	61bb      	str	r3, [r7, #24]
 8012efa:	e002      	b.n	8012f02 <tcp_enqueue_flags+0x11e>
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	61bb      	str	r3, [r7, #24]
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d1f8      	bne.n	8012efc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012f18:	78fb      	ldrb	r3, [r7, #3]
 8012f1a:	f003 0302 	and.w	r3, r3, #2
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d104      	bne.n	8012f2c <tcp_enqueue_flags+0x148>
 8012f22:	78fb      	ldrb	r3, [r7, #3]
 8012f24:	f003 0301 	and.w	r3, r3, #1
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d004      	beq.n	8012f36 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f30:	1c5a      	adds	r2, r3, #1
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012f36:	78fb      	ldrb	r3, [r7, #3]
 8012f38:	f003 0301 	and.w	r3, r3, #1
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d006      	beq.n	8012f4e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	8b5b      	ldrh	r3, [r3, #26]
 8012f44:	f043 0320 	orr.w	r3, r3, #32
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fa fcc0 	bl	800d8d8 <pbuf_clen>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f62:	4413      	add	r3, r2
 8012f64:	b29a      	uxth	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d00e      	beq.n	8012f94 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d10a      	bne.n	8012f94 <tcp_enqueue_flags+0x1b0>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <tcp_enqueue_flags+0x1b0>
 8012f86:	4b06      	ldr	r3, [pc, #24]	; (8012fa0 <tcp_enqueue_flags+0x1bc>)
 8012f88:	f240 4265 	movw	r2, #1125	; 0x465
 8012f8c:	490b      	ldr	r1, [pc, #44]	; (8012fbc <tcp_enqueue_flags+0x1d8>)
 8012f8e:	4806      	ldr	r0, [pc, #24]	; (8012fa8 <tcp_enqueue_flags+0x1c4>)
 8012f90:	f004 f934 	bl	80171fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012f94:	2300      	movs	r3, #0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3720      	adds	r7, #32
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	0801a8e4 	.word	0x0801a8e4
 8012fa4:	0801ad08 	.word	0x0801ad08
 8012fa8:	0801a938 	.word	0x0801a938
 8012fac:	0801ad60 	.word	0x0801ad60
 8012fb0:	0801ad80 	.word	0x0801ad80
 8012fb4:	0801adbc 	.word	0x0801adbc
 8012fb8:	0801add4 	.word	0x0801add4
 8012fbc:	0801ae00 	.word	0x0801ae00

08012fc0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012fc0:	b5b0      	push	{r4, r5, r7, lr}
 8012fc2:	b08a      	sub	sp, #40	; 0x28
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d106      	bne.n	8012fdc <tcp_output+0x1c>
 8012fce:	4b8a      	ldr	r3, [pc, #552]	; (80131f8 <tcp_output+0x238>)
 8012fd0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012fd4:	4989      	ldr	r1, [pc, #548]	; (80131fc <tcp_output+0x23c>)
 8012fd6:	488a      	ldr	r0, [pc, #552]	; (8013200 <tcp_output+0x240>)
 8012fd8:	f004 f910 	bl	80171fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	7d1b      	ldrb	r3, [r3, #20]
 8012fe0:	2b01      	cmp	r3, #1
 8012fe2:	d106      	bne.n	8012ff2 <tcp_output+0x32>
 8012fe4:	4b84      	ldr	r3, [pc, #528]	; (80131f8 <tcp_output+0x238>)
 8012fe6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012fea:	4986      	ldr	r1, [pc, #536]	; (8013204 <tcp_output+0x244>)
 8012fec:	4884      	ldr	r0, [pc, #528]	; (8013200 <tcp_output+0x240>)
 8012fee:	f004 f905 	bl	80171fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012ff2:	4b85      	ldr	r3, [pc, #532]	; (8013208 <tcp_output+0x248>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d101      	bne.n	8013000 <tcp_output+0x40>
    return ERR_OK;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	e1ce      	b.n	801339e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801300c:	4293      	cmp	r3, r2
 801300e:	bf28      	it	cs
 8013010:	4613      	movcs	r3, r2
 8013012:	b29b      	uxth	r3, r3
 8013014:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801301a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	2b00      	cmp	r3, #0
 8013020:	d10b      	bne.n	801303a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	8b5b      	ldrh	r3, [r3, #26]
 8013026:	f003 0302 	and.w	r3, r3, #2
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 81aa 	beq.w	8013384 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f000 fdcb 	bl	8013bcc <tcp_send_empty_ack>
 8013036:	4603      	mov	r3, r0
 8013038:	e1b1      	b.n	801339e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801303a:	6879      	ldr	r1, [r7, #4]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	3304      	adds	r3, #4
 8013040:	461a      	mov	r2, r3
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7ff f822 	bl	801208c <tcp_route>
 8013048:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d102      	bne.n	8013056 <tcp_output+0x96>
    return ERR_RTE;
 8013050:	f06f 0303 	mvn.w	r3, #3
 8013054:	e1a3      	b.n	801339e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d003      	beq.n	8013064 <tcp_output+0xa4>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d111      	bne.n	8013088 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d002      	beq.n	8013070 <tcp_output+0xb0>
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	3304      	adds	r3, #4
 801306e:	e000      	b.n	8013072 <tcp_output+0xb2>
 8013070:	2300      	movs	r3, #0
 8013072:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d102      	bne.n	8013080 <tcp_output+0xc0>
      return ERR_RTE;
 801307a:	f06f 0303 	mvn.w	r3, #3
 801307e:	e18e      	b.n	801339e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308a:	68db      	ldr	r3, [r3, #12]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	4618      	mov	r0, r3
 8013090:	f7f8 fe1d 	bl	800bcce <lwip_htonl>
 8013094:	4602      	mov	r2, r0
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801309a:	1ad3      	subs	r3, r2, r3
 801309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801309e:	8912      	ldrh	r2, [r2, #8]
 80130a0:	4413      	add	r3, r2
 80130a2:	69ba      	ldr	r2, [r7, #24]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d227      	bcs.n	80130f8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80130ae:	461a      	mov	r2, r3
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d114      	bne.n	80130e0 <tcp_output+0x120>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d110      	bne.n	80130e0 <tcp_output+0x120>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d10b      	bne.n	80130e0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2201      	movs	r2, #1
 80130d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2200      	movs	r2, #0
 80130dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	8b5b      	ldrh	r3, [r3, #26]
 80130e4:	f003 0302 	and.w	r3, r3, #2
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f000 814d 	beq.w	8013388 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f000 fd6c 	bl	8013bcc <tcp_send_empty_ack>
 80130f4:	4603      	mov	r3, r0
 80130f6:	e152      	b.n	801339e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2200      	movs	r2, #0
 80130fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013104:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013106:	6a3b      	ldr	r3, [r7, #32]
 8013108:	2b00      	cmp	r3, #0
 801310a:	f000 811c 	beq.w	8013346 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801310e:	e002      	b.n	8013116 <tcp_output+0x156>
 8013110:	6a3b      	ldr	r3, [r7, #32]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	623b      	str	r3, [r7, #32]
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d1f8      	bne.n	8013110 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801311e:	e112      	b.n	8013346 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	899b      	ldrh	r3, [r3, #12]
 8013126:	b29b      	uxth	r3, r3
 8013128:	4618      	mov	r0, r3
 801312a:	f7f8 fdbb 	bl	800bca4 <lwip_htons>
 801312e:	4603      	mov	r3, r0
 8013130:	b2db      	uxtb	r3, r3
 8013132:	f003 0304 	and.w	r3, r3, #4
 8013136:	2b00      	cmp	r3, #0
 8013138:	d006      	beq.n	8013148 <tcp_output+0x188>
 801313a:	4b2f      	ldr	r3, [pc, #188]	; (80131f8 <tcp_output+0x238>)
 801313c:	f240 5236 	movw	r2, #1334	; 0x536
 8013140:	4932      	ldr	r1, [pc, #200]	; (801320c <tcp_output+0x24c>)
 8013142:	482f      	ldr	r0, [pc, #188]	; (8013200 <tcp_output+0x240>)
 8013144:	f004 f85a 	bl	80171fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801314c:	2b00      	cmp	r3, #0
 801314e:	d01f      	beq.n	8013190 <tcp_output+0x1d0>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	8b5b      	ldrh	r3, [r3, #26]
 8013154:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013158:	2b00      	cmp	r3, #0
 801315a:	d119      	bne.n	8013190 <tcp_output+0x1d0>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00b      	beq.n	801317c <tcp_output+0x1bc>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d110      	bne.n	8013190 <tcp_output+0x1d0>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013172:	891a      	ldrh	r2, [r3, #8]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013178:	429a      	cmp	r2, r3
 801317a:	d209      	bcs.n	8013190 <tcp_output+0x1d0>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013182:	2b00      	cmp	r3, #0
 8013184:	d004      	beq.n	8013190 <tcp_output+0x1d0>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801318c:	2b08      	cmp	r3, #8
 801318e:	d901      	bls.n	8013194 <tcp_output+0x1d4>
 8013190:	2301      	movs	r3, #1
 8013192:	e000      	b.n	8013196 <tcp_output+0x1d6>
 8013194:	2300      	movs	r3, #0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d106      	bne.n	80131a8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8b5b      	ldrh	r3, [r3, #26]
 801319e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 80e4 	beq.w	8013370 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7d1b      	ldrb	r3, [r3, #20]
 80131ac:	2b02      	cmp	r3, #2
 80131ae:	d00d      	beq.n	80131cc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	899b      	ldrh	r3, [r3, #12]
 80131b6:	b29c      	uxth	r4, r3
 80131b8:	2010      	movs	r0, #16
 80131ba:	f7f8 fd73 	bl	800bca4 <lwip_htons>
 80131be:	4603      	mov	r3, r0
 80131c0:	461a      	mov	r2, r3
 80131c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	4322      	orrs	r2, r4
 80131c8:	b292      	uxth	r2, r2
 80131ca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80131cc:	697a      	ldr	r2, [r7, #20]
 80131ce:	6879      	ldr	r1, [r7, #4]
 80131d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131d2:	f000 f909 	bl	80133e8 <tcp_output_segment>
 80131d6:	4603      	mov	r3, r0
 80131d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80131da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d016      	beq.n	8013210 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	8b5b      	ldrh	r3, [r3, #26]
 80131e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131ea:	b29a      	uxth	r2, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	835a      	strh	r2, [r3, #26]
      return err;
 80131f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131f4:	e0d3      	b.n	801339e <tcp_output+0x3de>
 80131f6:	bf00      	nop
 80131f8:	0801a8e4 	.word	0x0801a8e4
 80131fc:	0801ae28 	.word	0x0801ae28
 8013200:	0801a938 	.word	0x0801a938
 8013204:	0801ae40 	.word	0x0801ae40
 8013208:	2001a700 	.word	0x2001a700
 801320c:	0801ae68 	.word	0x0801ae68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	7d1b      	ldrb	r3, [r3, #20]
 801321c:	2b02      	cmp	r3, #2
 801321e:	d006      	beq.n	801322e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	8b5b      	ldrh	r3, [r3, #26]
 8013224:	f023 0303 	bic.w	r3, r3, #3
 8013228:	b29a      	uxth	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	68db      	ldr	r3, [r3, #12]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	4618      	mov	r0, r3
 8013236:	f7f8 fd4a 	bl	800bcce <lwip_htonl>
 801323a:	4604      	mov	r4, r0
 801323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323e:	891b      	ldrh	r3, [r3, #8]
 8013240:	461d      	mov	r5, r3
 8013242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013244:	68db      	ldr	r3, [r3, #12]
 8013246:	899b      	ldrh	r3, [r3, #12]
 8013248:	b29b      	uxth	r3, r3
 801324a:	4618      	mov	r0, r3
 801324c:	f7f8 fd2a 	bl	800bca4 <lwip_htons>
 8013250:	4603      	mov	r3, r0
 8013252:	b2db      	uxtb	r3, r3
 8013254:	f003 0303 	and.w	r3, r3, #3
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <tcp_output+0x2a0>
 801325c:	2301      	movs	r3, #1
 801325e:	e000      	b.n	8013262 <tcp_output+0x2a2>
 8013260:	2300      	movs	r3, #0
 8013262:	442b      	add	r3, r5
 8013264:	4423      	add	r3, r4
 8013266:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	2b00      	cmp	r3, #0
 8013272:	da02      	bge.n	801327a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	68ba      	ldr	r2, [r7, #8]
 8013278:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327c:	891b      	ldrh	r3, [r3, #8]
 801327e:	461c      	mov	r4, r3
 8013280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013282:	68db      	ldr	r3, [r3, #12]
 8013284:	899b      	ldrh	r3, [r3, #12]
 8013286:	b29b      	uxth	r3, r3
 8013288:	4618      	mov	r0, r3
 801328a:	f7f8 fd0b 	bl	800bca4 <lwip_htons>
 801328e:	4603      	mov	r3, r0
 8013290:	b2db      	uxtb	r3, r3
 8013292:	f003 0303 	and.w	r3, r3, #3
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <tcp_output+0x2de>
 801329a:	2301      	movs	r3, #1
 801329c:	e000      	b.n	80132a0 <tcp_output+0x2e0>
 801329e:	2300      	movs	r3, #0
 80132a0:	4423      	add	r3, r4
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d049      	beq.n	801333a <tcp_output+0x37a>
      seg->next = NULL;
 80132a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d105      	bne.n	80132c0 <tcp_output+0x300>
        pcb->unacked = seg;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132b8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80132ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132bc:	623b      	str	r3, [r7, #32]
 80132be:	e03f      	b.n	8013340 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80132c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	685b      	ldr	r3, [r3, #4]
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7f8 fd01 	bl	800bcce <lwip_htonl>
 80132cc:	4604      	mov	r4, r0
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7f8 fcfa 	bl	800bcce <lwip_htonl>
 80132da:	4603      	mov	r3, r0
 80132dc:	1ae3      	subs	r3, r4, r3
 80132de:	2b00      	cmp	r3, #0
 80132e0:	da24      	bge.n	801332c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3370      	adds	r3, #112	; 0x70
 80132e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80132e8:	e002      	b.n	80132f0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d011      	beq.n	801331c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80132f8:	69fb      	ldr	r3, [r7, #28]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	4618      	mov	r0, r3
 8013302:	f7f8 fce4 	bl	800bcce <lwip_htonl>
 8013306:	4604      	mov	r4, r0
 8013308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	4618      	mov	r0, r3
 8013310:	f7f8 fcdd 	bl	800bcce <lwip_htonl>
 8013314:	4603      	mov	r3, r0
 8013316:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013318:	2b00      	cmp	r3, #0
 801331a:	dbe6      	blt.n	80132ea <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	681a      	ldr	r2, [r3, #0]
 8013320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013322:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013328:	601a      	str	r2, [r3, #0]
 801332a:	e009      	b.n	8013340 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801332c:	6a3b      	ldr	r3, [r7, #32]
 801332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013330:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013332:	6a3b      	ldr	r3, [r7, #32]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	623b      	str	r3, [r7, #32]
 8013338:	e002      	b.n	8013340 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801333a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801333c:	f7fb ff1b 	bl	800f176 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013344:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013348:	2b00      	cmp	r3, #0
 801334a:	d012      	beq.n	8013372 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334e:	68db      	ldr	r3, [r3, #12]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	4618      	mov	r0, r3
 8013354:	f7f8 fcbb 	bl	800bcce <lwip_htonl>
 8013358:	4602      	mov	r2, r0
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801335e:	1ad3      	subs	r3, r2, r3
 8013360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013362:	8912      	ldrh	r2, [r2, #8]
 8013364:	4413      	add	r3, r2
  while (seg != NULL &&
 8013366:	69ba      	ldr	r2, [r7, #24]
 8013368:	429a      	cmp	r2, r3
 801336a:	f4bf aed9 	bcs.w	8013120 <tcp_output+0x160>
 801336e:	e000      	b.n	8013372 <tcp_output+0x3b2>
      break;
 8013370:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013376:	2b00      	cmp	r3, #0
 8013378:	d108      	bne.n	801338c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	2200      	movs	r2, #0
 801337e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013382:	e004      	b.n	801338e <tcp_output+0x3ce>
    goto output_done;
 8013384:	bf00      	nop
 8013386:	e002      	b.n	801338e <tcp_output+0x3ce>
    goto output_done;
 8013388:	bf00      	nop
 801338a:	e000      	b.n	801338e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801338c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	8b5b      	ldrh	r3, [r3, #26]
 8013392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013396:	b29a      	uxth	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801339c:	2300      	movs	r3, #0
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3728      	adds	r7, #40	; 0x28
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bdb0      	pop	{r4, r5, r7, pc}
 80133a6:	bf00      	nop

080133a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d106      	bne.n	80133c4 <tcp_output_segment_busy+0x1c>
 80133b6:	4b09      	ldr	r3, [pc, #36]	; (80133dc <tcp_output_segment_busy+0x34>)
 80133b8:	f240 529a 	movw	r2, #1434	; 0x59a
 80133bc:	4908      	ldr	r1, [pc, #32]	; (80133e0 <tcp_output_segment_busy+0x38>)
 80133be:	4809      	ldr	r0, [pc, #36]	; (80133e4 <tcp_output_segment_busy+0x3c>)
 80133c0:	f003 ff1c 	bl	80171fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	685b      	ldr	r3, [r3, #4]
 80133c8:	7b9b      	ldrb	r3, [r3, #14]
 80133ca:	2b01      	cmp	r3, #1
 80133cc:	d001      	beq.n	80133d2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80133ce:	2301      	movs	r3, #1
 80133d0:	e000      	b.n	80133d4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3708      	adds	r7, #8
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	0801a8e4 	.word	0x0801a8e4
 80133e0:	0801ae80 	.word	0x0801ae80
 80133e4:	0801a938 	.word	0x0801a938

080133e8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80133e8:	b5b0      	push	{r4, r5, r7, lr}
 80133ea:	b08c      	sub	sp, #48	; 0x30
 80133ec:	af04      	add	r7, sp, #16
 80133ee:	60f8      	str	r0, [r7, #12]
 80133f0:	60b9      	str	r1, [r7, #8]
 80133f2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d106      	bne.n	8013408 <tcp_output_segment+0x20>
 80133fa:	4b63      	ldr	r3, [pc, #396]	; (8013588 <tcp_output_segment+0x1a0>)
 80133fc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013400:	4962      	ldr	r1, [pc, #392]	; (801358c <tcp_output_segment+0x1a4>)
 8013402:	4863      	ldr	r0, [pc, #396]	; (8013590 <tcp_output_segment+0x1a8>)
 8013404:	f003 fefa 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d106      	bne.n	801341c <tcp_output_segment+0x34>
 801340e:	4b5e      	ldr	r3, [pc, #376]	; (8013588 <tcp_output_segment+0x1a0>)
 8013410:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013414:	495f      	ldr	r1, [pc, #380]	; (8013594 <tcp_output_segment+0x1ac>)
 8013416:	485e      	ldr	r0, [pc, #376]	; (8013590 <tcp_output_segment+0x1a8>)
 8013418:	f003 fef0 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d106      	bne.n	8013430 <tcp_output_segment+0x48>
 8013422:	4b59      	ldr	r3, [pc, #356]	; (8013588 <tcp_output_segment+0x1a0>)
 8013424:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013428:	495b      	ldr	r1, [pc, #364]	; (8013598 <tcp_output_segment+0x1b0>)
 801342a:	4859      	ldr	r0, [pc, #356]	; (8013590 <tcp_output_segment+0x1a8>)
 801342c:	f003 fee6 	bl	80171fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013430:	68f8      	ldr	r0, [r7, #12]
 8013432:	f7ff ffb9 	bl	80133a8 <tcp_output_segment_busy>
 8013436:	4603      	mov	r3, r0
 8013438:	2b00      	cmp	r3, #0
 801343a:	d001      	beq.n	8013440 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801343c:	2300      	movs	r3, #0
 801343e:	e09f      	b.n	8013580 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	68dc      	ldr	r4, [r3, #12]
 8013448:	4610      	mov	r0, r2
 801344a:	f7f8 fc40 	bl	800bcce <lwip_htonl>
 801344e:	4603      	mov	r3, r0
 8013450:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	68dc      	ldr	r4, [r3, #12]
 801345a:	4610      	mov	r0, r2
 801345c:	f7f8 fc22 	bl	800bca4 <lwip_htons>
 8013460:	4603      	mov	r3, r0
 8013462:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801346c:	441a      	add	r2, r3
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	68db      	ldr	r3, [r3, #12]
 8013476:	3314      	adds	r3, #20
 8013478:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	7a9b      	ldrb	r3, [r3, #10]
 801347e:	f003 0301 	and.w	r3, r3, #1
 8013482:	2b00      	cmp	r3, #0
 8013484:	d015      	beq.n	80134b2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	3304      	adds	r3, #4
 801348a:	461a      	mov	r2, r3
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8013492:	f7fc fa31 	bl	800f8f8 <tcp_eff_send_mss_netif>
 8013496:	4603      	mov	r3, r0
 8013498:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801349a:	8b7b      	ldrh	r3, [r7, #26]
 801349c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7f8 fc14 	bl	800bcce <lwip_htonl>
 80134a6:	4602      	mov	r2, r0
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	3304      	adds	r3, #4
 80134b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	da02      	bge.n	80134c2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	2200      	movs	r2, #0
 80134c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d10c      	bne.n	80134e4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80134ca:	4b34      	ldr	r3, [pc, #208]	; (801359c <tcp_output_segment+0x1b4>)
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	68db      	ldr	r3, [r3, #12]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	4618      	mov	r0, r3
 80134da:	f7f8 fbf8 	bl	800bcce <lwip_htonl>
 80134de:	4602      	mov	r2, r0
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	68da      	ldr	r2, [r3, #12]
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	685b      	ldr	r3, [r3, #4]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	1ad3      	subs	r3, r2, r3
 80134f0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	8959      	ldrh	r1, [r3, #10]
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	685b      	ldr	r3, [r3, #4]
 80134fc:	8b3a      	ldrh	r2, [r7, #24]
 80134fe:	1a8a      	subs	r2, r1, r2
 8013500:	b292      	uxth	r2, r2
 8013502:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	8919      	ldrh	r1, [r3, #8]
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	8b3a      	ldrh	r2, [r7, #24]
 8013510:	1a8a      	subs	r2, r1, r2
 8013512:	b292      	uxth	r2, r2
 8013514:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	685b      	ldr	r3, [r3, #4]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	68d2      	ldr	r2, [r2, #12]
 801351e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	2200      	movs	r2, #0
 8013526:	741a      	strb	r2, [r3, #16]
 8013528:	2200      	movs	r2, #0
 801352a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	f103 0214 	add.w	r2, r3, #20
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	7a9b      	ldrb	r3, [r3, #10]
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	f003 0304 	and.w	r3, r3, #4
 801353e:	4413      	add	r3, r2
 8013540:	69fa      	ldr	r2, [r7, #28]
 8013542:	429a      	cmp	r2, r3
 8013544:	d006      	beq.n	8013554 <tcp_output_segment+0x16c>
 8013546:	4b10      	ldr	r3, [pc, #64]	; (8013588 <tcp_output_segment+0x1a0>)
 8013548:	f240 621c 	movw	r2, #1564	; 0x61c
 801354c:	4914      	ldr	r1, [pc, #80]	; (80135a0 <tcp_output_segment+0x1b8>)
 801354e:	4810      	ldr	r0, [pc, #64]	; (8013590 <tcp_output_segment+0x1a8>)
 8013550:	f003 fe54 	bl	80171fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6858      	ldr	r0, [r3, #4]
 8013558:	68b9      	ldr	r1, [r7, #8]
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	1d1c      	adds	r4, r3, #4
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	7add      	ldrb	r5, [r3, #11]
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	7a9b      	ldrb	r3, [r3, #10]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	9202      	str	r2, [sp, #8]
 801356a:	2206      	movs	r2, #6
 801356c:	9201      	str	r2, [sp, #4]
 801356e:	9300      	str	r3, [sp, #0]
 8013570:	462b      	mov	r3, r5
 8013572:	4622      	mov	r2, r4
 8013574:	f002 faa2 	bl	8015abc <ip4_output_if>
 8013578:	4603      	mov	r3, r0
 801357a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801357c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3720      	adds	r7, #32
 8013584:	46bd      	mov	sp, r7
 8013586:	bdb0      	pop	{r4, r5, r7, pc}
 8013588:	0801a8e4 	.word	0x0801a8e4
 801358c:	0801aea8 	.word	0x0801aea8
 8013590:	0801a938 	.word	0x0801a938
 8013594:	0801aec8 	.word	0x0801aec8
 8013598:	0801aee8 	.word	0x0801aee8
 801359c:	2001a6b4 	.word	0x2001a6b4
 80135a0:	0801af0c 	.word	0x0801af0c

080135a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80135a4:	b5b0      	push	{r4, r5, r7, lr}
 80135a6:	b084      	sub	sp, #16
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d106      	bne.n	80135c0 <tcp_rexmit_rto_prepare+0x1c>
 80135b2:	4b31      	ldr	r3, [pc, #196]	; (8013678 <tcp_rexmit_rto_prepare+0xd4>)
 80135b4:	f240 6263 	movw	r2, #1635	; 0x663
 80135b8:	4930      	ldr	r1, [pc, #192]	; (801367c <tcp_rexmit_rto_prepare+0xd8>)
 80135ba:	4831      	ldr	r0, [pc, #196]	; (8013680 <tcp_rexmit_rto_prepare+0xdc>)
 80135bc:	f003 fe1e 	bl	80171fc <iprintf>

  if (pcb->unacked == NULL) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d102      	bne.n	80135ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80135c8:	f06f 0305 	mvn.w	r3, #5
 80135cc:	e050      	b.n	8013670 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135d2:	60fb      	str	r3, [r7, #12]
 80135d4:	e00b      	b.n	80135ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80135d6:	68f8      	ldr	r0, [r7, #12]
 80135d8:	f7ff fee6 	bl	80133a8 <tcp_output_segment_busy>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d002      	beq.n	80135e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80135e2:	f06f 0305 	mvn.w	r3, #5
 80135e6:	e043      	b.n	8013670 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	60fb      	str	r3, [r7, #12]
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d1ef      	bne.n	80135d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f7ff fed6 	bl	80133a8 <tcp_output_segment_busy>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d002      	beq.n	8013608 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013602:	f06f 0305 	mvn.w	r3, #5
 8013606:	e033      	b.n	8013670 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	8b5b      	ldrh	r3, [r3, #26]
 8013622:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013626:	b29a      	uxth	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	4618      	mov	r0, r3
 8013634:	f7f8 fb4b 	bl	800bcce <lwip_htonl>
 8013638:	4604      	mov	r4, r0
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	891b      	ldrh	r3, [r3, #8]
 801363e:	461d      	mov	r5, r3
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	899b      	ldrh	r3, [r3, #12]
 8013646:	b29b      	uxth	r3, r3
 8013648:	4618      	mov	r0, r3
 801364a:	f7f8 fb2b 	bl	800bca4 <lwip_htons>
 801364e:	4603      	mov	r3, r0
 8013650:	b2db      	uxtb	r3, r3
 8013652:	f003 0303 	and.w	r3, r3, #3
 8013656:	2b00      	cmp	r3, #0
 8013658:	d001      	beq.n	801365e <tcp_rexmit_rto_prepare+0xba>
 801365a:	2301      	movs	r3, #1
 801365c:	e000      	b.n	8013660 <tcp_rexmit_rto_prepare+0xbc>
 801365e:	2300      	movs	r3, #0
 8013660:	442b      	add	r3, r5
 8013662:	18e2      	adds	r2, r4, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801366e:	2300      	movs	r3, #0
}
 8013670:	4618      	mov	r0, r3
 8013672:	3710      	adds	r7, #16
 8013674:	46bd      	mov	sp, r7
 8013676:	bdb0      	pop	{r4, r5, r7, pc}
 8013678:	0801a8e4 	.word	0x0801a8e4
 801367c:	0801af20 	.word	0x0801af20
 8013680:	0801a938 	.word	0x0801a938

08013684 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d106      	bne.n	80136a0 <tcp_rexmit_rto_commit+0x1c>
 8013692:	4b0d      	ldr	r3, [pc, #52]	; (80136c8 <tcp_rexmit_rto_commit+0x44>)
 8013694:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013698:	490c      	ldr	r1, [pc, #48]	; (80136cc <tcp_rexmit_rto_commit+0x48>)
 801369a:	480d      	ldr	r0, [pc, #52]	; (80136d0 <tcp_rexmit_rto_commit+0x4c>)
 801369c:	f003 fdae 	bl	80171fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136a6:	2bff      	cmp	r3, #255	; 0xff
 80136a8:	d007      	beq.n	80136ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80136b0:	3301      	adds	r3, #1
 80136b2:	b2da      	uxtb	r2, r3
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f7ff fc80 	bl	8012fc0 <tcp_output>
}
 80136c0:	bf00      	nop
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	0801a8e4 	.word	0x0801a8e4
 80136cc:	0801af44 	.word	0x0801af44
 80136d0:	0801a938 	.word	0x0801a938

080136d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d106      	bne.n	80136f0 <tcp_rexmit_rto+0x1c>
 80136e2:	4b0a      	ldr	r3, [pc, #40]	; (801370c <tcp_rexmit_rto+0x38>)
 80136e4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80136e8:	4909      	ldr	r1, [pc, #36]	; (8013710 <tcp_rexmit_rto+0x3c>)
 80136ea:	480a      	ldr	r0, [pc, #40]	; (8013714 <tcp_rexmit_rto+0x40>)
 80136ec:	f003 fd86 	bl	80171fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7ff ff57 	bl	80135a4 <tcp_rexmit_rto_prepare>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d102      	bne.n	8013702 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f7ff ffc1 	bl	8013684 <tcp_rexmit_rto_commit>
  }
}
 8013702:	bf00      	nop
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	0801a8e4 	.word	0x0801a8e4
 8013710:	0801af68 	.word	0x0801af68
 8013714:	0801a938 	.word	0x0801a938

08013718 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013718:	b590      	push	{r4, r7, lr}
 801371a:	b085      	sub	sp, #20
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d106      	bne.n	8013734 <tcp_rexmit+0x1c>
 8013726:	4b2f      	ldr	r3, [pc, #188]	; (80137e4 <tcp_rexmit+0xcc>)
 8013728:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801372c:	492e      	ldr	r1, [pc, #184]	; (80137e8 <tcp_rexmit+0xd0>)
 801372e:	482f      	ldr	r0, [pc, #188]	; (80137ec <tcp_rexmit+0xd4>)
 8013730:	f003 fd64 	bl	80171fc <iprintf>

  if (pcb->unacked == NULL) {
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013738:	2b00      	cmp	r3, #0
 801373a:	d102      	bne.n	8013742 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801373c:	f06f 0305 	mvn.w	r3, #5
 8013740:	e04c      	b.n	80137dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013746:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013748:	68b8      	ldr	r0, [r7, #8]
 801374a:	f7ff fe2d 	bl	80133a8 <tcp_output_segment_busy>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d002      	beq.n	801375a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013754:	f06f 0305 	mvn.w	r3, #5
 8013758:	e040      	b.n	80137dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	336c      	adds	r3, #108	; 0x6c
 8013766:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013768:	e002      	b.n	8013770 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d011      	beq.n	801379c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	68db      	ldr	r3, [r3, #12]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	f7f8 faa4 	bl	800bcce <lwip_htonl>
 8013786:	4604      	mov	r4, r0
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	4618      	mov	r0, r3
 8013790:	f7f8 fa9d 	bl	800bcce <lwip_htonl>
 8013794:	4603      	mov	r3, r0
 8013796:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013798:	2b00      	cmp	r3, #0
 801379a:	dbe6      	blt.n	801376a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	68ba      	ldr	r2, [r7, #8]
 80137a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d103      	bne.n	80137ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2200      	movs	r2, #0
 80137b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80137c0:	2bff      	cmp	r3, #255	; 0xff
 80137c2:	d007      	beq.n	80137d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80137ca:	3301      	adds	r3, #1
 80137cc:	b2da      	uxtb	r2, r3
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2200      	movs	r2, #0
 80137d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3714      	adds	r7, #20
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd90      	pop	{r4, r7, pc}
 80137e4:	0801a8e4 	.word	0x0801a8e4
 80137e8:	0801af84 	.word	0x0801af84
 80137ec:	0801a938 	.word	0x0801a938

080137f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d106      	bne.n	801380c <tcp_rexmit_fast+0x1c>
 80137fe:	4b2a      	ldr	r3, [pc, #168]	; (80138a8 <tcp_rexmit_fast+0xb8>)
 8013800:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013804:	4929      	ldr	r1, [pc, #164]	; (80138ac <tcp_rexmit_fast+0xbc>)
 8013806:	482a      	ldr	r0, [pc, #168]	; (80138b0 <tcp_rexmit_fast+0xc0>)
 8013808:	f003 fcf8 	bl	80171fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013810:	2b00      	cmp	r3, #0
 8013812:	d044      	beq.n	801389e <tcp_rexmit_fast+0xae>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	8b5b      	ldrh	r3, [r3, #26]
 8013818:	f003 0304 	and.w	r3, r3, #4
 801381c:	2b00      	cmp	r3, #0
 801381e:	d13e      	bne.n	801389e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7ff ff79 	bl	8013718 <tcp_rexmit>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d138      	bne.n	801389e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013838:	4293      	cmp	r3, r2
 801383a:	bf28      	it	cs
 801383c:	4613      	movcs	r3, r2
 801383e:	b29b      	uxth	r3, r3
 8013840:	0fda      	lsrs	r2, r3, #31
 8013842:	4413      	add	r3, r2
 8013844:	105b      	asrs	r3, r3, #1
 8013846:	b29a      	uxth	r2, r3
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013854:	461a      	mov	r2, r3
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801385a:	005b      	lsls	r3, r3, #1
 801385c:	429a      	cmp	r2, r3
 801385e:	d206      	bcs.n	801386e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013864:	005b      	lsls	r3, r3, #1
 8013866:	b29a      	uxth	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013878:	4619      	mov	r1, r3
 801387a:	0049      	lsls	r1, r1, #1
 801387c:	440b      	add	r3, r1
 801387e:	b29b      	uxth	r3, r3
 8013880:	4413      	add	r3, r2
 8013882:	b29a      	uxth	r2, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	8b5b      	ldrh	r3, [r3, #26]
 801388e:	f043 0304 	orr.w	r3, r3, #4
 8013892:	b29a      	uxth	r2, r3
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801389e:	bf00      	nop
 80138a0:	3708      	adds	r7, #8
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	0801a8e4 	.word	0x0801a8e4
 80138ac:	0801af9c 	.word	0x0801af9c
 80138b0:	0801a938 	.word	0x0801a938

080138b4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b086      	sub	sp, #24
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	607b      	str	r3, [r7, #4]
 80138be:	460b      	mov	r3, r1
 80138c0:	817b      	strh	r3, [r7, #10]
 80138c2:	4613      	mov	r3, r2
 80138c4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80138c6:	897a      	ldrh	r2, [r7, #10]
 80138c8:	893b      	ldrh	r3, [r7, #8]
 80138ca:	4413      	add	r3, r2
 80138cc:	b29b      	uxth	r3, r3
 80138ce:	3314      	adds	r3, #20
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138d6:	4619      	mov	r1, r3
 80138d8:	2022      	movs	r0, #34	; 0x22
 80138da:	f7f9 fc83 	bl	800d1e4 <pbuf_alloc>
 80138de:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d04d      	beq.n	8013982 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80138e6:	897b      	ldrh	r3, [r7, #10]
 80138e8:	3313      	adds	r3, #19
 80138ea:	697a      	ldr	r2, [r7, #20]
 80138ec:	8952      	ldrh	r2, [r2, #10]
 80138ee:	4293      	cmp	r3, r2
 80138f0:	db06      	blt.n	8013900 <tcp_output_alloc_header_common+0x4c>
 80138f2:	4b26      	ldr	r3, [pc, #152]	; (801398c <tcp_output_alloc_header_common+0xd8>)
 80138f4:	f240 7223 	movw	r2, #1827	; 0x723
 80138f8:	4925      	ldr	r1, [pc, #148]	; (8013990 <tcp_output_alloc_header_common+0xdc>)
 80138fa:	4826      	ldr	r0, [pc, #152]	; (8013994 <tcp_output_alloc_header_common+0xe0>)
 80138fc:	f003 fc7e 	bl	80171fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013906:	8c3b      	ldrh	r3, [r7, #32]
 8013908:	4618      	mov	r0, r3
 801390a:	f7f8 f9cb 	bl	800bca4 <lwip_htons>
 801390e:	4603      	mov	r3, r0
 8013910:	461a      	mov	r2, r3
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013918:	4618      	mov	r0, r3
 801391a:	f7f8 f9c3 	bl	800bca4 <lwip_htons>
 801391e:	4603      	mov	r3, r0
 8013920:	461a      	mov	r2, r3
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f7f8 f9ce 	bl	800bcce <lwip_htonl>
 8013932:	4602      	mov	r2, r0
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013938:	897b      	ldrh	r3, [r7, #10]
 801393a:	089b      	lsrs	r3, r3, #2
 801393c:	b29b      	uxth	r3, r3
 801393e:	3305      	adds	r3, #5
 8013940:	b29b      	uxth	r3, r3
 8013942:	031b      	lsls	r3, r3, #12
 8013944:	b29a      	uxth	r2, r3
 8013946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801394a:	b29b      	uxth	r3, r3
 801394c:	4313      	orrs	r3, r2
 801394e:	b29b      	uxth	r3, r3
 8013950:	4618      	mov	r0, r3
 8013952:	f7f8 f9a7 	bl	800bca4 <lwip_htons>
 8013956:	4603      	mov	r3, r0
 8013958:	461a      	mov	r2, r3
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801395e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013960:	4618      	mov	r0, r3
 8013962:	f7f8 f99f 	bl	800bca4 <lwip_htons>
 8013966:	4603      	mov	r3, r0
 8013968:	461a      	mov	r2, r3
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	2200      	movs	r2, #0
 8013972:	741a      	strb	r2, [r3, #16]
 8013974:	2200      	movs	r2, #0
 8013976:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	2200      	movs	r2, #0
 801397c:	749a      	strb	r2, [r3, #18]
 801397e:	2200      	movs	r2, #0
 8013980:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013982:	697b      	ldr	r3, [r7, #20]
}
 8013984:	4618      	mov	r0, r3
 8013986:	3718      	adds	r7, #24
 8013988:	46bd      	mov	sp, r7
 801398a:	bd80      	pop	{r7, pc}
 801398c:	0801a8e4 	.word	0x0801a8e4
 8013990:	0801afbc 	.word	0x0801afbc
 8013994:	0801a938 	.word	0x0801a938

08013998 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013998:	b5b0      	push	{r4, r5, r7, lr}
 801399a:	b08a      	sub	sp, #40	; 0x28
 801399c:	af04      	add	r7, sp, #16
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	607b      	str	r3, [r7, #4]
 80139a2:	460b      	mov	r3, r1
 80139a4:	817b      	strh	r3, [r7, #10]
 80139a6:	4613      	mov	r3, r2
 80139a8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d106      	bne.n	80139be <tcp_output_alloc_header+0x26>
 80139b0:	4b15      	ldr	r3, [pc, #84]	; (8013a08 <tcp_output_alloc_header+0x70>)
 80139b2:	f240 7242 	movw	r2, #1858	; 0x742
 80139b6:	4915      	ldr	r1, [pc, #84]	; (8013a0c <tcp_output_alloc_header+0x74>)
 80139b8:	4815      	ldr	r0, [pc, #84]	; (8013a10 <tcp_output_alloc_header+0x78>)
 80139ba:	f003 fc1f 	bl	80171fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	8adb      	ldrh	r3, [r3, #22]
 80139c6:	68fa      	ldr	r2, [r7, #12]
 80139c8:	8b12      	ldrh	r2, [r2, #24]
 80139ca:	68f9      	ldr	r1, [r7, #12]
 80139cc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80139ce:	893d      	ldrh	r5, [r7, #8]
 80139d0:	897c      	ldrh	r4, [r7, #10]
 80139d2:	9103      	str	r1, [sp, #12]
 80139d4:	2110      	movs	r1, #16
 80139d6:	9102      	str	r1, [sp, #8]
 80139d8:	9201      	str	r2, [sp, #4]
 80139da:	9300      	str	r3, [sp, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	462a      	mov	r2, r5
 80139e0:	4621      	mov	r1, r4
 80139e2:	f7ff ff67 	bl	80138b4 <tcp_output_alloc_header_common>
 80139e6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d006      	beq.n	80139fc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f2:	68fa      	ldr	r2, [r7, #12]
 80139f4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139f6:	441a      	add	r2, r3
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80139fc:	697b      	ldr	r3, [r7, #20]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3718      	adds	r7, #24
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bdb0      	pop	{r4, r5, r7, pc}
 8013a06:	bf00      	nop
 8013a08:	0801a8e4 	.word	0x0801a8e4
 8013a0c:	0801afec 	.word	0x0801afec
 8013a10:	0801a938 	.word	0x0801a938

08013a14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b088      	sub	sp, #32
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	4611      	mov	r1, r2
 8013a20:	461a      	mov	r2, r3
 8013a22:	460b      	mov	r3, r1
 8013a24:	71fb      	strb	r3, [r7, #7]
 8013a26:	4613      	mov	r3, r2
 8013a28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d106      	bne.n	8013a42 <tcp_output_fill_options+0x2e>
 8013a34:	4b13      	ldr	r3, [pc, #76]	; (8013a84 <tcp_output_fill_options+0x70>)
 8013a36:	f240 7256 	movw	r2, #1878	; 0x756
 8013a3a:	4913      	ldr	r1, [pc, #76]	; (8013a88 <tcp_output_fill_options+0x74>)
 8013a3c:	4813      	ldr	r0, [pc, #76]	; (8013a8c <tcp_output_fill_options+0x78>)
 8013a3e:	f003 fbdd 	bl	80171fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	3314      	adds	r3, #20
 8013a4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013a4e:	69bb      	ldr	r3, [r7, #24]
 8013a50:	f103 0214 	add.w	r2, r3, #20
 8013a54:	8bfb      	ldrh	r3, [r7, #30]
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	4619      	mov	r1, r3
 8013a5a:	79fb      	ldrb	r3, [r7, #7]
 8013a5c:	009b      	lsls	r3, r3, #2
 8013a5e:	f003 0304 	and.w	r3, r3, #4
 8013a62:	440b      	add	r3, r1
 8013a64:	4413      	add	r3, r2
 8013a66:	697a      	ldr	r2, [r7, #20]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d006      	beq.n	8013a7a <tcp_output_fill_options+0x66>
 8013a6c:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <tcp_output_fill_options+0x70>)
 8013a6e:	f240 7275 	movw	r2, #1909	; 0x775
 8013a72:	4907      	ldr	r1, [pc, #28]	; (8013a90 <tcp_output_fill_options+0x7c>)
 8013a74:	4805      	ldr	r0, [pc, #20]	; (8013a8c <tcp_output_fill_options+0x78>)
 8013a76:	f003 fbc1 	bl	80171fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013a7a:	bf00      	nop
 8013a7c:	3720      	adds	r7, #32
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	0801a8e4 	.word	0x0801a8e4
 8013a88:	0801b014 	.word	0x0801b014
 8013a8c:	0801a938 	.word	0x0801a938
 8013a90:	0801af0c 	.word	0x0801af0c

08013a94 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b08a      	sub	sp, #40	; 0x28
 8013a98:	af04      	add	r7, sp, #16
 8013a9a:	60f8      	str	r0, [r7, #12]
 8013a9c:	60b9      	str	r1, [r7, #8]
 8013a9e:	607a      	str	r2, [r7, #4]
 8013aa0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d106      	bne.n	8013ab6 <tcp_output_control_segment+0x22>
 8013aa8:	4b1c      	ldr	r3, [pc, #112]	; (8013b1c <tcp_output_control_segment+0x88>)
 8013aaa:	f240 7287 	movw	r2, #1927	; 0x787
 8013aae:	491c      	ldr	r1, [pc, #112]	; (8013b20 <tcp_output_control_segment+0x8c>)
 8013ab0:	481c      	ldr	r0, [pc, #112]	; (8013b24 <tcp_output_control_segment+0x90>)
 8013ab2:	f003 fba3 	bl	80171fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013ab6:	683a      	ldr	r2, [r7, #0]
 8013ab8:	6879      	ldr	r1, [r7, #4]
 8013aba:	68f8      	ldr	r0, [r7, #12]
 8013abc:	f7fe fae6 	bl	801208c <tcp_route>
 8013ac0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d102      	bne.n	8013ace <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013ac8:	23fc      	movs	r3, #252	; 0xfc
 8013aca:	75fb      	strb	r3, [r7, #23]
 8013acc:	e01c      	b.n	8013b08 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d006      	beq.n	8013ae2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	7adb      	ldrb	r3, [r3, #11]
 8013ad8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	7a9b      	ldrb	r3, [r3, #10]
 8013ade:	757b      	strb	r3, [r7, #21]
 8013ae0:	e003      	b.n	8013aea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013ae2:	23ff      	movs	r3, #255	; 0xff
 8013ae4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013aea:	7dba      	ldrb	r2, [r7, #22]
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	9302      	str	r3, [sp, #8]
 8013af0:	2306      	movs	r3, #6
 8013af2:	9301      	str	r3, [sp, #4]
 8013af4:	7d7b      	ldrb	r3, [r7, #21]
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	4613      	mov	r3, r2
 8013afa:	683a      	ldr	r2, [r7, #0]
 8013afc:	6879      	ldr	r1, [r7, #4]
 8013afe:	68b8      	ldr	r0, [r7, #8]
 8013b00:	f001 ffdc 	bl	8015abc <ip4_output_if>
 8013b04:	4603      	mov	r3, r0
 8013b06:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013b08:	68b8      	ldr	r0, [r7, #8]
 8013b0a:	f7f9 fe57 	bl	800d7bc <pbuf_free>
  return err;
 8013b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3718      	adds	r7, #24
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	bf00      	nop
 8013b1c:	0801a8e4 	.word	0x0801a8e4
 8013b20:	0801b03c 	.word	0x0801b03c
 8013b24:	0801a938 	.word	0x0801a938

08013b28 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013b28:	b590      	push	{r4, r7, lr}
 8013b2a:	b08b      	sub	sp, #44	; 0x2c
 8013b2c:	af04      	add	r7, sp, #16
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
 8013b34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013b36:	683b      	ldr	r3, [r7, #0]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d106      	bne.n	8013b4a <tcp_rst+0x22>
 8013b3c:	4b1f      	ldr	r3, [pc, #124]	; (8013bbc <tcp_rst+0x94>)
 8013b3e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013b42:	491f      	ldr	r1, [pc, #124]	; (8013bc0 <tcp_rst+0x98>)
 8013b44:	481f      	ldr	r0, [pc, #124]	; (8013bc4 <tcp_rst+0x9c>)
 8013b46:	f003 fb59 	bl	80171fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d106      	bne.n	8013b5e <tcp_rst+0x36>
 8013b50:	4b1a      	ldr	r3, [pc, #104]	; (8013bbc <tcp_rst+0x94>)
 8013b52:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013b56:	491c      	ldr	r1, [pc, #112]	; (8013bc8 <tcp_rst+0xa0>)
 8013b58:	481a      	ldr	r0, [pc, #104]	; (8013bc4 <tcp_rst+0x9c>)
 8013b5a:	f003 fb4f 	bl	80171fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013b5e:	2300      	movs	r3, #0
 8013b60:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013b62:	f24d 0316 	movw	r3, #53270	; 0xd016
 8013b66:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013b68:	7dfb      	ldrb	r3, [r7, #23]
 8013b6a:	b29c      	uxth	r4, r3
 8013b6c:	68b8      	ldr	r0, [r7, #8]
 8013b6e:	f7f8 f8ae 	bl	800bcce <lwip_htonl>
 8013b72:	4602      	mov	r2, r0
 8013b74:	8abb      	ldrh	r3, [r7, #20]
 8013b76:	9303      	str	r3, [sp, #12]
 8013b78:	2314      	movs	r3, #20
 8013b7a:	9302      	str	r3, [sp, #8]
 8013b7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013b7e:	9301      	str	r3, [sp, #4]
 8013b80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	4613      	mov	r3, r2
 8013b86:	2200      	movs	r2, #0
 8013b88:	4621      	mov	r1, r4
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f7ff fe92 	bl	80138b4 <tcp_output_alloc_header_common>
 8013b90:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d00c      	beq.n	8013bb2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013b98:	7dfb      	ldrb	r3, [r7, #23]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	6939      	ldr	r1, [r7, #16]
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7ff ff38 	bl	8013a14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	683a      	ldr	r2, [r7, #0]
 8013ba8:	6939      	ldr	r1, [r7, #16]
 8013baa:	68f8      	ldr	r0, [r7, #12]
 8013bac:	f7ff ff72 	bl	8013a94 <tcp_output_control_segment>
 8013bb0:	e000      	b.n	8013bb4 <tcp_rst+0x8c>
    return;
 8013bb2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013bb4:	371c      	adds	r7, #28
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd90      	pop	{r4, r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	0801a8e4 	.word	0x0801a8e4
 8013bc0:	0801b068 	.word	0x0801b068
 8013bc4:	0801a938 	.word	0x0801a938
 8013bc8:	0801b084 	.word	0x0801b084

08013bcc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013bcc:	b590      	push	{r4, r7, lr}
 8013bce:	b087      	sub	sp, #28
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d106      	bne.n	8013bf0 <tcp_send_empty_ack+0x24>
 8013be2:	4b28      	ldr	r3, [pc, #160]	; (8013c84 <tcp_send_empty_ack+0xb8>)
 8013be4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013be8:	4927      	ldr	r1, [pc, #156]	; (8013c88 <tcp_send_empty_ack+0xbc>)
 8013bea:	4828      	ldr	r0, [pc, #160]	; (8013c8c <tcp_send_empty_ack+0xc0>)
 8013bec:	f003 fb06 	bl	80171fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013bf0:	7dfb      	ldrb	r3, [r7, #23]
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	f003 0304 	and.w	r3, r3, #4
 8013bfa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013bfc:	7d7b      	ldrb	r3, [r7, #21]
 8013bfe:	b29c      	uxth	r4, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7f8 f862 	bl	800bcce <lwip_htonl>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	4621      	mov	r1, r4
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f7ff fec1 	bl	8013998 <tcp_output_alloc_header>
 8013c16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c18:	693b      	ldr	r3, [r7, #16]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d109      	bne.n	8013c32 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	8b5b      	ldrh	r3, [r3, #26]
 8013c22:	f043 0303 	orr.w	r3, r3, #3
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013c2c:	f06f 0301 	mvn.w	r3, #1
 8013c30:	e023      	b.n	8013c7a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013c32:	7dbb      	ldrb	r3, [r7, #22]
 8013c34:	7dfa      	ldrb	r2, [r7, #23]
 8013c36:	6939      	ldr	r1, [r7, #16]
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7ff feeb 	bl	8013a14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c3e:	687a      	ldr	r2, [r7, #4]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3304      	adds	r3, #4
 8013c44:	6939      	ldr	r1, [r7, #16]
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f7ff ff24 	bl	8013a94 <tcp_output_control_segment>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d007      	beq.n	8013c68 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	8b5b      	ldrh	r3, [r3, #26]
 8013c5c:	f043 0303 	orr.w	r3, r3, #3
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	835a      	strh	r2, [r3, #26]
 8013c66:	e006      	b.n	8013c76 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	8b5b      	ldrh	r3, [r3, #26]
 8013c6c:	f023 0303 	bic.w	r3, r3, #3
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	371c      	adds	r7, #28
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd90      	pop	{r4, r7, pc}
 8013c82:	bf00      	nop
 8013c84:	0801a8e4 	.word	0x0801a8e4
 8013c88:	0801b0a0 	.word	0x0801b0a0
 8013c8c:	0801a938 	.word	0x0801a938

08013c90 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013c90:	b590      	push	{r4, r7, lr}
 8013c92:	b087      	sub	sp, #28
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c98:	2300      	movs	r3, #0
 8013c9a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d106      	bne.n	8013cb0 <tcp_keepalive+0x20>
 8013ca2:	4b18      	ldr	r3, [pc, #96]	; (8013d04 <tcp_keepalive+0x74>)
 8013ca4:	f640 0224 	movw	r2, #2084	; 0x824
 8013ca8:	4917      	ldr	r1, [pc, #92]	; (8013d08 <tcp_keepalive+0x78>)
 8013caa:	4818      	ldr	r0, [pc, #96]	; (8013d0c <tcp_keepalive+0x7c>)
 8013cac:	f003 faa6 	bl	80171fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013cb0:	7dfb      	ldrb	r3, [r7, #23]
 8013cb2:	b29c      	uxth	r4, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cb8:	3b01      	subs	r3, #1
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7f8 f807 	bl	800bcce <lwip_htonl>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	4621      	mov	r1, r4
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f7ff fe66 	bl	8013998 <tcp_output_alloc_header>
 8013ccc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013cce:	693b      	ldr	r3, [r7, #16]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd8:	e010      	b.n	8013cfc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013cda:	7dfb      	ldrb	r3, [r7, #23]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	6939      	ldr	r1, [r7, #16]
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f7ff fe97 	bl	8013a14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	3304      	adds	r3, #4
 8013cec:	6939      	ldr	r1, [r7, #16]
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7ff fed0 	bl	8013a94 <tcp_output_control_segment>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	371c      	adds	r7, #28
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd90      	pop	{r4, r7, pc}
 8013d04:	0801a8e4 	.word	0x0801a8e4
 8013d08:	0801b0c0 	.word	0x0801b0c0
 8013d0c:	0801a938 	.word	0x0801a938

08013d10 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013d10:	b590      	push	{r4, r7, lr}
 8013d12:	b08b      	sub	sp, #44	; 0x2c
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013d18:	2300      	movs	r3, #0
 8013d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d106      	bne.n	8013d32 <tcp_zero_window_probe+0x22>
 8013d24:	4b4c      	ldr	r3, [pc, #304]	; (8013e58 <tcp_zero_window_probe+0x148>)
 8013d26:	f640 024f 	movw	r2, #2127	; 0x84f
 8013d2a:	494c      	ldr	r1, [pc, #304]	; (8013e5c <tcp_zero_window_probe+0x14c>)
 8013d2c:	484c      	ldr	r0, [pc, #304]	; (8013e60 <tcp_zero_window_probe+0x150>)
 8013d2e:	f003 fa65 	bl	80171fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d36:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013d38:	6a3b      	ldr	r3, [r7, #32]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d101      	bne.n	8013d42 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e086      	b.n	8013e50 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013d48:	2bff      	cmp	r3, #255	; 0xff
 8013d4a:	d007      	beq.n	8013d5c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013d52:	3301      	adds	r3, #1
 8013d54:	b2da      	uxtb	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013d5c:	6a3b      	ldr	r3, [r7, #32]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	899b      	ldrh	r3, [r3, #12]
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7f7 ff9d 	bl	800bca4 <lwip_htons>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	f003 0301 	and.w	r3, r3, #1
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d005      	beq.n	8013d82 <tcp_zero_window_probe+0x72>
 8013d76:	6a3b      	ldr	r3, [r7, #32]
 8013d78:	891b      	ldrh	r3, [r3, #8]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d101      	bne.n	8013d82 <tcp_zero_window_probe+0x72>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e000      	b.n	8013d84 <tcp_zero_window_probe+0x74>
 8013d82:	2300      	movs	r3, #0
 8013d84:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013d86:	7ffb      	ldrb	r3, [r7, #31]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	bf0c      	ite	eq
 8013d8c:	2301      	moveq	r3, #1
 8013d8e:	2300      	movne	r3, #0
 8013d90:	b2db      	uxtb	r3, r3
 8013d92:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d98:	b299      	uxth	r1, r3
 8013d9a:	6a3b      	ldr	r3, [r7, #32]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	8bba      	ldrh	r2, [r7, #28]
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7ff fdf8 	bl	8013998 <tcp_output_alloc_header>
 8013da8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d102      	bne.n	8013db6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013db0:	f04f 33ff 	mov.w	r3, #4294967295
 8013db4:	e04c      	b.n	8013e50 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	685b      	ldr	r3, [r3, #4]
 8013dba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013dbc:	7ffb      	ldrb	r3, [r7, #31]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d011      	beq.n	8013de6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	899b      	ldrh	r3, [r3, #12]
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	b21b      	sxth	r3, r3
 8013dca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013dce:	b21c      	sxth	r4, r3
 8013dd0:	2011      	movs	r0, #17
 8013dd2:	f7f7 ff67 	bl	800bca4 <lwip_htons>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	b21b      	sxth	r3, r3
 8013dda:	4323      	orrs	r3, r4
 8013ddc:	b21b      	sxth	r3, r3
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	819a      	strh	r2, [r3, #12]
 8013de4:	e010      	b.n	8013e08 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013de6:	69bb      	ldr	r3, [r7, #24]
 8013de8:	685b      	ldr	r3, [r3, #4]
 8013dea:	3314      	adds	r3, #20
 8013dec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013dee:	6a3b      	ldr	r3, [r7, #32]
 8013df0:	6858      	ldr	r0, [r3, #4]
 8013df2:	6a3b      	ldr	r3, [r7, #32]
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	891a      	ldrh	r2, [r3, #8]
 8013df8:	6a3b      	ldr	r3, [r7, #32]
 8013dfa:	891b      	ldrh	r3, [r3, #8]
 8013dfc:	1ad3      	subs	r3, r2, r3
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	2201      	movs	r2, #1
 8013e02:	6939      	ldr	r1, [r7, #16]
 8013e04:	f7f9 fed0 	bl	800dba8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013e08:	6a3b      	ldr	r3, [r7, #32]
 8013e0a:	68db      	ldr	r3, [r3, #12]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7f7 ff5d 	bl	800bcce <lwip_htonl>
 8013e14:	4603      	mov	r3, r0
 8013e16:	3301      	adds	r3, #1
 8013e18:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	da02      	bge.n	8013e2c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e30:	2200      	movs	r2, #0
 8013e32:	69b9      	ldr	r1, [r7, #24]
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7ff fded 	bl	8013a14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	3304      	adds	r3, #4
 8013e40:	69b9      	ldr	r1, [r7, #24]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f7ff fe26 	bl	8013a94 <tcp_output_control_segment>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013e4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013e50:	4618      	mov	r0, r3
 8013e52:	372c      	adds	r7, #44	; 0x2c
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd90      	pop	{r4, r7, pc}
 8013e58:	0801a8e4 	.word	0x0801a8e4
 8013e5c:	0801b0dc 	.word	0x0801b0dc
 8013e60:	0801a938 	.word	0x0801a938

08013e64 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013e6c:	f7f9 ffee 	bl	800de4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013e70:	4b0a      	ldr	r3, [pc, #40]	; (8013e9c <tcpip_tcp_timer+0x38>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <tcpip_tcp_timer+0x1c>
 8013e78:	4b09      	ldr	r3, [pc, #36]	; (8013ea0 <tcpip_tcp_timer+0x3c>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d005      	beq.n	8013e8c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e80:	2200      	movs	r2, #0
 8013e82:	4908      	ldr	r1, [pc, #32]	; (8013ea4 <tcpip_tcp_timer+0x40>)
 8013e84:	20fa      	movs	r0, #250	; 0xfa
 8013e86:	f000 f8f5 	bl	8014074 <sys_timeout>
 8013e8a:	e003      	b.n	8013e94 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013e8c:	4b06      	ldr	r3, [pc, #24]	; (8013ea8 <tcpip_tcp_timer+0x44>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	601a      	str	r2, [r3, #0]
  }
}
 8013e92:	bf00      	nop
 8013e94:	bf00      	nop
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}
 8013e9c:	2001a6c0 	.word	0x2001a6c0
 8013ea0:	2001a6c4 	.word	0x2001a6c4
 8013ea4:	08013e65 	.word	0x08013e65
 8013ea8:	2001a70c 	.word	0x2001a70c

08013eac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013eb0:	4b0a      	ldr	r3, [pc, #40]	; (8013edc <tcp_timer_needed+0x30>)
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d10f      	bne.n	8013ed8 <tcp_timer_needed+0x2c>
 8013eb8:	4b09      	ldr	r3, [pc, #36]	; (8013ee0 <tcp_timer_needed+0x34>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d103      	bne.n	8013ec8 <tcp_timer_needed+0x1c>
 8013ec0:	4b08      	ldr	r3, [pc, #32]	; (8013ee4 <tcp_timer_needed+0x38>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d007      	beq.n	8013ed8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013ec8:	4b04      	ldr	r3, [pc, #16]	; (8013edc <tcp_timer_needed+0x30>)
 8013eca:	2201      	movs	r2, #1
 8013ecc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013ece:	2200      	movs	r2, #0
 8013ed0:	4905      	ldr	r1, [pc, #20]	; (8013ee8 <tcp_timer_needed+0x3c>)
 8013ed2:	20fa      	movs	r0, #250	; 0xfa
 8013ed4:	f000 f8ce 	bl	8014074 <sys_timeout>
  }
}
 8013ed8:	bf00      	nop
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	2001a70c 	.word	0x2001a70c
 8013ee0:	2001a6c0 	.word	0x2001a6c0
 8013ee4:	2001a6c4 	.word	0x2001a6c4
 8013ee8:	08013e65 	.word	0x08013e65

08013eec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013ef8:	22bc      	movs	r2, #188	; 0xbc
 8013efa:	4930      	ldr	r1, [pc, #192]	; (8013fbc <sys_timeout_abs+0xd0>)
 8013efc:	200a      	movs	r0, #10
 8013efe:	f7f8 fd31 	bl	800c964 <memp_malloc_fn>
 8013f02:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d109      	bne.n	8013f1e <sys_timeout_abs+0x32>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d151      	bne.n	8013fb4 <sys_timeout_abs+0xc8>
 8013f10:	4b2a      	ldr	r3, [pc, #168]	; (8013fbc <sys_timeout_abs+0xd0>)
 8013f12:	22be      	movs	r2, #190	; 0xbe
 8013f14:	492a      	ldr	r1, [pc, #168]	; (8013fc0 <sys_timeout_abs+0xd4>)
 8013f16:	482b      	ldr	r0, [pc, #172]	; (8013fc4 <sys_timeout_abs+0xd8>)
 8013f18:	f003 f970 	bl	80171fc <iprintf>
    return;
 8013f1c:	e04a      	b.n	8013fb4 <sys_timeout_abs+0xc8>
  }

  timeout->next = NULL;
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	2200      	movs	r2, #0
 8013f22:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	68ba      	ldr	r2, [r7, #8]
 8013f28:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	68fa      	ldr	r2, [r7, #12]
 8013f34:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013f36:	4b24      	ldr	r3, [pc, #144]	; (8013fc8 <sys_timeout_abs+0xdc>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d103      	bne.n	8013f46 <sys_timeout_abs+0x5a>
    next_timeout = timeout;
 8013f3e:	4a22      	ldr	r2, [pc, #136]	; (8013fc8 <sys_timeout_abs+0xdc>)
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	6013      	str	r3, [r2, #0]
    return;
 8013f44:	e037      	b.n	8013fb6 <sys_timeout_abs+0xca>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	4b1f      	ldr	r3, [pc, #124]	; (8013fc8 <sys_timeout_abs+0xdc>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	685b      	ldr	r3, [r3, #4]
 8013f50:	1ad3      	subs	r3, r2, r3
 8013f52:	0fdb      	lsrs	r3, r3, #31
 8013f54:	f003 0301 	and.w	r3, r3, #1
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d007      	beq.n	8013f6e <sys_timeout_abs+0x82>
    timeout->next = next_timeout;
 8013f5e:	4b1a      	ldr	r3, [pc, #104]	; (8013fc8 <sys_timeout_abs+0xdc>)
 8013f60:	681a      	ldr	r2, [r3, #0]
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013f66:	4a18      	ldr	r2, [pc, #96]	; (8013fc8 <sys_timeout_abs+0xdc>)
 8013f68:	693b      	ldr	r3, [r7, #16]
 8013f6a:	6013      	str	r3, [r2, #0]
 8013f6c:	e023      	b.n	8013fb6 <sys_timeout_abs+0xca>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013f6e:	4b16      	ldr	r3, [pc, #88]	; (8013fc8 <sys_timeout_abs+0xdc>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	617b      	str	r3, [r7, #20]
 8013f74:	e01a      	b.n	8013fac <sys_timeout_abs+0xc0>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d00b      	beq.n	8013f96 <sys_timeout_abs+0xaa>
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	685a      	ldr	r2, [r3, #4]
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	0fdb      	lsrs	r3, r3, #31
 8013f8c:	f003 0301 	and.w	r3, r3, #1
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d007      	beq.n	8013fa6 <sys_timeout_abs+0xba>
        timeout->next = t->next;
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	681a      	ldr	r2, [r3, #0]
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	693a      	ldr	r2, [r7, #16]
 8013fa2:	601a      	str	r2, [r3, #0]
        break;
 8013fa4:	e007      	b.n	8013fb6 <sys_timeout_abs+0xca>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	617b      	str	r3, [r7, #20]
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d1e1      	bne.n	8013f76 <sys_timeout_abs+0x8a>
 8013fb2:	e000      	b.n	8013fb6 <sys_timeout_abs+0xca>
    return;
 8013fb4:	bf00      	nop
      }
    }
  }
}
 8013fb6:	3718      	adds	r7, #24
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	0801b100 	.word	0x0801b100
 8013fc0:	0801b134 	.word	0x0801b134
 8013fc4:	0801b174 	.word	0x0801b174
 8013fc8:	2001a704 	.word	0x2001a704

08013fcc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b086      	sub	sp, #24
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	4798      	blx	r3

  now = sys_now();
 8013fde:	f7f2 ffe3 	bl	8006fa8 <sys_now>
 8013fe2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	4b0f      	ldr	r3, [pc, #60]	; (8014028 <lwip_cyclic_timer+0x5c>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4413      	add	r3, r2
 8013fee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	0fdb      	lsrs	r3, r3, #31
 8013ff8:	f003 0301 	and.w	r3, r3, #1
 8013ffc:	b2db      	uxtb	r3, r3
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d009      	beq.n	8014016 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	693b      	ldr	r3, [r7, #16]
 8014008:	4413      	add	r3, r2
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	4907      	ldr	r1, [pc, #28]	; (801402c <lwip_cyclic_timer+0x60>)
 801400e:	4618      	mov	r0, r3
 8014010:	f7ff ff6c 	bl	8013eec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014014:	e004      	b.n	8014020 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014016:	687a      	ldr	r2, [r7, #4]
 8014018:	4904      	ldr	r1, [pc, #16]	; (801402c <lwip_cyclic_timer+0x60>)
 801401a:	68f8      	ldr	r0, [r7, #12]
 801401c:	f7ff ff66 	bl	8013eec <sys_timeout_abs>
}
 8014020:	bf00      	nop
 8014022:	3718      	adds	r7, #24
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	2001a708 	.word	0x2001a708
 801402c:	08013fcd 	.word	0x08013fcd

08014030 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014036:	2301      	movs	r3, #1
 8014038:	607b      	str	r3, [r7, #4]
 801403a:	e00e      	b.n	801405a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801403c:	4a0b      	ldr	r2, [pc, #44]	; (801406c <sys_timeouts_init+0x3c>)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	00db      	lsls	r3, r3, #3
 8014048:	4a08      	ldr	r2, [pc, #32]	; (801406c <sys_timeouts_init+0x3c>)
 801404a:	4413      	add	r3, r2
 801404c:	461a      	mov	r2, r3
 801404e:	4908      	ldr	r1, [pc, #32]	; (8014070 <sys_timeouts_init+0x40>)
 8014050:	f000 f810 	bl	8014074 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	3301      	adds	r3, #1
 8014058:	607b      	str	r3, [r7, #4]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b02      	cmp	r3, #2
 801405e:	d9ed      	bls.n	801403c <sys_timeouts_init+0xc>
  }
}
 8014060:	bf00      	nop
 8014062:	bf00      	nop
 8014064:	3708      	adds	r7, #8
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	0801d248 	.word	0x0801d248
 8014070:	08013fcd 	.word	0x08013fcd

08014074 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014086:	d306      	bcc.n	8014096 <sys_timeout+0x22>
 8014088:	4b0a      	ldr	r3, [pc, #40]	; (80140b4 <sys_timeout+0x40>)
 801408a:	f240 1229 	movw	r2, #297	; 0x129
 801408e:	490a      	ldr	r1, [pc, #40]	; (80140b8 <sys_timeout+0x44>)
 8014090:	480a      	ldr	r0, [pc, #40]	; (80140bc <sys_timeout+0x48>)
 8014092:	f003 f8b3 	bl	80171fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014096:	f7f2 ff87 	bl	8006fa8 <sys_now>
 801409a:	4602      	mov	r2, r0
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4413      	add	r3, r2
 80140a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	68b9      	ldr	r1, [r7, #8]
 80140a6:	6978      	ldr	r0, [r7, #20]
 80140a8:	f7ff ff20 	bl	8013eec <sys_timeout_abs>
#endif
}
 80140ac:	bf00      	nop
 80140ae:	3718      	adds	r7, #24
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	0801b100 	.word	0x0801b100
 80140b8:	0801b19c 	.word	0x0801b19c
 80140bc:	0801b174 	.word	0x0801b174

080140c0 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80140ca:	4b19      	ldr	r3, [pc, #100]	; (8014130 <sys_untimeout+0x70>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d029      	beq.n	8014126 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80140d2:	4b17      	ldr	r3, [pc, #92]	; (8014130 <sys_untimeout+0x70>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	60bb      	str	r3, [r7, #8]
 80140d8:	2300      	movs	r3, #0
 80140da:	60fb      	str	r3, [r7, #12]
 80140dc:	e01f      	b.n	801411e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	689b      	ldr	r3, [r3, #8]
 80140e2:	687a      	ldr	r2, [r7, #4]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d115      	bne.n	8014114 <sys_untimeout+0x54>
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	683a      	ldr	r2, [r7, #0]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d110      	bne.n	8014114 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d104      	bne.n	8014102 <sys_untimeout+0x42>
        next_timeout = t->next;
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4a0c      	ldr	r2, [pc, #48]	; (8014130 <sys_untimeout+0x70>)
 80140fe:	6013      	str	r3, [r2, #0]
 8014100:	e003      	b.n	801410a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801410a:	68b9      	ldr	r1, [r7, #8]
 801410c:	200a      	movs	r0, #10
 801410e:	f7f8 fca7 	bl	800ca60 <memp_free>
      return;
 8014112:	e009      	b.n	8014128 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	60fb      	str	r3, [r7, #12]
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	60bb      	str	r3, [r7, #8]
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d1dc      	bne.n	80140de <sys_untimeout+0x1e>
    }
  }
  return;
 8014124:	e000      	b.n	8014128 <sys_untimeout+0x68>
    return;
 8014126:	bf00      	nop
}
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	2001a704 	.word	0x2001a704

08014134 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b084      	sub	sp, #16
 8014138:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801413a:	f7f2 ff35 	bl	8006fa8 <sys_now>
 801413e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014140:	4b17      	ldr	r3, [pc, #92]	; (80141a0 <sys_check_timeouts+0x6c>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d022      	beq.n	8014192 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	68fa      	ldr	r2, [r7, #12]
 8014152:	1ad3      	subs	r3, r2, r3
 8014154:	0fdb      	lsrs	r3, r3, #31
 8014156:	f003 0301 	and.w	r3, r3, #1
 801415a:	b2db      	uxtb	r3, r3
 801415c:	2b00      	cmp	r3, #0
 801415e:	d11a      	bne.n	8014196 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	4a0e      	ldr	r2, [pc, #56]	; (80141a0 <sys_check_timeouts+0x6c>)
 8014166:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	4a0a      	ldr	r2, [pc, #40]	; (80141a4 <sys_check_timeouts+0x70>)
 801417a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801417c:	68b9      	ldr	r1, [r7, #8]
 801417e:	200a      	movs	r0, #10
 8014180:	f7f8 fc6e 	bl	800ca60 <memp_free>
    if (handler != NULL) {
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d0da      	beq.n	8014140 <sys_check_timeouts+0xc>
      handler(arg);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6838      	ldr	r0, [r7, #0]
 801418e:	4798      	blx	r3
  do {
 8014190:	e7d6      	b.n	8014140 <sys_check_timeouts+0xc>
      return;
 8014192:	bf00      	nop
 8014194:	e000      	b.n	8014198 <sys_check_timeouts+0x64>
      return;
 8014196:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	2001a704 	.word	0x2001a704
 80141a4:	2001a708 	.word	0x2001a708

080141a8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80141ae:	4b16      	ldr	r3, [pc, #88]	; (8014208 <sys_timeouts_sleeptime+0x60>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d102      	bne.n	80141bc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80141b6:	f04f 33ff 	mov.w	r3, #4294967295
 80141ba:	e020      	b.n	80141fe <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80141bc:	f7f2 fef4 	bl	8006fa8 <sys_now>
 80141c0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80141c2:	4b11      	ldr	r3, [pc, #68]	; (8014208 <sys_timeouts_sleeptime+0x60>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	685a      	ldr	r2, [r3, #4]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	0fdb      	lsrs	r3, r3, #31
 80141ce:	f003 0301 	and.w	r3, r3, #1
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d001      	beq.n	80141dc <sys_timeouts_sleeptime+0x34>
    return 0;
 80141d8:	2300      	movs	r3, #0
 80141da:	e010      	b.n	80141fe <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80141dc:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <sys_timeouts_sleeptime+0x60>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	685a      	ldr	r2, [r3, #4]
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	1ad3      	subs	r3, r2, r3
 80141e6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	da06      	bge.n	80141fc <sys_timeouts_sleeptime+0x54>
 80141ee:	4b07      	ldr	r3, [pc, #28]	; (801420c <sys_timeouts_sleeptime+0x64>)
 80141f0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80141f4:	4906      	ldr	r1, [pc, #24]	; (8014210 <sys_timeouts_sleeptime+0x68>)
 80141f6:	4807      	ldr	r0, [pc, #28]	; (8014214 <sys_timeouts_sleeptime+0x6c>)
 80141f8:	f003 f800 	bl	80171fc <iprintf>
    return ret;
 80141fc:	683b      	ldr	r3, [r7, #0]
  }
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
 8014206:	bf00      	nop
 8014208:	2001a704 	.word	0x2001a704
 801420c:	0801b100 	.word	0x0801b100
 8014210:	0801b1d4 	.word	0x0801b1d4
 8014214:	0801b174 	.word	0x0801b174

08014218 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801421c:	f003 f87c 	bl	8017318 <rand>
 8014220:	4603      	mov	r3, r0
 8014222:	b29b      	uxth	r3, r3
 8014224:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014228:	b29b      	uxth	r3, r3
 801422a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801422e:	b29a      	uxth	r2, r3
 8014230:	4b01      	ldr	r3, [pc, #4]	; (8014238 <udp_init+0x20>)
 8014232:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014234:	bf00      	nop
 8014236:	bd80      	pop	{r7, pc}
 8014238:	2000003c 	.word	0x2000003c

0801423c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	4613      	mov	r3, r2
 8014248:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d105      	bne.n	801425c <udp_input_local_match+0x20>
 8014250:	4b27      	ldr	r3, [pc, #156]	; (80142f0 <udp_input_local_match+0xb4>)
 8014252:	2287      	movs	r2, #135	; 0x87
 8014254:	4927      	ldr	r1, [pc, #156]	; (80142f4 <udp_input_local_match+0xb8>)
 8014256:	4828      	ldr	r0, [pc, #160]	; (80142f8 <udp_input_local_match+0xbc>)
 8014258:	f002 ffd0 	bl	80171fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801425c:	68bb      	ldr	r3, [r7, #8]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d105      	bne.n	801426e <udp_input_local_match+0x32>
 8014262:	4b23      	ldr	r3, [pc, #140]	; (80142f0 <udp_input_local_match+0xb4>)
 8014264:	2288      	movs	r2, #136	; 0x88
 8014266:	4925      	ldr	r1, [pc, #148]	; (80142fc <udp_input_local_match+0xc0>)
 8014268:	4823      	ldr	r0, [pc, #140]	; (80142f8 <udp_input_local_match+0xbc>)
 801426a:	f002 ffc7 	bl	80171fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	7a1b      	ldrb	r3, [r3, #8]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d00b      	beq.n	801428e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	7a1a      	ldrb	r2, [r3, #8]
 801427a:	4b21      	ldr	r3, [pc, #132]	; (8014300 <udp_input_local_match+0xc4>)
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014282:	3301      	adds	r3, #1
 8014284:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014286:	429a      	cmp	r2, r3
 8014288:	d001      	beq.n	801428e <udp_input_local_match+0x52>
    return 0;
 801428a:	2300      	movs	r3, #0
 801428c:	e02b      	b.n	80142e6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801428e:	79fb      	ldrb	r3, [r7, #7]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d018      	beq.n	80142c6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d013      	beq.n	80142c2 <udp_input_local_match+0x86>
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00f      	beq.n	80142c2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80142a2:	4b17      	ldr	r3, [pc, #92]	; (8014300 <udp_input_local_match+0xc4>)
 80142a4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80142a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142aa:	d00a      	beq.n	80142c2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	4b13      	ldr	r3, [pc, #76]	; (8014300 <udp_input_local_match+0xc4>)
 80142b2:	695b      	ldr	r3, [r3, #20]
 80142b4:	405a      	eors	r2, r3
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	3308      	adds	r3, #8
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d110      	bne.n	80142e4 <udp_input_local_match+0xa8>
          return 1;
 80142c2:	2301      	movs	r3, #1
 80142c4:	e00f      	b.n	80142e6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d009      	beq.n	80142e0 <udp_input_local_match+0xa4>
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d005      	beq.n	80142e0 <udp_input_local_match+0xa4>
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	4b09      	ldr	r3, [pc, #36]	; (8014300 <udp_input_local_match+0xc4>)
 80142da:	695b      	ldr	r3, [r3, #20]
 80142dc:	429a      	cmp	r2, r3
 80142de:	d101      	bne.n	80142e4 <udp_input_local_match+0xa8>
        return 1;
 80142e0:	2301      	movs	r3, #1
 80142e2:	e000      	b.n	80142e6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80142e4:	2300      	movs	r3, #0
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	0801b1e8 	.word	0x0801b1e8
 80142f4:	0801b218 	.word	0x0801b218
 80142f8:	0801b23c 	.word	0x0801b23c
 80142fc:	0801b264 	.word	0x0801b264
 8014300:	200058d0 	.word	0x200058d0

08014304 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014304:	b590      	push	{r4, r7, lr}
 8014306:	b08d      	sub	sp, #52	; 0x34
 8014308:	af02      	add	r7, sp, #8
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801430e:	2300      	movs	r3, #0
 8014310:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d105      	bne.n	8014324 <udp_input+0x20>
 8014318:	4b7c      	ldr	r3, [pc, #496]	; (801450c <udp_input+0x208>)
 801431a:	22cf      	movs	r2, #207	; 0xcf
 801431c:	497c      	ldr	r1, [pc, #496]	; (8014510 <udp_input+0x20c>)
 801431e:	487d      	ldr	r0, [pc, #500]	; (8014514 <udp_input+0x210>)
 8014320:	f002 ff6c 	bl	80171fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d105      	bne.n	8014336 <udp_input+0x32>
 801432a:	4b78      	ldr	r3, [pc, #480]	; (801450c <udp_input+0x208>)
 801432c:	22d0      	movs	r2, #208	; 0xd0
 801432e:	497a      	ldr	r1, [pc, #488]	; (8014518 <udp_input+0x214>)
 8014330:	4878      	ldr	r0, [pc, #480]	; (8014514 <udp_input+0x210>)
 8014332:	f002 ff63 	bl	80171fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	895b      	ldrh	r3, [r3, #10]
 801433a:	2b07      	cmp	r3, #7
 801433c:	d803      	bhi.n	8014346 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f7f9 fa3c 	bl	800d7bc <pbuf_free>
    goto end;
 8014344:	e0de      	b.n	8014504 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	685b      	ldr	r3, [r3, #4]
 801434a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801434c:	4b73      	ldr	r3, [pc, #460]	; (801451c <udp_input+0x218>)
 801434e:	695b      	ldr	r3, [r3, #20]
 8014350:	4a72      	ldr	r2, [pc, #456]	; (801451c <udp_input+0x218>)
 8014352:	6812      	ldr	r2, [r2, #0]
 8014354:	4611      	mov	r1, r2
 8014356:	4618      	mov	r0, r3
 8014358:	f001 fc88 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 801435c:	4603      	mov	r3, r0
 801435e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	881b      	ldrh	r3, [r3, #0]
 8014364:	b29b      	uxth	r3, r3
 8014366:	4618      	mov	r0, r3
 8014368:	f7f7 fc9c 	bl	800bca4 <lwip_htons>
 801436c:	4603      	mov	r3, r0
 801436e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	885b      	ldrh	r3, [r3, #2]
 8014374:	b29b      	uxth	r3, r3
 8014376:	4618      	mov	r0, r3
 8014378:	f7f7 fc94 	bl	800bca4 <lwip_htons>
 801437c:	4603      	mov	r3, r0
 801437e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014380:	2300      	movs	r3, #0
 8014382:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014384:	2300      	movs	r3, #0
 8014386:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014388:	2300      	movs	r3, #0
 801438a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801438c:	4b64      	ldr	r3, [pc, #400]	; (8014520 <udp_input+0x21c>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	627b      	str	r3, [r7, #36]	; 0x24
 8014392:	e054      	b.n	801443e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014396:	8a5b      	ldrh	r3, [r3, #18]
 8014398:	89fa      	ldrh	r2, [r7, #14]
 801439a:	429a      	cmp	r2, r3
 801439c:	d14a      	bne.n	8014434 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801439e:	7cfb      	ldrb	r3, [r7, #19]
 80143a0:	461a      	mov	r2, r3
 80143a2:	6839      	ldr	r1, [r7, #0]
 80143a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143a6:	f7ff ff49 	bl	801423c <udp_input_local_match>
 80143aa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d041      	beq.n	8014434 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80143b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b2:	7c1b      	ldrb	r3, [r3, #16]
 80143b4:	f003 0304 	and.w	r3, r3, #4
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d11d      	bne.n	80143f8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d102      	bne.n	80143c8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80143c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c4:	61fb      	str	r3, [r7, #28]
 80143c6:	e017      	b.n	80143f8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80143c8:	7cfb      	ldrb	r3, [r7, #19]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d014      	beq.n	80143f8 <udp_input+0xf4>
 80143ce:	4b53      	ldr	r3, [pc, #332]	; (801451c <udp_input+0x218>)
 80143d0:	695b      	ldr	r3, [r3, #20]
 80143d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d6:	d10f      	bne.n	80143f8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80143d8:	69fb      	ldr	r3, [r7, #28]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	3304      	adds	r3, #4
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d008      	beq.n	80143f8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80143e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e8:	681a      	ldr	r2, [r3, #0]
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	3304      	adds	r3, #4
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d101      	bne.n	80143f8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	8a9b      	ldrh	r3, [r3, #20]
 80143fc:	8a3a      	ldrh	r2, [r7, #16]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d118      	bne.n	8014434 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014404:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014406:	2b00      	cmp	r3, #0
 8014408:	d005      	beq.n	8014416 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801440c:	685a      	ldr	r2, [r3, #4]
 801440e:	4b43      	ldr	r3, [pc, #268]	; (801451c <udp_input+0x218>)
 8014410:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014412:	429a      	cmp	r2, r3
 8014414:	d10e      	bne.n	8014434 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014416:	6a3b      	ldr	r3, [r7, #32]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d014      	beq.n	8014446 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441e:	68da      	ldr	r2, [r3, #12]
 8014420:	6a3b      	ldr	r3, [r7, #32]
 8014422:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014424:	4b3e      	ldr	r3, [pc, #248]	; (8014520 <udp_input+0x21c>)
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801442c:	4a3c      	ldr	r2, [pc, #240]	; (8014520 <udp_input+0x21c>)
 801442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014430:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014432:	e008      	b.n	8014446 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014436:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	627b      	str	r3, [r7, #36]	; 0x24
 801443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014440:	2b00      	cmp	r3, #0
 8014442:	d1a7      	bne.n	8014394 <udp_input+0x90>
 8014444:	e000      	b.n	8014448 <udp_input+0x144>
        break;
 8014446:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444a:	2b00      	cmp	r3, #0
 801444c:	d101      	bne.n	8014452 <udp_input+0x14e>
    pcb = uncon_pcb;
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014454:	2b00      	cmp	r3, #0
 8014456:	d002      	beq.n	801445e <udp_input+0x15a>
    for_us = 1;
 8014458:	2301      	movs	r3, #1
 801445a:	76fb      	strb	r3, [r7, #27]
 801445c:	e00a      	b.n	8014474 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	3304      	adds	r3, #4
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	4b2d      	ldr	r3, [pc, #180]	; (801451c <udp_input+0x218>)
 8014466:	695b      	ldr	r3, [r3, #20]
 8014468:	429a      	cmp	r2, r3
 801446a:	bf0c      	ite	eq
 801446c:	2301      	moveq	r3, #1
 801446e:	2300      	movne	r3, #0
 8014470:	b2db      	uxtb	r3, r3
 8014472:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014474:	7efb      	ldrb	r3, [r7, #27]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d041      	beq.n	80144fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801447a:	2108      	movs	r1, #8
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f7f9 f917 	bl	800d6b0 <pbuf_remove_header>
 8014482:	4603      	mov	r3, r0
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00a      	beq.n	801449e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014488:	4b20      	ldr	r3, [pc, #128]	; (801450c <udp_input+0x208>)
 801448a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801448e:	4925      	ldr	r1, [pc, #148]	; (8014524 <udp_input+0x220>)
 8014490:	4820      	ldr	r0, [pc, #128]	; (8014514 <udp_input+0x210>)
 8014492:	f002 feb3 	bl	80171fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014496:	6878      	ldr	r0, [r7, #4]
 8014498:	f7f9 f990 	bl	800d7bc <pbuf_free>
      goto end;
 801449c:	e032      	b.n	8014504 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d012      	beq.n	80144ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80144a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d00a      	beq.n	80144c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ae:	699c      	ldr	r4, [r3, #24]
 80144b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b2:	69d8      	ldr	r0, [r3, #28]
 80144b4:	8a3b      	ldrh	r3, [r7, #16]
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	4b1b      	ldr	r3, [pc, #108]	; (8014528 <udp_input+0x224>)
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80144c0:	e021      	b.n	8014506 <udp_input+0x202>
        pbuf_free(p);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7f9 f97a 	bl	800d7bc <pbuf_free>
        goto end;
 80144c8:	e01c      	b.n	8014504 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80144ca:	7cfb      	ldrb	r3, [r7, #19]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d112      	bne.n	80144f6 <udp_input+0x1f2>
 80144d0:	4b12      	ldr	r3, [pc, #72]	; (801451c <udp_input+0x218>)
 80144d2:	695b      	ldr	r3, [r3, #20]
 80144d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144d8:	2be0      	cmp	r3, #224	; 0xe0
 80144da:	d00c      	beq.n	80144f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80144dc:	4b0f      	ldr	r3, [pc, #60]	; (801451c <udp_input+0x218>)
 80144de:	899b      	ldrh	r3, [r3, #12]
 80144e0:	3308      	adds	r3, #8
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	b21b      	sxth	r3, r3
 80144e6:	4619      	mov	r1, r3
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f7f9 f954 	bl	800d796 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80144ee:	2103      	movs	r1, #3
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f001 f89b 	bl	801562c <icmp_dest_unreach>
      pbuf_free(p);
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f7f9 f960 	bl	800d7bc <pbuf_free>
  return;
 80144fc:	e003      	b.n	8014506 <udp_input+0x202>
    pbuf_free(p);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7f9 f95c 	bl	800d7bc <pbuf_free>
  return;
 8014504:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014506:	372c      	adds	r7, #44	; 0x2c
 8014508:	46bd      	mov	sp, r7
 801450a:	bd90      	pop	{r4, r7, pc}
 801450c:	0801b1e8 	.word	0x0801b1e8
 8014510:	0801b28c 	.word	0x0801b28c
 8014514:	0801b23c 	.word	0x0801b23c
 8014518:	0801b2a4 	.word	0x0801b2a4
 801451c:	200058d0 	.word	0x200058d0
 8014520:	2001a710 	.word	0x2001a710
 8014524:	0801b2c0 	.word	0x0801b2c0
 8014528:	200058e0 	.word	0x200058e0

0801452c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d01e      	beq.n	801457a <udp_netif_ip_addr_changed+0x4e>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d01a      	beq.n	801457a <udp_netif_ip_addr_changed+0x4e>
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d017      	beq.n	801457a <udp_netif_ip_addr_changed+0x4e>
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d013      	beq.n	801457a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014552:	4b0d      	ldr	r3, [pc, #52]	; (8014588 <udp_netif_ip_addr_changed+0x5c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	60fb      	str	r3, [r7, #12]
 8014558:	e00c      	b.n	8014574 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	429a      	cmp	r2, r3
 8014564:	d103      	bne.n	801456e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	68db      	ldr	r3, [r3, #12]
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d1ef      	bne.n	801455a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801457a:	bf00      	nop
 801457c:	3714      	adds	r7, #20
 801457e:	46bd      	mov	sp, r7
 8014580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014584:	4770      	bx	lr
 8014586:	bf00      	nop
 8014588:	2001a710 	.word	0x2001a710

0801458c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014594:	4915      	ldr	r1, [pc, #84]	; (80145ec <etharp_free_entry+0x60>)
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	4613      	mov	r3, r2
 801459a:	005b      	lsls	r3, r3, #1
 801459c:	4413      	add	r3, r2
 801459e:	00db      	lsls	r3, r3, #3
 80145a0:	440b      	add	r3, r1
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d013      	beq.n	80145d0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80145a8:	4910      	ldr	r1, [pc, #64]	; (80145ec <etharp_free_entry+0x60>)
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	440b      	add	r3, r1
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7f9 f8ff 	bl	800d7bc <pbuf_free>
    arp_table[i].q = NULL;
 80145be:	490b      	ldr	r1, [pc, #44]	; (80145ec <etharp_free_entry+0x60>)
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	4613      	mov	r3, r2
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	4413      	add	r3, r2
 80145c8:	00db      	lsls	r3, r3, #3
 80145ca:	440b      	add	r3, r1
 80145cc:	2200      	movs	r2, #0
 80145ce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80145d0:	4906      	ldr	r1, [pc, #24]	; (80145ec <etharp_free_entry+0x60>)
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	4613      	mov	r3, r2
 80145d6:	005b      	lsls	r3, r3, #1
 80145d8:	4413      	add	r3, r2
 80145da:	00db      	lsls	r3, r3, #3
 80145dc:	440b      	add	r3, r1
 80145de:	3314      	adds	r3, #20
 80145e0:	2200      	movs	r2, #0
 80145e2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	2001a714 	.word	0x2001a714

080145f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145f6:	2300      	movs	r3, #0
 80145f8:	607b      	str	r3, [r7, #4]
 80145fa:	e096      	b.n	801472a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80145fc:	494f      	ldr	r1, [pc, #316]	; (801473c <etharp_tmr+0x14c>)
 80145fe:	687a      	ldr	r2, [r7, #4]
 8014600:	4613      	mov	r3, r2
 8014602:	005b      	lsls	r3, r3, #1
 8014604:	4413      	add	r3, r2
 8014606:	00db      	lsls	r3, r3, #3
 8014608:	440b      	add	r3, r1
 801460a:	3314      	adds	r3, #20
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014610:	78fb      	ldrb	r3, [r7, #3]
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 8086 	beq.w	8014724 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014618:	4948      	ldr	r1, [pc, #288]	; (801473c <etharp_tmr+0x14c>)
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	4613      	mov	r3, r2
 801461e:	005b      	lsls	r3, r3, #1
 8014620:	4413      	add	r3, r2
 8014622:	00db      	lsls	r3, r3, #3
 8014624:	440b      	add	r3, r1
 8014626:	3312      	adds	r3, #18
 8014628:	881b      	ldrh	r3, [r3, #0]
 801462a:	3301      	adds	r3, #1
 801462c:	b298      	uxth	r0, r3
 801462e:	4943      	ldr	r1, [pc, #268]	; (801473c <etharp_tmr+0x14c>)
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	4613      	mov	r3, r2
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	440b      	add	r3, r1
 801463c:	3312      	adds	r3, #18
 801463e:	4602      	mov	r2, r0
 8014640:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014642:	493e      	ldr	r1, [pc, #248]	; (801473c <etharp_tmr+0x14c>)
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	4613      	mov	r3, r2
 8014648:	005b      	lsls	r3, r3, #1
 801464a:	4413      	add	r3, r2
 801464c:	00db      	lsls	r3, r3, #3
 801464e:	440b      	add	r3, r1
 8014650:	3312      	adds	r3, #18
 8014652:	881b      	ldrh	r3, [r3, #0]
 8014654:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014658:	d215      	bcs.n	8014686 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801465a:	4938      	ldr	r1, [pc, #224]	; (801473c <etharp_tmr+0x14c>)
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	440b      	add	r3, r1
 8014668:	3314      	adds	r3, #20
 801466a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801466c:	2b01      	cmp	r3, #1
 801466e:	d10e      	bne.n	801468e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014670:	4932      	ldr	r1, [pc, #200]	; (801473c <etharp_tmr+0x14c>)
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	00db      	lsls	r3, r3, #3
 801467c:	440b      	add	r3, r1
 801467e:	3312      	adds	r3, #18
 8014680:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014682:	2b04      	cmp	r3, #4
 8014684:	d903      	bls.n	801468e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f7ff ff80 	bl	801458c <etharp_free_entry>
 801468c:	e04a      	b.n	8014724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801468e:	492b      	ldr	r1, [pc, #172]	; (801473c <etharp_tmr+0x14c>)
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	4613      	mov	r3, r2
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	4413      	add	r3, r2
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	440b      	add	r3, r1
 801469c:	3314      	adds	r3, #20
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b03      	cmp	r3, #3
 80146a2:	d10a      	bne.n	80146ba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80146a4:	4925      	ldr	r1, [pc, #148]	; (801473c <etharp_tmr+0x14c>)
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	4613      	mov	r3, r2
 80146aa:	005b      	lsls	r3, r3, #1
 80146ac:	4413      	add	r3, r2
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	440b      	add	r3, r1
 80146b2:	3314      	adds	r3, #20
 80146b4:	2204      	movs	r2, #4
 80146b6:	701a      	strb	r2, [r3, #0]
 80146b8:	e034      	b.n	8014724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80146ba:	4920      	ldr	r1, [pc, #128]	; (801473c <etharp_tmr+0x14c>)
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	3314      	adds	r3, #20
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	2b04      	cmp	r3, #4
 80146ce:	d10a      	bne.n	80146e6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80146d0:	491a      	ldr	r1, [pc, #104]	; (801473c <etharp_tmr+0x14c>)
 80146d2:	687a      	ldr	r2, [r7, #4]
 80146d4:	4613      	mov	r3, r2
 80146d6:	005b      	lsls	r3, r3, #1
 80146d8:	4413      	add	r3, r2
 80146da:	00db      	lsls	r3, r3, #3
 80146dc:	440b      	add	r3, r1
 80146de:	3314      	adds	r3, #20
 80146e0:	2202      	movs	r2, #2
 80146e2:	701a      	strb	r2, [r3, #0]
 80146e4:	e01e      	b.n	8014724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80146e6:	4915      	ldr	r1, [pc, #84]	; (801473c <etharp_tmr+0x14c>)
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	4613      	mov	r3, r2
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	4413      	add	r3, r2
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	440b      	add	r3, r1
 80146f4:	3314      	adds	r3, #20
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	2b01      	cmp	r3, #1
 80146fa:	d113      	bne.n	8014724 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80146fc:	490f      	ldr	r1, [pc, #60]	; (801473c <etharp_tmr+0x14c>)
 80146fe:	687a      	ldr	r2, [r7, #4]
 8014700:	4613      	mov	r3, r2
 8014702:	005b      	lsls	r3, r3, #1
 8014704:	4413      	add	r3, r2
 8014706:	00db      	lsls	r3, r3, #3
 8014708:	440b      	add	r3, r1
 801470a:	3308      	adds	r3, #8
 801470c:	6818      	ldr	r0, [r3, #0]
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	4613      	mov	r3, r2
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	4413      	add	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	4a08      	ldr	r2, [pc, #32]	; (801473c <etharp_tmr+0x14c>)
 801471a:	4413      	add	r3, r2
 801471c:	3304      	adds	r3, #4
 801471e:	4619      	mov	r1, r3
 8014720:	f000 fe6e 	bl	8015400 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	3301      	adds	r3, #1
 8014728:	607b      	str	r3, [r7, #4]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2b09      	cmp	r3, #9
 801472e:	f77f af65 	ble.w	80145fc <etharp_tmr+0xc>
      }
    }
  }
}
 8014732:	bf00      	nop
 8014734:	bf00      	nop
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	2001a714 	.word	0x2001a714

08014740 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b08a      	sub	sp, #40	; 0x28
 8014744:	af00      	add	r7, sp, #0
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	460b      	mov	r3, r1
 801474a:	607a      	str	r2, [r7, #4]
 801474c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801474e:	230a      	movs	r3, #10
 8014750:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014752:	230a      	movs	r3, #10
 8014754:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014756:	230a      	movs	r3, #10
 8014758:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801475a:	2300      	movs	r3, #0
 801475c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801475e:	230a      	movs	r3, #10
 8014760:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	83bb      	strh	r3, [r7, #28]
 8014766:	2300      	movs	r3, #0
 8014768:	837b      	strh	r3, [r7, #26]
 801476a:	2300      	movs	r3, #0
 801476c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801476e:	2300      	movs	r3, #0
 8014770:	843b      	strh	r3, [r7, #32]
 8014772:	e0ae      	b.n	80148d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014778:	49a6      	ldr	r1, [pc, #664]	; (8014a14 <etharp_find_entry+0x2d4>)
 801477a:	4613      	mov	r3, r2
 801477c:	005b      	lsls	r3, r3, #1
 801477e:	4413      	add	r3, r2
 8014780:	00db      	lsls	r3, r3, #3
 8014782:	440b      	add	r3, r1
 8014784:	3314      	adds	r3, #20
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801478a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801478e:	2b0a      	cmp	r3, #10
 8014790:	d105      	bne.n	801479e <etharp_find_entry+0x5e>
 8014792:	7dfb      	ldrb	r3, [r7, #23]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d102      	bne.n	801479e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014798:	8c3b      	ldrh	r3, [r7, #32]
 801479a:	847b      	strh	r3, [r7, #34]	; 0x22
 801479c:	e095      	b.n	80148ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801479e:	7dfb      	ldrb	r3, [r7, #23]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	f000 8092 	beq.w	80148ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80147a6:	7dfb      	ldrb	r3, [r7, #23]
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d009      	beq.n	80147c0 <etharp_find_entry+0x80>
 80147ac:	7dfb      	ldrb	r3, [r7, #23]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d806      	bhi.n	80147c0 <etharp_find_entry+0x80>
 80147b2:	4b99      	ldr	r3, [pc, #612]	; (8014a18 <etharp_find_entry+0x2d8>)
 80147b4:	f240 1223 	movw	r2, #291	; 0x123
 80147b8:	4998      	ldr	r1, [pc, #608]	; (8014a1c <etharp_find_entry+0x2dc>)
 80147ba:	4899      	ldr	r0, [pc, #612]	; (8014a20 <etharp_find_entry+0x2e0>)
 80147bc:	f002 fd1e 	bl	80171fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d020      	beq.n	8014808 <etharp_find_entry+0xc8>
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	6819      	ldr	r1, [r3, #0]
 80147ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147ce:	4891      	ldr	r0, [pc, #580]	; (8014a14 <etharp_find_entry+0x2d4>)
 80147d0:	4613      	mov	r3, r2
 80147d2:	005b      	lsls	r3, r3, #1
 80147d4:	4413      	add	r3, r2
 80147d6:	00db      	lsls	r3, r3, #3
 80147d8:	4403      	add	r3, r0
 80147da:	3304      	adds	r3, #4
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	4299      	cmp	r1, r3
 80147e0:	d112      	bne.n	8014808 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d00c      	beq.n	8014802 <etharp_find_entry+0xc2>
 80147e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147ec:	4989      	ldr	r1, [pc, #548]	; (8014a14 <etharp_find_entry+0x2d4>)
 80147ee:	4613      	mov	r3, r2
 80147f0:	005b      	lsls	r3, r3, #1
 80147f2:	4413      	add	r3, r2
 80147f4:	00db      	lsls	r3, r3, #3
 80147f6:	440b      	add	r3, r1
 80147f8:	3308      	adds	r3, #8
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	687a      	ldr	r2, [r7, #4]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d102      	bne.n	8014808 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014802:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014806:	e100      	b.n	8014a0a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014808:	7dfb      	ldrb	r3, [r7, #23]
 801480a:	2b01      	cmp	r3, #1
 801480c:	d140      	bne.n	8014890 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801480e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014812:	4980      	ldr	r1, [pc, #512]	; (8014a14 <etharp_find_entry+0x2d4>)
 8014814:	4613      	mov	r3, r2
 8014816:	005b      	lsls	r3, r3, #1
 8014818:	4413      	add	r3, r2
 801481a:	00db      	lsls	r3, r3, #3
 801481c:	440b      	add	r3, r1
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d01a      	beq.n	801485a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014828:	497a      	ldr	r1, [pc, #488]	; (8014a14 <etharp_find_entry+0x2d4>)
 801482a:	4613      	mov	r3, r2
 801482c:	005b      	lsls	r3, r3, #1
 801482e:	4413      	add	r3, r2
 8014830:	00db      	lsls	r3, r3, #3
 8014832:	440b      	add	r3, r1
 8014834:	3312      	adds	r3, #18
 8014836:	881b      	ldrh	r3, [r3, #0]
 8014838:	8bba      	ldrh	r2, [r7, #28]
 801483a:	429a      	cmp	r2, r3
 801483c:	d845      	bhi.n	80148ca <etharp_find_entry+0x18a>
            old_queue = i;
 801483e:	8c3b      	ldrh	r3, [r7, #32]
 8014840:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014846:	4973      	ldr	r1, [pc, #460]	; (8014a14 <etharp_find_entry+0x2d4>)
 8014848:	4613      	mov	r3, r2
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	4413      	add	r3, r2
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	440b      	add	r3, r1
 8014852:	3312      	adds	r3, #18
 8014854:	881b      	ldrh	r3, [r3, #0]
 8014856:	83bb      	strh	r3, [r7, #28]
 8014858:	e037      	b.n	80148ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801485a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801485e:	496d      	ldr	r1, [pc, #436]	; (8014a14 <etharp_find_entry+0x2d4>)
 8014860:	4613      	mov	r3, r2
 8014862:	005b      	lsls	r3, r3, #1
 8014864:	4413      	add	r3, r2
 8014866:	00db      	lsls	r3, r3, #3
 8014868:	440b      	add	r3, r1
 801486a:	3312      	adds	r3, #18
 801486c:	881b      	ldrh	r3, [r3, #0]
 801486e:	8b7a      	ldrh	r2, [r7, #26]
 8014870:	429a      	cmp	r2, r3
 8014872:	d82a      	bhi.n	80148ca <etharp_find_entry+0x18a>
            old_pending = i;
 8014874:	8c3b      	ldrh	r3, [r7, #32]
 8014876:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801487c:	4965      	ldr	r1, [pc, #404]	; (8014a14 <etharp_find_entry+0x2d4>)
 801487e:	4613      	mov	r3, r2
 8014880:	005b      	lsls	r3, r3, #1
 8014882:	4413      	add	r3, r2
 8014884:	00db      	lsls	r3, r3, #3
 8014886:	440b      	add	r3, r1
 8014888:	3312      	adds	r3, #18
 801488a:	881b      	ldrh	r3, [r3, #0]
 801488c:	837b      	strh	r3, [r7, #26]
 801488e:	e01c      	b.n	80148ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014890:	7dfb      	ldrb	r3, [r7, #23]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d919      	bls.n	80148ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801489a:	495e      	ldr	r1, [pc, #376]	; (8014a14 <etharp_find_entry+0x2d4>)
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	00db      	lsls	r3, r3, #3
 80148a4:	440b      	add	r3, r1
 80148a6:	3312      	adds	r3, #18
 80148a8:	881b      	ldrh	r3, [r3, #0]
 80148aa:	8b3a      	ldrh	r2, [r7, #24]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d80c      	bhi.n	80148ca <etharp_find_entry+0x18a>
            old_stable = i;
 80148b0:	8c3b      	ldrh	r3, [r7, #32]
 80148b2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80148b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148b8:	4956      	ldr	r1, [pc, #344]	; (8014a14 <etharp_find_entry+0x2d4>)
 80148ba:	4613      	mov	r3, r2
 80148bc:	005b      	lsls	r3, r3, #1
 80148be:	4413      	add	r3, r2
 80148c0:	00db      	lsls	r3, r3, #3
 80148c2:	440b      	add	r3, r1
 80148c4:	3312      	adds	r3, #18
 80148c6:	881b      	ldrh	r3, [r3, #0]
 80148c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148ca:	8c3b      	ldrh	r3, [r7, #32]
 80148cc:	3301      	adds	r3, #1
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	843b      	strh	r3, [r7, #32]
 80148d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148d6:	2b09      	cmp	r3, #9
 80148d8:	f77f af4c 	ble.w	8014774 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80148dc:	7afb      	ldrb	r3, [r7, #11]
 80148de:	f003 0302 	and.w	r3, r3, #2
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d108      	bne.n	80148f8 <etharp_find_entry+0x1b8>
 80148e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80148ea:	2b0a      	cmp	r3, #10
 80148ec:	d107      	bne.n	80148fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80148ee:	7afb      	ldrb	r3, [r7, #11]
 80148f0:	f003 0301 	and.w	r3, r3, #1
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d102      	bne.n	80148fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80148f8:	f04f 33ff 	mov.w	r3, #4294967295
 80148fc:	e085      	b.n	8014a0a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80148fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014902:	2b09      	cmp	r3, #9
 8014904:	dc02      	bgt.n	801490c <etharp_find_entry+0x1cc>
    i = empty;
 8014906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014908:	843b      	strh	r3, [r7, #32]
 801490a:	e039      	b.n	8014980 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801490c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014910:	2b09      	cmp	r3, #9
 8014912:	dc14      	bgt.n	801493e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014916:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801491c:	493d      	ldr	r1, [pc, #244]	; (8014a14 <etharp_find_entry+0x2d4>)
 801491e:	4613      	mov	r3, r2
 8014920:	005b      	lsls	r3, r3, #1
 8014922:	4413      	add	r3, r2
 8014924:	00db      	lsls	r3, r3, #3
 8014926:	440b      	add	r3, r1
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d018      	beq.n	8014960 <etharp_find_entry+0x220>
 801492e:	4b3a      	ldr	r3, [pc, #232]	; (8014a18 <etharp_find_entry+0x2d8>)
 8014930:	f240 126d 	movw	r2, #365	; 0x16d
 8014934:	493b      	ldr	r1, [pc, #236]	; (8014a24 <etharp_find_entry+0x2e4>)
 8014936:	483a      	ldr	r0, [pc, #232]	; (8014a20 <etharp_find_entry+0x2e0>)
 8014938:	f002 fc60 	bl	80171fc <iprintf>
 801493c:	e010      	b.n	8014960 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801493e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014942:	2b09      	cmp	r3, #9
 8014944:	dc02      	bgt.n	801494c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014946:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014948:	843b      	strh	r3, [r7, #32]
 801494a:	e009      	b.n	8014960 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801494c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014950:	2b09      	cmp	r3, #9
 8014952:	dc02      	bgt.n	801495a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014954:	8bfb      	ldrh	r3, [r7, #30]
 8014956:	843b      	strh	r3, [r7, #32]
 8014958:	e002      	b.n	8014960 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801495a:	f04f 33ff 	mov.w	r3, #4294967295
 801495e:	e054      	b.n	8014a0a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014960:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014964:	2b09      	cmp	r3, #9
 8014966:	dd06      	ble.n	8014976 <etharp_find_entry+0x236>
 8014968:	4b2b      	ldr	r3, [pc, #172]	; (8014a18 <etharp_find_entry+0x2d8>)
 801496a:	f240 127f 	movw	r2, #383	; 0x17f
 801496e:	492e      	ldr	r1, [pc, #184]	; (8014a28 <etharp_find_entry+0x2e8>)
 8014970:	482b      	ldr	r0, [pc, #172]	; (8014a20 <etharp_find_entry+0x2e0>)
 8014972:	f002 fc43 	bl	80171fc <iprintf>
    etharp_free_entry(i);
 8014976:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801497a:	4618      	mov	r0, r3
 801497c:	f7ff fe06 	bl	801458c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014980:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014984:	2b09      	cmp	r3, #9
 8014986:	dd06      	ble.n	8014996 <etharp_find_entry+0x256>
 8014988:	4b23      	ldr	r3, [pc, #140]	; (8014a18 <etharp_find_entry+0x2d8>)
 801498a:	f240 1283 	movw	r2, #387	; 0x183
 801498e:	4926      	ldr	r1, [pc, #152]	; (8014a28 <etharp_find_entry+0x2e8>)
 8014990:	4823      	ldr	r0, [pc, #140]	; (8014a20 <etharp_find_entry+0x2e0>)
 8014992:	f002 fc33 	bl	80171fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801499a:	491e      	ldr	r1, [pc, #120]	; (8014a14 <etharp_find_entry+0x2d4>)
 801499c:	4613      	mov	r3, r2
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	4413      	add	r3, r2
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	440b      	add	r3, r1
 80149a6:	3314      	adds	r3, #20
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d006      	beq.n	80149bc <etharp_find_entry+0x27c>
 80149ae:	4b1a      	ldr	r3, [pc, #104]	; (8014a18 <etharp_find_entry+0x2d8>)
 80149b0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80149b4:	491d      	ldr	r1, [pc, #116]	; (8014a2c <etharp_find_entry+0x2ec>)
 80149b6:	481a      	ldr	r0, [pc, #104]	; (8014a20 <etharp_find_entry+0x2e0>)
 80149b8:	f002 fc20 	bl	80171fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d00b      	beq.n	80149da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80149c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	6819      	ldr	r1, [r3, #0]
 80149ca:	4812      	ldr	r0, [pc, #72]	; (8014a14 <etharp_find_entry+0x2d4>)
 80149cc:	4613      	mov	r3, r2
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	4413      	add	r3, r2
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	4403      	add	r3, r0
 80149d6:	3304      	adds	r3, #4
 80149d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80149da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149de:	490d      	ldr	r1, [pc, #52]	; (8014a14 <etharp_find_entry+0x2d4>)
 80149e0:	4613      	mov	r3, r2
 80149e2:	005b      	lsls	r3, r3, #1
 80149e4:	4413      	add	r3, r2
 80149e6:	00db      	lsls	r3, r3, #3
 80149e8:	440b      	add	r3, r1
 80149ea:	3312      	adds	r3, #18
 80149ec:	2200      	movs	r2, #0
 80149ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80149f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149f4:	4907      	ldr	r1, [pc, #28]	; (8014a14 <etharp_find_entry+0x2d4>)
 80149f6:	4613      	mov	r3, r2
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	4413      	add	r3, r2
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	440b      	add	r3, r1
 8014a00:	3308      	adds	r3, #8
 8014a02:	687a      	ldr	r2, [r7, #4]
 8014a04:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014a06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3728      	adds	r7, #40	; 0x28
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}
 8014a12:	bf00      	nop
 8014a14:	2001a714 	.word	0x2001a714
 8014a18:	0801b54c 	.word	0x0801b54c
 8014a1c:	0801b584 	.word	0x0801b584
 8014a20:	0801b5c4 	.word	0x0801b5c4
 8014a24:	0801b5ec 	.word	0x0801b5ec
 8014a28:	0801b604 	.word	0x0801b604
 8014a2c:	0801b618 	.word	0x0801b618

08014a30 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b088      	sub	sp, #32
 8014a34:	af02      	add	r7, sp, #8
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	607a      	str	r2, [r7, #4]
 8014a3c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014a44:	2b06      	cmp	r3, #6
 8014a46:	d006      	beq.n	8014a56 <etharp_update_arp_entry+0x26>
 8014a48:	4b48      	ldr	r3, [pc, #288]	; (8014b6c <etharp_update_arp_entry+0x13c>)
 8014a4a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014a4e:	4948      	ldr	r1, [pc, #288]	; (8014b70 <etharp_update_arp_entry+0x140>)
 8014a50:	4848      	ldr	r0, [pc, #288]	; (8014b74 <etharp_update_arp_entry+0x144>)
 8014a52:	f002 fbd3 	bl	80171fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d012      	beq.n	8014a82 <etharp_update_arp_entry+0x52>
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d00e      	beq.n	8014a82 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a64:	68bb      	ldr	r3, [r7, #8]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	68f9      	ldr	r1, [r7, #12]
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f001 f8fe 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 8014a70:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d105      	bne.n	8014a82 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a7e:	2be0      	cmp	r3, #224	; 0xe0
 8014a80:	d102      	bne.n	8014a88 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a82:	f06f 030f 	mvn.w	r3, #15
 8014a86:	e06c      	b.n	8014b62 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014a88:	78fb      	ldrb	r3, [r7, #3]
 8014a8a:	68fa      	ldr	r2, [r7, #12]
 8014a8c:	4619      	mov	r1, r3
 8014a8e:	68b8      	ldr	r0, [r7, #8]
 8014a90:	f7ff fe56 	bl	8014740 <etharp_find_entry>
 8014a94:	4603      	mov	r3, r0
 8014a96:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014a98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	da02      	bge.n	8014aa6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014aa0:	8afb      	ldrh	r3, [r7, #22]
 8014aa2:	b25b      	sxtb	r3, r3
 8014aa4:	e05d      	b.n	8014b62 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014aa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014aaa:	4933      	ldr	r1, [pc, #204]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014aac:	4613      	mov	r3, r2
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	4413      	add	r3, r2
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	440b      	add	r3, r1
 8014ab6:	3314      	adds	r3, #20
 8014ab8:	2202      	movs	r2, #2
 8014aba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014abc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ac0:	492d      	ldr	r1, [pc, #180]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	005b      	lsls	r3, r3, #1
 8014ac6:	4413      	add	r3, r2
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	440b      	add	r3, r1
 8014acc:	3308      	adds	r3, #8
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014ad2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	005b      	lsls	r3, r3, #1
 8014ada:	4413      	add	r3, r2
 8014adc:	00db      	lsls	r3, r3, #3
 8014ade:	3308      	adds	r3, #8
 8014ae0:	4a25      	ldr	r2, [pc, #148]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014ae2:	4413      	add	r3, r2
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	2206      	movs	r2, #6
 8014ae8:	6879      	ldr	r1, [r7, #4]
 8014aea:	4618      	mov	r0, r3
 8014aec:	f002 fa76 	bl	8016fdc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014af4:	4920      	ldr	r1, [pc, #128]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014af6:	4613      	mov	r3, r2
 8014af8:	005b      	lsls	r3, r3, #1
 8014afa:	4413      	add	r3, r2
 8014afc:	00db      	lsls	r3, r3, #3
 8014afe:	440b      	add	r3, r1
 8014b00:	3312      	adds	r3, #18
 8014b02:	2200      	movs	r2, #0
 8014b04:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014b06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b0a:	491b      	ldr	r1, [pc, #108]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	00db      	lsls	r3, r3, #3
 8014b14:	440b      	add	r3, r1
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d021      	beq.n	8014b60 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014b1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b20:	4915      	ldr	r1, [pc, #84]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014b22:	4613      	mov	r3, r2
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4413      	add	r3, r2
 8014b28:	00db      	lsls	r3, r3, #3
 8014b2a:	440b      	add	r3, r1
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014b30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b34:	4910      	ldr	r1, [pc, #64]	; (8014b78 <etharp_update_arp_entry+0x148>)
 8014b36:	4613      	mov	r3, r2
 8014b38:	005b      	lsls	r3, r3, #1
 8014b3a:	4413      	add	r3, r2
 8014b3c:	00db      	lsls	r3, r3, #3
 8014b3e:	440b      	add	r3, r1
 8014b40:	2200      	movs	r2, #0
 8014b42:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b4e:	9300      	str	r3, [sp, #0]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6939      	ldr	r1, [r7, #16]
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f001 ffa5 	bl	8016aa4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014b5a:	6938      	ldr	r0, [r7, #16]
 8014b5c:	f7f8 fe2e 	bl	800d7bc <pbuf_free>
  }
  return ERR_OK;
 8014b60:	2300      	movs	r3, #0
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3718      	adds	r7, #24
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	0801b54c 	.word	0x0801b54c
 8014b70:	0801b644 	.word	0x0801b644
 8014b74:	0801b5c4 	.word	0x0801b5c4
 8014b78:	2001a714 	.word	0x2001a714

08014b7c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b084      	sub	sp, #16
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b84:	2300      	movs	r3, #0
 8014b86:	60fb      	str	r3, [r7, #12]
 8014b88:	e01e      	b.n	8014bc8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014b8a:	4913      	ldr	r1, [pc, #76]	; (8014bd8 <etharp_cleanup_netif+0x5c>)
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	4613      	mov	r3, r2
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	4413      	add	r3, r2
 8014b94:	00db      	lsls	r3, r3, #3
 8014b96:	440b      	add	r3, r1
 8014b98:	3314      	adds	r3, #20
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014b9e:	7afb      	ldrb	r3, [r7, #11]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00e      	beq.n	8014bc2 <etharp_cleanup_netif+0x46>
 8014ba4:	490c      	ldr	r1, [pc, #48]	; (8014bd8 <etharp_cleanup_netif+0x5c>)
 8014ba6:	68fa      	ldr	r2, [r7, #12]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	005b      	lsls	r3, r3, #1
 8014bac:	4413      	add	r3, r2
 8014bae:	00db      	lsls	r3, r3, #3
 8014bb0:	440b      	add	r3, r1
 8014bb2:	3308      	adds	r3, #8
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d102      	bne.n	8014bc2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014bbc:	68f8      	ldr	r0, [r7, #12]
 8014bbe:	f7ff fce5 	bl	801458c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	60fb      	str	r3, [r7, #12]
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	2b09      	cmp	r3, #9
 8014bcc:	dddd      	ble.n	8014b8a <etharp_cleanup_netif+0xe>
    }
  }
}
 8014bce:	bf00      	nop
 8014bd0:	bf00      	nop
 8014bd2:	3710      	adds	r7, #16
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	2001a714 	.word	0x2001a714

08014bdc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014bdc:	b5b0      	push	{r4, r5, r7, lr}
 8014bde:	b08a      	sub	sp, #40	; 0x28
 8014be0:	af04      	add	r7, sp, #16
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014be6:	683b      	ldr	r3, [r7, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d107      	bne.n	8014bfc <etharp_input+0x20>
 8014bec:	4b3d      	ldr	r3, [pc, #244]	; (8014ce4 <etharp_input+0x108>)
 8014bee:	f240 228a 	movw	r2, #650	; 0x28a
 8014bf2:	493d      	ldr	r1, [pc, #244]	; (8014ce8 <etharp_input+0x10c>)
 8014bf4:	483d      	ldr	r0, [pc, #244]	; (8014cec <etharp_input+0x110>)
 8014bf6:	f002 fb01 	bl	80171fc <iprintf>
 8014bfa:	e06f      	b.n	8014cdc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c02:	693b      	ldr	r3, [r7, #16]
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	b29b      	uxth	r3, r3
 8014c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c0c:	d10c      	bne.n	8014c28 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c12:	2b06      	cmp	r3, #6
 8014c14:	d108      	bne.n	8014c28 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014c1a:	2b04      	cmp	r3, #4
 8014c1c:	d104      	bne.n	8014c28 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	885b      	ldrh	r3, [r3, #2]
 8014c22:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014c24:	2b08      	cmp	r3, #8
 8014c26:	d003      	beq.n	8014c30 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7f8 fdc7 	bl	800d7bc <pbuf_free>
    return;
 8014c2e:	e055      	b.n	8014cdc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	330e      	adds	r3, #14
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	3318      	adds	r3, #24
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	3304      	adds	r3, #4
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d102      	bne.n	8014c50 <etharp_input+0x74>
    for_us = 0;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	75fb      	strb	r3, [r7, #23]
 8014c4e:	e009      	b.n	8014c64 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014c50:	68ba      	ldr	r2, [r7, #8]
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	3304      	adds	r3, #4
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	bf0c      	ite	eq
 8014c5c:	2301      	moveq	r3, #1
 8014c5e:	2300      	movne	r3, #0
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	f103 0208 	add.w	r2, r3, #8
 8014c6a:	7dfb      	ldrb	r3, [r7, #23]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d001      	beq.n	8014c74 <etharp_input+0x98>
 8014c70:	2301      	movs	r3, #1
 8014c72:	e000      	b.n	8014c76 <etharp_input+0x9a>
 8014c74:	2302      	movs	r3, #2
 8014c76:	f107 010c 	add.w	r1, r7, #12
 8014c7a:	6838      	ldr	r0, [r7, #0]
 8014c7c:	f7ff fed8 	bl	8014a30 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	88db      	ldrh	r3, [r3, #6]
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c8a:	d003      	beq.n	8014c94 <etharp_input+0xb8>
 8014c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c90:	d01e      	beq.n	8014cd0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014c92:	e020      	b.n	8014cd6 <etharp_input+0xfa>
      if (for_us) {
 8014c94:	7dfb      	ldrb	r3, [r7, #23]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d01c      	beq.n	8014cd4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014cb0:	693a      	ldr	r2, [r7, #16]
 8014cb2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014cb4:	2102      	movs	r1, #2
 8014cb6:	9103      	str	r1, [sp, #12]
 8014cb8:	f107 010c 	add.w	r1, r7, #12
 8014cbc:	9102      	str	r1, [sp, #8]
 8014cbe:	9201      	str	r2, [sp, #4]
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	462b      	mov	r3, r5
 8014cc4:	4622      	mov	r2, r4
 8014cc6:	4601      	mov	r1, r0
 8014cc8:	6838      	ldr	r0, [r7, #0]
 8014cca:	f000 faeb 	bl	80152a4 <etharp_raw>
      break;
 8014cce:	e001      	b.n	8014cd4 <etharp_input+0xf8>
      break;
 8014cd0:	bf00      	nop
 8014cd2:	e000      	b.n	8014cd6 <etharp_input+0xfa>
      break;
 8014cd4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	f7f8 fd70 	bl	800d7bc <pbuf_free>
}
 8014cdc:	3718      	adds	r7, #24
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	0801b54c 	.word	0x0801b54c
 8014ce8:	0801b69c 	.word	0x0801b69c
 8014cec:	0801b5c4 	.word	0x0801b5c4

08014cf0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b086      	sub	sp, #24
 8014cf4:	af02      	add	r7, sp, #8
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014cfe:	79fa      	ldrb	r2, [r7, #7]
 8014d00:	4944      	ldr	r1, [pc, #272]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014d02:	4613      	mov	r3, r2
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	4413      	add	r3, r2
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	440b      	add	r3, r1
 8014d0c:	3314      	adds	r3, #20
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d806      	bhi.n	8014d22 <etharp_output_to_arp_index+0x32>
 8014d14:	4b40      	ldr	r3, [pc, #256]	; (8014e18 <etharp_output_to_arp_index+0x128>)
 8014d16:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014d1a:	4940      	ldr	r1, [pc, #256]	; (8014e1c <etharp_output_to_arp_index+0x12c>)
 8014d1c:	4840      	ldr	r0, [pc, #256]	; (8014e20 <etharp_output_to_arp_index+0x130>)
 8014d1e:	f002 fa6d 	bl	80171fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014d22:	79fa      	ldrb	r2, [r7, #7]
 8014d24:	493b      	ldr	r1, [pc, #236]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014d26:	4613      	mov	r3, r2
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	4413      	add	r3, r2
 8014d2c:	00db      	lsls	r3, r3, #3
 8014d2e:	440b      	add	r3, r1
 8014d30:	3314      	adds	r3, #20
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	2b02      	cmp	r3, #2
 8014d36:	d153      	bne.n	8014de0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014d38:	79fa      	ldrb	r2, [r7, #7]
 8014d3a:	4936      	ldr	r1, [pc, #216]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	005b      	lsls	r3, r3, #1
 8014d40:	4413      	add	r3, r2
 8014d42:	00db      	lsls	r3, r3, #3
 8014d44:	440b      	add	r3, r1
 8014d46:	3312      	adds	r3, #18
 8014d48:	881b      	ldrh	r3, [r3, #0]
 8014d4a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014d4e:	d919      	bls.n	8014d84 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014d50:	79fa      	ldrb	r2, [r7, #7]
 8014d52:	4613      	mov	r3, r2
 8014d54:	005b      	lsls	r3, r3, #1
 8014d56:	4413      	add	r3, r2
 8014d58:	00db      	lsls	r3, r3, #3
 8014d5a:	4a2e      	ldr	r2, [pc, #184]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014d5c:	4413      	add	r3, r2
 8014d5e:	3304      	adds	r3, #4
 8014d60:	4619      	mov	r1, r3
 8014d62:	68f8      	ldr	r0, [r7, #12]
 8014d64:	f000 fb4c 	bl	8015400 <etharp_request>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d138      	bne.n	8014de0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014d6e:	79fa      	ldrb	r2, [r7, #7]
 8014d70:	4928      	ldr	r1, [pc, #160]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014d72:	4613      	mov	r3, r2
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	4413      	add	r3, r2
 8014d78:	00db      	lsls	r3, r3, #3
 8014d7a:	440b      	add	r3, r1
 8014d7c:	3314      	adds	r3, #20
 8014d7e:	2203      	movs	r2, #3
 8014d80:	701a      	strb	r2, [r3, #0]
 8014d82:	e02d      	b.n	8014de0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014d84:	79fa      	ldrb	r2, [r7, #7]
 8014d86:	4923      	ldr	r1, [pc, #140]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014d88:	4613      	mov	r3, r2
 8014d8a:	005b      	lsls	r3, r3, #1
 8014d8c:	4413      	add	r3, r2
 8014d8e:	00db      	lsls	r3, r3, #3
 8014d90:	440b      	add	r3, r1
 8014d92:	3312      	adds	r3, #18
 8014d94:	881b      	ldrh	r3, [r3, #0]
 8014d96:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014d9a:	d321      	bcc.n	8014de0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014d9c:	79fa      	ldrb	r2, [r7, #7]
 8014d9e:	4613      	mov	r3, r2
 8014da0:	005b      	lsls	r3, r3, #1
 8014da2:	4413      	add	r3, r2
 8014da4:	00db      	lsls	r3, r3, #3
 8014da6:	4a1b      	ldr	r2, [pc, #108]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014da8:	4413      	add	r3, r2
 8014daa:	1d19      	adds	r1, r3, #4
 8014dac:	79fa      	ldrb	r2, [r7, #7]
 8014dae:	4613      	mov	r3, r2
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	4413      	add	r3, r2
 8014db4:	00db      	lsls	r3, r3, #3
 8014db6:	3308      	adds	r3, #8
 8014db8:	4a16      	ldr	r2, [pc, #88]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014dba:	4413      	add	r3, r2
 8014dbc:	3304      	adds	r3, #4
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	f000 fafb 	bl	80153bc <etharp_request_dst>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d109      	bne.n	8014de0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014dcc:	79fa      	ldrb	r2, [r7, #7]
 8014dce:	4911      	ldr	r1, [pc, #68]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	005b      	lsls	r3, r3, #1
 8014dd4:	4413      	add	r3, r2
 8014dd6:	00db      	lsls	r3, r3, #3
 8014dd8:	440b      	add	r3, r1
 8014dda:	3314      	adds	r3, #20
 8014ddc:	2203      	movs	r2, #3
 8014dde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014de6:	79fa      	ldrb	r2, [r7, #7]
 8014de8:	4613      	mov	r3, r2
 8014dea:	005b      	lsls	r3, r3, #1
 8014dec:	4413      	add	r3, r2
 8014dee:	00db      	lsls	r3, r3, #3
 8014df0:	3308      	adds	r3, #8
 8014df2:	4a08      	ldr	r2, [pc, #32]	; (8014e14 <etharp_output_to_arp_index+0x124>)
 8014df4:	4413      	add	r3, r2
 8014df6:	3304      	adds	r3, #4
 8014df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dfc:	9200      	str	r2, [sp, #0]
 8014dfe:	460a      	mov	r2, r1
 8014e00:	68b9      	ldr	r1, [r7, #8]
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	f001 fe4e 	bl	8016aa4 <ethernet_output>
 8014e08:	4603      	mov	r3, r0
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	2001a714 	.word	0x2001a714
 8014e18:	0801b54c 	.word	0x0801b54c
 8014e1c:	0801b6bc 	.word	0x0801b6bc
 8014e20:	0801b5c4 	.word	0x0801b5c4

08014e24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b08a      	sub	sp, #40	; 0x28
 8014e28:	af02      	add	r7, sp, #8
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d106      	bne.n	8014e48 <etharp_output+0x24>
 8014e3a:	4b73      	ldr	r3, [pc, #460]	; (8015008 <etharp_output+0x1e4>)
 8014e3c:	f240 321e 	movw	r2, #798	; 0x31e
 8014e40:	4972      	ldr	r1, [pc, #456]	; (801500c <etharp_output+0x1e8>)
 8014e42:	4873      	ldr	r0, [pc, #460]	; (8015010 <etharp_output+0x1ec>)
 8014e44:	f002 f9da 	bl	80171fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d106      	bne.n	8014e5c <etharp_output+0x38>
 8014e4e:	4b6e      	ldr	r3, [pc, #440]	; (8015008 <etharp_output+0x1e4>)
 8014e50:	f240 321f 	movw	r2, #799	; 0x31f
 8014e54:	496f      	ldr	r1, [pc, #444]	; (8015014 <etharp_output+0x1f0>)
 8014e56:	486e      	ldr	r0, [pc, #440]	; (8015010 <etharp_output+0x1ec>)
 8014e58:	f002 f9d0 	bl	80171fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d106      	bne.n	8014e70 <etharp_output+0x4c>
 8014e62:	4b69      	ldr	r3, [pc, #420]	; (8015008 <etharp_output+0x1e4>)
 8014e64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014e68:	496b      	ldr	r1, [pc, #428]	; (8015018 <etharp_output+0x1f4>)
 8014e6a:	4869      	ldr	r0, [pc, #420]	; (8015010 <etharp_output+0x1ec>)
 8014e6c:	f002 f9c6 	bl	80171fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	68f9      	ldr	r1, [r7, #12]
 8014e76:	4618      	mov	r0, r3
 8014e78:	f000 fef8 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d002      	beq.n	8014e88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014e82:	4b66      	ldr	r3, [pc, #408]	; (801501c <etharp_output+0x1f8>)
 8014e84:	61fb      	str	r3, [r7, #28]
 8014e86:	e0af      	b.n	8014fe8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e90:	2be0      	cmp	r3, #224	; 0xe0
 8014e92:	d118      	bne.n	8014ec6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014e94:	2301      	movs	r3, #1
 8014e96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014e9c:	235e      	movs	r3, #94	; 0x5e
 8014e9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014eaa:	b2db      	uxtb	r3, r3
 8014eac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	3302      	adds	r3, #2
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	3303      	adds	r3, #3
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014ebe:	f107 0310 	add.w	r3, r7, #16
 8014ec2:	61fb      	str	r3, [r7, #28]
 8014ec4:	e090      	b.n	8014fe8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	3304      	adds	r3, #4
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	405a      	eors	r2, r3
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	3308      	adds	r3, #8
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	4013      	ands	r3, r2
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d012      	beq.n	8014f04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ee4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	d00b      	beq.n	8014f04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	330c      	adds	r3, #12
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d003      	beq.n	8014efe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	330c      	adds	r3, #12
 8014efa:	61bb      	str	r3, [r7, #24]
 8014efc:	e002      	b.n	8014f04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014efe:	f06f 0303 	mvn.w	r3, #3
 8014f02:	e07d      	b.n	8015000 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014f04:	4b46      	ldr	r3, [pc, #280]	; (8015020 <etharp_output+0x1fc>)
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	4619      	mov	r1, r3
 8014f0a:	4a46      	ldr	r2, [pc, #280]	; (8015024 <etharp_output+0x200>)
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	005b      	lsls	r3, r3, #1
 8014f10:	440b      	add	r3, r1
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	4413      	add	r3, r2
 8014f16:	3314      	adds	r3, #20
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	2b01      	cmp	r3, #1
 8014f1c:	d925      	bls.n	8014f6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014f1e:	4b40      	ldr	r3, [pc, #256]	; (8015020 <etharp_output+0x1fc>)
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	4619      	mov	r1, r3
 8014f24:	4a3f      	ldr	r2, [pc, #252]	; (8015024 <etharp_output+0x200>)
 8014f26:	460b      	mov	r3, r1
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	440b      	add	r3, r1
 8014f2c:	00db      	lsls	r3, r3, #3
 8014f2e:	4413      	add	r3, r2
 8014f30:	3308      	adds	r3, #8
 8014f32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014f34:	68fa      	ldr	r2, [r7, #12]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d117      	bne.n	8014f6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014f3a:	69bb      	ldr	r3, [r7, #24]
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	4b38      	ldr	r3, [pc, #224]	; (8015020 <etharp_output+0x1fc>)
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	4618      	mov	r0, r3
 8014f44:	4937      	ldr	r1, [pc, #220]	; (8015024 <etharp_output+0x200>)
 8014f46:	4603      	mov	r3, r0
 8014f48:	005b      	lsls	r3, r3, #1
 8014f4a:	4403      	add	r3, r0
 8014f4c:	00db      	lsls	r3, r3, #3
 8014f4e:	440b      	add	r3, r1
 8014f50:	3304      	adds	r3, #4
 8014f52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d108      	bne.n	8014f6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014f58:	4b31      	ldr	r3, [pc, #196]	; (8015020 <etharp_output+0x1fc>)
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	461a      	mov	r2, r3
 8014f5e:	68b9      	ldr	r1, [r7, #8]
 8014f60:	68f8      	ldr	r0, [r7, #12]
 8014f62:	f7ff fec5 	bl	8014cf0 <etharp_output_to_arp_index>
 8014f66:	4603      	mov	r3, r0
 8014f68:	e04a      	b.n	8015000 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	75fb      	strb	r3, [r7, #23]
 8014f6e:	e031      	b.n	8014fd4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014f70:	7dfa      	ldrb	r2, [r7, #23]
 8014f72:	492c      	ldr	r1, [pc, #176]	; (8015024 <etharp_output+0x200>)
 8014f74:	4613      	mov	r3, r2
 8014f76:	005b      	lsls	r3, r3, #1
 8014f78:	4413      	add	r3, r2
 8014f7a:	00db      	lsls	r3, r3, #3
 8014f7c:	440b      	add	r3, r1
 8014f7e:	3314      	adds	r3, #20
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d923      	bls.n	8014fce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014f86:	7dfa      	ldrb	r2, [r7, #23]
 8014f88:	4926      	ldr	r1, [pc, #152]	; (8015024 <etharp_output+0x200>)
 8014f8a:	4613      	mov	r3, r2
 8014f8c:	005b      	lsls	r3, r3, #1
 8014f8e:	4413      	add	r3, r2
 8014f90:	00db      	lsls	r3, r3, #3
 8014f92:	440b      	add	r3, r1
 8014f94:	3308      	adds	r3, #8
 8014f96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014f98:	68fa      	ldr	r2, [r7, #12]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d117      	bne.n	8014fce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014f9e:	69bb      	ldr	r3, [r7, #24]
 8014fa0:	6819      	ldr	r1, [r3, #0]
 8014fa2:	7dfa      	ldrb	r2, [r7, #23]
 8014fa4:	481f      	ldr	r0, [pc, #124]	; (8015024 <etharp_output+0x200>)
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	005b      	lsls	r3, r3, #1
 8014faa:	4413      	add	r3, r2
 8014fac:	00db      	lsls	r3, r3, #3
 8014fae:	4403      	add	r3, r0
 8014fb0:	3304      	adds	r3, #4
 8014fb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014fb4:	4299      	cmp	r1, r3
 8014fb6:	d10a      	bne.n	8014fce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014fb8:	4a19      	ldr	r2, [pc, #100]	; (8015020 <etharp_output+0x1fc>)
 8014fba:	7dfb      	ldrb	r3, [r7, #23]
 8014fbc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014fbe:	7dfb      	ldrb	r3, [r7, #23]
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	68b9      	ldr	r1, [r7, #8]
 8014fc4:	68f8      	ldr	r0, [r7, #12]
 8014fc6:	f7ff fe93 	bl	8014cf0 <etharp_output_to_arp_index>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	e018      	b.n	8015000 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014fce:	7dfb      	ldrb	r3, [r7, #23]
 8014fd0:	3301      	adds	r3, #1
 8014fd2:	75fb      	strb	r3, [r7, #23]
 8014fd4:	7dfb      	ldrb	r3, [r7, #23]
 8014fd6:	2b09      	cmp	r3, #9
 8014fd8:	d9ca      	bls.n	8014f70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014fda:	68ba      	ldr	r2, [r7, #8]
 8014fdc:	69b9      	ldr	r1, [r7, #24]
 8014fde:	68f8      	ldr	r0, [r7, #12]
 8014fe0:	f000 f822 	bl	8015028 <etharp_query>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	e00b      	b.n	8015000 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014fee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ff2:	9300      	str	r3, [sp, #0]
 8014ff4:	69fb      	ldr	r3, [r7, #28]
 8014ff6:	68b9      	ldr	r1, [r7, #8]
 8014ff8:	68f8      	ldr	r0, [r7, #12]
 8014ffa:	f001 fd53 	bl	8016aa4 <ethernet_output>
 8014ffe:	4603      	mov	r3, r0
}
 8015000:	4618      	mov	r0, r3
 8015002:	3720      	adds	r7, #32
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	0801b54c 	.word	0x0801b54c
 801500c:	0801b69c 	.word	0x0801b69c
 8015010:	0801b5c4 	.word	0x0801b5c4
 8015014:	0801b6ec 	.word	0x0801b6ec
 8015018:	0801b68c 	.word	0x0801b68c
 801501c:	0801d264 	.word	0x0801d264
 8015020:	2001a804 	.word	0x2001a804
 8015024:	2001a714 	.word	0x2001a714

08015028 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b08c      	sub	sp, #48	; 0x30
 801502c:	af02      	add	r7, sp, #8
 801502e:	60f8      	str	r0, [r7, #12]
 8015030:	60b9      	str	r1, [r7, #8]
 8015032:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	3326      	adds	r3, #38	; 0x26
 8015038:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801503a:	23ff      	movs	r3, #255	; 0xff
 801503c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015040:	2300      	movs	r3, #0
 8015042:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	68f9      	ldr	r1, [r7, #12]
 801504a:	4618      	mov	r0, r3
 801504c:	f000 fe0e 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 8015050:	4603      	mov	r3, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	d10c      	bne.n	8015070 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801505e:	2be0      	cmp	r3, #224	; 0xe0
 8015060:	d006      	beq.n	8015070 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d003      	beq.n	8015070 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d102      	bne.n	8015076 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015070:	f06f 030f 	mvn.w	r3, #15
 8015074:	e101      	b.n	801527a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015076:	68fa      	ldr	r2, [r7, #12]
 8015078:	2101      	movs	r1, #1
 801507a:	68b8      	ldr	r0, [r7, #8]
 801507c:	f7ff fb60 	bl	8014740 <etharp_find_entry>
 8015080:	4603      	mov	r3, r0
 8015082:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015088:	2b00      	cmp	r3, #0
 801508a:	da02      	bge.n	8015092 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801508c:	8a7b      	ldrh	r3, [r7, #18]
 801508e:	b25b      	sxtb	r3, r3
 8015090:	e0f3      	b.n	801527a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015092:	8a7b      	ldrh	r3, [r7, #18]
 8015094:	2b7e      	cmp	r3, #126	; 0x7e
 8015096:	d906      	bls.n	80150a6 <etharp_query+0x7e>
 8015098:	4b7a      	ldr	r3, [pc, #488]	; (8015284 <etharp_query+0x25c>)
 801509a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801509e:	497a      	ldr	r1, [pc, #488]	; (8015288 <etharp_query+0x260>)
 80150a0:	487a      	ldr	r0, [pc, #488]	; (801528c <etharp_query+0x264>)
 80150a2:	f002 f8ab 	bl	80171fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80150a6:	8a7b      	ldrh	r3, [r7, #18]
 80150a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80150aa:	7c7a      	ldrb	r2, [r7, #17]
 80150ac:	4978      	ldr	r1, [pc, #480]	; (8015290 <etharp_query+0x268>)
 80150ae:	4613      	mov	r3, r2
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	4413      	add	r3, r2
 80150b4:	00db      	lsls	r3, r3, #3
 80150b6:	440b      	add	r3, r1
 80150b8:	3314      	adds	r3, #20
 80150ba:	781b      	ldrb	r3, [r3, #0]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d115      	bne.n	80150ec <etharp_query+0xc4>
    is_new_entry = 1;
 80150c0:	2301      	movs	r3, #1
 80150c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80150c4:	7c7a      	ldrb	r2, [r7, #17]
 80150c6:	4972      	ldr	r1, [pc, #456]	; (8015290 <etharp_query+0x268>)
 80150c8:	4613      	mov	r3, r2
 80150ca:	005b      	lsls	r3, r3, #1
 80150cc:	4413      	add	r3, r2
 80150ce:	00db      	lsls	r3, r3, #3
 80150d0:	440b      	add	r3, r1
 80150d2:	3314      	adds	r3, #20
 80150d4:	2201      	movs	r2, #1
 80150d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80150d8:	7c7a      	ldrb	r2, [r7, #17]
 80150da:	496d      	ldr	r1, [pc, #436]	; (8015290 <etharp_query+0x268>)
 80150dc:	4613      	mov	r3, r2
 80150de:	005b      	lsls	r3, r3, #1
 80150e0:	4413      	add	r3, r2
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	440b      	add	r3, r1
 80150e6:	3308      	adds	r3, #8
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80150ec:	7c7a      	ldrb	r2, [r7, #17]
 80150ee:	4968      	ldr	r1, [pc, #416]	; (8015290 <etharp_query+0x268>)
 80150f0:	4613      	mov	r3, r2
 80150f2:	005b      	lsls	r3, r3, #1
 80150f4:	4413      	add	r3, r2
 80150f6:	00db      	lsls	r3, r3, #3
 80150f8:	440b      	add	r3, r1
 80150fa:	3314      	adds	r3, #20
 80150fc:	781b      	ldrb	r3, [r3, #0]
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d011      	beq.n	8015126 <etharp_query+0xfe>
 8015102:	7c7a      	ldrb	r2, [r7, #17]
 8015104:	4962      	ldr	r1, [pc, #392]	; (8015290 <etharp_query+0x268>)
 8015106:	4613      	mov	r3, r2
 8015108:	005b      	lsls	r3, r3, #1
 801510a:	4413      	add	r3, r2
 801510c:	00db      	lsls	r3, r3, #3
 801510e:	440b      	add	r3, r1
 8015110:	3314      	adds	r3, #20
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	2b01      	cmp	r3, #1
 8015116:	d806      	bhi.n	8015126 <etharp_query+0xfe>
 8015118:	4b5a      	ldr	r3, [pc, #360]	; (8015284 <etharp_query+0x25c>)
 801511a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801511e:	495d      	ldr	r1, [pc, #372]	; (8015294 <etharp_query+0x26c>)
 8015120:	485a      	ldr	r0, [pc, #360]	; (801528c <etharp_query+0x264>)
 8015122:	f002 f86b 	bl	80171fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015126:	6a3b      	ldr	r3, [r7, #32]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d102      	bne.n	8015132 <etharp_query+0x10a>
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d10c      	bne.n	801514c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015132:	68b9      	ldr	r1, [r7, #8]
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f000 f963 	bl	8015400 <etharp_request>
 801513a:	4603      	mov	r3, r0
 801513c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d102      	bne.n	801514c <etharp_query+0x124>
      return result;
 8015146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801514a:	e096      	b.n	801527a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d106      	bne.n	8015160 <etharp_query+0x138>
 8015152:	4b4c      	ldr	r3, [pc, #304]	; (8015284 <etharp_query+0x25c>)
 8015154:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015158:	494f      	ldr	r1, [pc, #316]	; (8015298 <etharp_query+0x270>)
 801515a:	484c      	ldr	r0, [pc, #304]	; (801528c <etharp_query+0x264>)
 801515c:	f002 f84e 	bl	80171fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015160:	7c7a      	ldrb	r2, [r7, #17]
 8015162:	494b      	ldr	r1, [pc, #300]	; (8015290 <etharp_query+0x268>)
 8015164:	4613      	mov	r3, r2
 8015166:	005b      	lsls	r3, r3, #1
 8015168:	4413      	add	r3, r2
 801516a:	00db      	lsls	r3, r3, #3
 801516c:	440b      	add	r3, r1
 801516e:	3314      	adds	r3, #20
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	2b01      	cmp	r3, #1
 8015174:	d917      	bls.n	80151a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015176:	4a49      	ldr	r2, [pc, #292]	; (801529c <etharp_query+0x274>)
 8015178:	7c7b      	ldrb	r3, [r7, #17]
 801517a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801517c:	7c7a      	ldrb	r2, [r7, #17]
 801517e:	4613      	mov	r3, r2
 8015180:	005b      	lsls	r3, r3, #1
 8015182:	4413      	add	r3, r2
 8015184:	00db      	lsls	r3, r3, #3
 8015186:	3308      	adds	r3, #8
 8015188:	4a41      	ldr	r2, [pc, #260]	; (8015290 <etharp_query+0x268>)
 801518a:	4413      	add	r3, r2
 801518c:	3304      	adds	r3, #4
 801518e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015192:	9200      	str	r2, [sp, #0]
 8015194:	697a      	ldr	r2, [r7, #20]
 8015196:	6879      	ldr	r1, [r7, #4]
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f001 fc83 	bl	8016aa4 <ethernet_output>
 801519e:	4603      	mov	r3, r0
 80151a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80151a4:	e067      	b.n	8015276 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80151a6:	7c7a      	ldrb	r2, [r7, #17]
 80151a8:	4939      	ldr	r1, [pc, #228]	; (8015290 <etharp_query+0x268>)
 80151aa:	4613      	mov	r3, r2
 80151ac:	005b      	lsls	r3, r3, #1
 80151ae:	4413      	add	r3, r2
 80151b0:	00db      	lsls	r3, r3, #3
 80151b2:	440b      	add	r3, r1
 80151b4:	3314      	adds	r3, #20
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	2b01      	cmp	r3, #1
 80151ba:	d15c      	bne.n	8015276 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80151bc:	2300      	movs	r3, #0
 80151be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80151c4:	e01c      	b.n	8015200 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80151c6:	69fb      	ldr	r3, [r7, #28]
 80151c8:	895a      	ldrh	r2, [r3, #10]
 80151ca:	69fb      	ldr	r3, [r7, #28]
 80151cc:	891b      	ldrh	r3, [r3, #8]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d10a      	bne.n	80151e8 <etharp_query+0x1c0>
 80151d2:	69fb      	ldr	r3, [r7, #28]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d006      	beq.n	80151e8 <etharp_query+0x1c0>
 80151da:	4b2a      	ldr	r3, [pc, #168]	; (8015284 <etharp_query+0x25c>)
 80151dc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80151e0:	492f      	ldr	r1, [pc, #188]	; (80152a0 <etharp_query+0x278>)
 80151e2:	482a      	ldr	r0, [pc, #168]	; (801528c <etharp_query+0x264>)
 80151e4:	f002 f80a 	bl	80171fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	7b1b      	ldrb	r3, [r3, #12]
 80151ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d002      	beq.n	80151fa <etharp_query+0x1d2>
        copy_needed = 1;
 80151f4:	2301      	movs	r3, #1
 80151f6:	61bb      	str	r3, [r7, #24]
        break;
 80151f8:	e005      	b.n	8015206 <etharp_query+0x1de>
      }
      p = p->next;
 80151fa:	69fb      	ldr	r3, [r7, #28]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015200:	69fb      	ldr	r3, [r7, #28]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d1df      	bne.n	80151c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d007      	beq.n	801521c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015212:	200e      	movs	r0, #14
 8015214:	f7f8 fd64 	bl	800dce0 <pbuf_clone>
 8015218:	61f8      	str	r0, [r7, #28]
 801521a:	e004      	b.n	8015226 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015220:	69f8      	ldr	r0, [r7, #28]
 8015222:	f7f8 fb71 	bl	800d908 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d021      	beq.n	8015270 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801522c:	7c7a      	ldrb	r2, [r7, #17]
 801522e:	4918      	ldr	r1, [pc, #96]	; (8015290 <etharp_query+0x268>)
 8015230:	4613      	mov	r3, r2
 8015232:	005b      	lsls	r3, r3, #1
 8015234:	4413      	add	r3, r2
 8015236:	00db      	lsls	r3, r3, #3
 8015238:	440b      	add	r3, r1
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d00a      	beq.n	8015256 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015240:	7c7a      	ldrb	r2, [r7, #17]
 8015242:	4913      	ldr	r1, [pc, #76]	; (8015290 <etharp_query+0x268>)
 8015244:	4613      	mov	r3, r2
 8015246:	005b      	lsls	r3, r3, #1
 8015248:	4413      	add	r3, r2
 801524a:	00db      	lsls	r3, r3, #3
 801524c:	440b      	add	r3, r1
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4618      	mov	r0, r3
 8015252:	f7f8 fab3 	bl	800d7bc <pbuf_free>
      }
      arp_table[i].q = p;
 8015256:	7c7a      	ldrb	r2, [r7, #17]
 8015258:	490d      	ldr	r1, [pc, #52]	; (8015290 <etharp_query+0x268>)
 801525a:	4613      	mov	r3, r2
 801525c:	005b      	lsls	r3, r3, #1
 801525e:	4413      	add	r3, r2
 8015260:	00db      	lsls	r3, r3, #3
 8015262:	440b      	add	r3, r1
 8015264:	69fa      	ldr	r2, [r7, #28]
 8015266:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015268:	2300      	movs	r3, #0
 801526a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801526e:	e002      	b.n	8015276 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015270:	23ff      	movs	r3, #255	; 0xff
 8015272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801527a:	4618      	mov	r0, r3
 801527c:	3728      	adds	r7, #40	; 0x28
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	0801b54c 	.word	0x0801b54c
 8015288:	0801b6f8 	.word	0x0801b6f8
 801528c:	0801b5c4 	.word	0x0801b5c4
 8015290:	2001a714 	.word	0x2001a714
 8015294:	0801b708 	.word	0x0801b708
 8015298:	0801b6ec 	.word	0x0801b6ec
 801529c:	2001a804 	.word	0x2001a804
 80152a0:	0801b730 	.word	0x0801b730

080152a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b08a      	sub	sp, #40	; 0x28
 80152a8:	af02      	add	r7, sp, #8
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80152b2:	2300      	movs	r3, #0
 80152b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d106      	bne.n	80152ca <etharp_raw+0x26>
 80152bc:	4b3a      	ldr	r3, [pc, #232]	; (80153a8 <etharp_raw+0x104>)
 80152be:	f240 4257 	movw	r2, #1111	; 0x457
 80152c2:	493a      	ldr	r1, [pc, #232]	; (80153ac <etharp_raw+0x108>)
 80152c4:	483a      	ldr	r0, [pc, #232]	; (80153b0 <etharp_raw+0x10c>)
 80152c6:	f001 ff99 	bl	80171fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80152ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152ce:	211c      	movs	r1, #28
 80152d0:	200e      	movs	r0, #14
 80152d2:	f7f7 ff87 	bl	800d1e4 <pbuf_alloc>
 80152d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d102      	bne.n	80152e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80152de:	f04f 33ff 	mov.w	r3, #4294967295
 80152e2:	e05d      	b.n	80153a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	895b      	ldrh	r3, [r3, #10]
 80152e8:	2b1b      	cmp	r3, #27
 80152ea:	d806      	bhi.n	80152fa <etharp_raw+0x56>
 80152ec:	4b2e      	ldr	r3, [pc, #184]	; (80153a8 <etharp_raw+0x104>)
 80152ee:	f240 4262 	movw	r2, #1122	; 0x462
 80152f2:	4930      	ldr	r1, [pc, #192]	; (80153b4 <etharp_raw+0x110>)
 80152f4:	482e      	ldr	r0, [pc, #184]	; (80153b0 <etharp_raw+0x10c>)
 80152f6:	f001 ff81 	bl	80171fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015300:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015302:	4618      	mov	r0, r3
 8015304:	f7f6 fcce 	bl	800bca4 <lwip_htons>
 8015308:	4603      	mov	r3, r0
 801530a:	461a      	mov	r2, r3
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015316:	2b06      	cmp	r3, #6
 8015318:	d006      	beq.n	8015328 <etharp_raw+0x84>
 801531a:	4b23      	ldr	r3, [pc, #140]	; (80153a8 <etharp_raw+0x104>)
 801531c:	f240 4269 	movw	r2, #1129	; 0x469
 8015320:	4925      	ldr	r1, [pc, #148]	; (80153b8 <etharp_raw+0x114>)
 8015322:	4823      	ldr	r0, [pc, #140]	; (80153b0 <etharp_raw+0x10c>)
 8015324:	f001 ff6a 	bl	80171fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	3308      	adds	r3, #8
 801532c:	2206      	movs	r2, #6
 801532e:	6839      	ldr	r1, [r7, #0]
 8015330:	4618      	mov	r0, r3
 8015332:	f001 fe53 	bl	8016fdc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	3312      	adds	r3, #18
 801533a:	2206      	movs	r2, #6
 801533c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801533e:	4618      	mov	r0, r3
 8015340:	f001 fe4c 	bl	8016fdc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015344:	697b      	ldr	r3, [r7, #20]
 8015346:	330e      	adds	r3, #14
 8015348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801534a:	6812      	ldr	r2, [r2, #0]
 801534c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	3318      	adds	r3, #24
 8015352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015354:	6812      	ldr	r2, [r2, #0]
 8015356:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	2200      	movs	r2, #0
 801535c:	701a      	strb	r2, [r3, #0]
 801535e:	2200      	movs	r2, #0
 8015360:	f042 0201 	orr.w	r2, r2, #1
 8015364:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	2200      	movs	r2, #0
 801536a:	f042 0208 	orr.w	r2, r2, #8
 801536e:	709a      	strb	r2, [r3, #2]
 8015370:	2200      	movs	r2, #0
 8015372:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	2206      	movs	r2, #6
 8015378:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	2204      	movs	r2, #4
 801537e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015380:	f640 0306 	movw	r3, #2054	; 0x806
 8015384:	9300      	str	r3, [sp, #0]
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	69b9      	ldr	r1, [r7, #24]
 801538c:	68f8      	ldr	r0, [r7, #12]
 801538e:	f001 fb89 	bl	8016aa4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015392:	69b8      	ldr	r0, [r7, #24]
 8015394:	f7f8 fa12 	bl	800d7bc <pbuf_free>
  p = NULL;
 8015398:	2300      	movs	r3, #0
 801539a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801539c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3720      	adds	r7, #32
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}
 80153a8:	0801b54c 	.word	0x0801b54c
 80153ac:	0801b69c 	.word	0x0801b69c
 80153b0:	0801b5c4 	.word	0x0801b5c4
 80153b4:	0801b74c 	.word	0x0801b74c
 80153b8:	0801b780 	.word	0x0801b780

080153bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b088      	sub	sp, #32
 80153c0:	af04      	add	r7, sp, #16
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80153d8:	2201      	movs	r2, #1
 80153da:	9203      	str	r2, [sp, #12]
 80153dc:	68ba      	ldr	r2, [r7, #8]
 80153de:	9202      	str	r2, [sp, #8]
 80153e0:	4a06      	ldr	r2, [pc, #24]	; (80153fc <etharp_request_dst+0x40>)
 80153e2:	9201      	str	r2, [sp, #4]
 80153e4:	9300      	str	r3, [sp, #0]
 80153e6:	4603      	mov	r3, r0
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	68f8      	ldr	r0, [r7, #12]
 80153ec:	f7ff ff5a 	bl	80152a4 <etharp_raw>
 80153f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3710      	adds	r7, #16
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	0801d26c 	.word	0x0801d26c

08015400 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801540a:	4a05      	ldr	r2, [pc, #20]	; (8015420 <etharp_request+0x20>)
 801540c:	6839      	ldr	r1, [r7, #0]
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7ff ffd4 	bl	80153bc <etharp_request_dst>
 8015414:	4603      	mov	r3, r0
}
 8015416:	4618      	mov	r0, r3
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	0801d264 	.word	0x0801d264

08015424 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b08e      	sub	sp, #56	; 0x38
 8015428:	af04      	add	r7, sp, #16
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801542e:	4b79      	ldr	r3, [pc, #484]	; (8015614 <icmp_input+0x1f0>)
 8015430:	689b      	ldr	r3, [r3, #8]
 8015432:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015436:	781b      	ldrb	r3, [r3, #0]
 8015438:	f003 030f 	and.w	r3, r3, #15
 801543c:	b2db      	uxtb	r3, r3
 801543e:	009b      	lsls	r3, r3, #2
 8015440:	b2db      	uxtb	r3, r3
 8015442:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015446:	2b13      	cmp	r3, #19
 8015448:	f240 80cd 	bls.w	80155e6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	895b      	ldrh	r3, [r3, #10]
 8015450:	2b03      	cmp	r3, #3
 8015452:	f240 80ca 	bls.w	80155ea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015460:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015464:	2b00      	cmp	r3, #0
 8015466:	f000 80b7 	beq.w	80155d8 <icmp_input+0x1b4>
 801546a:	2b08      	cmp	r3, #8
 801546c:	f040 80b7 	bne.w	80155de <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015470:	4b69      	ldr	r3, [pc, #420]	; (8015618 <icmp_input+0x1f4>)
 8015472:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015474:	4b67      	ldr	r3, [pc, #412]	; (8015614 <icmp_input+0x1f0>)
 8015476:	695b      	ldr	r3, [r3, #20]
 8015478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801547c:	2be0      	cmp	r3, #224	; 0xe0
 801547e:	f000 80bb 	beq.w	80155f8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015482:	4b64      	ldr	r3, [pc, #400]	; (8015614 <icmp_input+0x1f0>)
 8015484:	695b      	ldr	r3, [r3, #20]
 8015486:	4a63      	ldr	r2, [pc, #396]	; (8015614 <icmp_input+0x1f0>)
 8015488:	6812      	ldr	r2, [r2, #0]
 801548a:	4611      	mov	r1, r2
 801548c:	4618      	mov	r0, r3
 801548e:	f000 fbed 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	f040 80b1 	bne.w	80155fc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	891b      	ldrh	r3, [r3, #8]
 801549e:	2b07      	cmp	r3, #7
 80154a0:	f240 80a5 	bls.w	80155ee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80154a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154a6:	330e      	adds	r3, #14
 80154a8:	4619      	mov	r1, r3
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7f8 f8f0 	bl	800d690 <pbuf_add_header>
 80154b0:	4603      	mov	r3, r0
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d04b      	beq.n	801554e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	891a      	ldrh	r2, [r3, #8]
 80154ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154bc:	4413      	add	r3, r2
 80154be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	891b      	ldrh	r3, [r3, #8]
 80154c4:	8b7a      	ldrh	r2, [r7, #26]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	f0c0 809a 	bcc.w	8015600 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80154cc:	8b7b      	ldrh	r3, [r7, #26]
 80154ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154d2:	4619      	mov	r1, r3
 80154d4:	200e      	movs	r0, #14
 80154d6:	f7f7 fe85 	bl	800d1e4 <pbuf_alloc>
 80154da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	f000 8090 	beq.w	8015604 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	895b      	ldrh	r3, [r3, #10]
 80154e8:	461a      	mov	r2, r3
 80154ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154ec:	3308      	adds	r3, #8
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d203      	bcs.n	80154fa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80154f2:	6978      	ldr	r0, [r7, #20]
 80154f4:	f7f8 f962 	bl	800d7bc <pbuf_free>
          goto icmperr;
 80154f8:	e085      	b.n	8015606 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015502:	4618      	mov	r0, r3
 8015504:	f001 fd6a 	bl	8016fdc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801550a:	4619      	mov	r1, r3
 801550c:	6978      	ldr	r0, [r7, #20]
 801550e:	f7f8 f8cf 	bl	800d6b0 <pbuf_remove_header>
 8015512:	4603      	mov	r3, r0
 8015514:	2b00      	cmp	r3, #0
 8015516:	d009      	beq.n	801552c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015518:	4b40      	ldr	r3, [pc, #256]	; (801561c <icmp_input+0x1f8>)
 801551a:	22b6      	movs	r2, #182	; 0xb6
 801551c:	4940      	ldr	r1, [pc, #256]	; (8015620 <icmp_input+0x1fc>)
 801551e:	4841      	ldr	r0, [pc, #260]	; (8015624 <icmp_input+0x200>)
 8015520:	f001 fe6c 	bl	80171fc <iprintf>
          pbuf_free(r);
 8015524:	6978      	ldr	r0, [r7, #20]
 8015526:	f7f8 f949 	bl	800d7bc <pbuf_free>
          goto icmperr;
 801552a:	e06c      	b.n	8015606 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801552c:	6879      	ldr	r1, [r7, #4]
 801552e:	6978      	ldr	r0, [r7, #20]
 8015530:	f7f8 fa68 	bl	800da04 <pbuf_copy>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d003      	beq.n	8015542 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801553a:	6978      	ldr	r0, [r7, #20]
 801553c:	f7f8 f93e 	bl	800d7bc <pbuf_free>
          goto icmperr;
 8015540:	e061      	b.n	8015606 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7f8 f93a 	bl	800d7bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015548:	697b      	ldr	r3, [r7, #20]
 801554a:	607b      	str	r3, [r7, #4]
 801554c:	e00f      	b.n	801556e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801554e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015550:	330e      	adds	r3, #14
 8015552:	4619      	mov	r1, r3
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f8 f8ab 	bl	800d6b0 <pbuf_remove_header>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d006      	beq.n	801556e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015560:	4b2e      	ldr	r3, [pc, #184]	; (801561c <icmp_input+0x1f8>)
 8015562:	22c7      	movs	r2, #199	; 0xc7
 8015564:	4930      	ldr	r1, [pc, #192]	; (8015628 <icmp_input+0x204>)
 8015566:	482f      	ldr	r0, [pc, #188]	; (8015624 <icmp_input+0x200>)
 8015568:	f001 fe48 	bl	80171fc <iprintf>
          goto icmperr;
 801556c:	e04b      	b.n	8015606 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015576:	4619      	mov	r1, r3
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f7f8 f889 	bl	800d690 <pbuf_add_header>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	d12b      	bne.n	80155dc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015592:	4b20      	ldr	r3, [pc, #128]	; (8015614 <icmp_input+0x1f0>)
 8015594:	691a      	ldr	r2, [r3, #16]
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	2200      	movs	r2, #0
 801559e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80155a0:	693b      	ldr	r3, [r7, #16]
 80155a2:	2200      	movs	r2, #0
 80155a4:	709a      	strb	r2, [r3, #2]
 80155a6:	2200      	movs	r2, #0
 80155a8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	22ff      	movs	r2, #255	; 0xff
 80155ae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2200      	movs	r2, #0
 80155b4:	729a      	strb	r2, [r3, #10]
 80155b6:	2200      	movs	r2, #0
 80155b8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	9302      	str	r3, [sp, #8]
 80155be:	2301      	movs	r3, #1
 80155c0:	9301      	str	r3, [sp, #4]
 80155c2:	2300      	movs	r3, #0
 80155c4:	9300      	str	r3, [sp, #0]
 80155c6:	23ff      	movs	r3, #255	; 0xff
 80155c8:	2200      	movs	r2, #0
 80155ca:	69f9      	ldr	r1, [r7, #28]
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f000 fa75 	bl	8015abc <ip4_output_if>
 80155d2:	4603      	mov	r3, r0
 80155d4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80155d6:	e001      	b.n	80155dc <icmp_input+0x1b8>
      break;
 80155d8:	bf00      	nop
 80155da:	e000      	b.n	80155de <icmp_input+0x1ba>
      break;
 80155dc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f7f8 f8ec 	bl	800d7bc <pbuf_free>
  return;
 80155e4:	e013      	b.n	801560e <icmp_input+0x1ea>
    goto lenerr;
 80155e6:	bf00      	nop
 80155e8:	e002      	b.n	80155f0 <icmp_input+0x1cc>
    goto lenerr;
 80155ea:	bf00      	nop
 80155ec:	e000      	b.n	80155f0 <icmp_input+0x1cc>
        goto lenerr;
 80155ee:	bf00      	nop
lenerr:
  pbuf_free(p);
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7f8 f8e3 	bl	800d7bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80155f6:	e00a      	b.n	801560e <icmp_input+0x1ea>
        goto icmperr;
 80155f8:	bf00      	nop
 80155fa:	e004      	b.n	8015606 <icmp_input+0x1e2>
        goto icmperr;
 80155fc:	bf00      	nop
 80155fe:	e002      	b.n	8015606 <icmp_input+0x1e2>
          goto icmperr;
 8015600:	bf00      	nop
 8015602:	e000      	b.n	8015606 <icmp_input+0x1e2>
          goto icmperr;
 8015604:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f7f8 f8d8 	bl	800d7bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801560c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801560e:	3728      	adds	r7, #40	; 0x28
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}
 8015614:	200058d0 	.word	0x200058d0
 8015618:	200058e4 	.word	0x200058e4
 801561c:	0801b7c4 	.word	0x0801b7c4
 8015620:	0801b7fc 	.word	0x0801b7fc
 8015624:	0801b834 	.word	0x0801b834
 8015628:	0801b85c 	.word	0x0801b85c

0801562c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	460b      	mov	r3, r1
 8015636:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015638:	78fb      	ldrb	r3, [r7, #3]
 801563a:	461a      	mov	r2, r3
 801563c:	2103      	movs	r1, #3
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	f000 f814 	bl	801566c <icmp_send_response>
}
 8015644:	bf00      	nop
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015658:	78fb      	ldrb	r3, [r7, #3]
 801565a:	461a      	mov	r2, r3
 801565c:	210b      	movs	r1, #11
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f000 f804 	bl	801566c <icmp_send_response>
}
 8015664:	bf00      	nop
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b08c      	sub	sp, #48	; 0x30
 8015670:	af04      	add	r7, sp, #16
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	460b      	mov	r3, r1
 8015676:	70fb      	strb	r3, [r7, #3]
 8015678:	4613      	mov	r3, r2
 801567a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801567c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015680:	2124      	movs	r1, #36	; 0x24
 8015682:	2022      	movs	r0, #34	; 0x22
 8015684:	f7f7 fdae 	bl	800d1e4 <pbuf_alloc>
 8015688:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d04c      	beq.n	801572a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	895b      	ldrh	r3, [r3, #10]
 8015694:	2b23      	cmp	r3, #35	; 0x23
 8015696:	d806      	bhi.n	80156a6 <icmp_send_response+0x3a>
 8015698:	4b26      	ldr	r3, [pc, #152]	; (8015734 <icmp_send_response+0xc8>)
 801569a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801569e:	4926      	ldr	r1, [pc, #152]	; (8015738 <icmp_send_response+0xcc>)
 80156a0:	4826      	ldr	r0, [pc, #152]	; (801573c <icmp_send_response+0xd0>)
 80156a2:	f001 fdab 	bl	80171fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	78fa      	ldrb	r2, [r7, #3]
 80156b6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	78ba      	ldrb	r2, [r7, #2]
 80156bc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	2200      	movs	r2, #0
 80156c2:	711a      	strb	r2, [r3, #4]
 80156c4:	2200      	movs	r2, #0
 80156c6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	2200      	movs	r2, #0
 80156cc:	719a      	strb	r2, [r3, #6]
 80156ce:	2200      	movs	r2, #0
 80156d0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	f103 0008 	add.w	r0, r3, #8
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	221c      	movs	r2, #28
 80156e0:	4619      	mov	r1, r3
 80156e2:	f001 fc7b 	bl	8016fdc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80156ec:	f107 030c 	add.w	r3, r7, #12
 80156f0:	4618      	mov	r0, r3
 80156f2:	f000 f825 	bl	8015740 <ip4_route>
 80156f6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d011      	beq.n	8015722 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	2200      	movs	r2, #0
 8015702:	709a      	strb	r2, [r3, #2]
 8015704:	2200      	movs	r2, #0
 8015706:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015708:	f107 020c 	add.w	r2, r7, #12
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	9302      	str	r3, [sp, #8]
 8015710:	2301      	movs	r3, #1
 8015712:	9301      	str	r3, [sp, #4]
 8015714:	2300      	movs	r3, #0
 8015716:	9300      	str	r3, [sp, #0]
 8015718:	23ff      	movs	r3, #255	; 0xff
 801571a:	2100      	movs	r1, #0
 801571c:	69f8      	ldr	r0, [r7, #28]
 801571e:	f000 f9cd 	bl	8015abc <ip4_output_if>
  }
  pbuf_free(q);
 8015722:	69f8      	ldr	r0, [r7, #28]
 8015724:	f7f8 f84a 	bl	800d7bc <pbuf_free>
 8015728:	e000      	b.n	801572c <icmp_send_response+0xc0>
    return;
 801572a:	bf00      	nop
}
 801572c:	3720      	adds	r7, #32
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	0801b7c4 	.word	0x0801b7c4
 8015738:	0801b890 	.word	0x0801b890
 801573c:	0801b834 	.word	0x0801b834

08015740 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015740:	b480      	push	{r7}
 8015742:	b085      	sub	sp, #20
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015748:	4b33      	ldr	r3, [pc, #204]	; (8015818 <ip4_route+0xd8>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	60fb      	str	r3, [r7, #12]
 801574e:	e036      	b.n	80157be <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015756:	f003 0301 	and.w	r3, r3, #1
 801575a:	b2db      	uxtb	r3, r3
 801575c:	2b00      	cmp	r3, #0
 801575e:	d02b      	beq.n	80157b8 <ip4_route+0x78>
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015766:	089b      	lsrs	r3, r3, #2
 8015768:	f003 0301 	and.w	r3, r3, #1
 801576c:	b2db      	uxtb	r3, r3
 801576e:	2b00      	cmp	r3, #0
 8015770:	d022      	beq.n	80157b8 <ip4_route+0x78>
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	3304      	adds	r3, #4
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d01d      	beq.n	80157b8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	3304      	adds	r3, #4
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	405a      	eors	r2, r3
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	3308      	adds	r3, #8
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	4013      	ands	r3, r2
 8015790:	2b00      	cmp	r3, #0
 8015792:	d101      	bne.n	8015798 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	e038      	b.n	801580a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801579e:	f003 0302 	and.w	r3, r3, #2
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d108      	bne.n	80157b8 <ip4_route+0x78>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	330c      	adds	r3, #12
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d101      	bne.n	80157b8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	e028      	b.n	801580a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	60fb      	str	r3, [r7, #12]
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d1c5      	bne.n	8015750 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80157c4:	4b15      	ldr	r3, [pc, #84]	; (801581c <ip4_route+0xdc>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d01a      	beq.n	8015802 <ip4_route+0xc2>
 80157cc:	4b13      	ldr	r3, [pc, #76]	; (801581c <ip4_route+0xdc>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80157d4:	f003 0301 	and.w	r3, r3, #1
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d012      	beq.n	8015802 <ip4_route+0xc2>
 80157dc:	4b0f      	ldr	r3, [pc, #60]	; (801581c <ip4_route+0xdc>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80157e4:	f003 0304 	and.w	r3, r3, #4
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d00a      	beq.n	8015802 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80157ec:	4b0b      	ldr	r3, [pc, #44]	; (801581c <ip4_route+0xdc>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	3304      	adds	r3, #4
 80157f2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d004      	beq.n	8015802 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	2b7f      	cmp	r3, #127	; 0x7f
 8015800:	d101      	bne.n	8015806 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015802:	2300      	movs	r3, #0
 8015804:	e001      	b.n	801580a <ip4_route+0xca>
  }

  return netif_default;
 8015806:	4b05      	ldr	r3, [pc, #20]	; (801581c <ip4_route+0xdc>)
 8015808:	681b      	ldr	r3, [r3, #0]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3714      	adds	r7, #20
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr
 8015816:	bf00      	nop
 8015818:	2001a6a8 	.word	0x2001a6a8
 801581c:	2001a6ac 	.word	0x2001a6ac

08015820 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b082      	sub	sp, #8
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801582e:	f003 0301 	and.w	r3, r3, #1
 8015832:	b2db      	uxtb	r3, r3
 8015834:	2b00      	cmp	r3, #0
 8015836:	d016      	beq.n	8015866 <ip4_input_accept+0x46>
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	3304      	adds	r3, #4
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d011      	beq.n	8015866 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015842:	4b0b      	ldr	r3, [pc, #44]	; (8015870 <ip4_input_accept+0x50>)
 8015844:	695a      	ldr	r2, [r3, #20]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	3304      	adds	r3, #4
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	429a      	cmp	r2, r3
 801584e:	d008      	beq.n	8015862 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015850:	4b07      	ldr	r3, [pc, #28]	; (8015870 <ip4_input_accept+0x50>)
 8015852:	695b      	ldr	r3, [r3, #20]
 8015854:	6879      	ldr	r1, [r7, #4]
 8015856:	4618      	mov	r0, r3
 8015858:	f000 fa08 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 801585c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801585e:	2b00      	cmp	r3, #0
 8015860:	d001      	beq.n	8015866 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015862:	2301      	movs	r3, #1
 8015864:	e000      	b.n	8015868 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015866:	2300      	movs	r3, #0
}
 8015868:	4618      	mov	r0, r3
 801586a:	3708      	adds	r7, #8
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	200058d0 	.word	0x200058d0

08015874 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	685b      	ldr	r3, [r3, #4]
 8015882:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	781b      	ldrb	r3, [r3, #0]
 8015888:	091b      	lsrs	r3, r3, #4
 801588a:	b2db      	uxtb	r3, r3
 801588c:	2b04      	cmp	r3, #4
 801588e:	d004      	beq.n	801589a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f7f7 ff93 	bl	800d7bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	e107      	b.n	8015aaa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f003 030f 	and.w	r3, r3, #15
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	885b      	ldrh	r3, [r3, #2]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7f6 f9f7 	bl	800bca4 <lwip_htons>
 80158b6:	4603      	mov	r3, r0
 80158b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	891b      	ldrh	r3, [r3, #8]
 80158be:	89ba      	ldrh	r2, [r7, #12]
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d204      	bcs.n	80158ce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80158c4:	89bb      	ldrh	r3, [r7, #12]
 80158c6:	4619      	mov	r1, r3
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7f7 fdf1 	bl	800d4b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	895b      	ldrh	r3, [r3, #10]
 80158d2:	89fa      	ldrh	r2, [r7, #14]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d807      	bhi.n	80158e8 <ip4_input+0x74>
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	891b      	ldrh	r3, [r3, #8]
 80158dc:	89ba      	ldrh	r2, [r7, #12]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d802      	bhi.n	80158e8 <ip4_input+0x74>
 80158e2:	89fb      	ldrh	r3, [r7, #14]
 80158e4:	2b13      	cmp	r3, #19
 80158e6:	d804      	bhi.n	80158f2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7f7 ff67 	bl	800d7bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80158ee:	2300      	movs	r3, #0
 80158f0:	e0db      	b.n	8015aaa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	691b      	ldr	r3, [r3, #16]
 80158f6:	4a6f      	ldr	r2, [pc, #444]	; (8015ab4 <ip4_input+0x240>)
 80158f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	4a6d      	ldr	r2, [pc, #436]	; (8015ab4 <ip4_input+0x240>)
 8015900:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015902:	4b6c      	ldr	r3, [pc, #432]	; (8015ab4 <ip4_input+0x240>)
 8015904:	695b      	ldr	r3, [r3, #20]
 8015906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801590a:	2be0      	cmp	r3, #224	; 0xe0
 801590c:	d112      	bne.n	8015934 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015914:	f003 0301 	and.w	r3, r3, #1
 8015918:	b2db      	uxtb	r3, r3
 801591a:	2b00      	cmp	r3, #0
 801591c:	d007      	beq.n	801592e <ip4_input+0xba>
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	3304      	adds	r3, #4
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d002      	beq.n	801592e <ip4_input+0xba>
      netif = inp;
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	613b      	str	r3, [r7, #16]
 801592c:	e02a      	b.n	8015984 <ip4_input+0x110>
    } else {
      netif = NULL;
 801592e:	2300      	movs	r3, #0
 8015930:	613b      	str	r3, [r7, #16]
 8015932:	e027      	b.n	8015984 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015934:	6838      	ldr	r0, [r7, #0]
 8015936:	f7ff ff73 	bl	8015820 <ip4_input_accept>
 801593a:	4603      	mov	r3, r0
 801593c:	2b00      	cmp	r3, #0
 801593e:	d002      	beq.n	8015946 <ip4_input+0xd2>
      netif = inp;
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	613b      	str	r3, [r7, #16]
 8015944:	e01e      	b.n	8015984 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015946:	2300      	movs	r3, #0
 8015948:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801594a:	4b5a      	ldr	r3, [pc, #360]	; (8015ab4 <ip4_input+0x240>)
 801594c:	695b      	ldr	r3, [r3, #20]
 801594e:	b2db      	uxtb	r3, r3
 8015950:	2b7f      	cmp	r3, #127	; 0x7f
 8015952:	d017      	beq.n	8015984 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015954:	4b58      	ldr	r3, [pc, #352]	; (8015ab8 <ip4_input+0x244>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	613b      	str	r3, [r7, #16]
 801595a:	e00e      	b.n	801597a <ip4_input+0x106>
          if (netif == inp) {
 801595c:	693a      	ldr	r2, [r7, #16]
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	429a      	cmp	r2, r3
 8015962:	d006      	beq.n	8015972 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015964:	6938      	ldr	r0, [r7, #16]
 8015966:	f7ff ff5b 	bl	8015820 <ip4_input_accept>
 801596a:	4603      	mov	r3, r0
 801596c:	2b00      	cmp	r3, #0
 801596e:	d108      	bne.n	8015982 <ip4_input+0x10e>
 8015970:	e000      	b.n	8015974 <ip4_input+0x100>
            continue;
 8015972:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	613b      	str	r3, [r7, #16]
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d1ed      	bne.n	801595c <ip4_input+0xe8>
 8015980:	e000      	b.n	8015984 <ip4_input+0x110>
            break;
 8015982:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015984:	4b4b      	ldr	r3, [pc, #300]	; (8015ab4 <ip4_input+0x240>)
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	6839      	ldr	r1, [r7, #0]
 801598a:	4618      	mov	r0, r3
 801598c:	f000 f96e 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 8015990:	4603      	mov	r3, r0
 8015992:	2b00      	cmp	r3, #0
 8015994:	d105      	bne.n	80159a2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015996:	4b47      	ldr	r3, [pc, #284]	; (8015ab4 <ip4_input+0x240>)
 8015998:	691b      	ldr	r3, [r3, #16]
 801599a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801599e:	2be0      	cmp	r3, #224	; 0xe0
 80159a0:	d104      	bne.n	80159ac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f7f7 ff0a 	bl	800d7bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80159a8:	2300      	movs	r3, #0
 80159aa:	e07e      	b.n	8015aaa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d104      	bne.n	80159bc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f7f7 ff02 	bl	800d7bc <pbuf_free>
    return ERR_OK;
 80159b8:	2300      	movs	r3, #0
 80159ba:	e076      	b.n	8015aaa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	88db      	ldrh	r3, [r3, #6]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	461a      	mov	r2, r3
 80159c4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80159c8:	4013      	ands	r3, r2
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d00b      	beq.n	80159e6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80159ce:	6878      	ldr	r0, [r7, #4]
 80159d0:	f000 fc9a 	bl	8016308 <ip4_reass>
 80159d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d101      	bne.n	80159e0 <ip4_input+0x16c>
      return ERR_OK;
 80159dc:	2300      	movs	r3, #0
 80159de:	e064      	b.n	8015aaa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	685b      	ldr	r3, [r3, #4]
 80159e4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80159e6:	4a33      	ldr	r2, [pc, #204]	; (8015ab4 <ip4_input+0x240>)
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80159ec:	4a31      	ldr	r2, [pc, #196]	; (8015ab4 <ip4_input+0x240>)
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80159f2:	4a30      	ldr	r2, [pc, #192]	; (8015ab4 <ip4_input+0x240>)
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	f003 030f 	and.w	r3, r3, #15
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	4b2a      	ldr	r3, [pc, #168]	; (8015ab4 <ip4_input+0x240>)
 8015a0a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015a0c:	89fb      	ldrh	r3, [r7, #14]
 8015a0e:	4619      	mov	r1, r3
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f7f7 fe4d 	bl	800d6b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	7a5b      	ldrb	r3, [r3, #9]
 8015a1a:	2b11      	cmp	r3, #17
 8015a1c:	d006      	beq.n	8015a2c <ip4_input+0x1b8>
 8015a1e:	2b11      	cmp	r3, #17
 8015a20:	dc13      	bgt.n	8015a4a <ip4_input+0x1d6>
 8015a22:	2b01      	cmp	r3, #1
 8015a24:	d00c      	beq.n	8015a40 <ip4_input+0x1cc>
 8015a26:	2b06      	cmp	r3, #6
 8015a28:	d005      	beq.n	8015a36 <ip4_input+0x1c2>
 8015a2a:	e00e      	b.n	8015a4a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015a2c:	6839      	ldr	r1, [r7, #0]
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f7fe fc68 	bl	8014304 <udp_input>
        break;
 8015a34:	e026      	b.n	8015a84 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015a36:	6839      	ldr	r1, [r7, #0]
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f7fa f81b 	bl	800fa74 <tcp_input>
        break;
 8015a3e:	e021      	b.n	8015a84 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015a40:	6839      	ldr	r1, [r7, #0]
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f7ff fcee 	bl	8015424 <icmp_input>
        break;
 8015a48:	e01c      	b.n	8015a84 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015a4a:	4b1a      	ldr	r3, [pc, #104]	; (8015ab4 <ip4_input+0x240>)
 8015a4c:	695b      	ldr	r3, [r3, #20]
 8015a4e:	6939      	ldr	r1, [r7, #16]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f90b 	bl	8015c6c <ip4_addr_isbroadcast_u32>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d10f      	bne.n	8015a7c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a5c:	4b15      	ldr	r3, [pc, #84]	; (8015ab4 <ip4_input+0x240>)
 8015a5e:	695b      	ldr	r3, [r3, #20]
 8015a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015a64:	2be0      	cmp	r3, #224	; 0xe0
 8015a66:	d009      	beq.n	8015a7c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f7f7 fe91 	bl	800d796 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015a74:	2102      	movs	r1, #2
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f7ff fdd8 	bl	801562c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f7f7 fe9d 	bl	800d7bc <pbuf_free>
        break;
 8015a82:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015a84:	4b0b      	ldr	r3, [pc, #44]	; (8015ab4 <ip4_input+0x240>)
 8015a86:	2200      	movs	r2, #0
 8015a88:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015a8a:	4b0a      	ldr	r3, [pc, #40]	; (8015ab4 <ip4_input+0x240>)
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015a90:	4b08      	ldr	r3, [pc, #32]	; (8015ab4 <ip4_input+0x240>)
 8015a92:	2200      	movs	r2, #0
 8015a94:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015a96:	4b07      	ldr	r3, [pc, #28]	; (8015ab4 <ip4_input+0x240>)
 8015a98:	2200      	movs	r2, #0
 8015a9a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015a9c:	4b05      	ldr	r3, [pc, #20]	; (8015ab4 <ip4_input+0x240>)
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015aa2:	4b04      	ldr	r3, [pc, #16]	; (8015ab4 <ip4_input+0x240>)
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015aa8:	2300      	movs	r3, #0
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3718      	adds	r7, #24
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	200058d0 	.word	0x200058d0
 8015ab8:	2001a6a8 	.word	0x2001a6a8

08015abc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b08a      	sub	sp, #40	; 0x28
 8015ac0:	af04      	add	r7, sp, #16
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	607a      	str	r2, [r7, #4]
 8015ac8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d009      	beq.n	8015ae8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d003      	beq.n	8015ae2 <ip4_output_if+0x26>
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d102      	bne.n	8015ae8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae4:	3304      	adds	r3, #4
 8015ae6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015ae8:	78fa      	ldrb	r2, [r7, #3]
 8015aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aec:	9302      	str	r3, [sp, #8]
 8015aee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015af2:	9301      	str	r3, [sp, #4]
 8015af4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015af8:	9300      	str	r3, [sp, #0]
 8015afa:	4613      	mov	r3, r2
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	6979      	ldr	r1, [r7, #20]
 8015b00:	68f8      	ldr	r0, [r7, #12]
 8015b02:	f000 f805 	bl	8015b10 <ip4_output_if_src>
 8015b06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b088      	sub	sp, #32
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	60f8      	str	r0, [r7, #12]
 8015b18:	60b9      	str	r1, [r7, #8]
 8015b1a:	607a      	str	r2, [r7, #4]
 8015b1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	7b9b      	ldrb	r3, [r3, #14]
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d006      	beq.n	8015b34 <ip4_output_if_src+0x24>
 8015b26:	4b4b      	ldr	r3, [pc, #300]	; (8015c54 <ip4_output_if_src+0x144>)
 8015b28:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015b2c:	494a      	ldr	r1, [pc, #296]	; (8015c58 <ip4_output_if_src+0x148>)
 8015b2e:	484b      	ldr	r0, [pc, #300]	; (8015c5c <ip4_output_if_src+0x14c>)
 8015b30:	f001 fb64 	bl	80171fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d060      	beq.n	8015bfc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015b3a:	2314      	movs	r3, #20
 8015b3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015b3e:	2114      	movs	r1, #20
 8015b40:	68f8      	ldr	r0, [r7, #12]
 8015b42:	f7f7 fda5 	bl	800d690 <pbuf_add_header>
 8015b46:	4603      	mov	r3, r0
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d002      	beq.n	8015b52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015b4c:	f06f 0301 	mvn.w	r3, #1
 8015b50:	e07c      	b.n	8015c4c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	895b      	ldrh	r3, [r3, #10]
 8015b5c:	2b13      	cmp	r3, #19
 8015b5e:	d806      	bhi.n	8015b6e <ip4_output_if_src+0x5e>
 8015b60:	4b3c      	ldr	r3, [pc, #240]	; (8015c54 <ip4_output_if_src+0x144>)
 8015b62:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015b66:	493e      	ldr	r1, [pc, #248]	; (8015c60 <ip4_output_if_src+0x150>)
 8015b68:	483c      	ldr	r0, [pc, #240]	; (8015c5c <ip4_output_if_src+0x14c>)
 8015b6a:	f001 fb47 	bl	80171fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	78fa      	ldrb	r2, [r7, #3]
 8015b72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015b7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681a      	ldr	r2, [r3, #0]
 8015b80:	69fb      	ldr	r3, [r7, #28]
 8015b82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015b84:	8b7b      	ldrh	r3, [r7, #26]
 8015b86:	089b      	lsrs	r3, r3, #2
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	69fb      	ldr	r3, [r7, #28]
 8015b94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015b96:	69fb      	ldr	r3, [r7, #28]
 8015b98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	891b      	ldrh	r3, [r3, #8]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7f6 f87e 	bl	800bca4 <lwip_htons>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	461a      	mov	r2, r3
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015bb0:	69fb      	ldr	r3, [r7, #28]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	719a      	strb	r2, [r3, #6]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015bba:	4b2a      	ldr	r3, [pc, #168]	; (8015c64 <ip4_output_if_src+0x154>)
 8015bbc:	881b      	ldrh	r3, [r3, #0]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7f6 f870 	bl	800bca4 <lwip_htons>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015bcc:	4b25      	ldr	r3, [pc, #148]	; (8015c64 <ip4_output_if_src+0x154>)
 8015bce:	881b      	ldrh	r3, [r3, #0]
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	b29a      	uxth	r2, r3
 8015bd4:	4b23      	ldr	r3, [pc, #140]	; (8015c64 <ip4_output_if_src+0x154>)
 8015bd6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d104      	bne.n	8015be8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015bde:	4b22      	ldr	r3, [pc, #136]	; (8015c68 <ip4_output_if_src+0x158>)
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	69fb      	ldr	r3, [r7, #28]
 8015be4:	60da      	str	r2, [r3, #12]
 8015be6:	e003      	b.n	8015bf0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	69fb      	ldr	r3, [r7, #28]
 8015bee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015bf0:	69fb      	ldr	r3, [r7, #28]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	729a      	strb	r2, [r3, #10]
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	72da      	strb	r2, [r3, #11]
 8015bfa:	e00f      	b.n	8015c1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	895b      	ldrh	r3, [r3, #10]
 8015c00:	2b13      	cmp	r3, #19
 8015c02:	d802      	bhi.n	8015c0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c04:	f06f 0301 	mvn.w	r3, #1
 8015c08:	e020      	b.n	8015c4c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015c10:	69fb      	ldr	r3, [r7, #28]
 8015c12:	691b      	ldr	r3, [r3, #16]
 8015c14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015c16:	f107 0314 	add.w	r3, r7, #20
 8015c1a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d00c      	beq.n	8015c3e <ip4_output_if_src+0x12e>
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	891a      	ldrh	r2, [r3, #8]
 8015c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	d906      	bls.n	8015c3e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c34:	68f8      	ldr	r0, [r7, #12]
 8015c36:	f000 fd61 	bl	80166fc <ip4_frag>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	e006      	b.n	8015c4c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c40:	695b      	ldr	r3, [r3, #20]
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	68f9      	ldr	r1, [r7, #12]
 8015c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c48:	4798      	blx	r3
 8015c4a:	4603      	mov	r3, r0
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3720      	adds	r7, #32
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	0801b8bc 	.word	0x0801b8bc
 8015c58:	0801b8f0 	.word	0x0801b8f0
 8015c5c:	0801b8fc 	.word	0x0801b8fc
 8015c60:	0801b924 	.word	0x0801b924
 8015c64:	2001a806 	.word	0x2001a806
 8015c68:	0801d260 	.word	0x0801d260

08015c6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b085      	sub	sp, #20
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
 8015c74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c80:	d002      	beq.n	8015c88 <ip4_addr_isbroadcast_u32+0x1c>
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d101      	bne.n	8015c8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015c88:	2301      	movs	r3, #1
 8015c8a:	e02a      	b.n	8015ce2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c92:	f003 0302 	and.w	r3, r3, #2
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d101      	bne.n	8015c9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e021      	b.n	8015ce2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015c9e:	683b      	ldr	r3, [r7, #0]
 8015ca0:	3304      	adds	r3, #4
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d101      	bne.n	8015cae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015caa:	2300      	movs	r3, #0
 8015cac:	e019      	b.n	8015ce2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015cae:	68fa      	ldr	r2, [r7, #12]
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	3304      	adds	r3, #4
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	405a      	eors	r2, r3
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	3308      	adds	r3, #8
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	4013      	ands	r3, r2
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d10d      	bne.n	8015ce0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	3308      	adds	r3, #8
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	43da      	mvns	r2, r3
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	3308      	adds	r3, #8
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d101      	bne.n	8015ce0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015cdc:	2301      	movs	r3, #1
 8015cde:	e000      	b.n	8015ce2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015ce0:	2300      	movs	r3, #0
  }
}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3714      	adds	r7, #20
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cec:	4770      	bx	lr
	...

08015cf0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015cfa:	4b12      	ldr	r3, [pc, #72]	; (8015d44 <ip_reass_tmr+0x54>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015d00:	e018      	b.n	8015d34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	7fdb      	ldrb	r3, [r3, #31]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00b      	beq.n	8015d22 <ip_reass_tmr+0x32>
      r->timer--;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	7fdb      	ldrb	r3, [r3, #31]
 8015d0e:	3b01      	subs	r3, #1
 8015d10:	b2da      	uxtb	r2, r3
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	60fb      	str	r3, [r7, #12]
 8015d20:	e008      	b.n	8015d34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015d2c:	68b9      	ldr	r1, [r7, #8]
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f000 f80a 	bl	8015d48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d1e3      	bne.n	8015d02 <ip_reass_tmr+0x12>
    }
  }
}
 8015d3a:	bf00      	nop
 8015d3c:	bf00      	nop
 8015d3e:	3710      	adds	r7, #16
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}
 8015d44:	2001a808 	.word	0x2001a808

08015d48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b088      	sub	sp, #32
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
 8015d50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015d52:	2300      	movs	r3, #0
 8015d54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d105      	bne.n	8015d6a <ip_reass_free_complete_datagram+0x22>
 8015d5e:	4b45      	ldr	r3, [pc, #276]	; (8015e74 <ip_reass_free_complete_datagram+0x12c>)
 8015d60:	22ab      	movs	r2, #171	; 0xab
 8015d62:	4945      	ldr	r1, [pc, #276]	; (8015e78 <ip_reass_free_complete_datagram+0x130>)
 8015d64:	4845      	ldr	r0, [pc, #276]	; (8015e7c <ip_reass_free_complete_datagram+0x134>)
 8015d66:	f001 fa49 	bl	80171fc <iprintf>
  if (prev != NULL) {
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d00a      	beq.n	8015d86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	429a      	cmp	r2, r3
 8015d78:	d005      	beq.n	8015d86 <ip_reass_free_complete_datagram+0x3e>
 8015d7a:	4b3e      	ldr	r3, [pc, #248]	; (8015e74 <ip_reass_free_complete_datagram+0x12c>)
 8015d7c:	22ad      	movs	r2, #173	; 0xad
 8015d7e:	4940      	ldr	r1, [pc, #256]	; (8015e80 <ip_reass_free_complete_datagram+0x138>)
 8015d80:	483e      	ldr	r0, [pc, #248]	; (8015e7c <ip_reass_free_complete_datagram+0x134>)
 8015d82:	f001 fa3b 	bl	80171fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	889b      	ldrh	r3, [r3, #4]
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d12a      	bne.n	8015dee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	6858      	ldr	r0, [r3, #4]
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	3308      	adds	r3, #8
 8015dae:	2214      	movs	r2, #20
 8015db0:	4619      	mov	r1, r3
 8015db2:	f001 f913 	bl	8016fdc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015db6:	2101      	movs	r1, #1
 8015db8:	69b8      	ldr	r0, [r7, #24]
 8015dba:	f7ff fc47 	bl	801564c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015dbe:	69b8      	ldr	r0, [r7, #24]
 8015dc0:	f7f7 fd8a 	bl	800d8d8 <pbuf_clen>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015dc8:	8bfa      	ldrh	r2, [r7, #30]
 8015dca:	8a7b      	ldrh	r3, [r7, #18]
 8015dcc:	4413      	add	r3, r2
 8015dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015dd2:	db05      	blt.n	8015de0 <ip_reass_free_complete_datagram+0x98>
 8015dd4:	4b27      	ldr	r3, [pc, #156]	; (8015e74 <ip_reass_free_complete_datagram+0x12c>)
 8015dd6:	22bc      	movs	r2, #188	; 0xbc
 8015dd8:	492a      	ldr	r1, [pc, #168]	; (8015e84 <ip_reass_free_complete_datagram+0x13c>)
 8015dda:	4828      	ldr	r0, [pc, #160]	; (8015e7c <ip_reass_free_complete_datagram+0x134>)
 8015ddc:	f001 fa0e 	bl	80171fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015de0:	8bfa      	ldrh	r2, [r7, #30]
 8015de2:	8a7b      	ldrh	r3, [r7, #18]
 8015de4:	4413      	add	r3, r2
 8015de6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015de8:	69b8      	ldr	r0, [r7, #24]
 8015dea:	f7f7 fce7 	bl	800d7bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015df4:	e01f      	b.n	8015e36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015df6:	69bb      	ldr	r3, [r7, #24]
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015e00:	697b      	ldr	r3, [r7, #20]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015e06:	68f8      	ldr	r0, [r7, #12]
 8015e08:	f7f7 fd66 	bl	800d8d8 <pbuf_clen>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e10:	8bfa      	ldrh	r2, [r7, #30]
 8015e12:	8a7b      	ldrh	r3, [r7, #18]
 8015e14:	4413      	add	r3, r2
 8015e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e1a:	db05      	blt.n	8015e28 <ip_reass_free_complete_datagram+0xe0>
 8015e1c:	4b15      	ldr	r3, [pc, #84]	; (8015e74 <ip_reass_free_complete_datagram+0x12c>)
 8015e1e:	22cc      	movs	r2, #204	; 0xcc
 8015e20:	4918      	ldr	r1, [pc, #96]	; (8015e84 <ip_reass_free_complete_datagram+0x13c>)
 8015e22:	4816      	ldr	r0, [pc, #88]	; (8015e7c <ip_reass_free_complete_datagram+0x134>)
 8015e24:	f001 f9ea 	bl	80171fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e28:	8bfa      	ldrh	r2, [r7, #30]
 8015e2a:	8a7b      	ldrh	r3, [r7, #18]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015e30:	68f8      	ldr	r0, [r7, #12]
 8015e32:	f7f7 fcc3 	bl	800d7bc <pbuf_free>
  while (p != NULL) {
 8015e36:	69bb      	ldr	r3, [r7, #24]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d1dc      	bne.n	8015df6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 f8ca 	bl	8015fd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015e44:	4b10      	ldr	r3, [pc, #64]	; (8015e88 <ip_reass_free_complete_datagram+0x140>)
 8015e46:	881b      	ldrh	r3, [r3, #0]
 8015e48:	8bfa      	ldrh	r2, [r7, #30]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d905      	bls.n	8015e5a <ip_reass_free_complete_datagram+0x112>
 8015e4e:	4b09      	ldr	r3, [pc, #36]	; (8015e74 <ip_reass_free_complete_datagram+0x12c>)
 8015e50:	22d2      	movs	r2, #210	; 0xd2
 8015e52:	490e      	ldr	r1, [pc, #56]	; (8015e8c <ip_reass_free_complete_datagram+0x144>)
 8015e54:	4809      	ldr	r0, [pc, #36]	; (8015e7c <ip_reass_free_complete_datagram+0x134>)
 8015e56:	f001 f9d1 	bl	80171fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015e5a:	4b0b      	ldr	r3, [pc, #44]	; (8015e88 <ip_reass_free_complete_datagram+0x140>)
 8015e5c:	881a      	ldrh	r2, [r3, #0]
 8015e5e:	8bfb      	ldrh	r3, [r7, #30]
 8015e60:	1ad3      	subs	r3, r2, r3
 8015e62:	b29a      	uxth	r2, r3
 8015e64:	4b08      	ldr	r3, [pc, #32]	; (8015e88 <ip_reass_free_complete_datagram+0x140>)
 8015e66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015e68:	8bfb      	ldrh	r3, [r7, #30]
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3720      	adds	r7, #32
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	0801b954 	.word	0x0801b954
 8015e78:	0801b990 	.word	0x0801b990
 8015e7c:	0801b99c 	.word	0x0801b99c
 8015e80:	0801b9c4 	.word	0x0801b9c4
 8015e84:	0801b9d8 	.word	0x0801b9d8
 8015e88:	2001a80c 	.word	0x2001a80c
 8015e8c:	0801b9f8 	.word	0x0801b9f8

08015e90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b08a      	sub	sp, #40	; 0x28
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015eae:	4b28      	ldr	r3, [pc, #160]	; (8015f50 <ip_reass_remove_oldest_datagram+0xc0>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015eb4:	e030      	b.n	8015f18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb8:	695a      	ldr	r2, [r3, #20]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	68db      	ldr	r3, [r3, #12]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d10c      	bne.n	8015edc <ip_reass_remove_oldest_datagram+0x4c>
 8015ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec4:	699a      	ldr	r2, [r3, #24]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	691b      	ldr	r3, [r3, #16]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d106      	bne.n	8015edc <ip_reass_remove_oldest_datagram+0x4c>
 8015ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed0:	899a      	ldrh	r2, [r3, #12]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	889b      	ldrh	r3, [r3, #4]
 8015ed6:	b29b      	uxth	r3, r3
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d014      	beq.n	8015f06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015ee2:	6a3b      	ldr	r3, [r7, #32]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d104      	bne.n	8015ef2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	61bb      	str	r3, [r7, #24]
 8015ef0:	e009      	b.n	8015f06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef4:	7fda      	ldrb	r2, [r3, #31]
 8015ef6:	6a3b      	ldr	r3, [r7, #32]
 8015ef8:	7fdb      	ldrb	r3, [r3, #31]
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d803      	bhi.n	8015f06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d001      	beq.n	8015f12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d1cb      	bne.n	8015eb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015f1e:	6a3b      	ldr	r3, [r7, #32]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d008      	beq.n	8015f36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015f24:	69b9      	ldr	r1, [r7, #24]
 8015f26:	6a38      	ldr	r0, [r7, #32]
 8015f28:	f7ff ff0e 	bl	8015d48 <ip_reass_free_complete_datagram>
 8015f2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015f2e:	697a      	ldr	r2, [r7, #20]
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	4413      	add	r3, r2
 8015f34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015f36:	697a      	ldr	r2, [r7, #20]
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	da02      	bge.n	8015f44 <ip_reass_remove_oldest_datagram+0xb4>
 8015f3e:	693b      	ldr	r3, [r7, #16]
 8015f40:	2b01      	cmp	r3, #1
 8015f42:	dcac      	bgt.n	8015e9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015f44:	697b      	ldr	r3, [r7, #20]
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3728      	adds	r7, #40	; 0x28
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	2001a808 	.word	0x2001a808

08015f54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f5e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8015f62:	491b      	ldr	r1, [pc, #108]	; (8015fd0 <ip_reass_enqueue_new_datagram+0x7c>)
 8015f64:	2004      	movs	r0, #4
 8015f66:	f7f6 fcfd 	bl	800c964 <memp_malloc_fn>
 8015f6a:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d113      	bne.n	8015f9a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015f72:	6839      	ldr	r1, [r7, #0]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7ff ff8b 	bl	8015e90 <ip_reass_remove_oldest_datagram>
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	dc06      	bgt.n	8015f90 <ip_reass_enqueue_new_datagram+0x3c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f82:	f44f 7291 	mov.w	r2, #290	; 0x122
 8015f86:	4912      	ldr	r1, [pc, #72]	; (8015fd0 <ip_reass_enqueue_new_datagram+0x7c>)
 8015f88:	2004      	movs	r0, #4
 8015f8a:	f7f6 fceb 	bl	800c964 <memp_malloc_fn>
 8015f8e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d101      	bne.n	8015f9a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015f96:	2300      	movs	r3, #0
 8015f98:	e016      	b.n	8015fc8 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015f9a:	2220      	movs	r2, #32
 8015f9c:	2100      	movs	r1, #0
 8015f9e:	68f8      	ldr	r0, [r7, #12]
 8015fa0:	f001 f844 	bl	801702c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	220f      	movs	r2, #15
 8015fa8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015faa:	4b0a      	ldr	r3, [pc, #40]	; (8015fd4 <ip_reass_enqueue_new_datagram+0x80>)
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015fb2:	4a08      	ldr	r2, [pc, #32]	; (8015fd4 <ip_reass_enqueue_new_datagram+0x80>)
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	3308      	adds	r3, #8
 8015fbc:	2214      	movs	r2, #20
 8015fbe:	6879      	ldr	r1, [r7, #4]
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f001 f80b 	bl	8016fdc <memcpy>
  return ipr;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3710      	adds	r7, #16
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	0801b954 	.word	0x0801b954
 8015fd4:	2001a808 	.word	0x2001a808

08015fd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b082      	sub	sp, #8
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
 8015fe0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015fe2:	4b10      	ldr	r3, [pc, #64]	; (8016024 <ip_reass_dequeue_datagram+0x4c>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d104      	bne.n	8015ff6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a0c      	ldr	r2, [pc, #48]	; (8016024 <ip_reass_dequeue_datagram+0x4c>)
 8015ff2:	6013      	str	r3, [r2, #0]
 8015ff4:	e00d      	b.n	8016012 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d106      	bne.n	801600a <ip_reass_dequeue_datagram+0x32>
 8015ffc:	4b0a      	ldr	r3, [pc, #40]	; (8016028 <ip_reass_dequeue_datagram+0x50>)
 8015ffe:	f240 1245 	movw	r2, #325	; 0x145
 8016002:	490a      	ldr	r1, [pc, #40]	; (801602c <ip_reass_dequeue_datagram+0x54>)
 8016004:	480a      	ldr	r0, [pc, #40]	; (8016030 <ip_reass_dequeue_datagram+0x58>)
 8016006:	f001 f8f9 	bl	80171fc <iprintf>
    prev->next = ipr->next;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681a      	ldr	r2, [r3, #0]
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016012:	6879      	ldr	r1, [r7, #4]
 8016014:	2004      	movs	r0, #4
 8016016:	f7f6 fd23 	bl	800ca60 <memp_free>
}
 801601a:	bf00      	nop
 801601c:	3708      	adds	r7, #8
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	2001a808 	.word	0x2001a808
 8016028:	0801b954 	.word	0x0801b954
 801602c:	0801ba1c 	.word	0x0801ba1c
 8016030:	0801b99c 	.word	0x0801b99c

08016034 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b08c      	sub	sp, #48	; 0x30
 8016038:	af00      	add	r7, sp, #0
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016040:	2300      	movs	r3, #0
 8016042:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016044:	2301      	movs	r3, #1
 8016046:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016048:	68bb      	ldr	r3, [r7, #8]
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	885b      	ldrh	r3, [r3, #2]
 8016052:	b29b      	uxth	r3, r3
 8016054:	4618      	mov	r0, r3
 8016056:	f7f5 fe25 	bl	800bca4 <lwip_htons>
 801605a:	4603      	mov	r3, r0
 801605c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801605e:	69fb      	ldr	r3, [r7, #28]
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	f003 030f 	and.w	r3, r3, #15
 8016066:	b2db      	uxtb	r3, r3
 8016068:	009b      	lsls	r3, r3, #2
 801606a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801606c:	7e7b      	ldrb	r3, [r7, #25]
 801606e:	b29b      	uxth	r3, r3
 8016070:	8b7a      	ldrh	r2, [r7, #26]
 8016072:	429a      	cmp	r2, r3
 8016074:	d202      	bcs.n	801607c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016076:	f04f 33ff 	mov.w	r3, #4294967295
 801607a:	e135      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801607c:	7e7b      	ldrb	r3, [r7, #25]
 801607e:	b29b      	uxth	r3, r3
 8016080:	8b7a      	ldrh	r2, [r7, #26]
 8016082:	1ad3      	subs	r3, r2, r3
 8016084:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	88db      	ldrh	r3, [r3, #6]
 801608a:	b29b      	uxth	r3, r3
 801608c:	4618      	mov	r0, r3
 801608e:	f7f5 fe09 	bl	800bca4 <lwip_htons>
 8016092:	4603      	mov	r3, r0
 8016094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016098:	b29b      	uxth	r3, r3
 801609a:	00db      	lsls	r3, r3, #3
 801609c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80160a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a6:	2200      	movs	r2, #0
 80160a8:	701a      	strb	r2, [r3, #0]
 80160aa:	2200      	movs	r2, #0
 80160ac:	705a      	strb	r2, [r3, #1]
 80160ae:	2200      	movs	r2, #0
 80160b0:	709a      	strb	r2, [r3, #2]
 80160b2:	2200      	movs	r2, #0
 80160b4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80160b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b8:	8afa      	ldrh	r2, [r7, #22]
 80160ba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80160bc:	8afa      	ldrh	r2, [r7, #22]
 80160be:	8b7b      	ldrh	r3, [r7, #26]
 80160c0:	4413      	add	r3, r2
 80160c2:	b29a      	uxth	r2, r3
 80160c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	88db      	ldrh	r3, [r3, #6]
 80160cc:	b29b      	uxth	r3, r3
 80160ce:	8afa      	ldrh	r2, [r7, #22]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d902      	bls.n	80160da <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160d4:	f04f 33ff 	mov.w	r3, #4294967295
 80160d8:	e106      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	627b      	str	r3, [r7, #36]	; 0x24
 80160e0:	e068      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80160e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	889b      	ldrh	r3, [r3, #4]
 80160ec:	b29a      	uxth	r2, r3
 80160ee:	693b      	ldr	r3, [r7, #16]
 80160f0:	889b      	ldrh	r3, [r3, #4]
 80160f2:	b29b      	uxth	r3, r3
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d235      	bcs.n	8016164 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80160f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80160fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016100:	2b00      	cmp	r3, #0
 8016102:	d020      	beq.n	8016146 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016106:	889b      	ldrh	r3, [r3, #4]
 8016108:	b29a      	uxth	r2, r3
 801610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610c:	88db      	ldrh	r3, [r3, #6]
 801610e:	b29b      	uxth	r3, r3
 8016110:	429a      	cmp	r2, r3
 8016112:	d307      	bcc.n	8016124 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	88db      	ldrh	r3, [r3, #6]
 8016118:	b29a      	uxth	r2, r3
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	889b      	ldrh	r3, [r3, #4]
 801611e:	b29b      	uxth	r3, r3
 8016120:	429a      	cmp	r2, r3
 8016122:	d902      	bls.n	801612a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016124:	f04f 33ff 	mov.w	r3, #4294967295
 8016128:	e0de      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016132:	88db      	ldrh	r3, [r3, #6]
 8016134:	b29a      	uxth	r2, r3
 8016136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016138:	889b      	ldrh	r3, [r3, #4]
 801613a:	b29b      	uxth	r3, r3
 801613c:	429a      	cmp	r2, r3
 801613e:	d03d      	beq.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016140:	2300      	movs	r3, #0
 8016142:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016144:	e03a      	b.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	b29a      	uxth	r2, r3
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	889b      	ldrh	r3, [r3, #4]
 8016150:	b29b      	uxth	r3, r3
 8016152:	429a      	cmp	r2, r3
 8016154:	d902      	bls.n	801615c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016156:	f04f 33ff 	mov.w	r3, #4294967295
 801615a:	e0c5      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	68ba      	ldr	r2, [r7, #8]
 8016160:	605a      	str	r2, [r3, #4]
      break;
 8016162:	e02b      	b.n	80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016166:	889b      	ldrh	r3, [r3, #4]
 8016168:	b29a      	uxth	r2, r3
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	889b      	ldrh	r3, [r3, #4]
 801616e:	b29b      	uxth	r3, r3
 8016170:	429a      	cmp	r2, r3
 8016172:	d102      	bne.n	801617a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016174:	f04f 33ff 	mov.w	r3, #4294967295
 8016178:	e0b6      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617c:	889b      	ldrh	r3, [r3, #4]
 801617e:	b29a      	uxth	r2, r3
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	88db      	ldrh	r3, [r3, #6]
 8016184:	b29b      	uxth	r3, r3
 8016186:	429a      	cmp	r2, r3
 8016188:	d202      	bcs.n	8016190 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801618a:	f04f 33ff 	mov.w	r3, #4294967295
 801618e:	e0ab      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016192:	2b00      	cmp	r3, #0
 8016194:	d009      	beq.n	80161aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016198:	88db      	ldrh	r3, [r3, #6]
 801619a:	b29a      	uxth	r2, r3
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	889b      	ldrh	r3, [r3, #4]
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d001      	beq.n	80161aa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80161b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d193      	bne.n	80160e2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80161ba:	e000      	b.n	80161be <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80161bc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80161be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d12d      	bne.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80161c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d01c      	beq.n	8016204 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80161ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161cc:	88db      	ldrh	r3, [r3, #6]
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d2:	889b      	ldrh	r3, [r3, #4]
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d906      	bls.n	80161e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80161da:	4b45      	ldr	r3, [pc, #276]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80161dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80161e0:	4944      	ldr	r1, [pc, #272]	; (80162f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80161e2:	4845      	ldr	r0, [pc, #276]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161e4:	f001 f80a 	bl	80171fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80161e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80161ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f0:	88db      	ldrh	r3, [r3, #6]
 80161f2:	b29a      	uxth	r2, r3
 80161f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f6:	889b      	ldrh	r3, [r3, #4]
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d010      	beq.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80161fe:	2300      	movs	r3, #0
 8016200:	623b      	str	r3, [r7, #32]
 8016202:	e00d      	b.n	8016220 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d006      	beq.n	801621a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801620c:	4b38      	ldr	r3, [pc, #224]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801620e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016212:	493a      	ldr	r1, [pc, #232]	; (80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016214:	4838      	ldr	r0, [pc, #224]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016216:	f000 fff1 	bl	80171fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	68ba      	ldr	r2, [r7, #8]
 801621e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d105      	bne.n	8016232 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	7f9b      	ldrb	r3, [r3, #30]
 801622a:	f003 0301 	and.w	r3, r3, #1
 801622e:	2b00      	cmp	r3, #0
 8016230:	d059      	beq.n	80162e6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016232:	6a3b      	ldr	r3, [r7, #32]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d04f      	beq.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d006      	beq.n	801624e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	889b      	ldrh	r3, [r3, #4]
 8016248:	b29b      	uxth	r3, r3
 801624a:	2b00      	cmp	r3, #0
 801624c:	d002      	beq.n	8016254 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801624e:	2300      	movs	r3, #0
 8016250:	623b      	str	r3, [r7, #32]
 8016252:	e041      	b.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016256:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801625e:	e012      	b.n	8016286 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016268:	88db      	ldrh	r3, [r3, #6]
 801626a:	b29a      	uxth	r2, r3
 801626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626e:	889b      	ldrh	r3, [r3, #4]
 8016270:	b29b      	uxth	r3, r3
 8016272:	429a      	cmp	r2, r3
 8016274:	d002      	beq.n	801627c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016276:	2300      	movs	r3, #0
 8016278:	623b      	str	r3, [r7, #32]
            break;
 801627a:	e007      	b.n	801628c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016288:	2b00      	cmp	r3, #0
 801628a:	d1e9      	bne.n	8016260 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801628c:	6a3b      	ldr	r3, [r7, #32]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d022      	beq.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d106      	bne.n	80162a8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801629a:	4b15      	ldr	r3, [pc, #84]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801629c:	f240 12df 	movw	r2, #479	; 0x1df
 80162a0:	4917      	ldr	r1, [pc, #92]	; (8016300 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162a2:	4815      	ldr	r0, [pc, #84]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162a4:	f000 ffaa 	bl	80171fc <iprintf>
          LWIP_ASSERT("sanity check",
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d106      	bne.n	80162c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80162b4:	4b0e      	ldr	r3, [pc, #56]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80162ba:	4911      	ldr	r1, [pc, #68]	; (8016300 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162bc:	480e      	ldr	r0, [pc, #56]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162be:	f000 ff9d 	bl	80171fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d006      	beq.n	80162d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80162ca:	4b09      	ldr	r3, [pc, #36]	; (80162f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162cc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80162d0:	490c      	ldr	r1, [pc, #48]	; (8016304 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80162d2:	4809      	ldr	r0, [pc, #36]	; (80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162d4:	f000 ff92 	bl	80171fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80162d8:	6a3b      	ldr	r3, [r7, #32]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	bf14      	ite	ne
 80162de:	2301      	movne	r3, #1
 80162e0:	2300      	moveq	r3, #0
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	e000      	b.n	80162e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80162e6:	2300      	movs	r3, #0
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3730      	adds	r7, #48	; 0x30
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	0801b954 	.word	0x0801b954
 80162f4:	0801ba38 	.word	0x0801ba38
 80162f8:	0801b99c 	.word	0x0801b99c
 80162fc:	0801ba58 	.word	0x0801ba58
 8016300:	0801ba90 	.word	0x0801ba90
 8016304:	0801baa0 	.word	0x0801baa0

08016308 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08e      	sub	sp, #56	; 0x38
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016318:	781b      	ldrb	r3, [r3, #0]
 801631a:	f003 030f 	and.w	r3, r3, #15
 801631e:	b2db      	uxtb	r3, r3
 8016320:	009b      	lsls	r3, r3, #2
 8016322:	b2db      	uxtb	r3, r3
 8016324:	2b14      	cmp	r3, #20
 8016326:	f040 8171 	bne.w	801660c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632c:	88db      	ldrh	r3, [r3, #6]
 801632e:	b29b      	uxth	r3, r3
 8016330:	4618      	mov	r0, r3
 8016332:	f7f5 fcb7 	bl	800bca4 <lwip_htons>
 8016336:	4603      	mov	r3, r0
 8016338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801633c:	b29b      	uxth	r3, r3
 801633e:	00db      	lsls	r3, r3, #3
 8016340:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016344:	885b      	ldrh	r3, [r3, #2]
 8016346:	b29b      	uxth	r3, r3
 8016348:	4618      	mov	r0, r3
 801634a:	f7f5 fcab 	bl	800bca4 <lwip_htons>
 801634e:	4603      	mov	r3, r0
 8016350:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	f003 030f 	and.w	r3, r3, #15
 801635a:	b2db      	uxtb	r3, r3
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016366:	b29b      	uxth	r3, r3
 8016368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801636a:	429a      	cmp	r2, r3
 801636c:	f0c0 8150 	bcc.w	8016610 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016374:	b29b      	uxth	r3, r3
 8016376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016378:	1ad3      	subs	r3, r2, r3
 801637a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7f7 faab 	bl	800d8d8 <pbuf_clen>
 8016382:	4603      	mov	r3, r0
 8016384:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016386:	4b8c      	ldr	r3, [pc, #560]	; (80165b8 <ip4_reass+0x2b0>)
 8016388:	881b      	ldrh	r3, [r3, #0]
 801638a:	461a      	mov	r2, r3
 801638c:	8c3b      	ldrh	r3, [r7, #32]
 801638e:	4413      	add	r3, r2
 8016390:	2b0a      	cmp	r3, #10
 8016392:	dd10      	ble.n	80163b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016394:	8c3b      	ldrh	r3, [r7, #32]
 8016396:	4619      	mov	r1, r3
 8016398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801639a:	f7ff fd79 	bl	8015e90 <ip_reass_remove_oldest_datagram>
 801639e:	4603      	mov	r3, r0
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	f000 8137 	beq.w	8016614 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80163a6:	4b84      	ldr	r3, [pc, #528]	; (80165b8 <ip4_reass+0x2b0>)
 80163a8:	881b      	ldrh	r3, [r3, #0]
 80163aa:	461a      	mov	r2, r3
 80163ac:	8c3b      	ldrh	r3, [r7, #32]
 80163ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80163b0:	2b0a      	cmp	r3, #10
 80163b2:	f300 812f 	bgt.w	8016614 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80163b6:	4b81      	ldr	r3, [pc, #516]	; (80165bc <ip4_reass+0x2b4>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	633b      	str	r3, [r7, #48]	; 0x30
 80163bc:	e015      	b.n	80163ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80163be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c0:	695a      	ldr	r2, [r3, #20]
 80163c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c4:	68db      	ldr	r3, [r3, #12]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d10c      	bne.n	80163e4 <ip4_reass+0xdc>
 80163ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163cc:	699a      	ldr	r2, [r3, #24]
 80163ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d0:	691b      	ldr	r3, [r3, #16]
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d106      	bne.n	80163e4 <ip4_reass+0xdc>
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	899a      	ldrh	r2, [r3, #12]
 80163da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d006      	beq.n	80163f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80163e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	633b      	str	r3, [r7, #48]	; 0x30
 80163ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d1e6      	bne.n	80163be <ip4_reass+0xb6>
 80163f0:	e000      	b.n	80163f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80163f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80163f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d109      	bne.n	801640e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80163fa:	8c3b      	ldrh	r3, [r7, #32]
 80163fc:	4619      	mov	r1, r3
 80163fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016400:	f7ff fda8 	bl	8015f54 <ip_reass_enqueue_new_datagram>
 8016404:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016408:	2b00      	cmp	r3, #0
 801640a:	d11c      	bne.n	8016446 <ip4_reass+0x13e>
      goto nullreturn;
 801640c:	e105      	b.n	801661a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016410:	88db      	ldrh	r3, [r3, #6]
 8016412:	b29b      	uxth	r3, r3
 8016414:	4618      	mov	r0, r3
 8016416:	f7f5 fc45 	bl	800bca4 <lwip_htons>
 801641a:	4603      	mov	r3, r0
 801641c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016420:	2b00      	cmp	r3, #0
 8016422:	d110      	bne.n	8016446 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016426:	89db      	ldrh	r3, [r3, #14]
 8016428:	4618      	mov	r0, r3
 801642a:	f7f5 fc3b 	bl	800bca4 <lwip_htons>
 801642e:	4603      	mov	r3, r0
 8016430:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016434:	2b00      	cmp	r3, #0
 8016436:	d006      	beq.n	8016446 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801643a:	3308      	adds	r3, #8
 801643c:	2214      	movs	r2, #20
 801643e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016440:	4618      	mov	r0, r3
 8016442:	f000 fdcb 	bl	8016fdc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016448:	88db      	ldrh	r3, [r3, #6]
 801644a:	b29b      	uxth	r3, r3
 801644c:	f003 0320 	and.w	r3, r3, #32
 8016450:	2b00      	cmp	r3, #0
 8016452:	bf0c      	ite	eq
 8016454:	2301      	moveq	r3, #1
 8016456:	2300      	movne	r3, #0
 8016458:	b2db      	uxtb	r3, r3
 801645a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d00e      	beq.n	8016480 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016462:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016466:	4413      	add	r3, r2
 8016468:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801646a:	8b7a      	ldrh	r2, [r7, #26]
 801646c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801646e:	429a      	cmp	r2, r3
 8016470:	f0c0 80a0 	bcc.w	80165b4 <ip4_reass+0x2ac>
 8016474:	8b7b      	ldrh	r3, [r7, #26]
 8016476:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801647a:	4293      	cmp	r3, r2
 801647c:	f200 809a 	bhi.w	80165b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016480:	69fa      	ldr	r2, [r7, #28]
 8016482:	6879      	ldr	r1, [r7, #4]
 8016484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016486:	f7ff fdd5 	bl	8016034 <ip_reass_chain_frag_into_datagram_and_validate>
 801648a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801648c:	697b      	ldr	r3, [r7, #20]
 801648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016492:	f000 809b 	beq.w	80165cc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016496:	4b48      	ldr	r3, [pc, #288]	; (80165b8 <ip4_reass+0x2b0>)
 8016498:	881a      	ldrh	r2, [r3, #0]
 801649a:	8c3b      	ldrh	r3, [r7, #32]
 801649c:	4413      	add	r3, r2
 801649e:	b29a      	uxth	r2, r3
 80164a0:	4b45      	ldr	r3, [pc, #276]	; (80165b8 <ip4_reass+0x2b0>)
 80164a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80164a4:	69fb      	ldr	r3, [r7, #28]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d00d      	beq.n	80164c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80164aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80164ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164ae:	4413      	add	r3, r2
 80164b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80164b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b4:	8a7a      	ldrh	r2, [r7, #18]
 80164b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80164b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ba:	7f9b      	ldrb	r3, [r3, #30]
 80164bc:	f043 0301 	orr.w	r3, r3, #1
 80164c0:	b2da      	uxtb	r2, r3
 80164c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	2b01      	cmp	r3, #1
 80164ca:	d171      	bne.n	80165b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80164cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ce:	8b9b      	ldrh	r3, [r3, #28]
 80164d0:	3314      	adds	r3, #20
 80164d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80164d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80164de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	685b      	ldr	r3, [r3, #4]
 80164e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	3308      	adds	r3, #8
 80164ea:	2214      	movs	r2, #20
 80164ec:	4619      	mov	r1, r3
 80164ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164f0:	f000 fd74 	bl	8016fdc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80164f4:	8a3b      	ldrh	r3, [r7, #16]
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7f5 fbd4 	bl	800bca4 <lwip_htons>
 80164fc:	4603      	mov	r3, r0
 80164fe:	461a      	mov	r2, r3
 8016500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016502:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016506:	2200      	movs	r2, #0
 8016508:	719a      	strb	r2, [r3, #6]
 801650a:	2200      	movs	r2, #0
 801650c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016510:	2200      	movs	r2, #0
 8016512:	729a      	strb	r2, [r3, #10]
 8016514:	2200      	movs	r2, #0
 8016516:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801651e:	e00d      	b.n	801653c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016526:	2114      	movs	r1, #20
 8016528:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801652a:	f7f7 f8c1 	bl	800d6b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801652e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f7f7 fa11 	bl	800d958 <pbuf_cat>
      r = iprh->next_pbuf;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653e:	2b00      	cmp	r3, #0
 8016540:	d1ee      	bne.n	8016520 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016542:	4b1e      	ldr	r3, [pc, #120]	; (80165bc <ip4_reass+0x2b4>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016548:	429a      	cmp	r2, r3
 801654a:	d102      	bne.n	8016552 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801654c:	2300      	movs	r3, #0
 801654e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016550:	e010      	b.n	8016574 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016552:	4b1a      	ldr	r3, [pc, #104]	; (80165bc <ip4_reass+0x2b4>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016558:	e007      	b.n	801656a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016560:	429a      	cmp	r2, r3
 8016562:	d006      	beq.n	8016572 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	62fb      	str	r3, [r7, #44]	; 0x2c
 801656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656c:	2b00      	cmp	r3, #0
 801656e:	d1f4      	bne.n	801655a <ip4_reass+0x252>
 8016570:	e000      	b.n	8016574 <ip4_reass+0x26c>
          break;
 8016572:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016578:	f7ff fd2e 	bl	8015fd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7f7 f9ab 	bl	800d8d8 <pbuf_clen>
 8016582:	4603      	mov	r3, r0
 8016584:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016586:	4b0c      	ldr	r3, [pc, #48]	; (80165b8 <ip4_reass+0x2b0>)
 8016588:	881b      	ldrh	r3, [r3, #0]
 801658a:	8c3a      	ldrh	r2, [r7, #32]
 801658c:	429a      	cmp	r2, r3
 801658e:	d906      	bls.n	801659e <ip4_reass+0x296>
 8016590:	4b0b      	ldr	r3, [pc, #44]	; (80165c0 <ip4_reass+0x2b8>)
 8016592:	f240 229b 	movw	r2, #667	; 0x29b
 8016596:	490b      	ldr	r1, [pc, #44]	; (80165c4 <ip4_reass+0x2bc>)
 8016598:	480b      	ldr	r0, [pc, #44]	; (80165c8 <ip4_reass+0x2c0>)
 801659a:	f000 fe2f 	bl	80171fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801659e:	4b06      	ldr	r3, [pc, #24]	; (80165b8 <ip4_reass+0x2b0>)
 80165a0:	881a      	ldrh	r2, [r3, #0]
 80165a2:	8c3b      	ldrh	r3, [r7, #32]
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	4b03      	ldr	r3, [pc, #12]	; (80165b8 <ip4_reass+0x2b0>)
 80165aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	e038      	b.n	8016622 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80165b0:	2300      	movs	r3, #0
 80165b2:	e036      	b.n	8016622 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80165b4:	bf00      	nop
 80165b6:	e00a      	b.n	80165ce <ip4_reass+0x2c6>
 80165b8:	2001a80c 	.word	0x2001a80c
 80165bc:	2001a808 	.word	0x2001a808
 80165c0:	0801b954 	.word	0x0801b954
 80165c4:	0801bac4 	.word	0x0801bac4
 80165c8:	0801b99c 	.word	0x0801b99c
    goto nullreturn_ipr;
 80165cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80165ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d106      	bne.n	80165e2 <ip4_reass+0x2da>
 80165d4:	4b15      	ldr	r3, [pc, #84]	; (801662c <ip4_reass+0x324>)
 80165d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80165da:	4915      	ldr	r1, [pc, #84]	; (8016630 <ip4_reass+0x328>)
 80165dc:	4815      	ldr	r0, [pc, #84]	; (8016634 <ip4_reass+0x32c>)
 80165de:	f000 fe0d 	bl	80171fc <iprintf>
  if (ipr->p == NULL) {
 80165e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d116      	bne.n	8016618 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80165ea:	4b13      	ldr	r3, [pc, #76]	; (8016638 <ip4_reass+0x330>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d006      	beq.n	8016602 <ip4_reass+0x2fa>
 80165f4:	4b0d      	ldr	r3, [pc, #52]	; (801662c <ip4_reass+0x324>)
 80165f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80165fa:	4910      	ldr	r1, [pc, #64]	; (801663c <ip4_reass+0x334>)
 80165fc:	480d      	ldr	r0, [pc, #52]	; (8016634 <ip4_reass+0x32c>)
 80165fe:	f000 fdfd 	bl	80171fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016602:	2100      	movs	r1, #0
 8016604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016606:	f7ff fce7 	bl	8015fd8 <ip_reass_dequeue_datagram>
 801660a:	e006      	b.n	801661a <ip4_reass+0x312>
    goto nullreturn;
 801660c:	bf00      	nop
 801660e:	e004      	b.n	801661a <ip4_reass+0x312>
    goto nullreturn;
 8016610:	bf00      	nop
 8016612:	e002      	b.n	801661a <ip4_reass+0x312>
      goto nullreturn;
 8016614:	bf00      	nop
 8016616:	e000      	b.n	801661a <ip4_reass+0x312>
  }

nullreturn:
 8016618:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7f7 f8ce 	bl	800d7bc <pbuf_free>
  return NULL;
 8016620:	2300      	movs	r3, #0
}
 8016622:	4618      	mov	r0, r3
 8016624:	3738      	adds	r7, #56	; 0x38
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	0801b954 	.word	0x0801b954
 8016630:	0801bae0 	.word	0x0801bae0
 8016634:	0801b99c 	.word	0x0801b99c
 8016638:	2001a808 	.word	0x2001a808
 801663c:	0801baec 	.word	0x0801baec

08016640 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016644:	f240 22bd 	movw	r2, #701	; 0x2bd
 8016648:	4903      	ldr	r1, [pc, #12]	; (8016658 <ip_frag_alloc_pbuf_custom_ref+0x18>)
 801664a:	2005      	movs	r0, #5
 801664c:	f7f6 f98a 	bl	800c964 <memp_malloc_fn>
 8016650:	4603      	mov	r3, r0
}
 8016652:	4618      	mov	r0, r3
 8016654:	bd80      	pop	{r7, pc}
 8016656:	bf00      	nop
 8016658:	0801b954 	.word	0x0801b954

0801665c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d106      	bne.n	8016678 <ip_frag_free_pbuf_custom_ref+0x1c>
 801666a:	4b07      	ldr	r3, [pc, #28]	; (8016688 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801666c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016670:	4906      	ldr	r1, [pc, #24]	; (801668c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016672:	4807      	ldr	r0, [pc, #28]	; (8016690 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016674:	f000 fdc2 	bl	80171fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016678:	6879      	ldr	r1, [r7, #4]
 801667a:	2005      	movs	r0, #5
 801667c:	f7f6 f9f0 	bl	800ca60 <memp_free>
}
 8016680:	bf00      	nop
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	0801b954 	.word	0x0801b954
 801668c:	0801bb0c 	.word	0x0801bb0c
 8016690:	0801b99c 	.word	0x0801b99c

08016694 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b084      	sub	sp, #16
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d106      	bne.n	80166b4 <ipfrag_free_pbuf_custom+0x20>
 80166a6:	4b11      	ldr	r3, [pc, #68]	; (80166ec <ipfrag_free_pbuf_custom+0x58>)
 80166a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80166ac:	4910      	ldr	r1, [pc, #64]	; (80166f0 <ipfrag_free_pbuf_custom+0x5c>)
 80166ae:	4811      	ldr	r0, [pc, #68]	; (80166f4 <ipfrag_free_pbuf_custom+0x60>)
 80166b0:	f000 fda4 	bl	80171fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80166b4:	68fa      	ldr	r2, [r7, #12]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d006      	beq.n	80166ca <ipfrag_free_pbuf_custom+0x36>
 80166bc:	4b0b      	ldr	r3, [pc, #44]	; (80166ec <ipfrag_free_pbuf_custom+0x58>)
 80166be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80166c2:	490d      	ldr	r1, [pc, #52]	; (80166f8 <ipfrag_free_pbuf_custom+0x64>)
 80166c4:	480b      	ldr	r0, [pc, #44]	; (80166f4 <ipfrag_free_pbuf_custom+0x60>)
 80166c6:	f000 fd99 	bl	80171fc <iprintf>
  if (pcr->original != NULL) {
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	695b      	ldr	r3, [r3, #20]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d004      	beq.n	80166dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	695b      	ldr	r3, [r3, #20]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7f7 f870 	bl	800d7bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80166dc:	68f8      	ldr	r0, [r7, #12]
 80166de:	f7ff ffbd 	bl	801665c <ip_frag_free_pbuf_custom_ref>
}
 80166e2:	bf00      	nop
 80166e4:	3710      	adds	r7, #16
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	0801b954 	.word	0x0801b954
 80166f0:	0801bb18 	.word	0x0801bb18
 80166f4:	0801b99c 	.word	0x0801b99c
 80166f8:	0801bb24 	.word	0x0801bb24

080166fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b094      	sub	sp, #80	; 0x50
 8016700:	af02      	add	r7, sp, #8
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016708:	2300      	movs	r3, #0
 801670a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801670e:	68bb      	ldr	r3, [r7, #8]
 8016710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016712:	3b14      	subs	r3, #20
 8016714:	2b00      	cmp	r3, #0
 8016716:	da00      	bge.n	801671a <ip4_frag+0x1e>
 8016718:	3307      	adds	r3, #7
 801671a:	10db      	asrs	r3, r3, #3
 801671c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801671e:	2314      	movs	r3, #20
 8016720:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801672a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	f003 030f 	and.w	r3, r3, #15
 8016734:	b2db      	uxtb	r3, r3
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	b2db      	uxtb	r3, r3
 801673a:	2b14      	cmp	r3, #20
 801673c:	d002      	beq.n	8016744 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801673e:	f06f 0305 	mvn.w	r3, #5
 8016742:	e110      	b.n	8016966 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	895b      	ldrh	r3, [r3, #10]
 8016748:	2b13      	cmp	r3, #19
 801674a:	d809      	bhi.n	8016760 <ip4_frag+0x64>
 801674c:	4b88      	ldr	r3, [pc, #544]	; (8016970 <ip4_frag+0x274>)
 801674e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016752:	4988      	ldr	r1, [pc, #544]	; (8016974 <ip4_frag+0x278>)
 8016754:	4888      	ldr	r0, [pc, #544]	; (8016978 <ip4_frag+0x27c>)
 8016756:	f000 fd51 	bl	80171fc <iprintf>
 801675a:	f06f 0305 	mvn.w	r3, #5
 801675e:	e102      	b.n	8016966 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016762:	88db      	ldrh	r3, [r3, #6]
 8016764:	b29b      	uxth	r3, r3
 8016766:	4618      	mov	r0, r3
 8016768:	f7f5 fa9c 	bl	800bca4 <lwip_htons>
 801676c:	4603      	mov	r3, r0
 801676e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016770:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801677a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801677c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016780:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	891b      	ldrh	r3, [r3, #8]
 8016786:	3b14      	subs	r3, #20
 8016788:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801678c:	e0e1      	b.n	8016952 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801678e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016790:	00db      	lsls	r3, r3, #3
 8016792:	b29b      	uxth	r3, r3
 8016794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016798:	4293      	cmp	r3, r2
 801679a:	bf28      	it	cs
 801679c:	4613      	movcs	r3, r2
 801679e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80167a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167a4:	2114      	movs	r1, #20
 80167a6:	200e      	movs	r0, #14
 80167a8:	f7f6 fd1c 	bl	800d1e4 <pbuf_alloc>
 80167ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80167ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	f000 80d5 	beq.w	8016960 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80167b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b8:	895b      	ldrh	r3, [r3, #10]
 80167ba:	2b13      	cmp	r3, #19
 80167bc:	d806      	bhi.n	80167cc <ip4_frag+0xd0>
 80167be:	4b6c      	ldr	r3, [pc, #432]	; (8016970 <ip4_frag+0x274>)
 80167c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80167c4:	496d      	ldr	r1, [pc, #436]	; (801697c <ip4_frag+0x280>)
 80167c6:	486c      	ldr	r0, [pc, #432]	; (8016978 <ip4_frag+0x27c>)
 80167c8:	f000 fd18 	bl	80171fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80167cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ce:	685b      	ldr	r3, [r3, #4]
 80167d0:	2214      	movs	r2, #20
 80167d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80167d4:	4618      	mov	r0, r3
 80167d6:	f000 fc01 	bl	8016fdc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80167da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80167e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80167e6:	e064      	b.n	80168b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	895a      	ldrh	r2, [r3, #10]
 80167ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80167ee:	1ad3      	subs	r3, r2, r3
 80167f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	895b      	ldrh	r3, [r3, #10]
 80167f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d906      	bls.n	801680a <ip4_frag+0x10e>
 80167fc:	4b5c      	ldr	r3, [pc, #368]	; (8016970 <ip4_frag+0x274>)
 80167fe:	f240 322d 	movw	r2, #813	; 0x32d
 8016802:	495f      	ldr	r1, [pc, #380]	; (8016980 <ip4_frag+0x284>)
 8016804:	485c      	ldr	r0, [pc, #368]	; (8016978 <ip4_frag+0x27c>)
 8016806:	f000 fcf9 	bl	80171fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801680a:	8bfa      	ldrh	r2, [r7, #30]
 801680c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016810:	4293      	cmp	r3, r2
 8016812:	bf28      	it	cs
 8016814:	4613      	movcs	r3, r2
 8016816:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801681a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801681e:	2b00      	cmp	r3, #0
 8016820:	d105      	bne.n	801682e <ip4_frag+0x132>
        poff = 0;
 8016822:	2300      	movs	r3, #0
 8016824:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	60fb      	str	r3, [r7, #12]
        continue;
 801682c:	e041      	b.n	80168b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801682e:	f7ff ff07 	bl	8016640 <ip_frag_alloc_pbuf_custom_ref>
 8016832:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016834:	69bb      	ldr	r3, [r7, #24]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d103      	bne.n	8016842 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801683a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801683c:	f7f6 ffbe 	bl	800d7bc <pbuf_free>
        goto memerr;
 8016840:	e08f      	b.n	8016962 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016842:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801684a:	4413      	add	r3, r2
 801684c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016850:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016854:	9201      	str	r2, [sp, #4]
 8016856:	9300      	str	r3, [sp, #0]
 8016858:	4603      	mov	r3, r0
 801685a:	2241      	movs	r2, #65	; 0x41
 801685c:	2000      	movs	r0, #0
 801685e:	f7f6 fdf3 	bl	800d448 <pbuf_alloced_custom>
 8016862:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d106      	bne.n	8016878 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801686a:	69b8      	ldr	r0, [r7, #24]
 801686c:	f7ff fef6 	bl	801665c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016872:	f7f6 ffa3 	bl	800d7bc <pbuf_free>
        goto memerr;
 8016876:	e074      	b.n	8016962 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	f7f7 f845 	bl	800d908 <pbuf_ref>
      pcr->original = p;
 801687e:	69bb      	ldr	r3, [r7, #24]
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016884:	69bb      	ldr	r3, [r7, #24]
 8016886:	4a3f      	ldr	r2, [pc, #252]	; (8016984 <ip4_frag+0x288>)
 8016888:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801688a:	6979      	ldr	r1, [r7, #20]
 801688c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801688e:	f7f7 f863 	bl	800d958 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016892:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801689a:	1ad3      	subs	r3, r2, r3
 801689c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80168a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d004      	beq.n	80168b2 <ip4_frag+0x1b6>
        poff = 0;
 80168a8:	2300      	movs	r3, #0
 80168aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80168b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d196      	bne.n	80167e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80168ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168c0:	4413      	add	r3, r2
 80168c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168c8:	f1a3 0213 	sub.w	r2, r3, #19
 80168cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168d0:	429a      	cmp	r2, r3
 80168d2:	bfcc      	ite	gt
 80168d4:	2301      	movgt	r3, #1
 80168d6:	2300      	movle	r3, #0
 80168d8:	b2db      	uxtb	r3, r3
 80168da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80168dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80168e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80168e6:	6a3b      	ldr	r3, [r7, #32]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d002      	beq.n	80168f2 <ip4_frag+0x1f6>
 80168ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d003      	beq.n	80168fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80168f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80168f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80168fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7f5 f9d1 	bl	800bca4 <lwip_htons>
 8016902:	4603      	mov	r3, r0
 8016904:	461a      	mov	r2, r3
 8016906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016908:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801690a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801690c:	3314      	adds	r3, #20
 801690e:	b29b      	uxth	r3, r3
 8016910:	4618      	mov	r0, r3
 8016912:	f7f5 f9c7 	bl	800bca4 <lwip_htons>
 8016916:	4603      	mov	r3, r0
 8016918:	461a      	mov	r2, r3
 801691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016920:	2200      	movs	r2, #0
 8016922:	729a      	strb	r2, [r3, #10]
 8016924:	2200      	movs	r2, #0
 8016926:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	695b      	ldr	r3, [r3, #20]
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016930:	68b8      	ldr	r0, [r7, #8]
 8016932:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016936:	f7f6 ff41 	bl	800d7bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801693a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801693e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016940:	1ad3      	subs	r3, r2, r3
 8016942:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016946:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801694a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801694c:	4413      	add	r3, r2
 801694e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016952:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016956:	2b00      	cmp	r3, #0
 8016958:	f47f af19 	bne.w	801678e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801695c:	2300      	movs	r3, #0
 801695e:	e002      	b.n	8016966 <ip4_frag+0x26a>
      goto memerr;
 8016960:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016966:	4618      	mov	r0, r3
 8016968:	3748      	adds	r7, #72	; 0x48
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
 801696e:	bf00      	nop
 8016970:	0801b954 	.word	0x0801b954
 8016974:	0801bb30 	.word	0x0801bb30
 8016978:	0801b99c 	.word	0x0801b99c
 801697c:	0801bb4c 	.word	0x0801bb4c
 8016980:	0801bb6c 	.word	0x0801bb6c
 8016984:	08016695 	.word	0x08016695

08016988 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b086      	sub	sp, #24
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016992:	230e      	movs	r3, #14
 8016994:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	895b      	ldrh	r3, [r3, #10]
 801699a:	2b0e      	cmp	r3, #14
 801699c:	d96e      	bls.n	8016a7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	7bdb      	ldrb	r3, [r3, #15]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d106      	bne.n	80169b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80169ac:	3301      	adds	r3, #1
 80169ae:	b2da      	uxtb	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80169ba:	693b      	ldr	r3, [r7, #16]
 80169bc:	7b1a      	ldrb	r2, [r3, #12]
 80169be:	7b5b      	ldrb	r3, [r3, #13]
 80169c0:	021b      	lsls	r3, r3, #8
 80169c2:	4313      	orrs	r3, r2
 80169c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80169c6:	693b      	ldr	r3, [r7, #16]
 80169c8:	781b      	ldrb	r3, [r3, #0]
 80169ca:	f003 0301 	and.w	r3, r3, #1
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d023      	beq.n	8016a1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	2b01      	cmp	r3, #1
 80169d8:	d10f      	bne.n	80169fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80169da:	693b      	ldr	r3, [r7, #16]
 80169dc:	785b      	ldrb	r3, [r3, #1]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d11b      	bne.n	8016a1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80169e2:	693b      	ldr	r3, [r7, #16]
 80169e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80169e6:	2b5e      	cmp	r3, #94	; 0x5e
 80169e8:	d117      	bne.n	8016a1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	7b5b      	ldrb	r3, [r3, #13]
 80169ee:	f043 0310 	orr.w	r3, r3, #16
 80169f2:	b2da      	uxtb	r2, r3
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	735a      	strb	r2, [r3, #13]
 80169f8:	e00f      	b.n	8016a1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	2206      	movs	r2, #6
 80169fe:	4928      	ldr	r1, [pc, #160]	; (8016aa0 <ethernet_input+0x118>)
 8016a00:	4618      	mov	r0, r3
 8016a02:	f000 fadb 	bl	8016fbc <memcmp>
 8016a06:	4603      	mov	r3, r0
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d106      	bne.n	8016a1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	7b5b      	ldrb	r3, [r3, #13]
 8016a10:	f043 0308 	orr.w	r3, r3, #8
 8016a14:	b2da      	uxtb	r2, r3
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016a1a:	89fb      	ldrh	r3, [r7, #14]
 8016a1c:	2b08      	cmp	r3, #8
 8016a1e:	d003      	beq.n	8016a28 <ethernet_input+0xa0>
 8016a20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016a24:	d014      	beq.n	8016a50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016a26:	e032      	b.n	8016a8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a2e:	f003 0308 	and.w	r3, r3, #8
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d024      	beq.n	8016a80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a36:	8afb      	ldrh	r3, [r7, #22]
 8016a38:	4619      	mov	r1, r3
 8016a3a:	6878      	ldr	r0, [r7, #4]
 8016a3c:	f7f6 fe38 	bl	800d6b0 <pbuf_remove_header>
 8016a40:	4603      	mov	r3, r0
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d11e      	bne.n	8016a84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016a46:	6839      	ldr	r1, [r7, #0]
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f7fe ff13 	bl	8015874 <ip4_input>
      break;
 8016a4e:	e013      	b.n	8016a78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016a56:	f003 0308 	and.w	r3, r3, #8
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d014      	beq.n	8016a88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a5e:	8afb      	ldrh	r3, [r7, #22]
 8016a60:	4619      	mov	r1, r3
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f7f6 fe24 	bl	800d6b0 <pbuf_remove_header>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d10e      	bne.n	8016a8c <ethernet_input+0x104>
        etharp_input(p, netif);
 8016a6e:	6839      	ldr	r1, [r7, #0]
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f7fe f8b3 	bl	8014bdc <etharp_input>
      break;
 8016a76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	e00c      	b.n	8016a96 <ethernet_input+0x10e>
    goto free_and_return;
 8016a7c:	bf00      	nop
 8016a7e:	e006      	b.n	8016a8e <ethernet_input+0x106>
        goto free_and_return;
 8016a80:	bf00      	nop
 8016a82:	e004      	b.n	8016a8e <ethernet_input+0x106>
        goto free_and_return;
 8016a84:	bf00      	nop
 8016a86:	e002      	b.n	8016a8e <ethernet_input+0x106>
        goto free_and_return;
 8016a88:	bf00      	nop
 8016a8a:	e000      	b.n	8016a8e <ethernet_input+0x106>
        goto free_and_return;
 8016a8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f7f6 fe94 	bl	800d7bc <pbuf_free>
  return ERR_OK;
 8016a94:	2300      	movs	r3, #0
}
 8016a96:	4618      	mov	r0, r3
 8016a98:	3718      	adds	r7, #24
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	0801d264 	.word	0x0801d264

08016aa4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b086      	sub	sp, #24
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	60b9      	str	r1, [r7, #8]
 8016aae:	607a      	str	r2, [r7, #4]
 8016ab0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016ab2:	8c3b      	ldrh	r3, [r7, #32]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f7f5 f8f5 	bl	800bca4 <lwip_htons>
 8016aba:	4603      	mov	r3, r0
 8016abc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016abe:	210e      	movs	r1, #14
 8016ac0:	68b8      	ldr	r0, [r7, #8]
 8016ac2:	f7f6 fde5 	bl	800d690 <pbuf_add_header>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d125      	bne.n	8016b18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	8afa      	ldrh	r2, [r7, #22]
 8016ad6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	2206      	movs	r2, #6
 8016adc:	6839      	ldr	r1, [r7, #0]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f000 fa7c 	bl	8016fdc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	3306      	adds	r3, #6
 8016ae8:	2206      	movs	r2, #6
 8016aea:	6879      	ldr	r1, [r7, #4]
 8016aec:	4618      	mov	r0, r3
 8016aee:	f000 fa75 	bl	8016fdc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016af8:	2b06      	cmp	r3, #6
 8016afa:	d006      	beq.n	8016b0a <ethernet_output+0x66>
 8016afc:	4b0a      	ldr	r3, [pc, #40]	; (8016b28 <ethernet_output+0x84>)
 8016afe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016b02:	490a      	ldr	r1, [pc, #40]	; (8016b2c <ethernet_output+0x88>)
 8016b04:	480a      	ldr	r0, [pc, #40]	; (8016b30 <ethernet_output+0x8c>)
 8016b06:	f000 fb79 	bl	80171fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	699b      	ldr	r3, [r3, #24]
 8016b0e:	68b9      	ldr	r1, [r7, #8]
 8016b10:	68f8      	ldr	r0, [r7, #12]
 8016b12:	4798      	blx	r3
 8016b14:	4603      	mov	r3, r0
 8016b16:	e002      	b.n	8016b1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016b18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016b1a:	f06f 0301 	mvn.w	r3, #1
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3718      	adds	r7, #24
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}
 8016b26:	bf00      	nop
 8016b28:	0801bb7c 	.word	0x0801bb7c
 8016b2c:	0801bbb4 	.word	0x0801bbb4
 8016b30:	0801bbe8 	.word	0x0801bbe8

08016b34 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b086      	sub	sp, #24
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
 8016b3c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	60bb      	str	r3, [r7, #8]
 8016b42:	2304      	movs	r3, #4
 8016b44:	60fb      	str	r3, [r7, #12]
 8016b46:	2300      	movs	r3, #0
 8016b48:	613b      	str	r3, [r7, #16]
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016b4e:	f107 0308 	add.w	r3, r7, #8
 8016b52:	2100      	movs	r1, #0
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7f0 fe1b 	bl	8007790 <osMessageCreate>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d102      	bne.n	8016b6e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016b68:	f04f 33ff 	mov.w	r3, #4294967295
 8016b6c:	e000      	b.n	8016b70 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016b6e:	2300      	movs	r3, #0
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3718      	adds	r7, #24
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}

08016b78 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	6839      	ldr	r1, [r7, #0]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7f0 fe28 	bl	80077e0 <osMessagePut>
 8016b90:	4603      	mov	r3, r0
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d102      	bne.n	8016b9c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016b96:	2300      	movs	r3, #0
 8016b98:	73fb      	strb	r3, [r7, #15]
 8016b9a:	e001      	b.n	8016ba0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016b9c:	23ff      	movs	r3, #255	; 0xff
 8016b9e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b08c      	sub	sp, #48	; 0x30
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	61f8      	str	r0, [r7, #28]
 8016bb4:	61b9      	str	r1, [r7, #24]
 8016bb6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016bb8:	f7f0 fc5a 	bl	8007470 <osKernelSysTick>
 8016bbc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d017      	beq.n	8016bf4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	6819      	ldr	r1, [r3, #0]
 8016bc8:	f107 0320 	add.w	r3, r7, #32
 8016bcc:	697a      	ldr	r2, [r7, #20]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7f0 fe46 	bl	8007860 <osMessageGet>

    if(event.status == osEventMessage)
 8016bd4:	6a3b      	ldr	r3, [r7, #32]
 8016bd6:	2b10      	cmp	r3, #16
 8016bd8:	d109      	bne.n	8016bee <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bdc:	461a      	mov	r2, r3
 8016bde:	69bb      	ldr	r3, [r7, #24]
 8016be0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016be2:	f7f0 fc45 	bl	8007470 <osKernelSysTick>
 8016be6:	4602      	mov	r2, r0
 8016be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bea:	1ad3      	subs	r3, r2, r3
 8016bec:	e019      	b.n	8016c22 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016bee:	f04f 33ff 	mov.w	r3, #4294967295
 8016bf2:	e016      	b.n	8016c22 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	6819      	ldr	r1, [r3, #0]
 8016bf8:	463b      	mov	r3, r7
 8016bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7f0 fe2e 	bl	8007860 <osMessageGet>
 8016c04:	f107 0320 	add.w	r3, r7, #32
 8016c08:	463a      	mov	r2, r7
 8016c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c12:	461a      	mov	r2, r3
 8016c14:	69bb      	ldr	r3, [r7, #24]
 8016c16:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016c18:	f7f0 fc2a 	bl	8007470 <osKernelSysTick>
 8016c1c:	4602      	mov	r2, r0
 8016c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c20:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016c22:	4618      	mov	r0, r3
 8016c24:	3730      	adds	r7, #48	; 0x30
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}

08016c2a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016c2a:	b480      	push	{r7}
 8016c2c:	b083      	sub	sp, #12
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d101      	bne.n	8016c3e <sys_mbox_valid+0x14>
    return 0;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	e000      	b.n	8016c40 <sys_mbox_valid+0x16>
  else
    return 1;
 8016c3e:	2301      	movs	r3, #1
}
 8016c40:	4618      	mov	r0, r3
 8016c42:	370c      	adds	r7, #12
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr

08016c4c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016c50:	4803      	ldr	r0, [pc, #12]	; (8016c60 <sys_init+0x14>)
 8016c52:	f7f0 fc7d 	bl	8007550 <osMutexCreate>
 8016c56:	4603      	mov	r3, r0
 8016c58:	4a02      	ldr	r2, [pc, #8]	; (8016c64 <sys_init+0x18>)
 8016c5a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016c5c:	bf00      	nop
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	0801d274 	.word	0x0801d274
 8016c64:	2001a810 	.word	0x2001a810

08016c68 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b084      	sub	sp, #16
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016c70:	2300      	movs	r3, #0
 8016c72:	60bb      	str	r3, [r7, #8]
 8016c74:	2300      	movs	r3, #0
 8016c76:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016c78:	f107 0308 	add.w	r3, r7, #8
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7f0 fc67 	bl	8007550 <osMutexCreate>
 8016c82:	4602      	mov	r2, r0
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d102      	bne.n	8016c96 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016c90:	f04f 33ff 	mov.w	r3, #4294967295
 8016c94:	e000      	b.n	8016c98 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3710      	adds	r7, #16
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f04f 31ff 	mov.w	r1, #4294967295
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7f0 fc65 	bl	8007580 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016cb6:	bf00      	nop
 8016cb8:	3708      	adds	r7, #8
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}

08016cbe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016cbe:	b580      	push	{r7, lr}
 8016cc0:	b082      	sub	sp, #8
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7f0 fca6 	bl	800761c <osMutexRelease>
}
 8016cd0:	bf00      	nop
 8016cd2:	3708      	adds	r7, #8
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b08c      	sub	sp, #48	; 0x30
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016ce6:	f107 0314 	add.w	r3, r7, #20
 8016cea:	2200      	movs	r2, #0
 8016cec:	601a      	str	r2, [r3, #0]
 8016cee:	605a      	str	r2, [r3, #4]
 8016cf0:	609a      	str	r2, [r3, #8]
 8016cf2:	60da      	str	r2, [r3, #12]
 8016cf4:	611a      	str	r2, [r3, #16]
 8016cf6:	615a      	str	r2, [r3, #20]
 8016cf8:	619a      	str	r2, [r3, #24]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	617b      	str	r3, [r7, #20]
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	61bb      	str	r3, [r7, #24]
 8016d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d04:	b21b      	sxth	r3, r3
 8016d06:	83bb      	strh	r3, [r7, #28]
 8016d08:	683b      	ldr	r3, [r7, #0]
 8016d0a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016d0c:	f107 0314 	add.w	r3, r7, #20
 8016d10:	6879      	ldr	r1, [r7, #4]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7f0 fbbc 	bl	8007490 <osThreadCreate>
 8016d18:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3730      	adds	r7, #48	; 0x30
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}
	...

08016d24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016d28:	4b04      	ldr	r3, [pc, #16]	; (8016d3c <sys_arch_protect+0x18>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7f0 fc25 	bl	8007580 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016d36:	2301      	movs	r3, #1
}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	2001a810 	.word	0x2001a810

08016d40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016d48:	4b04      	ldr	r3, [pc, #16]	; (8016d5c <sys_arch_unprotect+0x1c>)
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7f0 fc65 	bl	800761c <osMutexRelease>
}
 8016d52:	bf00      	nop
 8016d54:	3708      	adds	r7, #8
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	2001a810 	.word	0x2001a810

08016d60 <std>:
 8016d60:	2300      	movs	r3, #0
 8016d62:	b510      	push	{r4, lr}
 8016d64:	4604      	mov	r4, r0
 8016d66:	e9c0 3300 	strd	r3, r3, [r0]
 8016d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d6e:	6083      	str	r3, [r0, #8]
 8016d70:	8181      	strh	r1, [r0, #12]
 8016d72:	6643      	str	r3, [r0, #100]	; 0x64
 8016d74:	81c2      	strh	r2, [r0, #14]
 8016d76:	6183      	str	r3, [r0, #24]
 8016d78:	4619      	mov	r1, r3
 8016d7a:	2208      	movs	r2, #8
 8016d7c:	305c      	adds	r0, #92	; 0x5c
 8016d7e:	f000 f955 	bl	801702c <memset>
 8016d82:	4b05      	ldr	r3, [pc, #20]	; (8016d98 <std+0x38>)
 8016d84:	6263      	str	r3, [r4, #36]	; 0x24
 8016d86:	4b05      	ldr	r3, [pc, #20]	; (8016d9c <std+0x3c>)
 8016d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d8a:	4b05      	ldr	r3, [pc, #20]	; (8016da0 <std+0x40>)
 8016d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d8e:	4b05      	ldr	r3, [pc, #20]	; (8016da4 <std+0x44>)
 8016d90:	6224      	str	r4, [r4, #32]
 8016d92:	6323      	str	r3, [r4, #48]	; 0x30
 8016d94:	bd10      	pop	{r4, pc}
 8016d96:	bf00      	nop
 8016d98:	08017531 	.word	0x08017531
 8016d9c:	08017553 	.word	0x08017553
 8016da0:	0801758b 	.word	0x0801758b
 8016da4:	080175af 	.word	0x080175af

08016da8 <_cleanup_r>:
 8016da8:	4901      	ldr	r1, [pc, #4]	; (8016db0 <_cleanup_r+0x8>)
 8016daa:	f000 b8af 	b.w	8016f0c <_fwalk_reent>
 8016dae:	bf00      	nop
 8016db0:	080178c5 	.word	0x080178c5

08016db4 <__sfmoreglue>:
 8016db4:	b570      	push	{r4, r5, r6, lr}
 8016db6:	2268      	movs	r2, #104	; 0x68
 8016db8:	1e4d      	subs	r5, r1, #1
 8016dba:	4355      	muls	r5, r2
 8016dbc:	460e      	mov	r6, r1
 8016dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016dc2:	f000 f9a7 	bl	8017114 <_malloc_r>
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	b140      	cbz	r0, 8016ddc <__sfmoreglue+0x28>
 8016dca:	2100      	movs	r1, #0
 8016dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8016dd0:	300c      	adds	r0, #12
 8016dd2:	60a0      	str	r0, [r4, #8]
 8016dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016dd8:	f000 f928 	bl	801702c <memset>
 8016ddc:	4620      	mov	r0, r4
 8016dde:	bd70      	pop	{r4, r5, r6, pc}

08016de0 <__sfp_lock_acquire>:
 8016de0:	4801      	ldr	r0, [pc, #4]	; (8016de8 <__sfp_lock_acquire+0x8>)
 8016de2:	f000 b8d8 	b.w	8016f96 <__retarget_lock_acquire_recursive>
 8016de6:	bf00      	nop
 8016de8:	2001a815 	.word	0x2001a815

08016dec <__sfp_lock_release>:
 8016dec:	4801      	ldr	r0, [pc, #4]	; (8016df4 <__sfp_lock_release+0x8>)
 8016dee:	f000 b8d3 	b.w	8016f98 <__retarget_lock_release_recursive>
 8016df2:	bf00      	nop
 8016df4:	2001a815 	.word	0x2001a815

08016df8 <__sinit_lock_acquire>:
 8016df8:	4801      	ldr	r0, [pc, #4]	; (8016e00 <__sinit_lock_acquire+0x8>)
 8016dfa:	f000 b8cc 	b.w	8016f96 <__retarget_lock_acquire_recursive>
 8016dfe:	bf00      	nop
 8016e00:	2001a816 	.word	0x2001a816

08016e04 <__sinit_lock_release>:
 8016e04:	4801      	ldr	r0, [pc, #4]	; (8016e0c <__sinit_lock_release+0x8>)
 8016e06:	f000 b8c7 	b.w	8016f98 <__retarget_lock_release_recursive>
 8016e0a:	bf00      	nop
 8016e0c:	2001a816 	.word	0x2001a816

08016e10 <__sinit>:
 8016e10:	b510      	push	{r4, lr}
 8016e12:	4604      	mov	r4, r0
 8016e14:	f7ff fff0 	bl	8016df8 <__sinit_lock_acquire>
 8016e18:	69a3      	ldr	r3, [r4, #24]
 8016e1a:	b11b      	cbz	r3, 8016e24 <__sinit+0x14>
 8016e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e20:	f7ff bff0 	b.w	8016e04 <__sinit_lock_release>
 8016e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016e28:	6523      	str	r3, [r4, #80]	; 0x50
 8016e2a:	4b13      	ldr	r3, [pc, #76]	; (8016e78 <__sinit+0x68>)
 8016e2c:	4a13      	ldr	r2, [pc, #76]	; (8016e7c <__sinit+0x6c>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8016e32:	42a3      	cmp	r3, r4
 8016e34:	bf04      	itt	eq
 8016e36:	2301      	moveq	r3, #1
 8016e38:	61a3      	streq	r3, [r4, #24]
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	f000 f820 	bl	8016e80 <__sfp>
 8016e40:	6060      	str	r0, [r4, #4]
 8016e42:	4620      	mov	r0, r4
 8016e44:	f000 f81c 	bl	8016e80 <__sfp>
 8016e48:	60a0      	str	r0, [r4, #8]
 8016e4a:	4620      	mov	r0, r4
 8016e4c:	f000 f818 	bl	8016e80 <__sfp>
 8016e50:	2200      	movs	r2, #0
 8016e52:	60e0      	str	r0, [r4, #12]
 8016e54:	2104      	movs	r1, #4
 8016e56:	6860      	ldr	r0, [r4, #4]
 8016e58:	f7ff ff82 	bl	8016d60 <std>
 8016e5c:	68a0      	ldr	r0, [r4, #8]
 8016e5e:	2201      	movs	r2, #1
 8016e60:	2109      	movs	r1, #9
 8016e62:	f7ff ff7d 	bl	8016d60 <std>
 8016e66:	68e0      	ldr	r0, [r4, #12]
 8016e68:	2202      	movs	r2, #2
 8016e6a:	2112      	movs	r1, #18
 8016e6c:	f7ff ff78 	bl	8016d60 <std>
 8016e70:	2301      	movs	r3, #1
 8016e72:	61a3      	str	r3, [r4, #24]
 8016e74:	e7d2      	b.n	8016e1c <__sinit+0xc>
 8016e76:	bf00      	nop
 8016e78:	0801d2dc 	.word	0x0801d2dc
 8016e7c:	08016da9 	.word	0x08016da9

08016e80 <__sfp>:
 8016e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e82:	4607      	mov	r7, r0
 8016e84:	f7ff ffac 	bl	8016de0 <__sfp_lock_acquire>
 8016e88:	4b1e      	ldr	r3, [pc, #120]	; (8016f04 <__sfp+0x84>)
 8016e8a:	681e      	ldr	r6, [r3, #0]
 8016e8c:	69b3      	ldr	r3, [r6, #24]
 8016e8e:	b913      	cbnz	r3, 8016e96 <__sfp+0x16>
 8016e90:	4630      	mov	r0, r6
 8016e92:	f7ff ffbd 	bl	8016e10 <__sinit>
 8016e96:	3648      	adds	r6, #72	; 0x48
 8016e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	d503      	bpl.n	8016ea8 <__sfp+0x28>
 8016ea0:	6833      	ldr	r3, [r6, #0]
 8016ea2:	b30b      	cbz	r3, 8016ee8 <__sfp+0x68>
 8016ea4:	6836      	ldr	r6, [r6, #0]
 8016ea6:	e7f7      	b.n	8016e98 <__sfp+0x18>
 8016ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016eac:	b9d5      	cbnz	r5, 8016ee4 <__sfp+0x64>
 8016eae:	4b16      	ldr	r3, [pc, #88]	; (8016f08 <__sfp+0x88>)
 8016eb0:	60e3      	str	r3, [r4, #12]
 8016eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8016eb8:	f000 f86c 	bl	8016f94 <__retarget_lock_init_recursive>
 8016ebc:	f7ff ff96 	bl	8016dec <__sfp_lock_release>
 8016ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ec8:	6025      	str	r5, [r4, #0]
 8016eca:	61a5      	str	r5, [r4, #24]
 8016ecc:	2208      	movs	r2, #8
 8016ece:	4629      	mov	r1, r5
 8016ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ed4:	f000 f8aa 	bl	801702c <memset>
 8016ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ee4:	3468      	adds	r4, #104	; 0x68
 8016ee6:	e7d9      	b.n	8016e9c <__sfp+0x1c>
 8016ee8:	2104      	movs	r1, #4
 8016eea:	4638      	mov	r0, r7
 8016eec:	f7ff ff62 	bl	8016db4 <__sfmoreglue>
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	6030      	str	r0, [r6, #0]
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d1d5      	bne.n	8016ea4 <__sfp+0x24>
 8016ef8:	f7ff ff78 	bl	8016dec <__sfp_lock_release>
 8016efc:	230c      	movs	r3, #12
 8016efe:	603b      	str	r3, [r7, #0]
 8016f00:	e7ee      	b.n	8016ee0 <__sfp+0x60>
 8016f02:	bf00      	nop
 8016f04:	0801d2dc 	.word	0x0801d2dc
 8016f08:	ffff0001 	.word	0xffff0001

08016f0c <_fwalk_reent>:
 8016f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f10:	4606      	mov	r6, r0
 8016f12:	4688      	mov	r8, r1
 8016f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016f18:	2700      	movs	r7, #0
 8016f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8016f22:	d505      	bpl.n	8016f30 <_fwalk_reent+0x24>
 8016f24:	6824      	ldr	r4, [r4, #0]
 8016f26:	2c00      	cmp	r4, #0
 8016f28:	d1f7      	bne.n	8016f1a <_fwalk_reent+0xe>
 8016f2a:	4638      	mov	r0, r7
 8016f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f30:	89ab      	ldrh	r3, [r5, #12]
 8016f32:	2b01      	cmp	r3, #1
 8016f34:	d907      	bls.n	8016f46 <_fwalk_reent+0x3a>
 8016f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	d003      	beq.n	8016f46 <_fwalk_reent+0x3a>
 8016f3e:	4629      	mov	r1, r5
 8016f40:	4630      	mov	r0, r6
 8016f42:	47c0      	blx	r8
 8016f44:	4307      	orrs	r7, r0
 8016f46:	3568      	adds	r5, #104	; 0x68
 8016f48:	e7e9      	b.n	8016f1e <_fwalk_reent+0x12>
	...

08016f4c <__libc_init_array>:
 8016f4c:	b570      	push	{r4, r5, r6, lr}
 8016f4e:	4d0d      	ldr	r5, [pc, #52]	; (8016f84 <__libc_init_array+0x38>)
 8016f50:	4c0d      	ldr	r4, [pc, #52]	; (8016f88 <__libc_init_array+0x3c>)
 8016f52:	1b64      	subs	r4, r4, r5
 8016f54:	10a4      	asrs	r4, r4, #2
 8016f56:	2600      	movs	r6, #0
 8016f58:	42a6      	cmp	r6, r4
 8016f5a:	d109      	bne.n	8016f70 <__libc_init_array+0x24>
 8016f5c:	4d0b      	ldr	r5, [pc, #44]	; (8016f8c <__libc_init_array+0x40>)
 8016f5e:	4c0c      	ldr	r4, [pc, #48]	; (8016f90 <__libc_init_array+0x44>)
 8016f60:	f001 fa84 	bl	801846c <_init>
 8016f64:	1b64      	subs	r4, r4, r5
 8016f66:	10a4      	asrs	r4, r4, #2
 8016f68:	2600      	movs	r6, #0
 8016f6a:	42a6      	cmp	r6, r4
 8016f6c:	d105      	bne.n	8016f7a <__libc_init_array+0x2e>
 8016f6e:	bd70      	pop	{r4, r5, r6, pc}
 8016f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f74:	4798      	blx	r3
 8016f76:	3601      	adds	r6, #1
 8016f78:	e7ee      	b.n	8016f58 <__libc_init_array+0xc>
 8016f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f7e:	4798      	blx	r3
 8016f80:	3601      	adds	r6, #1
 8016f82:	e7f2      	b.n	8016f6a <__libc_init_array+0x1e>
 8016f84:	0801d3cc 	.word	0x0801d3cc
 8016f88:	0801d3cc 	.word	0x0801d3cc
 8016f8c:	0801d3cc 	.word	0x0801d3cc
 8016f90:	0801d3d0 	.word	0x0801d3d0

08016f94 <__retarget_lock_init_recursive>:
 8016f94:	4770      	bx	lr

08016f96 <__retarget_lock_acquire_recursive>:
 8016f96:	4770      	bx	lr

08016f98 <__retarget_lock_release_recursive>:
 8016f98:	4770      	bx	lr
	...

08016f9c <malloc>:
 8016f9c:	4b02      	ldr	r3, [pc, #8]	; (8016fa8 <malloc+0xc>)
 8016f9e:	4601      	mov	r1, r0
 8016fa0:	6818      	ldr	r0, [r3, #0]
 8016fa2:	f000 b8b7 	b.w	8017114 <_malloc_r>
 8016fa6:	bf00      	nop
 8016fa8:	20000040 	.word	0x20000040

08016fac <free>:
 8016fac:	4b02      	ldr	r3, [pc, #8]	; (8016fb8 <free+0xc>)
 8016fae:	4601      	mov	r1, r0
 8016fb0:	6818      	ldr	r0, [r3, #0]
 8016fb2:	f000 b843 	b.w	801703c <_free_r>
 8016fb6:	bf00      	nop
 8016fb8:	20000040 	.word	0x20000040

08016fbc <memcmp>:
 8016fbc:	b510      	push	{r4, lr}
 8016fbe:	3901      	subs	r1, #1
 8016fc0:	4402      	add	r2, r0
 8016fc2:	4290      	cmp	r0, r2
 8016fc4:	d101      	bne.n	8016fca <memcmp+0xe>
 8016fc6:	2000      	movs	r0, #0
 8016fc8:	e005      	b.n	8016fd6 <memcmp+0x1a>
 8016fca:	7803      	ldrb	r3, [r0, #0]
 8016fcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016fd0:	42a3      	cmp	r3, r4
 8016fd2:	d001      	beq.n	8016fd8 <memcmp+0x1c>
 8016fd4:	1b18      	subs	r0, r3, r4
 8016fd6:	bd10      	pop	{r4, pc}
 8016fd8:	3001      	adds	r0, #1
 8016fda:	e7f2      	b.n	8016fc2 <memcmp+0x6>

08016fdc <memcpy>:
 8016fdc:	440a      	add	r2, r1
 8016fde:	4291      	cmp	r1, r2
 8016fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8016fe4:	d100      	bne.n	8016fe8 <memcpy+0xc>
 8016fe6:	4770      	bx	lr
 8016fe8:	b510      	push	{r4, lr}
 8016fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ff2:	4291      	cmp	r1, r2
 8016ff4:	d1f9      	bne.n	8016fea <memcpy+0xe>
 8016ff6:	bd10      	pop	{r4, pc}

08016ff8 <memmove>:
 8016ff8:	4288      	cmp	r0, r1
 8016ffa:	b510      	push	{r4, lr}
 8016ffc:	eb01 0402 	add.w	r4, r1, r2
 8017000:	d902      	bls.n	8017008 <memmove+0x10>
 8017002:	4284      	cmp	r4, r0
 8017004:	4623      	mov	r3, r4
 8017006:	d807      	bhi.n	8017018 <memmove+0x20>
 8017008:	1e43      	subs	r3, r0, #1
 801700a:	42a1      	cmp	r1, r4
 801700c:	d008      	beq.n	8017020 <memmove+0x28>
 801700e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017016:	e7f8      	b.n	801700a <memmove+0x12>
 8017018:	4402      	add	r2, r0
 801701a:	4601      	mov	r1, r0
 801701c:	428a      	cmp	r2, r1
 801701e:	d100      	bne.n	8017022 <memmove+0x2a>
 8017020:	bd10      	pop	{r4, pc}
 8017022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801702a:	e7f7      	b.n	801701c <memmove+0x24>

0801702c <memset>:
 801702c:	4402      	add	r2, r0
 801702e:	4603      	mov	r3, r0
 8017030:	4293      	cmp	r3, r2
 8017032:	d100      	bne.n	8017036 <memset+0xa>
 8017034:	4770      	bx	lr
 8017036:	f803 1b01 	strb.w	r1, [r3], #1
 801703a:	e7f9      	b.n	8017030 <memset+0x4>

0801703c <_free_r>:
 801703c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801703e:	2900      	cmp	r1, #0
 8017040:	d044      	beq.n	80170cc <_free_r+0x90>
 8017042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017046:	9001      	str	r0, [sp, #4]
 8017048:	2b00      	cmp	r3, #0
 801704a:	f1a1 0404 	sub.w	r4, r1, #4
 801704e:	bfb8      	it	lt
 8017050:	18e4      	addlt	r4, r4, r3
 8017052:	f000 fcfd 	bl	8017a50 <__malloc_lock>
 8017056:	4a1e      	ldr	r2, [pc, #120]	; (80170d0 <_free_r+0x94>)
 8017058:	9801      	ldr	r0, [sp, #4]
 801705a:	6813      	ldr	r3, [r2, #0]
 801705c:	b933      	cbnz	r3, 801706c <_free_r+0x30>
 801705e:	6063      	str	r3, [r4, #4]
 8017060:	6014      	str	r4, [r2, #0]
 8017062:	b003      	add	sp, #12
 8017064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017068:	f000 bcf8 	b.w	8017a5c <__malloc_unlock>
 801706c:	42a3      	cmp	r3, r4
 801706e:	d908      	bls.n	8017082 <_free_r+0x46>
 8017070:	6825      	ldr	r5, [r4, #0]
 8017072:	1961      	adds	r1, r4, r5
 8017074:	428b      	cmp	r3, r1
 8017076:	bf01      	itttt	eq
 8017078:	6819      	ldreq	r1, [r3, #0]
 801707a:	685b      	ldreq	r3, [r3, #4]
 801707c:	1949      	addeq	r1, r1, r5
 801707e:	6021      	streq	r1, [r4, #0]
 8017080:	e7ed      	b.n	801705e <_free_r+0x22>
 8017082:	461a      	mov	r2, r3
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	b10b      	cbz	r3, 801708c <_free_r+0x50>
 8017088:	42a3      	cmp	r3, r4
 801708a:	d9fa      	bls.n	8017082 <_free_r+0x46>
 801708c:	6811      	ldr	r1, [r2, #0]
 801708e:	1855      	adds	r5, r2, r1
 8017090:	42a5      	cmp	r5, r4
 8017092:	d10b      	bne.n	80170ac <_free_r+0x70>
 8017094:	6824      	ldr	r4, [r4, #0]
 8017096:	4421      	add	r1, r4
 8017098:	1854      	adds	r4, r2, r1
 801709a:	42a3      	cmp	r3, r4
 801709c:	6011      	str	r1, [r2, #0]
 801709e:	d1e0      	bne.n	8017062 <_free_r+0x26>
 80170a0:	681c      	ldr	r4, [r3, #0]
 80170a2:	685b      	ldr	r3, [r3, #4]
 80170a4:	6053      	str	r3, [r2, #4]
 80170a6:	4421      	add	r1, r4
 80170a8:	6011      	str	r1, [r2, #0]
 80170aa:	e7da      	b.n	8017062 <_free_r+0x26>
 80170ac:	d902      	bls.n	80170b4 <_free_r+0x78>
 80170ae:	230c      	movs	r3, #12
 80170b0:	6003      	str	r3, [r0, #0]
 80170b2:	e7d6      	b.n	8017062 <_free_r+0x26>
 80170b4:	6825      	ldr	r5, [r4, #0]
 80170b6:	1961      	adds	r1, r4, r5
 80170b8:	428b      	cmp	r3, r1
 80170ba:	bf04      	itt	eq
 80170bc:	6819      	ldreq	r1, [r3, #0]
 80170be:	685b      	ldreq	r3, [r3, #4]
 80170c0:	6063      	str	r3, [r4, #4]
 80170c2:	bf04      	itt	eq
 80170c4:	1949      	addeq	r1, r1, r5
 80170c6:	6021      	streq	r1, [r4, #0]
 80170c8:	6054      	str	r4, [r2, #4]
 80170ca:	e7ca      	b.n	8017062 <_free_r+0x26>
 80170cc:	b003      	add	sp, #12
 80170ce:	bd30      	pop	{r4, r5, pc}
 80170d0:	2001a818 	.word	0x2001a818

080170d4 <sbrk_aligned>:
 80170d4:	b570      	push	{r4, r5, r6, lr}
 80170d6:	4e0e      	ldr	r6, [pc, #56]	; (8017110 <sbrk_aligned+0x3c>)
 80170d8:	460c      	mov	r4, r1
 80170da:	6831      	ldr	r1, [r6, #0]
 80170dc:	4605      	mov	r5, r0
 80170de:	b911      	cbnz	r1, 80170e6 <sbrk_aligned+0x12>
 80170e0:	f000 f9c2 	bl	8017468 <_sbrk_r>
 80170e4:	6030      	str	r0, [r6, #0]
 80170e6:	4621      	mov	r1, r4
 80170e8:	4628      	mov	r0, r5
 80170ea:	f000 f9bd 	bl	8017468 <_sbrk_r>
 80170ee:	1c43      	adds	r3, r0, #1
 80170f0:	d00a      	beq.n	8017108 <sbrk_aligned+0x34>
 80170f2:	1cc4      	adds	r4, r0, #3
 80170f4:	f024 0403 	bic.w	r4, r4, #3
 80170f8:	42a0      	cmp	r0, r4
 80170fa:	d007      	beq.n	801710c <sbrk_aligned+0x38>
 80170fc:	1a21      	subs	r1, r4, r0
 80170fe:	4628      	mov	r0, r5
 8017100:	f000 f9b2 	bl	8017468 <_sbrk_r>
 8017104:	3001      	adds	r0, #1
 8017106:	d101      	bne.n	801710c <sbrk_aligned+0x38>
 8017108:	f04f 34ff 	mov.w	r4, #4294967295
 801710c:	4620      	mov	r0, r4
 801710e:	bd70      	pop	{r4, r5, r6, pc}
 8017110:	2001a81c 	.word	0x2001a81c

08017114 <_malloc_r>:
 8017114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017118:	1ccd      	adds	r5, r1, #3
 801711a:	f025 0503 	bic.w	r5, r5, #3
 801711e:	3508      	adds	r5, #8
 8017120:	2d0c      	cmp	r5, #12
 8017122:	bf38      	it	cc
 8017124:	250c      	movcc	r5, #12
 8017126:	2d00      	cmp	r5, #0
 8017128:	4607      	mov	r7, r0
 801712a:	db01      	blt.n	8017130 <_malloc_r+0x1c>
 801712c:	42a9      	cmp	r1, r5
 801712e:	d905      	bls.n	801713c <_malloc_r+0x28>
 8017130:	230c      	movs	r3, #12
 8017132:	603b      	str	r3, [r7, #0]
 8017134:	2600      	movs	r6, #0
 8017136:	4630      	mov	r0, r6
 8017138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801713c:	4e2e      	ldr	r6, [pc, #184]	; (80171f8 <_malloc_r+0xe4>)
 801713e:	f000 fc87 	bl	8017a50 <__malloc_lock>
 8017142:	6833      	ldr	r3, [r6, #0]
 8017144:	461c      	mov	r4, r3
 8017146:	bb34      	cbnz	r4, 8017196 <_malloc_r+0x82>
 8017148:	4629      	mov	r1, r5
 801714a:	4638      	mov	r0, r7
 801714c:	f7ff ffc2 	bl	80170d4 <sbrk_aligned>
 8017150:	1c43      	adds	r3, r0, #1
 8017152:	4604      	mov	r4, r0
 8017154:	d14d      	bne.n	80171f2 <_malloc_r+0xde>
 8017156:	6834      	ldr	r4, [r6, #0]
 8017158:	4626      	mov	r6, r4
 801715a:	2e00      	cmp	r6, #0
 801715c:	d140      	bne.n	80171e0 <_malloc_r+0xcc>
 801715e:	6823      	ldr	r3, [r4, #0]
 8017160:	4631      	mov	r1, r6
 8017162:	4638      	mov	r0, r7
 8017164:	eb04 0803 	add.w	r8, r4, r3
 8017168:	f000 f97e 	bl	8017468 <_sbrk_r>
 801716c:	4580      	cmp	r8, r0
 801716e:	d13a      	bne.n	80171e6 <_malloc_r+0xd2>
 8017170:	6821      	ldr	r1, [r4, #0]
 8017172:	3503      	adds	r5, #3
 8017174:	1a6d      	subs	r5, r5, r1
 8017176:	f025 0503 	bic.w	r5, r5, #3
 801717a:	3508      	adds	r5, #8
 801717c:	2d0c      	cmp	r5, #12
 801717e:	bf38      	it	cc
 8017180:	250c      	movcc	r5, #12
 8017182:	4629      	mov	r1, r5
 8017184:	4638      	mov	r0, r7
 8017186:	f7ff ffa5 	bl	80170d4 <sbrk_aligned>
 801718a:	3001      	adds	r0, #1
 801718c:	d02b      	beq.n	80171e6 <_malloc_r+0xd2>
 801718e:	6823      	ldr	r3, [r4, #0]
 8017190:	442b      	add	r3, r5
 8017192:	6023      	str	r3, [r4, #0]
 8017194:	e00e      	b.n	80171b4 <_malloc_r+0xa0>
 8017196:	6822      	ldr	r2, [r4, #0]
 8017198:	1b52      	subs	r2, r2, r5
 801719a:	d41e      	bmi.n	80171da <_malloc_r+0xc6>
 801719c:	2a0b      	cmp	r2, #11
 801719e:	d916      	bls.n	80171ce <_malloc_r+0xba>
 80171a0:	1961      	adds	r1, r4, r5
 80171a2:	42a3      	cmp	r3, r4
 80171a4:	6025      	str	r5, [r4, #0]
 80171a6:	bf18      	it	ne
 80171a8:	6059      	strne	r1, [r3, #4]
 80171aa:	6863      	ldr	r3, [r4, #4]
 80171ac:	bf08      	it	eq
 80171ae:	6031      	streq	r1, [r6, #0]
 80171b0:	5162      	str	r2, [r4, r5]
 80171b2:	604b      	str	r3, [r1, #4]
 80171b4:	4638      	mov	r0, r7
 80171b6:	f104 060b 	add.w	r6, r4, #11
 80171ba:	f000 fc4f 	bl	8017a5c <__malloc_unlock>
 80171be:	f026 0607 	bic.w	r6, r6, #7
 80171c2:	1d23      	adds	r3, r4, #4
 80171c4:	1af2      	subs	r2, r6, r3
 80171c6:	d0b6      	beq.n	8017136 <_malloc_r+0x22>
 80171c8:	1b9b      	subs	r3, r3, r6
 80171ca:	50a3      	str	r3, [r4, r2]
 80171cc:	e7b3      	b.n	8017136 <_malloc_r+0x22>
 80171ce:	6862      	ldr	r2, [r4, #4]
 80171d0:	42a3      	cmp	r3, r4
 80171d2:	bf0c      	ite	eq
 80171d4:	6032      	streq	r2, [r6, #0]
 80171d6:	605a      	strne	r2, [r3, #4]
 80171d8:	e7ec      	b.n	80171b4 <_malloc_r+0xa0>
 80171da:	4623      	mov	r3, r4
 80171dc:	6864      	ldr	r4, [r4, #4]
 80171de:	e7b2      	b.n	8017146 <_malloc_r+0x32>
 80171e0:	4634      	mov	r4, r6
 80171e2:	6876      	ldr	r6, [r6, #4]
 80171e4:	e7b9      	b.n	801715a <_malloc_r+0x46>
 80171e6:	230c      	movs	r3, #12
 80171e8:	603b      	str	r3, [r7, #0]
 80171ea:	4638      	mov	r0, r7
 80171ec:	f000 fc36 	bl	8017a5c <__malloc_unlock>
 80171f0:	e7a1      	b.n	8017136 <_malloc_r+0x22>
 80171f2:	6025      	str	r5, [r4, #0]
 80171f4:	e7de      	b.n	80171b4 <_malloc_r+0xa0>
 80171f6:	bf00      	nop
 80171f8:	2001a818 	.word	0x2001a818

080171fc <iprintf>:
 80171fc:	b40f      	push	{r0, r1, r2, r3}
 80171fe:	4b0a      	ldr	r3, [pc, #40]	; (8017228 <iprintf+0x2c>)
 8017200:	b513      	push	{r0, r1, r4, lr}
 8017202:	681c      	ldr	r4, [r3, #0]
 8017204:	b124      	cbz	r4, 8017210 <iprintf+0x14>
 8017206:	69a3      	ldr	r3, [r4, #24]
 8017208:	b913      	cbnz	r3, 8017210 <iprintf+0x14>
 801720a:	4620      	mov	r0, r4
 801720c:	f7ff fe00 	bl	8016e10 <__sinit>
 8017210:	ab05      	add	r3, sp, #20
 8017212:	9a04      	ldr	r2, [sp, #16]
 8017214:	68a1      	ldr	r1, [r4, #8]
 8017216:	9301      	str	r3, [sp, #4]
 8017218:	4620      	mov	r0, r4
 801721a:	f000 fdab 	bl	8017d74 <_vfiprintf_r>
 801721e:	b002      	add	sp, #8
 8017220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017224:	b004      	add	sp, #16
 8017226:	4770      	bx	lr
 8017228:	20000040 	.word	0x20000040

0801722c <_puts_r>:
 801722c:	b570      	push	{r4, r5, r6, lr}
 801722e:	460e      	mov	r6, r1
 8017230:	4605      	mov	r5, r0
 8017232:	b118      	cbz	r0, 801723c <_puts_r+0x10>
 8017234:	6983      	ldr	r3, [r0, #24]
 8017236:	b90b      	cbnz	r3, 801723c <_puts_r+0x10>
 8017238:	f7ff fdea 	bl	8016e10 <__sinit>
 801723c:	69ab      	ldr	r3, [r5, #24]
 801723e:	68ac      	ldr	r4, [r5, #8]
 8017240:	b913      	cbnz	r3, 8017248 <_puts_r+0x1c>
 8017242:	4628      	mov	r0, r5
 8017244:	f7ff fde4 	bl	8016e10 <__sinit>
 8017248:	4b2c      	ldr	r3, [pc, #176]	; (80172fc <_puts_r+0xd0>)
 801724a:	429c      	cmp	r4, r3
 801724c:	d120      	bne.n	8017290 <_puts_r+0x64>
 801724e:	686c      	ldr	r4, [r5, #4]
 8017250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017252:	07db      	lsls	r3, r3, #31
 8017254:	d405      	bmi.n	8017262 <_puts_r+0x36>
 8017256:	89a3      	ldrh	r3, [r4, #12]
 8017258:	0598      	lsls	r0, r3, #22
 801725a:	d402      	bmi.n	8017262 <_puts_r+0x36>
 801725c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801725e:	f7ff fe9a 	bl	8016f96 <__retarget_lock_acquire_recursive>
 8017262:	89a3      	ldrh	r3, [r4, #12]
 8017264:	0719      	lsls	r1, r3, #28
 8017266:	d51d      	bpl.n	80172a4 <_puts_r+0x78>
 8017268:	6923      	ldr	r3, [r4, #16]
 801726a:	b1db      	cbz	r3, 80172a4 <_puts_r+0x78>
 801726c:	3e01      	subs	r6, #1
 801726e:	68a3      	ldr	r3, [r4, #8]
 8017270:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017274:	3b01      	subs	r3, #1
 8017276:	60a3      	str	r3, [r4, #8]
 8017278:	bb39      	cbnz	r1, 80172ca <_puts_r+0x9e>
 801727a:	2b00      	cmp	r3, #0
 801727c:	da38      	bge.n	80172f0 <_puts_r+0xc4>
 801727e:	4622      	mov	r2, r4
 8017280:	210a      	movs	r1, #10
 8017282:	4628      	mov	r0, r5
 8017284:	f000 f998 	bl	80175b8 <__swbuf_r>
 8017288:	3001      	adds	r0, #1
 801728a:	d011      	beq.n	80172b0 <_puts_r+0x84>
 801728c:	250a      	movs	r5, #10
 801728e:	e011      	b.n	80172b4 <_puts_r+0x88>
 8017290:	4b1b      	ldr	r3, [pc, #108]	; (8017300 <_puts_r+0xd4>)
 8017292:	429c      	cmp	r4, r3
 8017294:	d101      	bne.n	801729a <_puts_r+0x6e>
 8017296:	68ac      	ldr	r4, [r5, #8]
 8017298:	e7da      	b.n	8017250 <_puts_r+0x24>
 801729a:	4b1a      	ldr	r3, [pc, #104]	; (8017304 <_puts_r+0xd8>)
 801729c:	429c      	cmp	r4, r3
 801729e:	bf08      	it	eq
 80172a0:	68ec      	ldreq	r4, [r5, #12]
 80172a2:	e7d5      	b.n	8017250 <_puts_r+0x24>
 80172a4:	4621      	mov	r1, r4
 80172a6:	4628      	mov	r0, r5
 80172a8:	f000 f9ea 	bl	8017680 <__swsetup_r>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	d0dd      	beq.n	801726c <_puts_r+0x40>
 80172b0:	f04f 35ff 	mov.w	r5, #4294967295
 80172b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172b6:	07da      	lsls	r2, r3, #31
 80172b8:	d405      	bmi.n	80172c6 <_puts_r+0x9a>
 80172ba:	89a3      	ldrh	r3, [r4, #12]
 80172bc:	059b      	lsls	r3, r3, #22
 80172be:	d402      	bmi.n	80172c6 <_puts_r+0x9a>
 80172c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172c2:	f7ff fe69 	bl	8016f98 <__retarget_lock_release_recursive>
 80172c6:	4628      	mov	r0, r5
 80172c8:	bd70      	pop	{r4, r5, r6, pc}
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	da04      	bge.n	80172d8 <_puts_r+0xac>
 80172ce:	69a2      	ldr	r2, [r4, #24]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	dc06      	bgt.n	80172e2 <_puts_r+0xb6>
 80172d4:	290a      	cmp	r1, #10
 80172d6:	d004      	beq.n	80172e2 <_puts_r+0xb6>
 80172d8:	6823      	ldr	r3, [r4, #0]
 80172da:	1c5a      	adds	r2, r3, #1
 80172dc:	6022      	str	r2, [r4, #0]
 80172de:	7019      	strb	r1, [r3, #0]
 80172e0:	e7c5      	b.n	801726e <_puts_r+0x42>
 80172e2:	4622      	mov	r2, r4
 80172e4:	4628      	mov	r0, r5
 80172e6:	f000 f967 	bl	80175b8 <__swbuf_r>
 80172ea:	3001      	adds	r0, #1
 80172ec:	d1bf      	bne.n	801726e <_puts_r+0x42>
 80172ee:	e7df      	b.n	80172b0 <_puts_r+0x84>
 80172f0:	6823      	ldr	r3, [r4, #0]
 80172f2:	250a      	movs	r5, #10
 80172f4:	1c5a      	adds	r2, r3, #1
 80172f6:	6022      	str	r2, [r4, #0]
 80172f8:	701d      	strb	r5, [r3, #0]
 80172fa:	e7db      	b.n	80172b4 <_puts_r+0x88>
 80172fc:	0801d29c 	.word	0x0801d29c
 8017300:	0801d2bc 	.word	0x0801d2bc
 8017304:	0801d27c 	.word	0x0801d27c

08017308 <puts>:
 8017308:	4b02      	ldr	r3, [pc, #8]	; (8017314 <puts+0xc>)
 801730a:	4601      	mov	r1, r0
 801730c:	6818      	ldr	r0, [r3, #0]
 801730e:	f7ff bf8d 	b.w	801722c <_puts_r>
 8017312:	bf00      	nop
 8017314:	20000040 	.word	0x20000040

08017318 <rand>:
 8017318:	4b16      	ldr	r3, [pc, #88]	; (8017374 <rand+0x5c>)
 801731a:	b510      	push	{r4, lr}
 801731c:	681c      	ldr	r4, [r3, #0]
 801731e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017320:	b9b3      	cbnz	r3, 8017350 <rand+0x38>
 8017322:	2018      	movs	r0, #24
 8017324:	f7ff fe3a 	bl	8016f9c <malloc>
 8017328:	63a0      	str	r0, [r4, #56]	; 0x38
 801732a:	b928      	cbnz	r0, 8017338 <rand+0x20>
 801732c:	4602      	mov	r2, r0
 801732e:	4b12      	ldr	r3, [pc, #72]	; (8017378 <rand+0x60>)
 8017330:	4812      	ldr	r0, [pc, #72]	; (801737c <rand+0x64>)
 8017332:	214e      	movs	r1, #78	; 0x4e
 8017334:	f000 fa12 	bl	801775c <__assert_func>
 8017338:	4a11      	ldr	r2, [pc, #68]	; (8017380 <rand+0x68>)
 801733a:	4b12      	ldr	r3, [pc, #72]	; (8017384 <rand+0x6c>)
 801733c:	e9c0 2300 	strd	r2, r3, [r0]
 8017340:	4b11      	ldr	r3, [pc, #68]	; (8017388 <rand+0x70>)
 8017342:	6083      	str	r3, [r0, #8]
 8017344:	230b      	movs	r3, #11
 8017346:	8183      	strh	r3, [r0, #12]
 8017348:	2201      	movs	r2, #1
 801734a:	2300      	movs	r3, #0
 801734c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017350:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017352:	4a0e      	ldr	r2, [pc, #56]	; (801738c <rand+0x74>)
 8017354:	6920      	ldr	r0, [r4, #16]
 8017356:	6963      	ldr	r3, [r4, #20]
 8017358:	490d      	ldr	r1, [pc, #52]	; (8017390 <rand+0x78>)
 801735a:	4342      	muls	r2, r0
 801735c:	fb01 2203 	mla	r2, r1, r3, r2
 8017360:	fba0 0101 	umull	r0, r1, r0, r1
 8017364:	1c43      	adds	r3, r0, #1
 8017366:	eb42 0001 	adc.w	r0, r2, r1
 801736a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801736e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017372:	bd10      	pop	{r4, pc}
 8017374:	20000040 	.word	0x20000040
 8017378:	0801d2e0 	.word	0x0801d2e0
 801737c:	0801d2f7 	.word	0x0801d2f7
 8017380:	abcd330e 	.word	0xabcd330e
 8017384:	e66d1234 	.word	0xe66d1234
 8017388:	0005deec 	.word	0x0005deec
 801738c:	5851f42d 	.word	0x5851f42d
 8017390:	4c957f2d 	.word	0x4c957f2d

08017394 <cleanup_glue>:
 8017394:	b538      	push	{r3, r4, r5, lr}
 8017396:	460c      	mov	r4, r1
 8017398:	6809      	ldr	r1, [r1, #0]
 801739a:	4605      	mov	r5, r0
 801739c:	b109      	cbz	r1, 80173a2 <cleanup_glue+0xe>
 801739e:	f7ff fff9 	bl	8017394 <cleanup_glue>
 80173a2:	4621      	mov	r1, r4
 80173a4:	4628      	mov	r0, r5
 80173a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173aa:	f7ff be47 	b.w	801703c <_free_r>
	...

080173b0 <_reclaim_reent>:
 80173b0:	4b2c      	ldr	r3, [pc, #176]	; (8017464 <_reclaim_reent+0xb4>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	4283      	cmp	r3, r0
 80173b6:	b570      	push	{r4, r5, r6, lr}
 80173b8:	4604      	mov	r4, r0
 80173ba:	d051      	beq.n	8017460 <_reclaim_reent+0xb0>
 80173bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80173be:	b143      	cbz	r3, 80173d2 <_reclaim_reent+0x22>
 80173c0:	68db      	ldr	r3, [r3, #12]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d14a      	bne.n	801745c <_reclaim_reent+0xac>
 80173c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173c8:	6819      	ldr	r1, [r3, #0]
 80173ca:	b111      	cbz	r1, 80173d2 <_reclaim_reent+0x22>
 80173cc:	4620      	mov	r0, r4
 80173ce:	f7ff fe35 	bl	801703c <_free_r>
 80173d2:	6961      	ldr	r1, [r4, #20]
 80173d4:	b111      	cbz	r1, 80173dc <_reclaim_reent+0x2c>
 80173d6:	4620      	mov	r0, r4
 80173d8:	f7ff fe30 	bl	801703c <_free_r>
 80173dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80173de:	b111      	cbz	r1, 80173e6 <_reclaim_reent+0x36>
 80173e0:	4620      	mov	r0, r4
 80173e2:	f7ff fe2b 	bl	801703c <_free_r>
 80173e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80173e8:	b111      	cbz	r1, 80173f0 <_reclaim_reent+0x40>
 80173ea:	4620      	mov	r0, r4
 80173ec:	f7ff fe26 	bl	801703c <_free_r>
 80173f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80173f2:	b111      	cbz	r1, 80173fa <_reclaim_reent+0x4a>
 80173f4:	4620      	mov	r0, r4
 80173f6:	f7ff fe21 	bl	801703c <_free_r>
 80173fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80173fc:	b111      	cbz	r1, 8017404 <_reclaim_reent+0x54>
 80173fe:	4620      	mov	r0, r4
 8017400:	f7ff fe1c 	bl	801703c <_free_r>
 8017404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017406:	b111      	cbz	r1, 801740e <_reclaim_reent+0x5e>
 8017408:	4620      	mov	r0, r4
 801740a:	f7ff fe17 	bl	801703c <_free_r>
 801740e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017410:	b111      	cbz	r1, 8017418 <_reclaim_reent+0x68>
 8017412:	4620      	mov	r0, r4
 8017414:	f7ff fe12 	bl	801703c <_free_r>
 8017418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801741a:	b111      	cbz	r1, 8017422 <_reclaim_reent+0x72>
 801741c:	4620      	mov	r0, r4
 801741e:	f7ff fe0d 	bl	801703c <_free_r>
 8017422:	69a3      	ldr	r3, [r4, #24]
 8017424:	b1e3      	cbz	r3, 8017460 <_reclaim_reent+0xb0>
 8017426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017428:	4620      	mov	r0, r4
 801742a:	4798      	blx	r3
 801742c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801742e:	b1b9      	cbz	r1, 8017460 <_reclaim_reent+0xb0>
 8017430:	4620      	mov	r0, r4
 8017432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017436:	f7ff bfad 	b.w	8017394 <cleanup_glue>
 801743a:	5949      	ldr	r1, [r1, r5]
 801743c:	b941      	cbnz	r1, 8017450 <_reclaim_reent+0xa0>
 801743e:	3504      	adds	r5, #4
 8017440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017442:	2d80      	cmp	r5, #128	; 0x80
 8017444:	68d9      	ldr	r1, [r3, #12]
 8017446:	d1f8      	bne.n	801743a <_reclaim_reent+0x8a>
 8017448:	4620      	mov	r0, r4
 801744a:	f7ff fdf7 	bl	801703c <_free_r>
 801744e:	e7ba      	b.n	80173c6 <_reclaim_reent+0x16>
 8017450:	680e      	ldr	r6, [r1, #0]
 8017452:	4620      	mov	r0, r4
 8017454:	f7ff fdf2 	bl	801703c <_free_r>
 8017458:	4631      	mov	r1, r6
 801745a:	e7ef      	b.n	801743c <_reclaim_reent+0x8c>
 801745c:	2500      	movs	r5, #0
 801745e:	e7ef      	b.n	8017440 <_reclaim_reent+0x90>
 8017460:	bd70      	pop	{r4, r5, r6, pc}
 8017462:	bf00      	nop
 8017464:	20000040 	.word	0x20000040

08017468 <_sbrk_r>:
 8017468:	b538      	push	{r3, r4, r5, lr}
 801746a:	4d06      	ldr	r5, [pc, #24]	; (8017484 <_sbrk_r+0x1c>)
 801746c:	2300      	movs	r3, #0
 801746e:	4604      	mov	r4, r0
 8017470:	4608      	mov	r0, r1
 8017472:	602b      	str	r3, [r5, #0]
 8017474:	f7ea fcc4 	bl	8001e00 <_sbrk>
 8017478:	1c43      	adds	r3, r0, #1
 801747a:	d102      	bne.n	8017482 <_sbrk_r+0x1a>
 801747c:	682b      	ldr	r3, [r5, #0]
 801747e:	b103      	cbz	r3, 8017482 <_sbrk_r+0x1a>
 8017480:	6023      	str	r3, [r4, #0]
 8017482:	bd38      	pop	{r3, r4, r5, pc}
 8017484:	2001a820 	.word	0x2001a820

08017488 <sniprintf>:
 8017488:	b40c      	push	{r2, r3}
 801748a:	b530      	push	{r4, r5, lr}
 801748c:	4b17      	ldr	r3, [pc, #92]	; (80174ec <sniprintf+0x64>)
 801748e:	1e0c      	subs	r4, r1, #0
 8017490:	681d      	ldr	r5, [r3, #0]
 8017492:	b09d      	sub	sp, #116	; 0x74
 8017494:	da08      	bge.n	80174a8 <sniprintf+0x20>
 8017496:	238b      	movs	r3, #139	; 0x8b
 8017498:	602b      	str	r3, [r5, #0]
 801749a:	f04f 30ff 	mov.w	r0, #4294967295
 801749e:	b01d      	add	sp, #116	; 0x74
 80174a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174a4:	b002      	add	sp, #8
 80174a6:	4770      	bx	lr
 80174a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80174ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80174b0:	bf14      	ite	ne
 80174b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80174b6:	4623      	moveq	r3, r4
 80174b8:	9304      	str	r3, [sp, #16]
 80174ba:	9307      	str	r3, [sp, #28]
 80174bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174c0:	9002      	str	r0, [sp, #8]
 80174c2:	9006      	str	r0, [sp, #24]
 80174c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80174c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80174ca:	ab21      	add	r3, sp, #132	; 0x84
 80174cc:	a902      	add	r1, sp, #8
 80174ce:	4628      	mov	r0, r5
 80174d0:	9301      	str	r3, [sp, #4]
 80174d2:	f000 fb25 	bl	8017b20 <_svfiprintf_r>
 80174d6:	1c43      	adds	r3, r0, #1
 80174d8:	bfbc      	itt	lt
 80174da:	238b      	movlt	r3, #139	; 0x8b
 80174dc:	602b      	strlt	r3, [r5, #0]
 80174de:	2c00      	cmp	r4, #0
 80174e0:	d0dd      	beq.n	801749e <sniprintf+0x16>
 80174e2:	9b02      	ldr	r3, [sp, #8]
 80174e4:	2200      	movs	r2, #0
 80174e6:	701a      	strb	r2, [r3, #0]
 80174e8:	e7d9      	b.n	801749e <sniprintf+0x16>
 80174ea:	bf00      	nop
 80174ec:	20000040 	.word	0x20000040

080174f0 <siprintf>:
 80174f0:	b40e      	push	{r1, r2, r3}
 80174f2:	b500      	push	{lr}
 80174f4:	b09c      	sub	sp, #112	; 0x70
 80174f6:	ab1d      	add	r3, sp, #116	; 0x74
 80174f8:	9002      	str	r0, [sp, #8]
 80174fa:	9006      	str	r0, [sp, #24]
 80174fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017500:	4809      	ldr	r0, [pc, #36]	; (8017528 <siprintf+0x38>)
 8017502:	9107      	str	r1, [sp, #28]
 8017504:	9104      	str	r1, [sp, #16]
 8017506:	4909      	ldr	r1, [pc, #36]	; (801752c <siprintf+0x3c>)
 8017508:	f853 2b04 	ldr.w	r2, [r3], #4
 801750c:	9105      	str	r1, [sp, #20]
 801750e:	6800      	ldr	r0, [r0, #0]
 8017510:	9301      	str	r3, [sp, #4]
 8017512:	a902      	add	r1, sp, #8
 8017514:	f000 fb04 	bl	8017b20 <_svfiprintf_r>
 8017518:	9b02      	ldr	r3, [sp, #8]
 801751a:	2200      	movs	r2, #0
 801751c:	701a      	strb	r2, [r3, #0]
 801751e:	b01c      	add	sp, #112	; 0x70
 8017520:	f85d eb04 	ldr.w	lr, [sp], #4
 8017524:	b003      	add	sp, #12
 8017526:	4770      	bx	lr
 8017528:	20000040 	.word	0x20000040
 801752c:	ffff0208 	.word	0xffff0208

08017530 <__sread>:
 8017530:	b510      	push	{r4, lr}
 8017532:	460c      	mov	r4, r1
 8017534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017538:	f000 fee0 	bl	80182fc <_read_r>
 801753c:	2800      	cmp	r0, #0
 801753e:	bfab      	itete	ge
 8017540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017542:	89a3      	ldrhlt	r3, [r4, #12]
 8017544:	181b      	addge	r3, r3, r0
 8017546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801754a:	bfac      	ite	ge
 801754c:	6563      	strge	r3, [r4, #84]	; 0x54
 801754e:	81a3      	strhlt	r3, [r4, #12]
 8017550:	bd10      	pop	{r4, pc}

08017552 <__swrite>:
 8017552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017556:	461f      	mov	r7, r3
 8017558:	898b      	ldrh	r3, [r1, #12]
 801755a:	05db      	lsls	r3, r3, #23
 801755c:	4605      	mov	r5, r0
 801755e:	460c      	mov	r4, r1
 8017560:	4616      	mov	r6, r2
 8017562:	d505      	bpl.n	8017570 <__swrite+0x1e>
 8017564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017568:	2302      	movs	r3, #2
 801756a:	2200      	movs	r2, #0
 801756c:	f000 f9f8 	bl	8017960 <_lseek_r>
 8017570:	89a3      	ldrh	r3, [r4, #12]
 8017572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801757a:	81a3      	strh	r3, [r4, #12]
 801757c:	4632      	mov	r2, r6
 801757e:	463b      	mov	r3, r7
 8017580:	4628      	mov	r0, r5
 8017582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017586:	f000 b869 	b.w	801765c <_write_r>

0801758a <__sseek>:
 801758a:	b510      	push	{r4, lr}
 801758c:	460c      	mov	r4, r1
 801758e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017592:	f000 f9e5 	bl	8017960 <_lseek_r>
 8017596:	1c43      	adds	r3, r0, #1
 8017598:	89a3      	ldrh	r3, [r4, #12]
 801759a:	bf15      	itete	ne
 801759c:	6560      	strne	r0, [r4, #84]	; 0x54
 801759e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80175a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80175a6:	81a3      	strheq	r3, [r4, #12]
 80175a8:	bf18      	it	ne
 80175aa:	81a3      	strhne	r3, [r4, #12]
 80175ac:	bd10      	pop	{r4, pc}

080175ae <__sclose>:
 80175ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175b2:	f000 b8f1 	b.w	8017798 <_close_r>
	...

080175b8 <__swbuf_r>:
 80175b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175ba:	460e      	mov	r6, r1
 80175bc:	4614      	mov	r4, r2
 80175be:	4605      	mov	r5, r0
 80175c0:	b118      	cbz	r0, 80175ca <__swbuf_r+0x12>
 80175c2:	6983      	ldr	r3, [r0, #24]
 80175c4:	b90b      	cbnz	r3, 80175ca <__swbuf_r+0x12>
 80175c6:	f7ff fc23 	bl	8016e10 <__sinit>
 80175ca:	4b21      	ldr	r3, [pc, #132]	; (8017650 <__swbuf_r+0x98>)
 80175cc:	429c      	cmp	r4, r3
 80175ce:	d12b      	bne.n	8017628 <__swbuf_r+0x70>
 80175d0:	686c      	ldr	r4, [r5, #4]
 80175d2:	69a3      	ldr	r3, [r4, #24]
 80175d4:	60a3      	str	r3, [r4, #8]
 80175d6:	89a3      	ldrh	r3, [r4, #12]
 80175d8:	071a      	lsls	r2, r3, #28
 80175da:	d52f      	bpl.n	801763c <__swbuf_r+0x84>
 80175dc:	6923      	ldr	r3, [r4, #16]
 80175de:	b36b      	cbz	r3, 801763c <__swbuf_r+0x84>
 80175e0:	6923      	ldr	r3, [r4, #16]
 80175e2:	6820      	ldr	r0, [r4, #0]
 80175e4:	1ac0      	subs	r0, r0, r3
 80175e6:	6963      	ldr	r3, [r4, #20]
 80175e8:	b2f6      	uxtb	r6, r6
 80175ea:	4283      	cmp	r3, r0
 80175ec:	4637      	mov	r7, r6
 80175ee:	dc04      	bgt.n	80175fa <__swbuf_r+0x42>
 80175f0:	4621      	mov	r1, r4
 80175f2:	4628      	mov	r0, r5
 80175f4:	f000 f966 	bl	80178c4 <_fflush_r>
 80175f8:	bb30      	cbnz	r0, 8017648 <__swbuf_r+0x90>
 80175fa:	68a3      	ldr	r3, [r4, #8]
 80175fc:	3b01      	subs	r3, #1
 80175fe:	60a3      	str	r3, [r4, #8]
 8017600:	6823      	ldr	r3, [r4, #0]
 8017602:	1c5a      	adds	r2, r3, #1
 8017604:	6022      	str	r2, [r4, #0]
 8017606:	701e      	strb	r6, [r3, #0]
 8017608:	6963      	ldr	r3, [r4, #20]
 801760a:	3001      	adds	r0, #1
 801760c:	4283      	cmp	r3, r0
 801760e:	d004      	beq.n	801761a <__swbuf_r+0x62>
 8017610:	89a3      	ldrh	r3, [r4, #12]
 8017612:	07db      	lsls	r3, r3, #31
 8017614:	d506      	bpl.n	8017624 <__swbuf_r+0x6c>
 8017616:	2e0a      	cmp	r6, #10
 8017618:	d104      	bne.n	8017624 <__swbuf_r+0x6c>
 801761a:	4621      	mov	r1, r4
 801761c:	4628      	mov	r0, r5
 801761e:	f000 f951 	bl	80178c4 <_fflush_r>
 8017622:	b988      	cbnz	r0, 8017648 <__swbuf_r+0x90>
 8017624:	4638      	mov	r0, r7
 8017626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017628:	4b0a      	ldr	r3, [pc, #40]	; (8017654 <__swbuf_r+0x9c>)
 801762a:	429c      	cmp	r4, r3
 801762c:	d101      	bne.n	8017632 <__swbuf_r+0x7a>
 801762e:	68ac      	ldr	r4, [r5, #8]
 8017630:	e7cf      	b.n	80175d2 <__swbuf_r+0x1a>
 8017632:	4b09      	ldr	r3, [pc, #36]	; (8017658 <__swbuf_r+0xa0>)
 8017634:	429c      	cmp	r4, r3
 8017636:	bf08      	it	eq
 8017638:	68ec      	ldreq	r4, [r5, #12]
 801763a:	e7ca      	b.n	80175d2 <__swbuf_r+0x1a>
 801763c:	4621      	mov	r1, r4
 801763e:	4628      	mov	r0, r5
 8017640:	f000 f81e 	bl	8017680 <__swsetup_r>
 8017644:	2800      	cmp	r0, #0
 8017646:	d0cb      	beq.n	80175e0 <__swbuf_r+0x28>
 8017648:	f04f 37ff 	mov.w	r7, #4294967295
 801764c:	e7ea      	b.n	8017624 <__swbuf_r+0x6c>
 801764e:	bf00      	nop
 8017650:	0801d29c 	.word	0x0801d29c
 8017654:	0801d2bc 	.word	0x0801d2bc
 8017658:	0801d27c 	.word	0x0801d27c

0801765c <_write_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	4d07      	ldr	r5, [pc, #28]	; (801767c <_write_r+0x20>)
 8017660:	4604      	mov	r4, r0
 8017662:	4608      	mov	r0, r1
 8017664:	4611      	mov	r1, r2
 8017666:	2200      	movs	r2, #0
 8017668:	602a      	str	r2, [r5, #0]
 801766a:	461a      	mov	r2, r3
 801766c:	f7e9 f88d 	bl	800078a <_write>
 8017670:	1c43      	adds	r3, r0, #1
 8017672:	d102      	bne.n	801767a <_write_r+0x1e>
 8017674:	682b      	ldr	r3, [r5, #0]
 8017676:	b103      	cbz	r3, 801767a <_write_r+0x1e>
 8017678:	6023      	str	r3, [r4, #0]
 801767a:	bd38      	pop	{r3, r4, r5, pc}
 801767c:	2001a820 	.word	0x2001a820

08017680 <__swsetup_r>:
 8017680:	4b32      	ldr	r3, [pc, #200]	; (801774c <__swsetup_r+0xcc>)
 8017682:	b570      	push	{r4, r5, r6, lr}
 8017684:	681d      	ldr	r5, [r3, #0]
 8017686:	4606      	mov	r6, r0
 8017688:	460c      	mov	r4, r1
 801768a:	b125      	cbz	r5, 8017696 <__swsetup_r+0x16>
 801768c:	69ab      	ldr	r3, [r5, #24]
 801768e:	b913      	cbnz	r3, 8017696 <__swsetup_r+0x16>
 8017690:	4628      	mov	r0, r5
 8017692:	f7ff fbbd 	bl	8016e10 <__sinit>
 8017696:	4b2e      	ldr	r3, [pc, #184]	; (8017750 <__swsetup_r+0xd0>)
 8017698:	429c      	cmp	r4, r3
 801769a:	d10f      	bne.n	80176bc <__swsetup_r+0x3c>
 801769c:	686c      	ldr	r4, [r5, #4]
 801769e:	89a3      	ldrh	r3, [r4, #12]
 80176a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80176a4:	0719      	lsls	r1, r3, #28
 80176a6:	d42c      	bmi.n	8017702 <__swsetup_r+0x82>
 80176a8:	06dd      	lsls	r5, r3, #27
 80176aa:	d411      	bmi.n	80176d0 <__swsetup_r+0x50>
 80176ac:	2309      	movs	r3, #9
 80176ae:	6033      	str	r3, [r6, #0]
 80176b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80176b4:	81a3      	strh	r3, [r4, #12]
 80176b6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ba:	e03e      	b.n	801773a <__swsetup_r+0xba>
 80176bc:	4b25      	ldr	r3, [pc, #148]	; (8017754 <__swsetup_r+0xd4>)
 80176be:	429c      	cmp	r4, r3
 80176c0:	d101      	bne.n	80176c6 <__swsetup_r+0x46>
 80176c2:	68ac      	ldr	r4, [r5, #8]
 80176c4:	e7eb      	b.n	801769e <__swsetup_r+0x1e>
 80176c6:	4b24      	ldr	r3, [pc, #144]	; (8017758 <__swsetup_r+0xd8>)
 80176c8:	429c      	cmp	r4, r3
 80176ca:	bf08      	it	eq
 80176cc:	68ec      	ldreq	r4, [r5, #12]
 80176ce:	e7e6      	b.n	801769e <__swsetup_r+0x1e>
 80176d0:	0758      	lsls	r0, r3, #29
 80176d2:	d512      	bpl.n	80176fa <__swsetup_r+0x7a>
 80176d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176d6:	b141      	cbz	r1, 80176ea <__swsetup_r+0x6a>
 80176d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176dc:	4299      	cmp	r1, r3
 80176de:	d002      	beq.n	80176e6 <__swsetup_r+0x66>
 80176e0:	4630      	mov	r0, r6
 80176e2:	f7ff fcab 	bl	801703c <_free_r>
 80176e6:	2300      	movs	r3, #0
 80176e8:	6363      	str	r3, [r4, #52]	; 0x34
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80176f0:	81a3      	strh	r3, [r4, #12]
 80176f2:	2300      	movs	r3, #0
 80176f4:	6063      	str	r3, [r4, #4]
 80176f6:	6923      	ldr	r3, [r4, #16]
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	89a3      	ldrh	r3, [r4, #12]
 80176fc:	f043 0308 	orr.w	r3, r3, #8
 8017700:	81a3      	strh	r3, [r4, #12]
 8017702:	6923      	ldr	r3, [r4, #16]
 8017704:	b94b      	cbnz	r3, 801771a <__swsetup_r+0x9a>
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017710:	d003      	beq.n	801771a <__swsetup_r+0x9a>
 8017712:	4621      	mov	r1, r4
 8017714:	4630      	mov	r0, r6
 8017716:	f000 f95b 	bl	80179d0 <__smakebuf_r>
 801771a:	89a0      	ldrh	r0, [r4, #12]
 801771c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017720:	f010 0301 	ands.w	r3, r0, #1
 8017724:	d00a      	beq.n	801773c <__swsetup_r+0xbc>
 8017726:	2300      	movs	r3, #0
 8017728:	60a3      	str	r3, [r4, #8]
 801772a:	6963      	ldr	r3, [r4, #20]
 801772c:	425b      	negs	r3, r3
 801772e:	61a3      	str	r3, [r4, #24]
 8017730:	6923      	ldr	r3, [r4, #16]
 8017732:	b943      	cbnz	r3, 8017746 <__swsetup_r+0xc6>
 8017734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017738:	d1ba      	bne.n	80176b0 <__swsetup_r+0x30>
 801773a:	bd70      	pop	{r4, r5, r6, pc}
 801773c:	0781      	lsls	r1, r0, #30
 801773e:	bf58      	it	pl
 8017740:	6963      	ldrpl	r3, [r4, #20]
 8017742:	60a3      	str	r3, [r4, #8]
 8017744:	e7f4      	b.n	8017730 <__swsetup_r+0xb0>
 8017746:	2000      	movs	r0, #0
 8017748:	e7f7      	b.n	801773a <__swsetup_r+0xba>
 801774a:	bf00      	nop
 801774c:	20000040 	.word	0x20000040
 8017750:	0801d29c 	.word	0x0801d29c
 8017754:	0801d2bc 	.word	0x0801d2bc
 8017758:	0801d27c 	.word	0x0801d27c

0801775c <__assert_func>:
 801775c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801775e:	4614      	mov	r4, r2
 8017760:	461a      	mov	r2, r3
 8017762:	4b09      	ldr	r3, [pc, #36]	; (8017788 <__assert_func+0x2c>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	4605      	mov	r5, r0
 8017768:	68d8      	ldr	r0, [r3, #12]
 801776a:	b14c      	cbz	r4, 8017780 <__assert_func+0x24>
 801776c:	4b07      	ldr	r3, [pc, #28]	; (801778c <__assert_func+0x30>)
 801776e:	9100      	str	r1, [sp, #0]
 8017770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017774:	4906      	ldr	r1, [pc, #24]	; (8017790 <__assert_func+0x34>)
 8017776:	462b      	mov	r3, r5
 8017778:	f000 f8e0 	bl	801793c <fiprintf>
 801777c:	f000 fdd0 	bl	8018320 <abort>
 8017780:	4b04      	ldr	r3, [pc, #16]	; (8017794 <__assert_func+0x38>)
 8017782:	461c      	mov	r4, r3
 8017784:	e7f3      	b.n	801776e <__assert_func+0x12>
 8017786:	bf00      	nop
 8017788:	20000040 	.word	0x20000040
 801778c:	0801d352 	.word	0x0801d352
 8017790:	0801d35f 	.word	0x0801d35f
 8017794:	0801d38d 	.word	0x0801d38d

08017798 <_close_r>:
 8017798:	b538      	push	{r3, r4, r5, lr}
 801779a:	4d06      	ldr	r5, [pc, #24]	; (80177b4 <_close_r+0x1c>)
 801779c:	2300      	movs	r3, #0
 801779e:	4604      	mov	r4, r0
 80177a0:	4608      	mov	r0, r1
 80177a2:	602b      	str	r3, [r5, #0]
 80177a4:	f7ea faf7 	bl	8001d96 <_close>
 80177a8:	1c43      	adds	r3, r0, #1
 80177aa:	d102      	bne.n	80177b2 <_close_r+0x1a>
 80177ac:	682b      	ldr	r3, [r5, #0]
 80177ae:	b103      	cbz	r3, 80177b2 <_close_r+0x1a>
 80177b0:	6023      	str	r3, [r4, #0]
 80177b2:	bd38      	pop	{r3, r4, r5, pc}
 80177b4:	2001a820 	.word	0x2001a820

080177b8 <__sflush_r>:
 80177b8:	898a      	ldrh	r2, [r1, #12]
 80177ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177be:	4605      	mov	r5, r0
 80177c0:	0710      	lsls	r0, r2, #28
 80177c2:	460c      	mov	r4, r1
 80177c4:	d458      	bmi.n	8017878 <__sflush_r+0xc0>
 80177c6:	684b      	ldr	r3, [r1, #4]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	dc05      	bgt.n	80177d8 <__sflush_r+0x20>
 80177cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	dc02      	bgt.n	80177d8 <__sflush_r+0x20>
 80177d2:	2000      	movs	r0, #0
 80177d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177da:	2e00      	cmp	r6, #0
 80177dc:	d0f9      	beq.n	80177d2 <__sflush_r+0x1a>
 80177de:	2300      	movs	r3, #0
 80177e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80177e4:	682f      	ldr	r7, [r5, #0]
 80177e6:	602b      	str	r3, [r5, #0]
 80177e8:	d032      	beq.n	8017850 <__sflush_r+0x98>
 80177ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80177ec:	89a3      	ldrh	r3, [r4, #12]
 80177ee:	075a      	lsls	r2, r3, #29
 80177f0:	d505      	bpl.n	80177fe <__sflush_r+0x46>
 80177f2:	6863      	ldr	r3, [r4, #4]
 80177f4:	1ac0      	subs	r0, r0, r3
 80177f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177f8:	b10b      	cbz	r3, 80177fe <__sflush_r+0x46>
 80177fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80177fc:	1ac0      	subs	r0, r0, r3
 80177fe:	2300      	movs	r3, #0
 8017800:	4602      	mov	r2, r0
 8017802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017804:	6a21      	ldr	r1, [r4, #32]
 8017806:	4628      	mov	r0, r5
 8017808:	47b0      	blx	r6
 801780a:	1c43      	adds	r3, r0, #1
 801780c:	89a3      	ldrh	r3, [r4, #12]
 801780e:	d106      	bne.n	801781e <__sflush_r+0x66>
 8017810:	6829      	ldr	r1, [r5, #0]
 8017812:	291d      	cmp	r1, #29
 8017814:	d82c      	bhi.n	8017870 <__sflush_r+0xb8>
 8017816:	4a2a      	ldr	r2, [pc, #168]	; (80178c0 <__sflush_r+0x108>)
 8017818:	40ca      	lsrs	r2, r1
 801781a:	07d6      	lsls	r6, r2, #31
 801781c:	d528      	bpl.n	8017870 <__sflush_r+0xb8>
 801781e:	2200      	movs	r2, #0
 8017820:	6062      	str	r2, [r4, #4]
 8017822:	04d9      	lsls	r1, r3, #19
 8017824:	6922      	ldr	r2, [r4, #16]
 8017826:	6022      	str	r2, [r4, #0]
 8017828:	d504      	bpl.n	8017834 <__sflush_r+0x7c>
 801782a:	1c42      	adds	r2, r0, #1
 801782c:	d101      	bne.n	8017832 <__sflush_r+0x7a>
 801782e:	682b      	ldr	r3, [r5, #0]
 8017830:	b903      	cbnz	r3, 8017834 <__sflush_r+0x7c>
 8017832:	6560      	str	r0, [r4, #84]	; 0x54
 8017834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017836:	602f      	str	r7, [r5, #0]
 8017838:	2900      	cmp	r1, #0
 801783a:	d0ca      	beq.n	80177d2 <__sflush_r+0x1a>
 801783c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017840:	4299      	cmp	r1, r3
 8017842:	d002      	beq.n	801784a <__sflush_r+0x92>
 8017844:	4628      	mov	r0, r5
 8017846:	f7ff fbf9 	bl	801703c <_free_r>
 801784a:	2000      	movs	r0, #0
 801784c:	6360      	str	r0, [r4, #52]	; 0x34
 801784e:	e7c1      	b.n	80177d4 <__sflush_r+0x1c>
 8017850:	6a21      	ldr	r1, [r4, #32]
 8017852:	2301      	movs	r3, #1
 8017854:	4628      	mov	r0, r5
 8017856:	47b0      	blx	r6
 8017858:	1c41      	adds	r1, r0, #1
 801785a:	d1c7      	bne.n	80177ec <__sflush_r+0x34>
 801785c:	682b      	ldr	r3, [r5, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d0c4      	beq.n	80177ec <__sflush_r+0x34>
 8017862:	2b1d      	cmp	r3, #29
 8017864:	d001      	beq.n	801786a <__sflush_r+0xb2>
 8017866:	2b16      	cmp	r3, #22
 8017868:	d101      	bne.n	801786e <__sflush_r+0xb6>
 801786a:	602f      	str	r7, [r5, #0]
 801786c:	e7b1      	b.n	80177d2 <__sflush_r+0x1a>
 801786e:	89a3      	ldrh	r3, [r4, #12]
 8017870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017874:	81a3      	strh	r3, [r4, #12]
 8017876:	e7ad      	b.n	80177d4 <__sflush_r+0x1c>
 8017878:	690f      	ldr	r7, [r1, #16]
 801787a:	2f00      	cmp	r7, #0
 801787c:	d0a9      	beq.n	80177d2 <__sflush_r+0x1a>
 801787e:	0793      	lsls	r3, r2, #30
 8017880:	680e      	ldr	r6, [r1, #0]
 8017882:	bf08      	it	eq
 8017884:	694b      	ldreq	r3, [r1, #20]
 8017886:	600f      	str	r7, [r1, #0]
 8017888:	bf18      	it	ne
 801788a:	2300      	movne	r3, #0
 801788c:	eba6 0807 	sub.w	r8, r6, r7
 8017890:	608b      	str	r3, [r1, #8]
 8017892:	f1b8 0f00 	cmp.w	r8, #0
 8017896:	dd9c      	ble.n	80177d2 <__sflush_r+0x1a>
 8017898:	6a21      	ldr	r1, [r4, #32]
 801789a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801789c:	4643      	mov	r3, r8
 801789e:	463a      	mov	r2, r7
 80178a0:	4628      	mov	r0, r5
 80178a2:	47b0      	blx	r6
 80178a4:	2800      	cmp	r0, #0
 80178a6:	dc06      	bgt.n	80178b6 <__sflush_r+0xfe>
 80178a8:	89a3      	ldrh	r3, [r4, #12]
 80178aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178ae:	81a3      	strh	r3, [r4, #12]
 80178b0:	f04f 30ff 	mov.w	r0, #4294967295
 80178b4:	e78e      	b.n	80177d4 <__sflush_r+0x1c>
 80178b6:	4407      	add	r7, r0
 80178b8:	eba8 0800 	sub.w	r8, r8, r0
 80178bc:	e7e9      	b.n	8017892 <__sflush_r+0xda>
 80178be:	bf00      	nop
 80178c0:	20400001 	.word	0x20400001

080178c4 <_fflush_r>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	690b      	ldr	r3, [r1, #16]
 80178c8:	4605      	mov	r5, r0
 80178ca:	460c      	mov	r4, r1
 80178cc:	b913      	cbnz	r3, 80178d4 <_fflush_r+0x10>
 80178ce:	2500      	movs	r5, #0
 80178d0:	4628      	mov	r0, r5
 80178d2:	bd38      	pop	{r3, r4, r5, pc}
 80178d4:	b118      	cbz	r0, 80178de <_fflush_r+0x1a>
 80178d6:	6983      	ldr	r3, [r0, #24]
 80178d8:	b90b      	cbnz	r3, 80178de <_fflush_r+0x1a>
 80178da:	f7ff fa99 	bl	8016e10 <__sinit>
 80178de:	4b14      	ldr	r3, [pc, #80]	; (8017930 <_fflush_r+0x6c>)
 80178e0:	429c      	cmp	r4, r3
 80178e2:	d11b      	bne.n	801791c <_fflush_r+0x58>
 80178e4:	686c      	ldr	r4, [r5, #4]
 80178e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d0ef      	beq.n	80178ce <_fflush_r+0xa>
 80178ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80178f0:	07d0      	lsls	r0, r2, #31
 80178f2:	d404      	bmi.n	80178fe <_fflush_r+0x3a>
 80178f4:	0599      	lsls	r1, r3, #22
 80178f6:	d402      	bmi.n	80178fe <_fflush_r+0x3a>
 80178f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178fa:	f7ff fb4c 	bl	8016f96 <__retarget_lock_acquire_recursive>
 80178fe:	4628      	mov	r0, r5
 8017900:	4621      	mov	r1, r4
 8017902:	f7ff ff59 	bl	80177b8 <__sflush_r>
 8017906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017908:	07da      	lsls	r2, r3, #31
 801790a:	4605      	mov	r5, r0
 801790c:	d4e0      	bmi.n	80178d0 <_fflush_r+0xc>
 801790e:	89a3      	ldrh	r3, [r4, #12]
 8017910:	059b      	lsls	r3, r3, #22
 8017912:	d4dd      	bmi.n	80178d0 <_fflush_r+0xc>
 8017914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017916:	f7ff fb3f 	bl	8016f98 <__retarget_lock_release_recursive>
 801791a:	e7d9      	b.n	80178d0 <_fflush_r+0xc>
 801791c:	4b05      	ldr	r3, [pc, #20]	; (8017934 <_fflush_r+0x70>)
 801791e:	429c      	cmp	r4, r3
 8017920:	d101      	bne.n	8017926 <_fflush_r+0x62>
 8017922:	68ac      	ldr	r4, [r5, #8]
 8017924:	e7df      	b.n	80178e6 <_fflush_r+0x22>
 8017926:	4b04      	ldr	r3, [pc, #16]	; (8017938 <_fflush_r+0x74>)
 8017928:	429c      	cmp	r4, r3
 801792a:	bf08      	it	eq
 801792c:	68ec      	ldreq	r4, [r5, #12]
 801792e:	e7da      	b.n	80178e6 <_fflush_r+0x22>
 8017930:	0801d29c 	.word	0x0801d29c
 8017934:	0801d2bc 	.word	0x0801d2bc
 8017938:	0801d27c 	.word	0x0801d27c

0801793c <fiprintf>:
 801793c:	b40e      	push	{r1, r2, r3}
 801793e:	b503      	push	{r0, r1, lr}
 8017940:	4601      	mov	r1, r0
 8017942:	ab03      	add	r3, sp, #12
 8017944:	4805      	ldr	r0, [pc, #20]	; (801795c <fiprintf+0x20>)
 8017946:	f853 2b04 	ldr.w	r2, [r3], #4
 801794a:	6800      	ldr	r0, [r0, #0]
 801794c:	9301      	str	r3, [sp, #4]
 801794e:	f000 fa11 	bl	8017d74 <_vfiprintf_r>
 8017952:	b002      	add	sp, #8
 8017954:	f85d eb04 	ldr.w	lr, [sp], #4
 8017958:	b003      	add	sp, #12
 801795a:	4770      	bx	lr
 801795c:	20000040 	.word	0x20000040

08017960 <_lseek_r>:
 8017960:	b538      	push	{r3, r4, r5, lr}
 8017962:	4d07      	ldr	r5, [pc, #28]	; (8017980 <_lseek_r+0x20>)
 8017964:	4604      	mov	r4, r0
 8017966:	4608      	mov	r0, r1
 8017968:	4611      	mov	r1, r2
 801796a:	2200      	movs	r2, #0
 801796c:	602a      	str	r2, [r5, #0]
 801796e:	461a      	mov	r2, r3
 8017970:	f7ea fa38 	bl	8001de4 <_lseek>
 8017974:	1c43      	adds	r3, r0, #1
 8017976:	d102      	bne.n	801797e <_lseek_r+0x1e>
 8017978:	682b      	ldr	r3, [r5, #0]
 801797a:	b103      	cbz	r3, 801797e <_lseek_r+0x1e>
 801797c:	6023      	str	r3, [r4, #0]
 801797e:	bd38      	pop	{r3, r4, r5, pc}
 8017980:	2001a820 	.word	0x2001a820

08017984 <__swhatbuf_r>:
 8017984:	b570      	push	{r4, r5, r6, lr}
 8017986:	460e      	mov	r6, r1
 8017988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801798c:	2900      	cmp	r1, #0
 801798e:	b096      	sub	sp, #88	; 0x58
 8017990:	4614      	mov	r4, r2
 8017992:	461d      	mov	r5, r3
 8017994:	da08      	bge.n	80179a8 <__swhatbuf_r+0x24>
 8017996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801799a:	2200      	movs	r2, #0
 801799c:	602a      	str	r2, [r5, #0]
 801799e:	061a      	lsls	r2, r3, #24
 80179a0:	d410      	bmi.n	80179c4 <__swhatbuf_r+0x40>
 80179a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179a6:	e00e      	b.n	80179c6 <__swhatbuf_r+0x42>
 80179a8:	466a      	mov	r2, sp
 80179aa:	f000 fcc1 	bl	8018330 <_fstat_r>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	dbf1      	blt.n	8017996 <__swhatbuf_r+0x12>
 80179b2:	9a01      	ldr	r2, [sp, #4]
 80179b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80179b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80179bc:	425a      	negs	r2, r3
 80179be:	415a      	adcs	r2, r3
 80179c0:	602a      	str	r2, [r5, #0]
 80179c2:	e7ee      	b.n	80179a2 <__swhatbuf_r+0x1e>
 80179c4:	2340      	movs	r3, #64	; 0x40
 80179c6:	2000      	movs	r0, #0
 80179c8:	6023      	str	r3, [r4, #0]
 80179ca:	b016      	add	sp, #88	; 0x58
 80179cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080179d0 <__smakebuf_r>:
 80179d0:	898b      	ldrh	r3, [r1, #12]
 80179d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80179d4:	079d      	lsls	r5, r3, #30
 80179d6:	4606      	mov	r6, r0
 80179d8:	460c      	mov	r4, r1
 80179da:	d507      	bpl.n	80179ec <__smakebuf_r+0x1c>
 80179dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80179e0:	6023      	str	r3, [r4, #0]
 80179e2:	6123      	str	r3, [r4, #16]
 80179e4:	2301      	movs	r3, #1
 80179e6:	6163      	str	r3, [r4, #20]
 80179e8:	b002      	add	sp, #8
 80179ea:	bd70      	pop	{r4, r5, r6, pc}
 80179ec:	ab01      	add	r3, sp, #4
 80179ee:	466a      	mov	r2, sp
 80179f0:	f7ff ffc8 	bl	8017984 <__swhatbuf_r>
 80179f4:	9900      	ldr	r1, [sp, #0]
 80179f6:	4605      	mov	r5, r0
 80179f8:	4630      	mov	r0, r6
 80179fa:	f7ff fb8b 	bl	8017114 <_malloc_r>
 80179fe:	b948      	cbnz	r0, 8017a14 <__smakebuf_r+0x44>
 8017a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a04:	059a      	lsls	r2, r3, #22
 8017a06:	d4ef      	bmi.n	80179e8 <__smakebuf_r+0x18>
 8017a08:	f023 0303 	bic.w	r3, r3, #3
 8017a0c:	f043 0302 	orr.w	r3, r3, #2
 8017a10:	81a3      	strh	r3, [r4, #12]
 8017a12:	e7e3      	b.n	80179dc <__smakebuf_r+0xc>
 8017a14:	4b0d      	ldr	r3, [pc, #52]	; (8017a4c <__smakebuf_r+0x7c>)
 8017a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8017a18:	89a3      	ldrh	r3, [r4, #12]
 8017a1a:	6020      	str	r0, [r4, #0]
 8017a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a20:	81a3      	strh	r3, [r4, #12]
 8017a22:	9b00      	ldr	r3, [sp, #0]
 8017a24:	6163      	str	r3, [r4, #20]
 8017a26:	9b01      	ldr	r3, [sp, #4]
 8017a28:	6120      	str	r0, [r4, #16]
 8017a2a:	b15b      	cbz	r3, 8017a44 <__smakebuf_r+0x74>
 8017a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a30:	4630      	mov	r0, r6
 8017a32:	f000 fc8f 	bl	8018354 <_isatty_r>
 8017a36:	b128      	cbz	r0, 8017a44 <__smakebuf_r+0x74>
 8017a38:	89a3      	ldrh	r3, [r4, #12]
 8017a3a:	f023 0303 	bic.w	r3, r3, #3
 8017a3e:	f043 0301 	orr.w	r3, r3, #1
 8017a42:	81a3      	strh	r3, [r4, #12]
 8017a44:	89a0      	ldrh	r0, [r4, #12]
 8017a46:	4305      	orrs	r5, r0
 8017a48:	81a5      	strh	r5, [r4, #12]
 8017a4a:	e7cd      	b.n	80179e8 <__smakebuf_r+0x18>
 8017a4c:	08016da9 	.word	0x08016da9

08017a50 <__malloc_lock>:
 8017a50:	4801      	ldr	r0, [pc, #4]	; (8017a58 <__malloc_lock+0x8>)
 8017a52:	f7ff baa0 	b.w	8016f96 <__retarget_lock_acquire_recursive>
 8017a56:	bf00      	nop
 8017a58:	2001a814 	.word	0x2001a814

08017a5c <__malloc_unlock>:
 8017a5c:	4801      	ldr	r0, [pc, #4]	; (8017a64 <__malloc_unlock+0x8>)
 8017a5e:	f7ff ba9b 	b.w	8016f98 <__retarget_lock_release_recursive>
 8017a62:	bf00      	nop
 8017a64:	2001a814 	.word	0x2001a814

08017a68 <__ssputs_r>:
 8017a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a6c:	688e      	ldr	r6, [r1, #8]
 8017a6e:	429e      	cmp	r6, r3
 8017a70:	4682      	mov	sl, r0
 8017a72:	460c      	mov	r4, r1
 8017a74:	4690      	mov	r8, r2
 8017a76:	461f      	mov	r7, r3
 8017a78:	d838      	bhi.n	8017aec <__ssputs_r+0x84>
 8017a7a:	898a      	ldrh	r2, [r1, #12]
 8017a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a80:	d032      	beq.n	8017ae8 <__ssputs_r+0x80>
 8017a82:	6825      	ldr	r5, [r4, #0]
 8017a84:	6909      	ldr	r1, [r1, #16]
 8017a86:	eba5 0901 	sub.w	r9, r5, r1
 8017a8a:	6965      	ldr	r5, [r4, #20]
 8017a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a94:	3301      	adds	r3, #1
 8017a96:	444b      	add	r3, r9
 8017a98:	106d      	asrs	r5, r5, #1
 8017a9a:	429d      	cmp	r5, r3
 8017a9c:	bf38      	it	cc
 8017a9e:	461d      	movcc	r5, r3
 8017aa0:	0553      	lsls	r3, r2, #21
 8017aa2:	d531      	bpl.n	8017b08 <__ssputs_r+0xa0>
 8017aa4:	4629      	mov	r1, r5
 8017aa6:	f7ff fb35 	bl	8017114 <_malloc_r>
 8017aaa:	4606      	mov	r6, r0
 8017aac:	b950      	cbnz	r0, 8017ac4 <__ssputs_r+0x5c>
 8017aae:	230c      	movs	r3, #12
 8017ab0:	f8ca 3000 	str.w	r3, [sl]
 8017ab4:	89a3      	ldrh	r3, [r4, #12]
 8017ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aba:	81a3      	strh	r3, [r4, #12]
 8017abc:	f04f 30ff 	mov.w	r0, #4294967295
 8017ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac4:	6921      	ldr	r1, [r4, #16]
 8017ac6:	464a      	mov	r2, r9
 8017ac8:	f7ff fa88 	bl	8016fdc <memcpy>
 8017acc:	89a3      	ldrh	r3, [r4, #12]
 8017ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ad6:	81a3      	strh	r3, [r4, #12]
 8017ad8:	6126      	str	r6, [r4, #16]
 8017ada:	6165      	str	r5, [r4, #20]
 8017adc:	444e      	add	r6, r9
 8017ade:	eba5 0509 	sub.w	r5, r5, r9
 8017ae2:	6026      	str	r6, [r4, #0]
 8017ae4:	60a5      	str	r5, [r4, #8]
 8017ae6:	463e      	mov	r6, r7
 8017ae8:	42be      	cmp	r6, r7
 8017aea:	d900      	bls.n	8017aee <__ssputs_r+0x86>
 8017aec:	463e      	mov	r6, r7
 8017aee:	6820      	ldr	r0, [r4, #0]
 8017af0:	4632      	mov	r2, r6
 8017af2:	4641      	mov	r1, r8
 8017af4:	f7ff fa80 	bl	8016ff8 <memmove>
 8017af8:	68a3      	ldr	r3, [r4, #8]
 8017afa:	1b9b      	subs	r3, r3, r6
 8017afc:	60a3      	str	r3, [r4, #8]
 8017afe:	6823      	ldr	r3, [r4, #0]
 8017b00:	4433      	add	r3, r6
 8017b02:	6023      	str	r3, [r4, #0]
 8017b04:	2000      	movs	r0, #0
 8017b06:	e7db      	b.n	8017ac0 <__ssputs_r+0x58>
 8017b08:	462a      	mov	r2, r5
 8017b0a:	f000 fc33 	bl	8018374 <_realloc_r>
 8017b0e:	4606      	mov	r6, r0
 8017b10:	2800      	cmp	r0, #0
 8017b12:	d1e1      	bne.n	8017ad8 <__ssputs_r+0x70>
 8017b14:	6921      	ldr	r1, [r4, #16]
 8017b16:	4650      	mov	r0, sl
 8017b18:	f7ff fa90 	bl	801703c <_free_r>
 8017b1c:	e7c7      	b.n	8017aae <__ssputs_r+0x46>
	...

08017b20 <_svfiprintf_r>:
 8017b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b24:	4698      	mov	r8, r3
 8017b26:	898b      	ldrh	r3, [r1, #12]
 8017b28:	061b      	lsls	r3, r3, #24
 8017b2a:	b09d      	sub	sp, #116	; 0x74
 8017b2c:	4607      	mov	r7, r0
 8017b2e:	460d      	mov	r5, r1
 8017b30:	4614      	mov	r4, r2
 8017b32:	d50e      	bpl.n	8017b52 <_svfiprintf_r+0x32>
 8017b34:	690b      	ldr	r3, [r1, #16]
 8017b36:	b963      	cbnz	r3, 8017b52 <_svfiprintf_r+0x32>
 8017b38:	2140      	movs	r1, #64	; 0x40
 8017b3a:	f7ff faeb 	bl	8017114 <_malloc_r>
 8017b3e:	6028      	str	r0, [r5, #0]
 8017b40:	6128      	str	r0, [r5, #16]
 8017b42:	b920      	cbnz	r0, 8017b4e <_svfiprintf_r+0x2e>
 8017b44:	230c      	movs	r3, #12
 8017b46:	603b      	str	r3, [r7, #0]
 8017b48:	f04f 30ff 	mov.w	r0, #4294967295
 8017b4c:	e0d1      	b.n	8017cf2 <_svfiprintf_r+0x1d2>
 8017b4e:	2340      	movs	r3, #64	; 0x40
 8017b50:	616b      	str	r3, [r5, #20]
 8017b52:	2300      	movs	r3, #0
 8017b54:	9309      	str	r3, [sp, #36]	; 0x24
 8017b56:	2320      	movs	r3, #32
 8017b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b60:	2330      	movs	r3, #48	; 0x30
 8017b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017d0c <_svfiprintf_r+0x1ec>
 8017b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b6a:	f04f 0901 	mov.w	r9, #1
 8017b6e:	4623      	mov	r3, r4
 8017b70:	469a      	mov	sl, r3
 8017b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b76:	b10a      	cbz	r2, 8017b7c <_svfiprintf_r+0x5c>
 8017b78:	2a25      	cmp	r2, #37	; 0x25
 8017b7a:	d1f9      	bne.n	8017b70 <_svfiprintf_r+0x50>
 8017b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8017b80:	d00b      	beq.n	8017b9a <_svfiprintf_r+0x7a>
 8017b82:	465b      	mov	r3, fp
 8017b84:	4622      	mov	r2, r4
 8017b86:	4629      	mov	r1, r5
 8017b88:	4638      	mov	r0, r7
 8017b8a:	f7ff ff6d 	bl	8017a68 <__ssputs_r>
 8017b8e:	3001      	adds	r0, #1
 8017b90:	f000 80aa 	beq.w	8017ce8 <_svfiprintf_r+0x1c8>
 8017b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b96:	445a      	add	r2, fp
 8017b98:	9209      	str	r2, [sp, #36]	; 0x24
 8017b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	f000 80a2 	beq.w	8017ce8 <_svfiprintf_r+0x1c8>
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8017baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017bae:	f10a 0a01 	add.w	sl, sl, #1
 8017bb2:	9304      	str	r3, [sp, #16]
 8017bb4:	9307      	str	r3, [sp, #28]
 8017bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017bba:	931a      	str	r3, [sp, #104]	; 0x68
 8017bbc:	4654      	mov	r4, sl
 8017bbe:	2205      	movs	r2, #5
 8017bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bc4:	4851      	ldr	r0, [pc, #324]	; (8017d0c <_svfiprintf_r+0x1ec>)
 8017bc6:	f7e8 fb2b 	bl	8000220 <memchr>
 8017bca:	9a04      	ldr	r2, [sp, #16]
 8017bcc:	b9d8      	cbnz	r0, 8017c06 <_svfiprintf_r+0xe6>
 8017bce:	06d0      	lsls	r0, r2, #27
 8017bd0:	bf44      	itt	mi
 8017bd2:	2320      	movmi	r3, #32
 8017bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bd8:	0711      	lsls	r1, r2, #28
 8017bda:	bf44      	itt	mi
 8017bdc:	232b      	movmi	r3, #43	; 0x2b
 8017bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017be2:	f89a 3000 	ldrb.w	r3, [sl]
 8017be6:	2b2a      	cmp	r3, #42	; 0x2a
 8017be8:	d015      	beq.n	8017c16 <_svfiprintf_r+0xf6>
 8017bea:	9a07      	ldr	r2, [sp, #28]
 8017bec:	4654      	mov	r4, sl
 8017bee:	2000      	movs	r0, #0
 8017bf0:	f04f 0c0a 	mov.w	ip, #10
 8017bf4:	4621      	mov	r1, r4
 8017bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bfa:	3b30      	subs	r3, #48	; 0x30
 8017bfc:	2b09      	cmp	r3, #9
 8017bfe:	d94e      	bls.n	8017c9e <_svfiprintf_r+0x17e>
 8017c00:	b1b0      	cbz	r0, 8017c30 <_svfiprintf_r+0x110>
 8017c02:	9207      	str	r2, [sp, #28]
 8017c04:	e014      	b.n	8017c30 <_svfiprintf_r+0x110>
 8017c06:	eba0 0308 	sub.w	r3, r0, r8
 8017c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8017c0e:	4313      	orrs	r3, r2
 8017c10:	9304      	str	r3, [sp, #16]
 8017c12:	46a2      	mov	sl, r4
 8017c14:	e7d2      	b.n	8017bbc <_svfiprintf_r+0x9c>
 8017c16:	9b03      	ldr	r3, [sp, #12]
 8017c18:	1d19      	adds	r1, r3, #4
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	9103      	str	r1, [sp, #12]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	bfbb      	ittet	lt
 8017c22:	425b      	neglt	r3, r3
 8017c24:	f042 0202 	orrlt.w	r2, r2, #2
 8017c28:	9307      	strge	r3, [sp, #28]
 8017c2a:	9307      	strlt	r3, [sp, #28]
 8017c2c:	bfb8      	it	lt
 8017c2e:	9204      	strlt	r2, [sp, #16]
 8017c30:	7823      	ldrb	r3, [r4, #0]
 8017c32:	2b2e      	cmp	r3, #46	; 0x2e
 8017c34:	d10c      	bne.n	8017c50 <_svfiprintf_r+0x130>
 8017c36:	7863      	ldrb	r3, [r4, #1]
 8017c38:	2b2a      	cmp	r3, #42	; 0x2a
 8017c3a:	d135      	bne.n	8017ca8 <_svfiprintf_r+0x188>
 8017c3c:	9b03      	ldr	r3, [sp, #12]
 8017c3e:	1d1a      	adds	r2, r3, #4
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	9203      	str	r2, [sp, #12]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	bfb8      	it	lt
 8017c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c4c:	3402      	adds	r4, #2
 8017c4e:	9305      	str	r3, [sp, #20]
 8017c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017d1c <_svfiprintf_r+0x1fc>
 8017c54:	7821      	ldrb	r1, [r4, #0]
 8017c56:	2203      	movs	r2, #3
 8017c58:	4650      	mov	r0, sl
 8017c5a:	f7e8 fae1 	bl	8000220 <memchr>
 8017c5e:	b140      	cbz	r0, 8017c72 <_svfiprintf_r+0x152>
 8017c60:	2340      	movs	r3, #64	; 0x40
 8017c62:	eba0 000a 	sub.w	r0, r0, sl
 8017c66:	fa03 f000 	lsl.w	r0, r3, r0
 8017c6a:	9b04      	ldr	r3, [sp, #16]
 8017c6c:	4303      	orrs	r3, r0
 8017c6e:	3401      	adds	r4, #1
 8017c70:	9304      	str	r3, [sp, #16]
 8017c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c76:	4826      	ldr	r0, [pc, #152]	; (8017d10 <_svfiprintf_r+0x1f0>)
 8017c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c7c:	2206      	movs	r2, #6
 8017c7e:	f7e8 facf 	bl	8000220 <memchr>
 8017c82:	2800      	cmp	r0, #0
 8017c84:	d038      	beq.n	8017cf8 <_svfiprintf_r+0x1d8>
 8017c86:	4b23      	ldr	r3, [pc, #140]	; (8017d14 <_svfiprintf_r+0x1f4>)
 8017c88:	bb1b      	cbnz	r3, 8017cd2 <_svfiprintf_r+0x1b2>
 8017c8a:	9b03      	ldr	r3, [sp, #12]
 8017c8c:	3307      	adds	r3, #7
 8017c8e:	f023 0307 	bic.w	r3, r3, #7
 8017c92:	3308      	adds	r3, #8
 8017c94:	9303      	str	r3, [sp, #12]
 8017c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c98:	4433      	add	r3, r6
 8017c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8017c9c:	e767      	b.n	8017b6e <_svfiprintf_r+0x4e>
 8017c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ca2:	460c      	mov	r4, r1
 8017ca4:	2001      	movs	r0, #1
 8017ca6:	e7a5      	b.n	8017bf4 <_svfiprintf_r+0xd4>
 8017ca8:	2300      	movs	r3, #0
 8017caa:	3401      	adds	r4, #1
 8017cac:	9305      	str	r3, [sp, #20]
 8017cae:	4619      	mov	r1, r3
 8017cb0:	f04f 0c0a 	mov.w	ip, #10
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017cba:	3a30      	subs	r2, #48	; 0x30
 8017cbc:	2a09      	cmp	r2, #9
 8017cbe:	d903      	bls.n	8017cc8 <_svfiprintf_r+0x1a8>
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d0c5      	beq.n	8017c50 <_svfiprintf_r+0x130>
 8017cc4:	9105      	str	r1, [sp, #20]
 8017cc6:	e7c3      	b.n	8017c50 <_svfiprintf_r+0x130>
 8017cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ccc:	4604      	mov	r4, r0
 8017cce:	2301      	movs	r3, #1
 8017cd0:	e7f0      	b.n	8017cb4 <_svfiprintf_r+0x194>
 8017cd2:	ab03      	add	r3, sp, #12
 8017cd4:	9300      	str	r3, [sp, #0]
 8017cd6:	462a      	mov	r2, r5
 8017cd8:	4b0f      	ldr	r3, [pc, #60]	; (8017d18 <_svfiprintf_r+0x1f8>)
 8017cda:	a904      	add	r1, sp, #16
 8017cdc:	4638      	mov	r0, r7
 8017cde:	f3af 8000 	nop.w
 8017ce2:	1c42      	adds	r2, r0, #1
 8017ce4:	4606      	mov	r6, r0
 8017ce6:	d1d6      	bne.n	8017c96 <_svfiprintf_r+0x176>
 8017ce8:	89ab      	ldrh	r3, [r5, #12]
 8017cea:	065b      	lsls	r3, r3, #25
 8017cec:	f53f af2c 	bmi.w	8017b48 <_svfiprintf_r+0x28>
 8017cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cf2:	b01d      	add	sp, #116	; 0x74
 8017cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf8:	ab03      	add	r3, sp, #12
 8017cfa:	9300      	str	r3, [sp, #0]
 8017cfc:	462a      	mov	r2, r5
 8017cfe:	4b06      	ldr	r3, [pc, #24]	; (8017d18 <_svfiprintf_r+0x1f8>)
 8017d00:	a904      	add	r1, sp, #16
 8017d02:	4638      	mov	r0, r7
 8017d04:	f000 f9d4 	bl	80180b0 <_printf_i>
 8017d08:	e7eb      	b.n	8017ce2 <_svfiprintf_r+0x1c2>
 8017d0a:	bf00      	nop
 8017d0c:	0801d38e 	.word	0x0801d38e
 8017d10:	0801d398 	.word	0x0801d398
 8017d14:	00000000 	.word	0x00000000
 8017d18:	08017a69 	.word	0x08017a69
 8017d1c:	0801d394 	.word	0x0801d394

08017d20 <__sfputc_r>:
 8017d20:	6893      	ldr	r3, [r2, #8]
 8017d22:	3b01      	subs	r3, #1
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	b410      	push	{r4}
 8017d28:	6093      	str	r3, [r2, #8]
 8017d2a:	da08      	bge.n	8017d3e <__sfputc_r+0x1e>
 8017d2c:	6994      	ldr	r4, [r2, #24]
 8017d2e:	42a3      	cmp	r3, r4
 8017d30:	db01      	blt.n	8017d36 <__sfputc_r+0x16>
 8017d32:	290a      	cmp	r1, #10
 8017d34:	d103      	bne.n	8017d3e <__sfputc_r+0x1e>
 8017d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d3a:	f7ff bc3d 	b.w	80175b8 <__swbuf_r>
 8017d3e:	6813      	ldr	r3, [r2, #0]
 8017d40:	1c58      	adds	r0, r3, #1
 8017d42:	6010      	str	r0, [r2, #0]
 8017d44:	7019      	strb	r1, [r3, #0]
 8017d46:	4608      	mov	r0, r1
 8017d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d4c:	4770      	bx	lr

08017d4e <__sfputs_r>:
 8017d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d50:	4606      	mov	r6, r0
 8017d52:	460f      	mov	r7, r1
 8017d54:	4614      	mov	r4, r2
 8017d56:	18d5      	adds	r5, r2, r3
 8017d58:	42ac      	cmp	r4, r5
 8017d5a:	d101      	bne.n	8017d60 <__sfputs_r+0x12>
 8017d5c:	2000      	movs	r0, #0
 8017d5e:	e007      	b.n	8017d70 <__sfputs_r+0x22>
 8017d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d64:	463a      	mov	r2, r7
 8017d66:	4630      	mov	r0, r6
 8017d68:	f7ff ffda 	bl	8017d20 <__sfputc_r>
 8017d6c:	1c43      	adds	r3, r0, #1
 8017d6e:	d1f3      	bne.n	8017d58 <__sfputs_r+0xa>
 8017d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d74 <_vfiprintf_r>:
 8017d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d78:	460d      	mov	r5, r1
 8017d7a:	b09d      	sub	sp, #116	; 0x74
 8017d7c:	4614      	mov	r4, r2
 8017d7e:	4698      	mov	r8, r3
 8017d80:	4606      	mov	r6, r0
 8017d82:	b118      	cbz	r0, 8017d8c <_vfiprintf_r+0x18>
 8017d84:	6983      	ldr	r3, [r0, #24]
 8017d86:	b90b      	cbnz	r3, 8017d8c <_vfiprintf_r+0x18>
 8017d88:	f7ff f842 	bl	8016e10 <__sinit>
 8017d8c:	4b89      	ldr	r3, [pc, #548]	; (8017fb4 <_vfiprintf_r+0x240>)
 8017d8e:	429d      	cmp	r5, r3
 8017d90:	d11b      	bne.n	8017dca <_vfiprintf_r+0x56>
 8017d92:	6875      	ldr	r5, [r6, #4]
 8017d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d96:	07d9      	lsls	r1, r3, #31
 8017d98:	d405      	bmi.n	8017da6 <_vfiprintf_r+0x32>
 8017d9a:	89ab      	ldrh	r3, [r5, #12]
 8017d9c:	059a      	lsls	r2, r3, #22
 8017d9e:	d402      	bmi.n	8017da6 <_vfiprintf_r+0x32>
 8017da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017da2:	f7ff f8f8 	bl	8016f96 <__retarget_lock_acquire_recursive>
 8017da6:	89ab      	ldrh	r3, [r5, #12]
 8017da8:	071b      	lsls	r3, r3, #28
 8017daa:	d501      	bpl.n	8017db0 <_vfiprintf_r+0x3c>
 8017dac:	692b      	ldr	r3, [r5, #16]
 8017dae:	b9eb      	cbnz	r3, 8017dec <_vfiprintf_r+0x78>
 8017db0:	4629      	mov	r1, r5
 8017db2:	4630      	mov	r0, r6
 8017db4:	f7ff fc64 	bl	8017680 <__swsetup_r>
 8017db8:	b1c0      	cbz	r0, 8017dec <_vfiprintf_r+0x78>
 8017dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017dbc:	07dc      	lsls	r4, r3, #31
 8017dbe:	d50e      	bpl.n	8017dde <_vfiprintf_r+0x6a>
 8017dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc4:	b01d      	add	sp, #116	; 0x74
 8017dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dca:	4b7b      	ldr	r3, [pc, #492]	; (8017fb8 <_vfiprintf_r+0x244>)
 8017dcc:	429d      	cmp	r5, r3
 8017dce:	d101      	bne.n	8017dd4 <_vfiprintf_r+0x60>
 8017dd0:	68b5      	ldr	r5, [r6, #8]
 8017dd2:	e7df      	b.n	8017d94 <_vfiprintf_r+0x20>
 8017dd4:	4b79      	ldr	r3, [pc, #484]	; (8017fbc <_vfiprintf_r+0x248>)
 8017dd6:	429d      	cmp	r5, r3
 8017dd8:	bf08      	it	eq
 8017dda:	68f5      	ldreq	r5, [r6, #12]
 8017ddc:	e7da      	b.n	8017d94 <_vfiprintf_r+0x20>
 8017dde:	89ab      	ldrh	r3, [r5, #12]
 8017de0:	0598      	lsls	r0, r3, #22
 8017de2:	d4ed      	bmi.n	8017dc0 <_vfiprintf_r+0x4c>
 8017de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017de6:	f7ff f8d7 	bl	8016f98 <__retarget_lock_release_recursive>
 8017dea:	e7e9      	b.n	8017dc0 <_vfiprintf_r+0x4c>
 8017dec:	2300      	movs	r3, #0
 8017dee:	9309      	str	r3, [sp, #36]	; 0x24
 8017df0:	2320      	movs	r3, #32
 8017df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dfa:	2330      	movs	r3, #48	; 0x30
 8017dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017fc0 <_vfiprintf_r+0x24c>
 8017e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e04:	f04f 0901 	mov.w	r9, #1
 8017e08:	4623      	mov	r3, r4
 8017e0a:	469a      	mov	sl, r3
 8017e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e10:	b10a      	cbz	r2, 8017e16 <_vfiprintf_r+0xa2>
 8017e12:	2a25      	cmp	r2, #37	; 0x25
 8017e14:	d1f9      	bne.n	8017e0a <_vfiprintf_r+0x96>
 8017e16:	ebba 0b04 	subs.w	fp, sl, r4
 8017e1a:	d00b      	beq.n	8017e34 <_vfiprintf_r+0xc0>
 8017e1c:	465b      	mov	r3, fp
 8017e1e:	4622      	mov	r2, r4
 8017e20:	4629      	mov	r1, r5
 8017e22:	4630      	mov	r0, r6
 8017e24:	f7ff ff93 	bl	8017d4e <__sfputs_r>
 8017e28:	3001      	adds	r0, #1
 8017e2a:	f000 80aa 	beq.w	8017f82 <_vfiprintf_r+0x20e>
 8017e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e30:	445a      	add	r2, fp
 8017e32:	9209      	str	r2, [sp, #36]	; 0x24
 8017e34:	f89a 3000 	ldrb.w	r3, [sl]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	f000 80a2 	beq.w	8017f82 <_vfiprintf_r+0x20e>
 8017e3e:	2300      	movs	r3, #0
 8017e40:	f04f 32ff 	mov.w	r2, #4294967295
 8017e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e48:	f10a 0a01 	add.w	sl, sl, #1
 8017e4c:	9304      	str	r3, [sp, #16]
 8017e4e:	9307      	str	r3, [sp, #28]
 8017e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e54:	931a      	str	r3, [sp, #104]	; 0x68
 8017e56:	4654      	mov	r4, sl
 8017e58:	2205      	movs	r2, #5
 8017e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e5e:	4858      	ldr	r0, [pc, #352]	; (8017fc0 <_vfiprintf_r+0x24c>)
 8017e60:	f7e8 f9de 	bl	8000220 <memchr>
 8017e64:	9a04      	ldr	r2, [sp, #16]
 8017e66:	b9d8      	cbnz	r0, 8017ea0 <_vfiprintf_r+0x12c>
 8017e68:	06d1      	lsls	r1, r2, #27
 8017e6a:	bf44      	itt	mi
 8017e6c:	2320      	movmi	r3, #32
 8017e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e72:	0713      	lsls	r3, r2, #28
 8017e74:	bf44      	itt	mi
 8017e76:	232b      	movmi	r3, #43	; 0x2b
 8017e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8017e80:	2b2a      	cmp	r3, #42	; 0x2a
 8017e82:	d015      	beq.n	8017eb0 <_vfiprintf_r+0x13c>
 8017e84:	9a07      	ldr	r2, [sp, #28]
 8017e86:	4654      	mov	r4, sl
 8017e88:	2000      	movs	r0, #0
 8017e8a:	f04f 0c0a 	mov.w	ip, #10
 8017e8e:	4621      	mov	r1, r4
 8017e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e94:	3b30      	subs	r3, #48	; 0x30
 8017e96:	2b09      	cmp	r3, #9
 8017e98:	d94e      	bls.n	8017f38 <_vfiprintf_r+0x1c4>
 8017e9a:	b1b0      	cbz	r0, 8017eca <_vfiprintf_r+0x156>
 8017e9c:	9207      	str	r2, [sp, #28]
 8017e9e:	e014      	b.n	8017eca <_vfiprintf_r+0x156>
 8017ea0:	eba0 0308 	sub.w	r3, r0, r8
 8017ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8017ea8:	4313      	orrs	r3, r2
 8017eaa:	9304      	str	r3, [sp, #16]
 8017eac:	46a2      	mov	sl, r4
 8017eae:	e7d2      	b.n	8017e56 <_vfiprintf_r+0xe2>
 8017eb0:	9b03      	ldr	r3, [sp, #12]
 8017eb2:	1d19      	adds	r1, r3, #4
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	9103      	str	r1, [sp, #12]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	bfbb      	ittet	lt
 8017ebc:	425b      	neglt	r3, r3
 8017ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8017ec2:	9307      	strge	r3, [sp, #28]
 8017ec4:	9307      	strlt	r3, [sp, #28]
 8017ec6:	bfb8      	it	lt
 8017ec8:	9204      	strlt	r2, [sp, #16]
 8017eca:	7823      	ldrb	r3, [r4, #0]
 8017ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8017ece:	d10c      	bne.n	8017eea <_vfiprintf_r+0x176>
 8017ed0:	7863      	ldrb	r3, [r4, #1]
 8017ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8017ed4:	d135      	bne.n	8017f42 <_vfiprintf_r+0x1ce>
 8017ed6:	9b03      	ldr	r3, [sp, #12]
 8017ed8:	1d1a      	adds	r2, r3, #4
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	9203      	str	r2, [sp, #12]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	bfb8      	it	lt
 8017ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ee6:	3402      	adds	r4, #2
 8017ee8:	9305      	str	r3, [sp, #20]
 8017eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017fd0 <_vfiprintf_r+0x25c>
 8017eee:	7821      	ldrb	r1, [r4, #0]
 8017ef0:	2203      	movs	r2, #3
 8017ef2:	4650      	mov	r0, sl
 8017ef4:	f7e8 f994 	bl	8000220 <memchr>
 8017ef8:	b140      	cbz	r0, 8017f0c <_vfiprintf_r+0x198>
 8017efa:	2340      	movs	r3, #64	; 0x40
 8017efc:	eba0 000a 	sub.w	r0, r0, sl
 8017f00:	fa03 f000 	lsl.w	r0, r3, r0
 8017f04:	9b04      	ldr	r3, [sp, #16]
 8017f06:	4303      	orrs	r3, r0
 8017f08:	3401      	adds	r4, #1
 8017f0a:	9304      	str	r3, [sp, #16]
 8017f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f10:	482c      	ldr	r0, [pc, #176]	; (8017fc4 <_vfiprintf_r+0x250>)
 8017f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f16:	2206      	movs	r2, #6
 8017f18:	f7e8 f982 	bl	8000220 <memchr>
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	d03f      	beq.n	8017fa0 <_vfiprintf_r+0x22c>
 8017f20:	4b29      	ldr	r3, [pc, #164]	; (8017fc8 <_vfiprintf_r+0x254>)
 8017f22:	bb1b      	cbnz	r3, 8017f6c <_vfiprintf_r+0x1f8>
 8017f24:	9b03      	ldr	r3, [sp, #12]
 8017f26:	3307      	adds	r3, #7
 8017f28:	f023 0307 	bic.w	r3, r3, #7
 8017f2c:	3308      	adds	r3, #8
 8017f2e:	9303      	str	r3, [sp, #12]
 8017f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f32:	443b      	add	r3, r7
 8017f34:	9309      	str	r3, [sp, #36]	; 0x24
 8017f36:	e767      	b.n	8017e08 <_vfiprintf_r+0x94>
 8017f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f3c:	460c      	mov	r4, r1
 8017f3e:	2001      	movs	r0, #1
 8017f40:	e7a5      	b.n	8017e8e <_vfiprintf_r+0x11a>
 8017f42:	2300      	movs	r3, #0
 8017f44:	3401      	adds	r4, #1
 8017f46:	9305      	str	r3, [sp, #20]
 8017f48:	4619      	mov	r1, r3
 8017f4a:	f04f 0c0a 	mov.w	ip, #10
 8017f4e:	4620      	mov	r0, r4
 8017f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f54:	3a30      	subs	r2, #48	; 0x30
 8017f56:	2a09      	cmp	r2, #9
 8017f58:	d903      	bls.n	8017f62 <_vfiprintf_r+0x1ee>
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d0c5      	beq.n	8017eea <_vfiprintf_r+0x176>
 8017f5e:	9105      	str	r1, [sp, #20]
 8017f60:	e7c3      	b.n	8017eea <_vfiprintf_r+0x176>
 8017f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f66:	4604      	mov	r4, r0
 8017f68:	2301      	movs	r3, #1
 8017f6a:	e7f0      	b.n	8017f4e <_vfiprintf_r+0x1da>
 8017f6c:	ab03      	add	r3, sp, #12
 8017f6e:	9300      	str	r3, [sp, #0]
 8017f70:	462a      	mov	r2, r5
 8017f72:	4b16      	ldr	r3, [pc, #88]	; (8017fcc <_vfiprintf_r+0x258>)
 8017f74:	a904      	add	r1, sp, #16
 8017f76:	4630      	mov	r0, r6
 8017f78:	f3af 8000 	nop.w
 8017f7c:	4607      	mov	r7, r0
 8017f7e:	1c78      	adds	r0, r7, #1
 8017f80:	d1d6      	bne.n	8017f30 <_vfiprintf_r+0x1bc>
 8017f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f84:	07d9      	lsls	r1, r3, #31
 8017f86:	d405      	bmi.n	8017f94 <_vfiprintf_r+0x220>
 8017f88:	89ab      	ldrh	r3, [r5, #12]
 8017f8a:	059a      	lsls	r2, r3, #22
 8017f8c:	d402      	bmi.n	8017f94 <_vfiprintf_r+0x220>
 8017f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f90:	f7ff f802 	bl	8016f98 <__retarget_lock_release_recursive>
 8017f94:	89ab      	ldrh	r3, [r5, #12]
 8017f96:	065b      	lsls	r3, r3, #25
 8017f98:	f53f af12 	bmi.w	8017dc0 <_vfiprintf_r+0x4c>
 8017f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f9e:	e711      	b.n	8017dc4 <_vfiprintf_r+0x50>
 8017fa0:	ab03      	add	r3, sp, #12
 8017fa2:	9300      	str	r3, [sp, #0]
 8017fa4:	462a      	mov	r2, r5
 8017fa6:	4b09      	ldr	r3, [pc, #36]	; (8017fcc <_vfiprintf_r+0x258>)
 8017fa8:	a904      	add	r1, sp, #16
 8017faa:	4630      	mov	r0, r6
 8017fac:	f000 f880 	bl	80180b0 <_printf_i>
 8017fb0:	e7e4      	b.n	8017f7c <_vfiprintf_r+0x208>
 8017fb2:	bf00      	nop
 8017fb4:	0801d29c 	.word	0x0801d29c
 8017fb8:	0801d2bc 	.word	0x0801d2bc
 8017fbc:	0801d27c 	.word	0x0801d27c
 8017fc0:	0801d38e 	.word	0x0801d38e
 8017fc4:	0801d398 	.word	0x0801d398
 8017fc8:	00000000 	.word	0x00000000
 8017fcc:	08017d4f 	.word	0x08017d4f
 8017fd0:	0801d394 	.word	0x0801d394

08017fd4 <_printf_common>:
 8017fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd8:	4616      	mov	r6, r2
 8017fda:	4699      	mov	r9, r3
 8017fdc:	688a      	ldr	r2, [r1, #8]
 8017fde:	690b      	ldr	r3, [r1, #16]
 8017fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	bfb8      	it	lt
 8017fe8:	4613      	movlt	r3, r2
 8017fea:	6033      	str	r3, [r6, #0]
 8017fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017ff0:	4607      	mov	r7, r0
 8017ff2:	460c      	mov	r4, r1
 8017ff4:	b10a      	cbz	r2, 8017ffa <_printf_common+0x26>
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	6033      	str	r3, [r6, #0]
 8017ffa:	6823      	ldr	r3, [r4, #0]
 8017ffc:	0699      	lsls	r1, r3, #26
 8017ffe:	bf42      	ittt	mi
 8018000:	6833      	ldrmi	r3, [r6, #0]
 8018002:	3302      	addmi	r3, #2
 8018004:	6033      	strmi	r3, [r6, #0]
 8018006:	6825      	ldr	r5, [r4, #0]
 8018008:	f015 0506 	ands.w	r5, r5, #6
 801800c:	d106      	bne.n	801801c <_printf_common+0x48>
 801800e:	f104 0a19 	add.w	sl, r4, #25
 8018012:	68e3      	ldr	r3, [r4, #12]
 8018014:	6832      	ldr	r2, [r6, #0]
 8018016:	1a9b      	subs	r3, r3, r2
 8018018:	42ab      	cmp	r3, r5
 801801a:	dc26      	bgt.n	801806a <_printf_common+0x96>
 801801c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018020:	1e13      	subs	r3, r2, #0
 8018022:	6822      	ldr	r2, [r4, #0]
 8018024:	bf18      	it	ne
 8018026:	2301      	movne	r3, #1
 8018028:	0692      	lsls	r2, r2, #26
 801802a:	d42b      	bmi.n	8018084 <_printf_common+0xb0>
 801802c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018030:	4649      	mov	r1, r9
 8018032:	4638      	mov	r0, r7
 8018034:	47c0      	blx	r8
 8018036:	3001      	adds	r0, #1
 8018038:	d01e      	beq.n	8018078 <_printf_common+0xa4>
 801803a:	6823      	ldr	r3, [r4, #0]
 801803c:	68e5      	ldr	r5, [r4, #12]
 801803e:	6832      	ldr	r2, [r6, #0]
 8018040:	f003 0306 	and.w	r3, r3, #6
 8018044:	2b04      	cmp	r3, #4
 8018046:	bf08      	it	eq
 8018048:	1aad      	subeq	r5, r5, r2
 801804a:	68a3      	ldr	r3, [r4, #8]
 801804c:	6922      	ldr	r2, [r4, #16]
 801804e:	bf0c      	ite	eq
 8018050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018054:	2500      	movne	r5, #0
 8018056:	4293      	cmp	r3, r2
 8018058:	bfc4      	itt	gt
 801805a:	1a9b      	subgt	r3, r3, r2
 801805c:	18ed      	addgt	r5, r5, r3
 801805e:	2600      	movs	r6, #0
 8018060:	341a      	adds	r4, #26
 8018062:	42b5      	cmp	r5, r6
 8018064:	d11a      	bne.n	801809c <_printf_common+0xc8>
 8018066:	2000      	movs	r0, #0
 8018068:	e008      	b.n	801807c <_printf_common+0xa8>
 801806a:	2301      	movs	r3, #1
 801806c:	4652      	mov	r2, sl
 801806e:	4649      	mov	r1, r9
 8018070:	4638      	mov	r0, r7
 8018072:	47c0      	blx	r8
 8018074:	3001      	adds	r0, #1
 8018076:	d103      	bne.n	8018080 <_printf_common+0xac>
 8018078:	f04f 30ff 	mov.w	r0, #4294967295
 801807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018080:	3501      	adds	r5, #1
 8018082:	e7c6      	b.n	8018012 <_printf_common+0x3e>
 8018084:	18e1      	adds	r1, r4, r3
 8018086:	1c5a      	adds	r2, r3, #1
 8018088:	2030      	movs	r0, #48	; 0x30
 801808a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801808e:	4422      	add	r2, r4
 8018090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018098:	3302      	adds	r3, #2
 801809a:	e7c7      	b.n	801802c <_printf_common+0x58>
 801809c:	2301      	movs	r3, #1
 801809e:	4622      	mov	r2, r4
 80180a0:	4649      	mov	r1, r9
 80180a2:	4638      	mov	r0, r7
 80180a4:	47c0      	blx	r8
 80180a6:	3001      	adds	r0, #1
 80180a8:	d0e6      	beq.n	8018078 <_printf_common+0xa4>
 80180aa:	3601      	adds	r6, #1
 80180ac:	e7d9      	b.n	8018062 <_printf_common+0x8e>
	...

080180b0 <_printf_i>:
 80180b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180b4:	7e0f      	ldrb	r7, [r1, #24]
 80180b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80180b8:	2f78      	cmp	r7, #120	; 0x78
 80180ba:	4691      	mov	r9, r2
 80180bc:	4680      	mov	r8, r0
 80180be:	460c      	mov	r4, r1
 80180c0:	469a      	mov	sl, r3
 80180c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80180c6:	d807      	bhi.n	80180d8 <_printf_i+0x28>
 80180c8:	2f62      	cmp	r7, #98	; 0x62
 80180ca:	d80a      	bhi.n	80180e2 <_printf_i+0x32>
 80180cc:	2f00      	cmp	r7, #0
 80180ce:	f000 80d8 	beq.w	8018282 <_printf_i+0x1d2>
 80180d2:	2f58      	cmp	r7, #88	; 0x58
 80180d4:	f000 80a3 	beq.w	801821e <_printf_i+0x16e>
 80180d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80180dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80180e0:	e03a      	b.n	8018158 <_printf_i+0xa8>
 80180e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80180e6:	2b15      	cmp	r3, #21
 80180e8:	d8f6      	bhi.n	80180d8 <_printf_i+0x28>
 80180ea:	a101      	add	r1, pc, #4	; (adr r1, 80180f0 <_printf_i+0x40>)
 80180ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180f0:	08018149 	.word	0x08018149
 80180f4:	0801815d 	.word	0x0801815d
 80180f8:	080180d9 	.word	0x080180d9
 80180fc:	080180d9 	.word	0x080180d9
 8018100:	080180d9 	.word	0x080180d9
 8018104:	080180d9 	.word	0x080180d9
 8018108:	0801815d 	.word	0x0801815d
 801810c:	080180d9 	.word	0x080180d9
 8018110:	080180d9 	.word	0x080180d9
 8018114:	080180d9 	.word	0x080180d9
 8018118:	080180d9 	.word	0x080180d9
 801811c:	08018269 	.word	0x08018269
 8018120:	0801818d 	.word	0x0801818d
 8018124:	0801824b 	.word	0x0801824b
 8018128:	080180d9 	.word	0x080180d9
 801812c:	080180d9 	.word	0x080180d9
 8018130:	0801828b 	.word	0x0801828b
 8018134:	080180d9 	.word	0x080180d9
 8018138:	0801818d 	.word	0x0801818d
 801813c:	080180d9 	.word	0x080180d9
 8018140:	080180d9 	.word	0x080180d9
 8018144:	08018253 	.word	0x08018253
 8018148:	682b      	ldr	r3, [r5, #0]
 801814a:	1d1a      	adds	r2, r3, #4
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	602a      	str	r2, [r5, #0]
 8018150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018158:	2301      	movs	r3, #1
 801815a:	e0a3      	b.n	80182a4 <_printf_i+0x1f4>
 801815c:	6820      	ldr	r0, [r4, #0]
 801815e:	6829      	ldr	r1, [r5, #0]
 8018160:	0606      	lsls	r6, r0, #24
 8018162:	f101 0304 	add.w	r3, r1, #4
 8018166:	d50a      	bpl.n	801817e <_printf_i+0xce>
 8018168:	680e      	ldr	r6, [r1, #0]
 801816a:	602b      	str	r3, [r5, #0]
 801816c:	2e00      	cmp	r6, #0
 801816e:	da03      	bge.n	8018178 <_printf_i+0xc8>
 8018170:	232d      	movs	r3, #45	; 0x2d
 8018172:	4276      	negs	r6, r6
 8018174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018178:	485e      	ldr	r0, [pc, #376]	; (80182f4 <_printf_i+0x244>)
 801817a:	230a      	movs	r3, #10
 801817c:	e019      	b.n	80181b2 <_printf_i+0x102>
 801817e:	680e      	ldr	r6, [r1, #0]
 8018180:	602b      	str	r3, [r5, #0]
 8018182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018186:	bf18      	it	ne
 8018188:	b236      	sxthne	r6, r6
 801818a:	e7ef      	b.n	801816c <_printf_i+0xbc>
 801818c:	682b      	ldr	r3, [r5, #0]
 801818e:	6820      	ldr	r0, [r4, #0]
 8018190:	1d19      	adds	r1, r3, #4
 8018192:	6029      	str	r1, [r5, #0]
 8018194:	0601      	lsls	r1, r0, #24
 8018196:	d501      	bpl.n	801819c <_printf_i+0xec>
 8018198:	681e      	ldr	r6, [r3, #0]
 801819a:	e002      	b.n	80181a2 <_printf_i+0xf2>
 801819c:	0646      	lsls	r6, r0, #25
 801819e:	d5fb      	bpl.n	8018198 <_printf_i+0xe8>
 80181a0:	881e      	ldrh	r6, [r3, #0]
 80181a2:	4854      	ldr	r0, [pc, #336]	; (80182f4 <_printf_i+0x244>)
 80181a4:	2f6f      	cmp	r7, #111	; 0x6f
 80181a6:	bf0c      	ite	eq
 80181a8:	2308      	moveq	r3, #8
 80181aa:	230a      	movne	r3, #10
 80181ac:	2100      	movs	r1, #0
 80181ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80181b2:	6865      	ldr	r5, [r4, #4]
 80181b4:	60a5      	str	r5, [r4, #8]
 80181b6:	2d00      	cmp	r5, #0
 80181b8:	bfa2      	ittt	ge
 80181ba:	6821      	ldrge	r1, [r4, #0]
 80181bc:	f021 0104 	bicge.w	r1, r1, #4
 80181c0:	6021      	strge	r1, [r4, #0]
 80181c2:	b90e      	cbnz	r6, 80181c8 <_printf_i+0x118>
 80181c4:	2d00      	cmp	r5, #0
 80181c6:	d04d      	beq.n	8018264 <_printf_i+0x1b4>
 80181c8:	4615      	mov	r5, r2
 80181ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80181ce:	fb03 6711 	mls	r7, r3, r1, r6
 80181d2:	5dc7      	ldrb	r7, [r0, r7]
 80181d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80181d8:	4637      	mov	r7, r6
 80181da:	42bb      	cmp	r3, r7
 80181dc:	460e      	mov	r6, r1
 80181de:	d9f4      	bls.n	80181ca <_printf_i+0x11a>
 80181e0:	2b08      	cmp	r3, #8
 80181e2:	d10b      	bne.n	80181fc <_printf_i+0x14c>
 80181e4:	6823      	ldr	r3, [r4, #0]
 80181e6:	07de      	lsls	r6, r3, #31
 80181e8:	d508      	bpl.n	80181fc <_printf_i+0x14c>
 80181ea:	6923      	ldr	r3, [r4, #16]
 80181ec:	6861      	ldr	r1, [r4, #4]
 80181ee:	4299      	cmp	r1, r3
 80181f0:	bfde      	ittt	le
 80181f2:	2330      	movle	r3, #48	; 0x30
 80181f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80181f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80181fc:	1b52      	subs	r2, r2, r5
 80181fe:	6122      	str	r2, [r4, #16]
 8018200:	f8cd a000 	str.w	sl, [sp]
 8018204:	464b      	mov	r3, r9
 8018206:	aa03      	add	r2, sp, #12
 8018208:	4621      	mov	r1, r4
 801820a:	4640      	mov	r0, r8
 801820c:	f7ff fee2 	bl	8017fd4 <_printf_common>
 8018210:	3001      	adds	r0, #1
 8018212:	d14c      	bne.n	80182ae <_printf_i+0x1fe>
 8018214:	f04f 30ff 	mov.w	r0, #4294967295
 8018218:	b004      	add	sp, #16
 801821a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801821e:	4835      	ldr	r0, [pc, #212]	; (80182f4 <_printf_i+0x244>)
 8018220:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018224:	6829      	ldr	r1, [r5, #0]
 8018226:	6823      	ldr	r3, [r4, #0]
 8018228:	f851 6b04 	ldr.w	r6, [r1], #4
 801822c:	6029      	str	r1, [r5, #0]
 801822e:	061d      	lsls	r5, r3, #24
 8018230:	d514      	bpl.n	801825c <_printf_i+0x1ac>
 8018232:	07df      	lsls	r7, r3, #31
 8018234:	bf44      	itt	mi
 8018236:	f043 0320 	orrmi.w	r3, r3, #32
 801823a:	6023      	strmi	r3, [r4, #0]
 801823c:	b91e      	cbnz	r6, 8018246 <_printf_i+0x196>
 801823e:	6823      	ldr	r3, [r4, #0]
 8018240:	f023 0320 	bic.w	r3, r3, #32
 8018244:	6023      	str	r3, [r4, #0]
 8018246:	2310      	movs	r3, #16
 8018248:	e7b0      	b.n	80181ac <_printf_i+0xfc>
 801824a:	6823      	ldr	r3, [r4, #0]
 801824c:	f043 0320 	orr.w	r3, r3, #32
 8018250:	6023      	str	r3, [r4, #0]
 8018252:	2378      	movs	r3, #120	; 0x78
 8018254:	4828      	ldr	r0, [pc, #160]	; (80182f8 <_printf_i+0x248>)
 8018256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801825a:	e7e3      	b.n	8018224 <_printf_i+0x174>
 801825c:	0659      	lsls	r1, r3, #25
 801825e:	bf48      	it	mi
 8018260:	b2b6      	uxthmi	r6, r6
 8018262:	e7e6      	b.n	8018232 <_printf_i+0x182>
 8018264:	4615      	mov	r5, r2
 8018266:	e7bb      	b.n	80181e0 <_printf_i+0x130>
 8018268:	682b      	ldr	r3, [r5, #0]
 801826a:	6826      	ldr	r6, [r4, #0]
 801826c:	6961      	ldr	r1, [r4, #20]
 801826e:	1d18      	adds	r0, r3, #4
 8018270:	6028      	str	r0, [r5, #0]
 8018272:	0635      	lsls	r5, r6, #24
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	d501      	bpl.n	801827c <_printf_i+0x1cc>
 8018278:	6019      	str	r1, [r3, #0]
 801827a:	e002      	b.n	8018282 <_printf_i+0x1d2>
 801827c:	0670      	lsls	r0, r6, #25
 801827e:	d5fb      	bpl.n	8018278 <_printf_i+0x1c8>
 8018280:	8019      	strh	r1, [r3, #0]
 8018282:	2300      	movs	r3, #0
 8018284:	6123      	str	r3, [r4, #16]
 8018286:	4615      	mov	r5, r2
 8018288:	e7ba      	b.n	8018200 <_printf_i+0x150>
 801828a:	682b      	ldr	r3, [r5, #0]
 801828c:	1d1a      	adds	r2, r3, #4
 801828e:	602a      	str	r2, [r5, #0]
 8018290:	681d      	ldr	r5, [r3, #0]
 8018292:	6862      	ldr	r2, [r4, #4]
 8018294:	2100      	movs	r1, #0
 8018296:	4628      	mov	r0, r5
 8018298:	f7e7 ffc2 	bl	8000220 <memchr>
 801829c:	b108      	cbz	r0, 80182a2 <_printf_i+0x1f2>
 801829e:	1b40      	subs	r0, r0, r5
 80182a0:	6060      	str	r0, [r4, #4]
 80182a2:	6863      	ldr	r3, [r4, #4]
 80182a4:	6123      	str	r3, [r4, #16]
 80182a6:	2300      	movs	r3, #0
 80182a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182ac:	e7a8      	b.n	8018200 <_printf_i+0x150>
 80182ae:	6923      	ldr	r3, [r4, #16]
 80182b0:	462a      	mov	r2, r5
 80182b2:	4649      	mov	r1, r9
 80182b4:	4640      	mov	r0, r8
 80182b6:	47d0      	blx	sl
 80182b8:	3001      	adds	r0, #1
 80182ba:	d0ab      	beq.n	8018214 <_printf_i+0x164>
 80182bc:	6823      	ldr	r3, [r4, #0]
 80182be:	079b      	lsls	r3, r3, #30
 80182c0:	d413      	bmi.n	80182ea <_printf_i+0x23a>
 80182c2:	68e0      	ldr	r0, [r4, #12]
 80182c4:	9b03      	ldr	r3, [sp, #12]
 80182c6:	4298      	cmp	r0, r3
 80182c8:	bfb8      	it	lt
 80182ca:	4618      	movlt	r0, r3
 80182cc:	e7a4      	b.n	8018218 <_printf_i+0x168>
 80182ce:	2301      	movs	r3, #1
 80182d0:	4632      	mov	r2, r6
 80182d2:	4649      	mov	r1, r9
 80182d4:	4640      	mov	r0, r8
 80182d6:	47d0      	blx	sl
 80182d8:	3001      	adds	r0, #1
 80182da:	d09b      	beq.n	8018214 <_printf_i+0x164>
 80182dc:	3501      	adds	r5, #1
 80182de:	68e3      	ldr	r3, [r4, #12]
 80182e0:	9903      	ldr	r1, [sp, #12]
 80182e2:	1a5b      	subs	r3, r3, r1
 80182e4:	42ab      	cmp	r3, r5
 80182e6:	dcf2      	bgt.n	80182ce <_printf_i+0x21e>
 80182e8:	e7eb      	b.n	80182c2 <_printf_i+0x212>
 80182ea:	2500      	movs	r5, #0
 80182ec:	f104 0619 	add.w	r6, r4, #25
 80182f0:	e7f5      	b.n	80182de <_printf_i+0x22e>
 80182f2:	bf00      	nop
 80182f4:	0801d39f 	.word	0x0801d39f
 80182f8:	0801d3b0 	.word	0x0801d3b0

080182fc <_read_r>:
 80182fc:	b538      	push	{r3, r4, r5, lr}
 80182fe:	4d07      	ldr	r5, [pc, #28]	; (801831c <_read_r+0x20>)
 8018300:	4604      	mov	r4, r0
 8018302:	4608      	mov	r0, r1
 8018304:	4611      	mov	r1, r2
 8018306:	2200      	movs	r2, #0
 8018308:	602a      	str	r2, [r5, #0]
 801830a:	461a      	mov	r2, r3
 801830c:	f7e9 fd26 	bl	8001d5c <_read>
 8018310:	1c43      	adds	r3, r0, #1
 8018312:	d102      	bne.n	801831a <_read_r+0x1e>
 8018314:	682b      	ldr	r3, [r5, #0]
 8018316:	b103      	cbz	r3, 801831a <_read_r+0x1e>
 8018318:	6023      	str	r3, [r4, #0]
 801831a:	bd38      	pop	{r3, r4, r5, pc}
 801831c:	2001a820 	.word	0x2001a820

08018320 <abort>:
 8018320:	b508      	push	{r3, lr}
 8018322:	2006      	movs	r0, #6
 8018324:	f000 f87e 	bl	8018424 <raise>
 8018328:	2001      	movs	r0, #1
 801832a:	f7e9 fd0d 	bl	8001d48 <_exit>
	...

08018330 <_fstat_r>:
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4d07      	ldr	r5, [pc, #28]	; (8018350 <_fstat_r+0x20>)
 8018334:	2300      	movs	r3, #0
 8018336:	4604      	mov	r4, r0
 8018338:	4608      	mov	r0, r1
 801833a:	4611      	mov	r1, r2
 801833c:	602b      	str	r3, [r5, #0]
 801833e:	f7e9 fd36 	bl	8001dae <_fstat>
 8018342:	1c43      	adds	r3, r0, #1
 8018344:	d102      	bne.n	801834c <_fstat_r+0x1c>
 8018346:	682b      	ldr	r3, [r5, #0]
 8018348:	b103      	cbz	r3, 801834c <_fstat_r+0x1c>
 801834a:	6023      	str	r3, [r4, #0]
 801834c:	bd38      	pop	{r3, r4, r5, pc}
 801834e:	bf00      	nop
 8018350:	2001a820 	.word	0x2001a820

08018354 <_isatty_r>:
 8018354:	b538      	push	{r3, r4, r5, lr}
 8018356:	4d06      	ldr	r5, [pc, #24]	; (8018370 <_isatty_r+0x1c>)
 8018358:	2300      	movs	r3, #0
 801835a:	4604      	mov	r4, r0
 801835c:	4608      	mov	r0, r1
 801835e:	602b      	str	r3, [r5, #0]
 8018360:	f7e9 fd35 	bl	8001dce <_isatty>
 8018364:	1c43      	adds	r3, r0, #1
 8018366:	d102      	bne.n	801836e <_isatty_r+0x1a>
 8018368:	682b      	ldr	r3, [r5, #0]
 801836a:	b103      	cbz	r3, 801836e <_isatty_r+0x1a>
 801836c:	6023      	str	r3, [r4, #0]
 801836e:	bd38      	pop	{r3, r4, r5, pc}
 8018370:	2001a820 	.word	0x2001a820

08018374 <_realloc_r>:
 8018374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018378:	4680      	mov	r8, r0
 801837a:	4614      	mov	r4, r2
 801837c:	460e      	mov	r6, r1
 801837e:	b921      	cbnz	r1, 801838a <_realloc_r+0x16>
 8018380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018384:	4611      	mov	r1, r2
 8018386:	f7fe bec5 	b.w	8017114 <_malloc_r>
 801838a:	b92a      	cbnz	r2, 8018398 <_realloc_r+0x24>
 801838c:	f7fe fe56 	bl	801703c <_free_r>
 8018390:	4625      	mov	r5, r4
 8018392:	4628      	mov	r0, r5
 8018394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018398:	f000 f860 	bl	801845c <_malloc_usable_size_r>
 801839c:	4284      	cmp	r4, r0
 801839e:	4607      	mov	r7, r0
 80183a0:	d802      	bhi.n	80183a8 <_realloc_r+0x34>
 80183a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80183a6:	d812      	bhi.n	80183ce <_realloc_r+0x5a>
 80183a8:	4621      	mov	r1, r4
 80183aa:	4640      	mov	r0, r8
 80183ac:	f7fe feb2 	bl	8017114 <_malloc_r>
 80183b0:	4605      	mov	r5, r0
 80183b2:	2800      	cmp	r0, #0
 80183b4:	d0ed      	beq.n	8018392 <_realloc_r+0x1e>
 80183b6:	42bc      	cmp	r4, r7
 80183b8:	4622      	mov	r2, r4
 80183ba:	4631      	mov	r1, r6
 80183bc:	bf28      	it	cs
 80183be:	463a      	movcs	r2, r7
 80183c0:	f7fe fe0c 	bl	8016fdc <memcpy>
 80183c4:	4631      	mov	r1, r6
 80183c6:	4640      	mov	r0, r8
 80183c8:	f7fe fe38 	bl	801703c <_free_r>
 80183cc:	e7e1      	b.n	8018392 <_realloc_r+0x1e>
 80183ce:	4635      	mov	r5, r6
 80183d0:	e7df      	b.n	8018392 <_realloc_r+0x1e>

080183d2 <_raise_r>:
 80183d2:	291f      	cmp	r1, #31
 80183d4:	b538      	push	{r3, r4, r5, lr}
 80183d6:	4604      	mov	r4, r0
 80183d8:	460d      	mov	r5, r1
 80183da:	d904      	bls.n	80183e6 <_raise_r+0x14>
 80183dc:	2316      	movs	r3, #22
 80183de:	6003      	str	r3, [r0, #0]
 80183e0:	f04f 30ff 	mov.w	r0, #4294967295
 80183e4:	bd38      	pop	{r3, r4, r5, pc}
 80183e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80183e8:	b112      	cbz	r2, 80183f0 <_raise_r+0x1e>
 80183ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183ee:	b94b      	cbnz	r3, 8018404 <_raise_r+0x32>
 80183f0:	4620      	mov	r0, r4
 80183f2:	f000 f831 	bl	8018458 <_getpid_r>
 80183f6:	462a      	mov	r2, r5
 80183f8:	4601      	mov	r1, r0
 80183fa:	4620      	mov	r0, r4
 80183fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018400:	f000 b818 	b.w	8018434 <_kill_r>
 8018404:	2b01      	cmp	r3, #1
 8018406:	d00a      	beq.n	801841e <_raise_r+0x4c>
 8018408:	1c59      	adds	r1, r3, #1
 801840a:	d103      	bne.n	8018414 <_raise_r+0x42>
 801840c:	2316      	movs	r3, #22
 801840e:	6003      	str	r3, [r0, #0]
 8018410:	2001      	movs	r0, #1
 8018412:	e7e7      	b.n	80183e4 <_raise_r+0x12>
 8018414:	2400      	movs	r4, #0
 8018416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801841a:	4628      	mov	r0, r5
 801841c:	4798      	blx	r3
 801841e:	2000      	movs	r0, #0
 8018420:	e7e0      	b.n	80183e4 <_raise_r+0x12>
	...

08018424 <raise>:
 8018424:	4b02      	ldr	r3, [pc, #8]	; (8018430 <raise+0xc>)
 8018426:	4601      	mov	r1, r0
 8018428:	6818      	ldr	r0, [r3, #0]
 801842a:	f7ff bfd2 	b.w	80183d2 <_raise_r>
 801842e:	bf00      	nop
 8018430:	20000040 	.word	0x20000040

08018434 <_kill_r>:
 8018434:	b538      	push	{r3, r4, r5, lr}
 8018436:	4d07      	ldr	r5, [pc, #28]	; (8018454 <_kill_r+0x20>)
 8018438:	2300      	movs	r3, #0
 801843a:	4604      	mov	r4, r0
 801843c:	4608      	mov	r0, r1
 801843e:	4611      	mov	r1, r2
 8018440:	602b      	str	r3, [r5, #0]
 8018442:	f7e9 fc6f 	bl	8001d24 <_kill>
 8018446:	1c43      	adds	r3, r0, #1
 8018448:	d102      	bne.n	8018450 <_kill_r+0x1c>
 801844a:	682b      	ldr	r3, [r5, #0]
 801844c:	b103      	cbz	r3, 8018450 <_kill_r+0x1c>
 801844e:	6023      	str	r3, [r4, #0]
 8018450:	bd38      	pop	{r3, r4, r5, pc}
 8018452:	bf00      	nop
 8018454:	2001a820 	.word	0x2001a820

08018458 <_getpid_r>:
 8018458:	f7e9 bc5c 	b.w	8001d14 <_getpid>

0801845c <_malloc_usable_size_r>:
 801845c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018460:	1f18      	subs	r0, r3, #4
 8018462:	2b00      	cmp	r3, #0
 8018464:	bfbc      	itt	lt
 8018466:	580b      	ldrlt	r3, [r1, r0]
 8018468:	18c0      	addlt	r0, r0, r3
 801846a:	4770      	bx	lr

0801846c <_init>:
 801846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801846e:	bf00      	nop
 8018470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018472:	bc08      	pop	{r3}
 8018474:	469e      	mov	lr, r3
 8018476:	4770      	bx	lr

08018478 <_fini>:
 8018478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801847a:	bf00      	nop
 801847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801847e:	bc08      	pop	{r3}
 8018480:	469e      	mov	lr, r3
 8018482:	4770      	bx	lr
